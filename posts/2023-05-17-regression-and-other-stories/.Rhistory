pid0 == 3 ~ 1, # Democrat
lean0 == 2 ~ 4, # Lean Republican
lean0 == 4 ~ 2, # Lean Democrat
is.na(pid0) ~ NA,
TRUE ~ 3 # Independent
),
# reassign ideology values
ideology = case_when(
ideology0 == 2 ~ 5, # Very conservative
ideology0 == 3 ~ 4, # Conservative
ideology0 == 6 ~ 1, # Very liberal
ideology0 == 5 ~ 2, # Liberal
is.na(ideology0) ~ NA,
TRUE ~ 3 # Moderate
)
)
# constants
n_inc <- max(pew_pre$inc, na.rm = TRUE)
n_pid <- max(pew_pre$pid, na.rm = TRUE)
n_ideology <- max(pew_pred$ideology, na.rm = TRUE)
pew_pre <- pew_pre %>%
mutate(
# create an integer column for income levels
inc = as.numeric(income),
# remove "dk/refuse" value for income
inc = gsub(10, NA, as.numeric(inc)),
# set political party integer column
pid0 = as.numeric(party),
# set lean integer column
lean0 = as.numeric(partyln),
# set ideology integer column
ideology0 = as.numeric(ideo),
# re-assign party values
pid = case_when(
pid0 == 2 ~ 5, # Repubican
pid0 == 3 ~ 1, # Democrat
lean0 == 2 ~ 4, # Lean Republican
lean0 == 4 ~ 2, # Lean Democrat
is.na(pid0) ~ NA,
TRUE ~ 3 # Independent
),
# reassign ideology values
ideology = case_when(
ideology0 == 2 ~ 5, # Very conservative
ideology0 == 3 ~ 4, # Conservative
ideology0 == 6 ~ 1, # Very liberal
ideology0 == 5 ~ 2, # Liberal
is.na(ideology0) ~ NA,
TRUE ~ 3 # Moderate
)
)
# constants
n_inc <- max(pew_pre$inc, na.rm = TRUE)
n_pid <- max(pew_pre$pid, na.rm = TRUE)
n_ideology <- max(pew_pre$ideology, na.rm = TRUE)
n_inc
n_pid
n_ideology
pew_pre <- pew_pre %>%
mutate(
# create an integer column for income levels
inc = as.numeric(income),
# remove "dk/refuse" value for income
inc = case_when(
inc == 10 ~ NA,
TRUE ~ inc
),
# set political party integer column
pid0 = as.numeric(party),
# set lean integer column
lean0 = as.numeric(partyln),
# set ideology integer column
ideology0 = as.numeric(ideo),
# re-assign party values
pid = case_when(
pid0 == 2 ~ 5, # Repubican
pid0 == 3 ~ 1, # Democrat
lean0 == 2 ~ 4, # Lean Republican
lean0 == 4 ~ 2, # Lean Democrat
is.na(pid0) ~ NA,
TRUE ~ 3 # Independent
),
# reassign ideology values
ideology = case_when(
ideology0 == 2 ~ 5, # Very conservative
ideology0 == 3 ~ 4, # Conservative
ideology0 == 6 ~ 1, # Very liberal
ideology0 == 5 ~ 2, # Liberal
is.na(ideology0) ~ NA,
TRUE ~ 3 # Moderate
)
)
# constants
n_inc <- max(pew_pre$inc, na.rm = TRUE)
n_pid <- max(pew_pre$pid, na.rm = TRUE)
n_ideology <- max(pew_pre$ideology, na.rm = TRUE)
n_inc
n_pid
n_ideology
# calculate income proportions using population weight
pew_pre$weight
# Compute percentages with dplyr
time <- as.numeric(rep(seq(1,7),each=7))  # x Axis
value <- runif(49, 10, 100)               # y Axis
group <- rep(LETTERS[1:7],times=7)        # group, one shape per group
data <- data.frame(time, value, group)
library(dplyr)
data <- data  %>%
group_by(time, group) %>%
summarise(n = sum(value)) %>%
mutate(percentage = n / sum(n))
# Plot
ggplot(data, aes(x=time, y=percentage, fill=group)) +
geom_area(alpha=0.6 , size=1, colour="black")
# Note: compute percentages without dplyr:
my_fun <- function(vec){
as.numeric(vec[2]) / sum(data$value[data$time==vec[1]]) *100
}
data$percentage <- apply(data , 1 , my_fun)
data
DT::datatable(data, options=list(scrollX=TRUE))
# Compute percentages with dplyr
time <- as.numeric(rep(seq(1,7),each=7))  # x Axis
value <- runif(49, 10, 100)               # y Axis
group <- rep(LETTERS[1:7],times=7)        # group, one shape per group
data <- data.frame(time, value, group)
library(dplyr)
data <- data  %>%
group_by(time, group) %>%
summarise(n = sum(value)) %>%
mutate(percentage = n / sum(n))
# Plot
ggplot(data, aes(x=time, y=percentage, fill=group)) +
geom_area(alpha=0.6 , size=1, colour="black")
DT::datatable(data, options=list(scrollX=TRUE))
weighted.mean((TRUE, TRUE, FALSE), c(0.5, 0.5, 1))
weighted.mean(c(TRUE, TRUE, FALSE), c(0.5, 0.5, 1))
weighted.mean(c(TRUE, TRUE, FALSE), c(0.5, 0.25, 1))
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
)
weighted.mean(c(1,1,1), c(0.5, 0.25, 1))
weighted.mean(c(1,1,0), c(0.5, 0.25, 1))
weighted.mean(c(1,1,0), c(0.5, 0.25, 1.5))
weighted.mean(c(1,1,1), c(0.5, 0.25, 1.5))
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
total = count()
) %>% mutate(
incprop = sum(weight) / total
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
total = n()
) %>% mutate(
incprop = sum(weight) / total
)
pew_pre$weight
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
total = n()
) %>% mutate(
incprop = sum('weight') / total
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
incprop = sum(weight) / n()
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
total = n()
incprop = sum(weight) / n()
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% summarise(
total = n(),
incprop = sum(weight) / n()
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% count(
inc
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% count(
inc,
name = "total_inc"
) %>% summarise(
incprop = sum(weight) / total_inc
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc,
ideology
) %>% count(
inc,
name = "total_inc"
)
# calculate income proportions using population weight
pew_pre %>% group_by(
inc
) %>% count(
inc,
name = "total_inc"
) %>% ungroup()
# calculate income proportions using population weight
pew_pre %>% group_by(
inc
) %>% mutate(
total_inc = n(inc)
)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
inc_totals
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% left_join(
inc_totals
)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% left_join(
inc_totals
) %>% select(inc, inc_totals)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% dplyr::select(inc, inc_totals)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% dplyr::select(inc, inc_total)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% dplyr::select(inc, total_inc)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% group_by(
inc,
ideology
) %>% summarise(
incprop = sum(weight) / total_inc
)
weighted.mean((ideology<2)[inc==2], pop.weight0[inc==2], na.rm=TRUE)
weighted.mean((ideology<2)[inc==1], pop.weight0[inc==1], na.rm=TRUE)
(ideology<2)[inc==1]
(ideology<2)
inc==1
pop.weight0
(ideology<2)[inc==1]
(ideology<2)[inc==1]
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% group_by(
inc,
ideology
) %>% summarise(
weighted_n = sum(weight)
) %>% mutate(
weighted_group_size = sum(weighted_n),
weighted_estimate = weighted_n / weighted_group_size
)
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
pew_pre %>% dplyr::left_join(
inc_totals
) %>% group_by(
inc,
ideology
) %>% summarise(
weighted_n = sum(weight)
) %>% mutate(
weighted_group_size = sum(weighted_n),
weighted_estimate = weighted_n / weighted_group_size
) %>% arrange(
inc
)
0.10736047 + 0.15447791
0.10736047 + 0.15447791 + 0.37834550
0.10736047 + 0.15447791 + 0.37834550 + 0.27459954
0.10736047 + 0.15447791 + 0.37834550 + 0.27459954 + 0.08521658
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate, fill=ideology)) +
geom_area(alpha = 0.3, size=1, color="grey")
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
weighted_estimates <- pew_pre %>% dplyr::left_join(
inc_totals
) %>% group_by(
inc,
ideology
) %>% summarise(
weighted_n = sum(weight)
) %>% mutate(
weighted_group_size = sum(weighted_n),
weighted_estimate = weighted_n / weighted_group_size
) %>% arrange(
inc
)
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate, fill=ideology)) +
geom_area(alpha = 0.3, size=1, color="grey")
# Compute percentages with dplyr
time <- as.numeric(rep(seq(1,7),each=7))  # x Axis
value <- runif(49, 10, 100)               # y Axis
group <- rep(LETTERS[1:7],times=7)        # group, one shape per group
data <- data.frame(time, value, group)
library(dplyr)
data <- data  %>%
group_by(time, group) %>%
summarise(n = sum(value)) %>%
mutate(percentage = n / sum(n))
# Plot
ggplot(data, aes(x=time, y=percentage, fill=group)) +
geom_area(alpha=0.6 , size=1, colour="black")
# Compute percentages with dplyr
time <- as.numeric(rep(seq(1,7),each=7))  # x Axis
value <- runif(49, 10, 100)               # y Axis
group <- rep(LETTERS[1:7],times=7)        # group, one shape per group
data <- data.frame(time, value, group)
library(dplyr)
data <- data  %>%
group_by(time, group) %>%
summarise(n = sum(value)) %>%
mutate(percentage = n / sum(n))
# Plot
ggplot(data, aes(x=time, y=percentage, fill=group)) +
geom_area(alpha=0.6 , size=1, colour="black")
weighted_estimates
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate, fill=ideology)) +
geom_area()
incprop
colnames(weighted_estimates)
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(aes(fill=ideology))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(aes(group=ideology))
# calculate income proportions using population weight
inc_totals <- pew_pre %>% group_by(
inc
) %>% summarize(
total_inc = n()
)
weighted_estimates <- pew_pre %>% dplyr::left_join(
inc_totals
) %>% group_by(
inc,
pid
) %>% summarise(
weighted_n = sum(weight)
) %>% mutate(
weighted_group_size = sum(weighted_n),
weighted_estimate = weighted_n / weighted_group_size
) %>% arrange(
inc
)
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 0.3, aes(group=pid))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 0.3, aes(group = pid, fill = pid))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 0.5, aes(group = pid, fill = pid))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 1, aes(group = pid, fill = pid))
colnames(pew_pre)
pew_pre %>% dplyr::select(inc, income)
weighted_estimates
DT::datatable(weighted_estimates)
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 1, aes(group = pid, fill = pid, order = dplyr::desc(pid)))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate, order = dplyr::desc(pid))) +
geom_area(alpha = 1, aes(group = pid, fill = pid))
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 1, aes(group = pid, fill = pid), position = position_stack(reverse = TRUE))
# party id
pid0 <- as.numeric(pew_pre[,"party"])
lean0 <- as.numeric(pew_pre[,"partyln"])
levels(pew_pre[,"party"])
levels(pew_pre[,"partyln"])
unique(pid0)
unique(lean0)
# plot average state income and Human Development Index
# using tidyverse and ggplot
merged_data <- hdi %>% dplyr::left_join(
votes %>% filter(st_year==2000),
by = c("state" = "st_state")
)
p <- ggplot(
merged_data,
aes(x = st_income, y = hdi, label =  st_stateabb)
) + theme(
plot.margin = margin(3, 3, 2.5, 1, "lines"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_rect(fill = 'white'),
aspect.ratio = 1
) +
labs(
x = "Average state income in 2020",
y = "Human Development Index"
)
p + geom_text()
# plot rank of average state income and Human Development Index
p <- ggplot(
merged_data %>% filter(state != 'Washington, D.C.'),
aes(x = rank(st_income), y = rank(hdi), label = st_stateabb),
) + theme(
plot.margin = margin(3, 3, 2.5, 1, "lines"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_rect(fill = 'white'),
aspect.ratio = 1
) +
labs(
x = "Rank of average state income in 2000",
y = "Rank of Human Development Index"
)
p + geom_text()
# plot rank of average state income and Human Development Index
par(mar=c(3, 3, 2.5, 1), mgp=c(1.5, 0.2, 0), tck=-0.01, pty='s')
plot(
rank(state.income[no.dc]),
rank(hdi.ordered[no.dc]),
xlab="Rank of average state income in 2000",
ylab="Rank of Human Development Index",
type="n")
text(rank(state.income[no.dc]), rank(hdi.ordered[no.dc]), state.abb)
ggplot(weighted_estimates, aes(x=inc, y=weighted_estimate)) +
geom_area(alpha = 1, aes(group = pid, fill = pid), position = position_stack(reverse = TRUE))
# plot rank of average state income and Human Development Index
p <- ggplot(
merged_data %>% filter(state != 'Washington, D.C.'),
aes(x = rank(st_income), y = rank(hdi), label = st_stateabb),
) + theme(
plot.margin = margin(3, 3, 2.5, 1, "lines"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
panel.background = element_rect(fill = 'white'),
aspect.ratio = 1
) +
labs(
x = "Rank of average state income in 2000",
y = "Rank of Human Development Index"
)
p + geom_text()
