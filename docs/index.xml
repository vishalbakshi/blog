<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Vishal Bakshi&#39;s Blog</title>
<link>https://vishalbakshi.github.io/blog/index.html</link>
<atom:link href="https://vishalbakshi.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Machine Learning blog by Vishal Bakshi</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 17 Feb 2025 08:00:00 GMT</lastBuildDate>
<item>
  <title>Memory Profiling raw ColBERT and RAGatouille</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>A disclaimer: this is the first time I’ve done memory profiling, and while I’ve probably spent 8-10 hours <a href="https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/">poring through the RAGatouille and ColBERT codebases</a> I still consider myself a beginner, and don’t have a solid mental model of how indexing (and search) work.</p>
<p>With that out of the way, let’s dig in!</p>
<p><a href="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/">In a previous blog post</a> I used <code>psutil.Process().memory_info().rss</code> in a separate thread to monitor memory usage while indexing 100k, 250k, 500k, 1M and 2M documents from the Genomics datasets (via UKPLab/DAPR) with RAGatouille. I have also run this for raw ColBERT. Here’s an example comparison (for 250k docs on an RTX6000Ada instance) with RAGatouille on the left and raw ColBERT on the right:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="CPU memory usage while indexing 250k documents"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">CPU memory usage while indexing 250k documents</figcaption><p></p>
</figure>
</div>
<p>While the peak memory increased with number of documents, they all follow the same trend. ColBERT always has a significantly lower peak memory. The ColBERT runs in total took about an hour and the RAGatouille runs took about 1.5 hours. Comparison of all collection sizes can be seen in <a href="https://github.com/vishalbakshi/RAGatouille/tree/profiling/profiling_results/memory_time_plots">this folder</a>.</p>
<p>In this blog post I go deeper and use the <code>memory_profiler</code> package to understand how much memory is being consumed by different functions down the chain of calls when you index 100k, 250k, 500k, 1M and 2M documents using raw ColBERT and RAGatouille. For all of these runs I use a RTX6000Ada instance on Jarvis Labs. When using RAGatouille, I execute all runs with <code>use_faiss=False</code> (since that’s the default value in RAGatouille) and runs of 100k, 250k and 500k with <code>use_faiss=True</code>.</p>
</section>
<section id="repo-setup-and-installation" class="level2">
<h2 class="anchored" data-anchor-id="repo-setup-and-installation">Repo Setup and Installation</h2>
<p>Since I needed to add the <code>@profile</code> decorator above each function I wanted to profile, I created my own forks of the raw ColBERT and RAGatouille repos and created a <code>profiling</code> branch. Since RAGatouille is built on top of ColBERT, I switched the <code>colbert-ai</code> dependency in my RAGatouille fork from <code>"colbert-ai&gt;=0.2.19"</code> to:</p>
<pre><code>"colbert-ai @ git+https://github.com/vishalbakshi/ColBERT.git@profiling"</code></pre>
<p>I also added <code>memory-profiler</code> as a dependency for both ColBERT and RAGatouille.</p>
<p>I used the terminal for all experiments. Here are the commands to install RAGatouille:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">python</span> <span class="at" style="color: #657422;">-m</span> venv ragatouille-env</span>
<span id="cb2-2"><span class="bu" style="color: null;">source</span> ragatouille-env/bin/activate</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">git</span> clone <span class="at" style="color: #657422;">-b</span> profiling https://github.com/vishalbakshi/RAGatouille.git</span>
<span id="cb2-4"><span class="bu" style="color: null;">cd</span> RAGatouille</span>
<span id="cb2-5"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-e</span> .</span>
<span id="cb2-6"><span class="ex" style="color: null;">pip</span> install datasets</span>
<span id="cb2-7"><span class="ex" style="color: null;">pip</span> uninstall <span class="at" style="color: #657422;">--y</span> faiss-cpu</span>
<span id="cb2-8"><span class="ex" style="color: null;">pip</span> install faiss-gpu-cu12</span></code></pre></div>
<p>Note that I uninstalled <code>faiss-cpu</code> and installed <code>faiss-gpu-cu12</code>.</p>
<p>Here are the commands to install ColBERT (which took considerably more effort, and assistance from Claude, to figure out):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> clone <span class="at" style="color: #657422;">-b</span> profiling https://github.com/vishalbakshi/ColBERT.git</span>
<span id="cb3-2"><span class="bu" style="color: null;">cd</span> ColBERT</span>
<span id="cb3-3"><span class="ex" style="color: null;">conda</span> env create <span class="at" style="color: #657422;">-f</span> conda_env.yml</span>
<span id="cb3-4"><span class="ex" style="color: null;">conda</span> init</span>
<span id="cb3-5"><span class="bu" style="color: null;">source</span> ~/.bashrc</span>
<span id="cb3-6"><span class="ex" style="color: null;">conda</span> activate colbert</span>
<span id="cb3-7"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-e</span> .</span>
<span id="cb3-8"><span class="ex" style="color: null;">conda</span> remove <span class="at" style="color: #657422;">-y</span> <span class="at" style="color: #657422;">--force</span> pytorch torchvision torchaudio cudatoolkit</span>
<span id="cb3-9"><span class="ex" style="color: null;">pip3</span> install torch torchvision torchaudio <span class="at" style="color: #657422;">--index-url</span> https://download.pytorch.org/whl/cu118</span>
<span id="cb3-10"><span class="ex" style="color: null;">apt-get</span> update</span>
<span id="cb3-11"><span class="ex" style="color: null;">apt-get</span> install <span class="at" style="color: #657422;">-y</span> gcc-11 g++-11</span>
<span id="cb3-12"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CC</span><span class="op" style="color: #5E5E5E;">=</span>gcc-11</span>
<span id="cb3-13"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CXX</span><span class="op" style="color: #5E5E5E;">=</span>g++-11</span></code></pre></div>
<p>I had to uninstall pytorch, torchvision, torchaudio, cudatoolkit and reinstall them to resolve the following error:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"/home/ColBERT/colbert/utils/utils.py"</span>, line 3, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2">    <span class="ex" style="color: null;">import</span> torch</span>
<span id="cb4-3">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"/root/miniconda3/envs/colbert/lib/python3.8/site-packages/torch/__init__.py"</span>, line 218, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-4">    <span class="ex" style="color: null;">from</span> torch._C import <span class="pp" style="color: #AD0000;">*</span>  <span class="co" style="color: #5E5E5E;"># noqa: F403</span></span>
<span id="cb4-5"><span class="ex" style="color: null;">ImportError:</span> /root/miniconda3/envs/colbert/lib/python3.8/site-packages/torch/lib/libtorch_cpu.so: undefined symbol: iJIT_NotifyEvent</span></code></pre></div>
<p>The last four commands I ran:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">apt-get</span> update</span>
<span id="cb5-2"><span class="ex" style="color: null;">apt-get</span> install <span class="at" style="color: #657422;">-y</span> gcc-11 g++-11</span>
<span id="cb5-3"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CC</span><span class="op" style="color: #5E5E5E;">=</span>gcc-11</span>
<span id="cb5-4"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CXX</span><span class="op" style="color: #5E5E5E;">=</span>g++-11</span></code></pre></div>
<p>Resolved <code>fatal error: crypt.h: No such file or directory</code>/<code>ninja: build stopped: subcommand failed</code> as is detailed in ColBERT issue <a href="https://github.com/stanford-futuredata/ColBERT/issues/371">#371</a>.</p>
</section>
<section id="functions-selected-for-profiling" class="level2">
<h2 class="anchored" data-anchor-id="functions-selected-for-profiling">Functions Selected for Profiling</h2>
<p>I determined which functions to profile by trial and error, adding/removing the <code>@profile</code> decorator to see which function was being called. Again, lots of Claude assistance was needed. Here are the filenames and method names that I chose to profile:</p>
<section id="colbert" class="level3">
<h3 class="anchored" data-anchor-id="colbert">ColBERT</h3>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Filename</th>
<th style="text-align: center;">Method</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">indexer.py</td>
<td style="text-align: center;"><code>index</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexer.py</td>
<td style="text-align: center;"><code>__launch</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>encode</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>run</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>setup</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>__sample_pids</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>__sample_embeddings</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>encoder.encode_passages</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>launch</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>launch_without_fork</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>run_process_without_mp</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>callee</code></td>
</tr>
</tbody>
</table>
</section>
<section id="ragatouille" class="level3">
<h3 class="anchored" data-anchor-id="ragatouille">RAGatouille</h3>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Filename</th>
<th style="text-align: center;">Method</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RAGPretrainedModel.py</td>
<td style="text-align: center;"><code>_process_corpus</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGPretrainedModel.py</td>
<td style="text-align: center;"><code>model.index</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/colbert.py</td>
<td style="text-align: center;"><code>ModelIndexFactory.construct</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.__init__</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.construct</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.build</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.indexer.index</code></td>
</tr>
</tbody>
</table>
<p>Note that in RAGatouille, <code>PLAIDModelIndex.indexer</code> is of class <code>Indexer</code> which is imported from ColBERT, so I understood this to be the “bridge” between the RAGatouille and ColBERT repos during profiling.</p>
</section>
</section>
<section id="scripts" class="level2">
<h2 class="anchored" data-anchor-id="scripts">Scripts</h2>
<p>Here’s the script for indexing using ColBERT:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> colbert</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">from</span> colbert <span class="im" style="color: #00769E;">import</span> Indexer, Searcher</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> colbert.infra <span class="im" style="color: #00769E;">import</span> Run, RunConfig, ColBERTConfig</span>
<span id="cb6-4"><span class="im" style="color: #00769E;">from</span> colbert.data <span class="im" style="color: #00769E;">import</span> Queries, Collection</span>
<span id="cb6-5"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb6-6"><span class="im" style="color: #00769E;">from</span> memory_profiler <span class="im" style="color: #00769E;">import</span> profile</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="at" style="color: #657422;">@profile</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;">def</span> _index(indexer, name, collection):</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;">return</span> indexer.index(name<span class="op" style="color: #5E5E5E;">=</span>name, collection<span class="op" style="color: #5E5E5E;">=</span>collection, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb6-13">    nbits <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>  </span>
<span id="cb6-14">    ndocs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100_000</span></span>
<span id="cb6-15">    dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Genomics"</span></span>
<span id="cb6-16">    index_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.</span><span class="sc" style="color: #5E5E5E;">{</span>nbits<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">bits'</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">    passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb6-19">    checkpoint <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'answerdotai/answerai-colbert-small-v1'</span></span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, experiment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'notebook'</span>)):</span>
<span id="cb6-22">        config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig(doc_maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, nbits<span class="op" style="color: #5E5E5E;">=</span>nbits, kmeans_niters<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, avoid_fork_if_possible<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-23">        indexer <span class="op" style="color: #5E5E5E;">=</span> Indexer(checkpoint<span class="op" style="color: #5E5E5E;">=</span>checkpoint, config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb6-24">        _index(indexer, index_name, passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>])</span>
<span id="cb6-25"></span>
<span id="cb6-26"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'__main__'</span>:</span>
<span id="cb6-27">    main()</span></code></pre></div>
<p>and the script for RAGatouille:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> memory_profiler <span class="im" style="color: #00769E;">import</span> profile</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb7-4"></span>
<span id="cb7-5">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Genomics"</span></span>
<span id="cb7-6">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb7-7">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb7-8">ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">250_000</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="at" style="color: #657422;">@profile</span></span>
<span id="cb7-11"><span class="kw" style="color: #003B4F;">def</span> _index():</span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;">return</span> RAG.index(</span>
<span id="cb7-13">        index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb7-14">        collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb7-15">        document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>],</span>
<span id="cb7-16">        use_faiss<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> <span class="co" style="color: #5E5E5E;"># or False</span></span>
<span id="cb7-17">    )</span>
<span id="cb7-18"></span>
<span id="cb7-19">_index()</span></code></pre></div>
<p>Finally, here’s the terminal command to run the scripts and profile them:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">python</span> <span class="at" style="color: #657422;">-m</span> memory_profiler ../colbert_index_2M.py <span class="op" style="color: #5E5E5E;">&gt;</span> ../colbert_2M_RTX6000Ada.txt</span></code></pre></div>
</section>
<section id="profiling-results" class="level2">
<h2 class="anchored" data-anchor-id="profiling-results">Profiling Results</h2>
<p>The profile logs were 400+ lines each (you can see the full files <a href="https://github.com/vishalbakshi/RAGatouille/tree/profiling/profiling_results">here</a>) so I have only included some of the lines with non-zero memory changes. I have showed the starting memory, memory increment and final memory.</p>
<p>Here’s how I’m interpreting the profiler logs–given this log:</p>
<pre><code>Filename: /home/RAGatouille/ragatouille/models/index.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   198   3406.4 MiB   3406.4 MiB           1           @profile
   199                                                 def _index_with_profiling(indexer, name, collection, overwrite):
   200   4872.2 MiB   1465.8 MiB           1               return indexer.index(name=name, collection=collection, overwrite=overwrite)</code></pre>
<p>I would interpret that to mean that before <code>indexer.index</code> was called, 3406.4 MB memory was used, and the <code>indexer.index</code> call increased it by 1465.8 MB to 4872.2 MB.</p>
<section id="colbertindexer.pyindexer.index" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexer.pyindexer.index">colbert/indexer.py/<code>indexer.index</code></h3>
<p>For RAGatouille, this call takes place in <a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L243">ragatouille/models/index.py</a>.</p>
<p>It’s interesting to note that even before <code>indexer.index</code> is called, the starting memory varies between raw ColBERT and RAGatouille. Most notably, for 2M documents, ColBERT starts at ~<mark>4GB</mark> while RAGatouille starts at ~<mark>8 GB</mark>.</p>
<p>Even more interesting, the memory increments for ColBERT are <mark>2x to 35x</mark> smaller than RAGatouille for each collection size.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Starting Memory</th>
<th style="text-align: center;">Memory Increment</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1596.9 MB</td>
<td style="text-align: center;">36.7 MB</td>
<td style="text-align: center;">1633.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1754.0 MB</td>
<td style="text-align: center;">92.8 MB</td>
<td style="text-align: center;">1846.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2072.1 MB</td>
<td style="text-align: center;">199.1 MB</td>
<td style="text-align: center;">2271.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2707.3 MB</td>
<td style="text-align: center;">421.9 MB</td>
<td style="text-align: center;">3129.2 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">4000.6 MB</td>
<td style="text-align: center;">876.4 MB</td>
<td style="text-align: center;">4877.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2114.2 MB</td>
<td style="text-align: center;">1320.1 MB</td>
<td style="text-align: center;">3434.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2592.5 MB</td>
<td style="text-align: center;">1175.0 MB</td>
<td style="text-align: center;">3767.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.0 MB</td>
<td style="text-align: center;">1430.0 MB</td>
<td style="text-align: center;">4835.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1750.9 MB</td>
<td style="text-align: center;">1203.9 MB</td>
<td style="text-align: center;">2954.8 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.4 MB</td>
<td style="text-align: center;">1341.4 MB</td>
<td style="text-align: center;">3938.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">1465.8 MB</td>
<td style="text-align: center;">4872.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.1 MB</td>
<td style="text-align: center;">1593.3 MB</td>
<td style="text-align: center;">6633.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8354.7 MB</td>
<td style="text-align: center;">1882.0 MB</td>
<td style="text-align: center;">10236.8 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyencoder.encode_passages" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyencoder.encode_passages">colbert/indexing/collection_indexer.py/<code>encoder.encode_passages</code></h3>
<p><code>encoder.encode_passages</code> involves the following code:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> encode_passages(<span class="va" style="color: #111111;">self</span>, passages):</span>
<span id="cb10-3">        Run().<span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"#&gt; Encoding </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(passages)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> passages.."</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(passages) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb10-6">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span>, <span class="va" style="color: #111111;">None</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;">with</span> torch.inference_mode():</span>
<span id="cb10-9">            embs, doclens <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb10-10"></span>
<span id="cb10-11">            <span class="cf" style="color: #003B4F;">for</span> passages_batch <span class="kw" style="color: #003B4F;">in</span> batch(passages, <span class="va" style="color: #111111;">self</span>.config.index_bsize <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">50</span>):</span>
<span id="cb10-12">                embs_, doclens_ <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.checkpoint.docFromText(</span>
<span id="cb10-13">                    passages_batch,</span>
<span id="cb10-14">                    bsize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.index_bsize,</span>
<span id="cb10-15">                    keep_dims<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flatten"</span>,</span>
<span id="cb10-16">                    showprogress<span class="op" style="color: #5E5E5E;">=</span>(<span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">self</span>.use_gpu),</span>
<span id="cb10-17">                    pool_factor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.pool_factor,</span>
<span id="cb10-18">                    clustering_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.clustering_mode,</span>
<span id="cb10-19">                    protected_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.protected_tokens,</span>
<span id="cb10-20">                )</span>
<span id="cb10-21">                embs.append(embs_)</span>
<span id="cb10-22">                doclens.extend(doclens_)</span>
<span id="cb10-23"></span>
<span id="cb10-24">            embs <span class="op" style="color: #5E5E5E;">=</span> torch.cat(embs)</span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="cf" style="color: #003B4F;">return</span> embs, doclens</span></code></pre></div>
<p>IIUC, this is calling <code>docFromText</code> on the ColBERT model (<code>answerai-colbert-small-v1</code> in our case). I would expect raw ColBERT and RAGatouille to experience equal memory change during this method call but RAGatouille uses <mark>10-15%</mark> more memory for each dataset size.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">732.9 MB</td>
<td style="text-align: center;">1502.4 MB</td>
<td style="text-align: center;">2235.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">829.7 MB</td>
<td style="text-align: center;">1991.1 MB</td>
<td style="text-align: center;">2820.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1000.2 MB</td>
<td style="text-align: center;">2549.8 MB</td>
<td style="text-align: center;">3550.0 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1351.6 MB</td>
<td style="text-align: center;">3462.0 MB</td>
<td style="text-align: center;">4813.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1997.3 MB</td>
<td style="text-align: center;">4692.3 MB</td>
<td style="text-align: center;">6689.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2115.0 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2593.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.1 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1751.0 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.9 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.7 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8355.1 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.py_sample_embeddings" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.py_sample_embeddings">colbert/indexing/collection_indexer.py/<code>_sample_embeddings</code></h3>
<p><code>encode_passages</code> is called from inside <code>_sample_embeddings</code>. For ColBERT, <code>_sample_embeddings</code> has different starting/final memory values than <code>_encode_passages</code> while for RAGatouille they are the same.</p>
<p>For example, for 100k documents using raw ColBERT, <code>_sample_embeddings</code> increases memory by 797 MB while for <code>encoder.encode_passages</code> the memory increases by 1488.8MB.</p>
<p>For 100k using RAGatouille, both memory increases the same (1677.3 MB for <code>use_faiss=True</code> and 1685.6 MB for <code>use_faiss=False</code>). I’m not sure what this means so I asked Claude and got the response:</p>
<blockquote class="blockquote">
<p>This discrepancy reveals memory reuse patterns between function calls. In ColBERT, the 1488.8 MB used by <code>encode_passages</code> is partially freed before returning to <code>_sample_embeddings</code>, resulting in a net increase of 797 MB. In RAGatouille, the memory appears to be retained between calls, showing the same 1677.3 MB increase at both levels.</p>
</blockquote>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">732.9 MB</td>
<td style="text-align: center;">813.8 MB</td>
<td style="text-align: center;">1546.7 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">829.7 MB</td>
<td style="text-align: center;">809.0 MB</td>
<td style="text-align: center;">1638.7 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1000.2 MB</td>
<td style="text-align: center;">770.1 MB</td>
<td style="text-align: center;">1770.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1351.6 MB</td>
<td style="text-align: center;">813.3 MB</td>
<td style="text-align: center;">2164.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1997.3 MB</td>
<td style="text-align: center;">782.4 MB</td>
<td style="text-align: center;">2779.7 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2115.0 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2593.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.1 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1751.0 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.9 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.7 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8355.1 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pysetup" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pysetup">colbert/indexing/collection_indexer.py/<code>setup</code></h3>
<p>A similar pattern for <code>setup</code>, within which <code>_sample_embeddings</code> is called. Raw ColBERT seems more efficient in releasing memory while RAGatouille retains it.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">727.9 MB</td>
<td style="text-align: center;">817.5 MB</td>
<td style="text-align: center;">1545.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">815.7 MB</td>
<td style="text-align: center;">816.4 MB</td>
<td style="text-align: center;">1632.1 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">978.2 MB</td>
<td style="text-align: center;">787.9 MB</td>
<td style="text-align: center;">1766.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1305.6 MB</td>
<td style="text-align: center;">840.2 MB</td>
<td style="text-align: center;">2145.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1966.3 MB</td>
<td style="text-align: center;">822.2 MB</td>
<td style="text-align: center;">2788.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3434.3 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3767.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4835.0 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2954.8 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3938.8 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4872.2 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">6633.3 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">10236.8 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pytrain" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pytrain">colbert/indexing/collection_indexer.py/<code>train</code></h3>
<p>IIUC, this function call finds centroids based on a sample of document token embeddings. Interesting to note that the memory change for raw ColBERT is smallest for 1M documents (87.2 MB) and for RAGatouille, 2M docs is the smallest (23.4 MB). For most collection sizes, RAGatouille uses <mark>40-50%</mark> more memory for this operation.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1545.5 MB</td>
<td style="text-align: center;">115.8 MB</td>
<td style="text-align: center;">1661.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1632.1 MB</td>
<td style="text-align: center;">128.8 MB</td>
<td style="text-align: center;">1760.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1766.1 MB</td>
<td style="text-align: center;">124.3 MB</td>
<td style="text-align: center;">1890.4 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2145.8 MB</td>
<td style="text-align: center;">87.2 MB</td>
<td style="text-align: center;">2233.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">2788.5 MB</td>
<td style="text-align: center;">133.5 MB</td>
<td style="text-align: center;">2921.9 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3792.3 MB</td>
<td style="text-align: center;">179.6 MB</td>
<td style="text-align: center;">3971.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">4873.2 MB</td>
<td style="text-align: center;">182.7 MB</td>
<td style="text-align: center;">5055.9 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6409.6 MB</td>
<td style="text-align: center;">174.1 MB</td>
<td style="text-align: center;">6583.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3436.6 MB</td>
<td style="text-align: center;">175.9 MB</td>
<td style="text-align: center;">3612.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">4868.3 MB</td>
<td style="text-align: center;">181.5 MB</td>
<td style="text-align: center;">5049.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6410.2 MB</td>
<td style="text-align: center;">179.2 MB</td>
<td style="text-align: center;">6589.4 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">8956.0 MB</td>
<td style="text-align: center;">191.5 MB</td>
<td style="text-align: center;">9147.5 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">13704.6 MB</td>
<td style="text-align: center;">23.4 MB</td>
<td style="text-align: center;">13728.1 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyindex" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyindex">colbert/indexing/collection_indexer.py/<code>index</code></h3>
<p>This is one of the more interesting results—raw ColBERT has a positive memory change during this operation (which IIUC is the indexing of all document token embeddings) while <em>all</em> RAGatouille <code>index()</code> operations actually <em>reduce the memory usage</em>. Not sure what that means. The final memory for raw ColBERT is less than RAGatouille.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1661.3 MB</td>
<td style="text-align: center;">287.0 MB</td>
<td style="text-align: center;">1948.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1760.9 MB</td>
<td style="text-align: center;">263.5 MB</td>
<td style="text-align: center;">2024.4 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1890.4 MB</td>
<td style="text-align: center;">371.9 MB</td>
<td style="text-align: center;">2262.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2233.0 MB</td>
<td style="text-align: center;">599.9 MB</td>
<td style="text-align: center;">2832.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">2921.9 MB</td>
<td style="text-align: center;">958.0 MB</td>
<td style="text-align: center;">3880.0 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3971.9 MB</td>
<td style="text-align: center;">-536.3 MB</td>
<td style="text-align: center;">3435.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">5055.9 MB</td>
<td style="text-align: center;">-1375.8 MB</td>
<td style="text-align: center;">3680.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6583.8 MB</td>
<td style="text-align: center;">-1936.3 MB</td>
<td style="text-align: center;">4647.5 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3612.6 MB</td>
<td style="text-align: center;">-652.4 MB</td>
<td style="text-align: center;">2960.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">5049.8 MB</td>
<td style="text-align: center;">-1112.5 MB</td>
<td style="text-align: center;">3937.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6589.4 MB</td>
<td style="text-align: center;">-1906.8 MB</td>
<td style="text-align: center;">4682.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">9147.5 MB</td>
<td style="text-align: center;">-2917.3 MB</td>
<td style="text-align: center;">6230.1 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">13728.1 MB</td>
<td style="text-align: center;">-4910.2 MB</td>
<td style="text-align: center;">8817.9 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyfinalize" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyfinalize">colbert/indexing/collection_indexer.py/<code>finalize</code></h3>
<p>This function maps passage IDs to centroid IDs—one of the efficiencies of the PLAID indexing approach. Within each approach (raw ColBERT and RAGatouille) the memory change varies drastically between less than 0 and up to ~500MB.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1948.3 MB</td>
<td style="text-align: center;">35.1 MB</td>
<td style="text-align: center;">1983.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2024.4 MB</td>
<td style="text-align: center;">-0.4 MB</td>
<td style="text-align: center;">2024.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2262.2 MB</td>
<td style="text-align: center;">59.2 MB</td>
<td style="text-align: center;">2321.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2832.9 MB</td>
<td style="text-align: center;">201.5 MB</td>
<td style="text-align: center;">3034.4 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">3880.0 MB</td>
<td style="text-align: center;">490.2 MB</td>
<td style="text-align: center;">4370.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3435.6 MB</td>
<td style="text-align: center;">-1.3 MB</td>
<td style="text-align: center;">3434.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3680.1 MB</td>
<td style="text-align: center;">87.4 MB</td>
<td style="text-align: center;">3767.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4647.5 MB</td>
<td style="text-align: center;">187.5 MB</td>
<td style="text-align: center;">4835.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2960.2 MB</td>
<td style="text-align: center;">-5.3 MB</td>
<td style="text-align: center;">2954.8 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3937.3 MB</td>
<td style="text-align: center;">1.5 MB</td>
<td style="text-align: center;">3938.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4682.6 MB</td>
<td style="text-align: center;">189.6 MB</td>
<td style="text-align: center;">4872.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">6230.1 MB</td>
<td style="text-align: center;">403.2 MB</td>
<td style="text-align: center;">6633.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8817.9 MB</td>
<td style="text-align: center;">1418.9 MB</td>
<td style="text-align: center;">10236.8 MB</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="indexing-time" class="level2">
<h2 class="anchored" data-anchor-id="indexing-time">Indexing Time</h2>
<p>I didn’t measure runtime for each run, but some observations:</p>
<ul>
<li>During passage encoding (25k passages per iteration) ColBERT took about <mark>20 seconds/it</mark> and RAGatouille took about <mark>110 seconds/it</mark>. Note that without profiling ColBERT took about 9/seconds/it and RAGatouille 12 seconds/it.</li>
<li>ColBERT encoding lasted 4, 10, 20, 40 and 80 iterations for 100k, 250k, 500k, 1M and 2M docs. RAGatouille always overshot it (e.g.&nbsp;14 iters for 250k docs or 22 iters for 500k docs).</li>
<li>Overall ColBERT profiling took ~2 hours while RAGatouille took ~16 hours.</li>
<li>It took a lot of time before the final encoding takes place, I think that’s because of the initial “planning” step that ColBERT and RAGatouille both do.</li>
</ul>
</section>
<section id="indexing-10k-documents-pytorch-vs-faiss-k-means-clustering" class="level2">
<h2 class="anchored" data-anchor-id="indexing-10k-documents-pytorch-vs-faiss-k-means-clustering">Indexing 10k Documents (PyTorch vs FAISS K-means Clustering)</h2>
<p>While I was experimenting indexing scripts with 10k documents I noticed curious behavior. For 10k documents, with <code>use_faiss=False</code>, RAGatouille attempts to use PyTorch for K-means clustering. The memory usage for <code>encoder.encode_passages</code> during this attempt:</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   1849.2 MiB   1849.2 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   2675.7 MiB    826.5 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
<p>It then runs into an OOM error:</p>
<pre><code>PyTorch-based indexing did not succeed with error: CUDA out of memory. Tried to allocate 27.55 GiB. GPU 0 has a total capacity of 47.51 GiB of which 4.88 GiB is free.</code></pre>
<p>And switches to FAISS K-means. The memory usage for <code>encoder.encode_passages</code> changes (note the drop from an increase of 826.5 MB to an increase of 373 MB, but an increase in initial memory usage from 1849.2 MB to 2652.6MB):</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   2652.6 MiB   2652.6 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   3025.6 MiB    373.0 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
<p>When I run the script with <code>use_faiss=True</code>, the <code>encoder.encode_passages</code> memory usage reflects the PyTorch attempt, whereas I would expect the memory increase to be 373 MB:</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   1853.4 MiB   1853.4 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   2678.8 MiB    825.4 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>This exercise has left me with more questions than answers that I need to explore:</p>
<ul>
<li>Is this the best way to go about profiling memory?</li>
<li>Am I interpreting the memory profiling results correctly?</li>
<li>Why does RAGatouille have a higher initial memory before indexing starts?</li>
<li>Why does RAGatouille retain more memory after indexing than ColBERT?</li>
<li>Why does RAGatouille memory usage drastically <em>decrease</em> during <code>index()</code>?</li>
<li>Why does RAGatouille max out CUDA memory for 10k documents? Related to <a href="https://github.com/AnswerDotAI/RAGatouille/issues/247">Issue #247</a>.</li>
<li>Why does RAGatouille’s memory usage when <code>use_faiss=True</code> match PyTorch K-means’ memory usage and not the FAISS K-means’ memory usage after PyTorch’s attempt fails with OOM?</li>
</ul>
<p>Additionally, and probably relatedly, I still haven’t figured out what is causing the large memory spike in the diagram below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="CPU memory usage while indexing 250k documents"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">CPU memory usage while indexing 250k documents</figcaption><p></p>
</figure>
</div>
<p>The largest memory value profiled while indexing 250k docs using RAGatouille was 5049.8 MB but the chart shows a spike up to ~8GB. Where’s the ghost 3GB?</p>
<p>TBD.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/index.html</guid>
  <pubDate>Mon, 17 Feb 2025 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Estimating Storage and CPU RAM Requirements for Indexing 12.6M Documents</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>After a few days of flailing about trying to index the 12.6M document <em>Genomics</em> dataset (from <a href="https://huggingface.co/datasets/UKPLab/dapr">UKPLab/DAPR</a>) in Google Colab Pro using RAGatouille, I decided to plan the attempt in a more organized way. In this blog post I’ll share my findings and next actions.</p>
<p>Here’s an example text from the corpus:</p>
<pre><code>The 33D1 rat MoAb92  identifies a low-density Ag on mouse (marginal zone) spleen DC. The antibody does not stain DC in cryostat sections and does not react with LC. No biochemical data on the Ag are available. Nonetheless, this antibody has proved extremely useful for C lysis of mouse spleen DC.\r\n</code></pre>
<p>The average length of text in this corpus is ~540 characters.</p>
</section>
<section id="rag.index" class="level2">
<h2 class="anchored" data-anchor-id="rag.index"><code>RAG.index</code></h2>
<p>The main function of interest if <code>RAG.index</code> which takes a list of documents and indexes them in preparation for retrieval.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb2-2">            index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb2-3">            collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb2-4">            document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>]</span>
<span id="cb2-5">        )</span></code></pre></div>
<p>I used the following code to log the RAM memory usage, with <code>ndocs</code> being defined globally:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> memory_monitor(stop_event, readings):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">while</span> <span class="kw" style="color: #003B4F;">not</span> stop_event.is_set():</span>
<span id="cb3-3">        mem <span class="op" style="color: #5E5E5E;">=</span> psutil.Process().memory_info().rss <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span></span>
<span id="cb3-4">        readings.append((datetime.now(), mem))</span>
<span id="cb3-5">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">def</span> log_memory_during_index():</span>
<span id="cb3-8">    stop_event <span class="op" style="color: #5E5E5E;">=</span> threading.Event()</span>
<span id="cb3-9">    readings <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-10">    monitor_thread <span class="op" style="color: #5E5E5E;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;">=</span>memory_monitor, args<span class="op" style="color: #5E5E5E;">=</span>(stop_event, readings))</span>
<span id="cb3-11">    monitor_thread.start()</span>
<span id="cb3-12">    </span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb3-14">        index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb3-15">            index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb3-16">            collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb3-17">            document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>]</span>
<span id="cb3-18">        )</span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb3-20">        stop_event.<span class="bu" style="color: null;">set</span>()</span>
<span id="cb3-21">        monitor_thread.join()</span>
<span id="cb3-22">    </span>
<span id="cb3-23">    <span class="cf" style="color: #003B4F;">return</span> index_path, readings</span>
<span id="cb3-24"></span>
<span id="cb3-25">index_path, memory_readings <span class="op" style="color: #5E5E5E;">=</span> log_memory_during_index()</span></code></pre></div>
</section>
<section id="memory-logging-results" class="level2">
<h2 class="anchored" data-anchor-id="memory-logging-results">Memory Logging Results</h2>
<p>I used two machines for these experiments:</p>
<ul>
<li>T4 GPU (16 GB vRAM, 51GB RAM) using Google Colab Pro.</li>
<li>RTX6000Ada (48GB vRAM, 128GB RAM) using Jarvis Labs.</li>
</ul>
<p>I chose the following number of documents to index: - 100k - 250k - 500k - 1M - 2M</p>
<p>Here are the results:</p>
<p><em>RTX6000Ada (48GB vRAM, 128GB RAM)</em></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"># Docs</th>
<th style="text-align: center;">index_path Size</th>
<th style="text-align: center;">Max RAM</th>
<th style="text-align: center;">Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">100k</td>
<td style="text-align: center;">0.41 GB</td>
<td style="text-align: center;">6.96 GB</td>
<td style="text-align: center;">4 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1.1 GB</td>
<td style="text-align: center;">8.4 GB</td>
<td style="text-align: center;">6.4 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2.2 GB</td>
<td style="text-align: center;">11.4 GB</td>
<td style="text-align: center;">12 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">4.5 GB</td>
<td style="text-align: center;">16.3 GB</td>
<td style="text-align: center;">24 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2M</td>
<td style="text-align: center;">9.1 GB</td>
<td style="text-align: center;">24 GB</td>
<td style="text-align: center;">47 min</td>
</tr>
</tbody>
</table>
<p><em>T4 w/High-RAM (16GB vRAM, 51GB RAM)</em></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"># Docs</th>
<th style="text-align: center;">index_path Size</th>
<th style="text-align: center;">Max RAM</th>
<th style="text-align: center;">Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">100k</td>
<td style="text-align: center;">0.41 GB</td>
<td style="text-align: center;">6.5 GB</td>
<td style="text-align: center;">8 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1.1 GB</td>
<td style="text-align: center;">8.8 GB</td>
<td style="text-align: center;">20 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2.2 GB</td>
<td style="text-align: center;">11.8 GB</td>
<td style="text-align: center;">36 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">4.5 GB</td>
<td style="text-align: center;">18.8 GB</td>
<td style="text-align: center;">78 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2M</td>
<td style="text-align: center;">9.1 GB</td>
<td style="text-align: center;">28.6 GB</td>
<td style="text-align: center;">145 min</td>
</tr>
</tbody>
</table>
<p>I also used the A100 instance on Google Colab Pro for some initial experiments. It’s interesting to note the difference in speed of encoding 25k passages:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">GPU</th>
<th style="text-align: center;">seconds/25k</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RTX6000Ada</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: center;">A100</td>
<td style="text-align: center;">22</td>
</tr>
<tr class="odd">
<td style="text-align: center;">T4</td>
<td style="text-align: center;">44</td>
</tr>
</tbody>
</table>
</section>
<section id="extrapolating-to-12.6m-documents" class="level2">
<h2 class="anchored" data-anchor-id="extrapolating-to-12.6m-documents">Extrapolating to 12.6M Documents</h2>
<p>I’ll start with the easier one: the size of the directory created by <code>RAG.index</code>. Doubling the number of documents doubles its size (approximately) so if 1M documents takes up 4.5GB of space I expect 12.6M documents to take up ~54GB of space. I’ll set my storage size to 100GB just in case.</p>
<p>The maximum RAM used (by the CPU, not the GPU vRAM) for 12.6M documents is a bit more involved. I’m planning to use the RTX6000Ada machine so I’ll use its numbers.</p>
<p><em>RTX6000Ada (48GB vRAM, 128GB RAM)</em> |# Docs|Max RAM|Increase |:-:|:-:|:-:| |100k|6.96 GB| – |250k|8.4 GB| 20% |500k|11.4 GB| 36% |1M|16.3 GB| 43% |2M|24 GB| 47%</p>
<p>The percent increase amount is slowing down. Let’s say it plateaus at a 50% increase going from 2M to 4M documents (doubling). 2M to 12.6M is ~2.66 doublings (is that a word?). 24 GB x 1.5^2.66 = 70GB. If I was using Colab numbers: 28.6 x 1.5^2.66 = 84 GB. When I tried to index 12.6M documents with an A100 High-RAM (83.5 GB CPU) instance on Google Colab Pro, the runtime crashed as it ran out of System RAM so this checks out.</p>
<p>Finally, let’s say the time it takes to index documents doubles when the number of documents doubles from 2M onwards. 47 min x 2^2.66 = 300 minutes or 5 hours. At about $1/hr, this would take $5 on an RTX6000Ada.</p>
<p>I should note that in all my experiments, the GPU vRAM usage didn’t go past 3-4 GB.</p>
<p>While the peak CPU RAM usage varied, in all instances the plots looked like the following (2M documents on RTX6000Ada):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="RTX6000/2M.png" class="lightbox" title="System RAM Usage over Indexing Time" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/RTX6000/2M.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">System RAM Usage over Indexing Time</figcaption><p></p>
</figure>
</div>
<p>I couldn’t figure out from my profiler the exact function call during that largest spike. Also note the spike near the end before indexing is finished.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Time will tell if these calculations are worth anything, but it seems like my best option is to use Jarvis Labs’ RTX6000Ada machine with 128GB CPU RAM. Once I successfully index the 12.6M-document <em>Genomics</em> dataset, I’ll have a better estimate for how much it will cost to index the largest dataset in the DAPR collection: MIRACL (32.9M documents). Stay tuned!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/index.html</guid>
  <pubDate>Wed, 12 Feb 2025 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/RTX6000/2M.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>Evaluating the DAPR ConditionalQA Dataset with RAGatouille</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-08-ConditionalQA-RAGatouille/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets ragatouille pytrec_eval ranx</span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;">import</span> pytrec_eval</span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> evaluate</span>
<span id="cb2-9"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> Qrels, Run</span></code></pre></div>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I wanted to get familiar with classic information retrieval datasets, especially those with explicit documents. I searched with Perplexity and ChatGPT and came across <a href="https://huggingface.co/datasets/UKPLab/dapr">DAPR: Document-Aware Passage Retrieval</a> which sounded perfect for my use case.</p>
<p>In this blog post I’ll work through evaluating the test split of the <em>ConditionalQA</em> dataset in DAPR using RAGatouille and the <code>answerai-colbert-small-v1</code> model for retrieval and the pytrec and ranx libraries for evaluation. I’ll use the simple Recall@10 metric as it’s the easiest to manually check.</p>
</section>
<section id="load-and-view-data" class="level2">
<h2 class="anchored" data-anchor-id="load-and-view-data">Load and View Data</h2>
<p>Here are the three datasets we are going to use for this evaluation:</p>
<ul>
<li><code>ConditionalQA-corpus</code>, our <em>passages</em></li>
<li><code>ConditionalQA_queries</code>, our <em>queries</em></li>
<li>and <code>ConditionalQA_qrels</code>, the mapping between queries and passages.</li>
</ul>
<div class="cell" data-outputid="ceab6651-e1f3-4b5a-8373-82e45f396356" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb3-2">passages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Dataset({
    features: ['_id', 'text', 'title', 'doc_id', 'paragraph_no', 'total_paragraphs', 'is_candidate'],
    num_rows: 69199
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="e8490f49-f5ff-4825-d72d-1f7ea5e95830" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">passages[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'_id': '0-0',
 'text': 'Overview',
 'title': 'Child Tax Credit',
 'doc_id': '0',
 'paragraph_no': 0,
 'total_paragraphs': 77,
 'is_candidate': True}</code></pre>
</div>
</div>
<div class="cell" data-outputid="b8182782-913d-452c-9309-cf3619b76b74" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">queries <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-queries"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb7-2">queries</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Dataset({
    features: ['_id', 'text'],
    num_rows: 271
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="d6c6b29f-4247-4d08-a3c2-0127dfbd2976" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">queries[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'_id': 'dev-0',
 'text': 'My brother and his wife are in prison for carrying out a large fraud scheme. Their 7 and 8 year old children have been living with me for the last 4 years. I want to become their Special Guardian to look after them permanently How long will it be before I hear back from the court?'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="3143c688-ff8e-4d82-c86f-45cc6a5740c6" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">qrels_rows <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-qrels"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb11-2">qrels_rows</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Dataset({
    features: ['query_id', 'corpus_id', 'score'],
    num_rows: 1165
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="4f02605d-6926-402d-a9fa-d64c632e8d45" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">qrels_rows[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'query_id': 'dev-0', 'corpus_id': '86-41', 'score': 1}</code></pre>
</div>
</div>
<p>Load <code>answerai-colbert-small-v1</code>:</p>
<div class="cell" data-outputid="26b62465-2651-46fc-dd7c-b2d4f18cbf11" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb15-2">RAG</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>&lt;ragatouille.RAGPretrainedModel.RAGPretrainedModel at 0x7e5328fdced0&gt;</code></pre>
</div>
</div>
<p>Structure the passages for indexing:</p>
<div class="cell" data-outputid="0a932d5e-c59b-4730-c312-b1fdbecf20c7" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">passages[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'_id': ['0-0', '0-1', '0-2', '0-3', '0-4'],
 'text': ['Overview',
  'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
  'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.',
  'You might be able to apply for Pension Credit if you and your partner are State Pension age or over.',
  'What you’ll get'],
 'title': ['Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit'],
 'doc_id': ['0', '0', '0', '0', '0'],
 'paragraph_no': [0, 1, 2, 3, 4],
 'total_paragraphs': [77, 77, 77, 77, 77],
 'is_candidate': [True, True, True, True, True]}</code></pre>
</div>
</div>
<div class="cell" data-outputid="06d8e8e2-5646-4526-a747-90b40a622637" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">passage_texts <span class="op" style="color: #5E5E5E;">=</span> [p[<span class="st" style="color: #20794D;">'text'</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> passages]</span>
<span id="cb19-2">passage_texts[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>['Overview',
 'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
 'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.',
 'You might be able to apply for Pension Credit if you and your partner are State Pension age or over.',
 'What you’ll get']</code></pre>
</div>
</div>
<div class="cell" data-outputid="5b1b49c9-3b17-460c-a60d-4219b7ab425e" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">passage_ids <span class="op" style="color: #5E5E5E;">=</span> [p[<span class="st" style="color: #20794D;">'_id'</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> passages]</span>
<span id="cb21-2">passage_ids[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>['0-0', '0-1', '0-2', '0-3', '0-4']</code></pre>
</div>
</div>
</section>
<section id="build-the-index-and-run-search" class="level2">
<h2 class="anchored" data-anchor-id="build-the-index-and-run-search">Build the index and run search</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb23-2">    index_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"conditionalqa_index"</span>,</span>
<span id="cb23-3">    collection<span class="op" style="color: #5E5E5E;">=</span>passage_texts,</span>
<span id="cb23-4">    document_ids<span class="op" style="color: #5E5E5E;">=</span>passage_ids</span>
<span id="cb23-5">)</span></code></pre></div>
</div>
<p>Taking a look at the results for a single query. Each result has a <code>content</code>, <code>score</code>, <code>rank</code>, <code>document_id</code>, and <code>passage_id</code>. Note a bit of confusing terminology: <code>document_id</code> is actually the id of the item in the <code>passages</code> dataset and <code>passage_id</code> is an identifier created by RAGatouille, unrelated to the datasets.</p>
<div class="cell" data-outputid="4e79a9a3-9bc4-4613-d584-aedc0e59c16c" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(queries[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-2">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>[{'content': 'You must advertise your claim within 14 days from the day you get a date for the first court hearing. The advert must appear in a print or online newspaper that covers the missing person’s last known usual address.',
  'score': 70.0,
  'rank': 1,
  'document_id': '107-103',
  'passage_id': 10480},
 {'content': 'The guardianship order will make you a guardian for a maximum of 4 years.',
  'score': 70.0,
  'rank': 2,
  'document_id': '107-242',
  'passage_id': 10619},
 {'content': 'You can claim joint Housing Benefit for up to 13 weeks if one of you has gone to prison and is likely to return home in 13 weeks or less - including any time on remand.',
  'score': 69.9375,
  'rank': 3,
  'document_id': '8-67',
  'passage_id': 911},
 {'content': 'The date will be either 14 or 28 days after your court hearing. If you’re in an exceptionally difficult situation, you may be able to convince the judge to delay this for up to 6 weeks.',
  'score': 69.9375,
  'rank': 4,
  'document_id': '496-116',
  'passage_id': 47939},
 {'content': 'You can claim or continue to claim joint Council Tax Reduction if your partner’s expected to be in prison for 13 weeks or less – including any time on remand.',
  'score': 69.875,
  'rank': 5,
  'document_id': '8-80',
  'passage_id': 924},
 {'content': 'Sometimes you’ll be given a 2 to 4 week period that you’ll need to keep free - this is known as a ‘warned period’ or ‘floating trial’. If this happens, you’ll be given 1 working day’s notice before you are due to go to court.',
  'score': 69.875,
  'rank': 6,
  'document_id': '254-4',
  'passage_id': 23999},
 {'content': 'Your Child Benefit payments will stop after 8 weeks if your child goes to prison or is on remand. You’ll get arrears if they’re cleared of the offence.',
  'score': 69.8125,
  'rank': 7,
  'document_id': '8-116',
  'passage_id': 960},
 {'content': 'You may be able to make a claim if you’re the dependant of someone who suffered from a dust-related disease but who has died. A dependant claim must be made within 12 months of the death of the sufferer.',
  'score': 69.8125,
  'rank': 8,
  'document_id': '45-133',
  'passage_id': 4921},
 {'content': 'You’ll be responsible for looking after the child until they’re 18 (unless the court takes your responsibility away earlier).',
  'score': 69.8125,
  'rank': 9,
  'document_id': '86-2',
  'passage_id': 8150},
 {'content': 'If it’s less than 90 days since the person went missing, explain you need the guardianship order urgently, for example, because the person is going to lose their house.',
  'score': 69.8125,
  'rank': 10,
  'document_id': '107-43',
  'passage_id': 10420}]</code></pre>
</div>
</div>
</section>
<section id="evaluation" class="level2">
<h2 class="anchored" data-anchor-id="evaluation">Evaluation</h2>
<p>I’ll prepare <code>qrels</code> for the pytrec evaluator as is done in the DAPR dataset card example on HF:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">qrels <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;">for</span> qrel_row <span class="kw" style="color: #003B4F;">in</span> qrels_rows:</span>
<span id="cb26-3">    qid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"query_id"</span>]</span>
<span id="cb26-4">    pid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"corpus_id"</span>]</span>
<span id="cb26-5">    rel <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"score"</span>]</span>
<span id="cb26-6">    qrels.setdefault(qid, {})</span>
<span id="cb26-7">    qrels[qid][pid] <span class="op" style="color: #5E5E5E;">=</span> rel</span></code></pre></div>
</div>
<p><code>dev-5</code> is a query ID with multiple passages so I’ve chosen it as the test example:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">qid <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dev-5'</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="0cab7461-acd2-49c9-f942-456f2daae9a3" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">qrels[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'61-1': 1, '61-4': 1, '61-5': 1, '61-17': 1, '61-37': 1, '61-39': 1}</code></pre>
</div>
</div>
<div class="cell" data-outputid="fcb898ec-c639-4b1a-bb0c-69cf15d6fcfe" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pytrec_results <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb30-2">pytrec_results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>{}</code></pre>
</div>
</div>
<p>Next we’ll run retrieval and structure results for the pytrec evaluator, again copying the DAPR example which structures the retrieval results as:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">retrieval_scores[query_id][passage_id] <span class="op" style="color: #5E5E5E;">=</span> score</span></code></pre></div>
<p>Note again that <code>document_id</code> means passage_id.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb33-2">    results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb33-3">    pytrec_results[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {result[<span class="st" style="color: #20794D;">'document_id'</span>]: <span class="bu" style="color: null;">float</span>(result[<span class="st" style="color: #20794D;">'score'</span>]) <span class="cf" style="color: #003B4F;">for</span> result <span class="kw" style="color: #003B4F;">in</span> results}</span></code></pre></div>
</div>
<p>We can see the 10 passages and each one has a corresponding score.</p>
<div class="cell" data-outputid="3d972b82-3755-4937-9ac6-ad20f8c672fc" data-execution_count="36">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pytrec_results[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>{'61-1': 71.125,
 '423-16': 70.5625,
 '61-27': 70.4375,
 '61-109': 70.375,
 '61-110': 70.25,
 '61-113': 70.25,
 '61-114': 70.25,
 '426-22': 70.1875,
 '420-42': 70.1875,
 '423-7': 70.125}</code></pre>
</div>
</div>
<p>Calculate Recall for all queries and viewing a single query’s Recall:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span></code></pre></div>
</div>
<p>There are 271 queries and 271 metrics (one per query):</p>
<div class="cell" data-outputid="571e47c0-b984-4d5c-dba4-7b501c02f139" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(pytrec_results)</span>
<span id="cb37-2"><span class="bu" style="color: null;">len</span>(metrics)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>271</code></pre>
</div>
</div>
<p>For our <code>dev-5</code> query the Recall@10 is 0.167 or 1/6.</p>
<div class="cell" data-outputid="07661f1e-4732-4c1f-ca8b-896b1afff7e0" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">metrics[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>{'recall_10': 0.16666666666666666}</code></pre>
</div>
</div>
<p>Here are the 6 passages that we needed to retrieve to fully answer this question:</p>
<div class="cell" data-outputid="2d1792f4-7e92-4f3e-bab5-a8d0ff79fbdf" data-execution_count="27">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">qrels[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>{'61-1': 1, '61-4': 1, '61-5': 1, '61-17': 1, '61-37': 1, '61-39': 1}</code></pre>
</div>
</div>
<p>And here are the results again—only 1 relevant passage, <code>61-1</code>, was retrieved.</p>
<div class="cell" data-outputid="b638ed99-ba08-486a-ee92-bba78540238a" data-execution_count="28">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">pytrec_results[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>{'61-1': 71.125,
 '423-16': 70.5625,
 '61-27': 70.4375,
 '61-109': 70.375,
 '61-110': 70.25,
 '61-113': 70.25,
 '61-114': 70.25,
 '426-22': 70.1875,
 '420-42': 70.1875,
 '423-7': 70.125}</code></pre>
</div>
</div>
<p>Calculating mean Recall across all queries to get our mean Recall@10 for the entire collection of queries:</p>
<div class="cell" data-outputid="ab74903a-5984-4afb-90df-d77c18d0cc50" data-execution_count="29">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb45-2">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.28046940381859803</code></pre>
</div>
</div>
<p>So, about 28% of all queries’ relevant passages were present in the top-10 passages retrieved.</p>
<p>I wanted to confirm my calculation so I’ll also calculate Recall@10 using the ranx library.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">qrels_ranx <span class="op" style="color: #5E5E5E;">=</span> Qrels(qrels)</span>
<span id="cb47-2">ranx_results <span class="op" style="color: #5E5E5E;">=</span> Run(pytrec_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="8924772d-4e13-4e1e-c1d6-1edbeba5faff" data-execution_count="35">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">evaluate(qrels_ranx, ranx_results, <span class="st" style="color: #20794D;">"recall@10"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>0.2804694038185978</code></pre>
</div>
</div>
<p>And we get the same results. Great!</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>In a future blog post I’ll calculate Recall@10 (and other metrics) on all of the datasets included in DAPR:</p>
<ul>
<li>ConditionalQA</li>
<li>MS MARCO</li>
<li>Genomics</li>
<li>MIRACL</li>
<li>Natural Questions</li>
</ul>
<p>Once that’s done, I’ll pick a few different retrieval models and compare their results across these datasets.</p>
<p>I think by the end of these experiments I’ll have a better grasp on how to work with classic IR datasets and metrics.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-08-ConditionalQA-RAGatouille/index.html</guid>
  <pubDate>Sat, 08 Feb 2025 08:00:00 GMT</pubDate>
</item>
<item>
  <title>DoRA’s Magnitude Vector</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-01-DoRA-Magnitude-Vector/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> peft <span class="im" style="color: #00769E;">import</span> LoraConfig, get_peft_model</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> transformers</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># the following imports are from dora.py</span></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> copy <span class="im" style="color: #00769E;">import</span> deepcopy</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> nn</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> peft.utils.integrations <span class="im" style="color: #00769E;">import</span> dequantize_module_weight, gather_params_ctx</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> peft.utils.other <span class="im" style="color: #00769E;">import</span> transpose</span></code></pre></div>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I am currently re-reading the DoRA (Weight-Decomposed Low-Rank Adaptation) <a href="https://arxiv.org/abs/2402.09353">paper</a>. I took a bit of a detour and worked through the fantastic article <a href="https://magazine.sebastianraschka.com/p/lora-and-dora-from-scratch">Improving LoRA: Implementing Weight-Decomposed Low-Rank Adaptation (DoRA) from Scratch</a> by Sebastian Raschka (I am also reading his book <a href="https://www.manning.com/books/build-a-large-language-model-from-scratch">Building a Large Language Model (from scratch)</a> as part of a fastai study group). The article is full of helpful diagrams and breakdowns of concepts as well as easily digestible implementation in code. One particular breakthrough for me while reading the article was his demonstration of the distributive law of multiplication:</p>
<blockquote class="blockquote">
<p><strong>x.(W+ΔW) = x.W + x.ΔW</strong></p>
<p>Similarly, we can write the following for LoRA:</p>
<p><strong>x.(W+A.B) = x.W + x.A.B</strong></p>
</blockquote>
<p>Reading this made it click for me why and how LoRA adapters are such an efficient way of handling downstream tasks.</p>
<p>I also took a deep dive into the peft library’s implementation of DoRA. I recently made <a href="https://youtu.be/GE6jRudHhzY">a video</a> of this deep dive.</p>
<p>In this blog post I am going to compare Raschka’s article’s implementation with peft’s and highlight a key difference that I found between them in how they implement the decomposition of a weight matrix into its magnitude and directional components.</p>
<p>I’ll start by reviewing both approaches.</p>
</section>
<section id="raschkas-implementation" class="level2">
<h2 class="anchored" data-anchor-id="raschkas-implementation">Raschka’s Implementation</h2>
<p>I want to add a caveat that this implementation I assume is by no means a “final” or “production” implementation, as I understand it to be more educational and illustrative.</p>
<p>I’ll start by copy/pasting relevant code: <code>LoRALayer</code> (DoRA uses LoRA to fine-tune the directional component) and <code>LinearWithDoRAMerged</code>.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> LoRALayer(nn.Module):</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, in_dim, out_dim, rank, alpha):</span>
<span id="cb2-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb2-4">        std_dev <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> torch.sqrt(torch.tensor(rank).<span class="bu" style="color: null;">float</span>())</span>
<span id="cb2-5">        <span class="va" style="color: #111111;">self</span>.A <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(torch.randn(in_dim, rank) <span class="op" style="color: #5E5E5E;">*</span> std_dev)</span>
<span id="cb2-6">        <span class="va" style="color: #111111;">self</span>.B <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(torch.zeros(rank, out_dim))</span>
<span id="cb2-7">        <span class="va" style="color: #111111;">self</span>.alpha <span class="op" style="color: #5E5E5E;">=</span> alpha</span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb2-10">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.alpha <span class="op" style="color: #5E5E5E;">*</span> (x <span class="op" style="color: #5E5E5E;">@</span> <span class="va" style="color: #111111;">self</span>.A <span class="op" style="color: #5E5E5E;">@</span> <span class="va" style="color: #111111;">self</span>.B)</span>
<span id="cb2-11">        <span class="cf" style="color: #003B4F;">return</span> x</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> LinearWithDoRAMerged(nn.Module):</span>
<span id="cb3-2"></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, linear, rank, alpha):</span>
<span id="cb3-4">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb3-5">        <span class="va" style="color: #111111;">self</span>.linear <span class="op" style="color: #5E5E5E;">=</span> linear</span>
<span id="cb3-6">        <span class="va" style="color: #111111;">self</span>.lora <span class="op" style="color: #5E5E5E;">=</span> LoRALayer(</span>
<span id="cb3-7">            linear.in_features, linear.out_features, rank, alpha</span>
<span id="cb3-8">        )</span>
<span id="cb3-9">        <span class="va" style="color: #111111;">self</span>.m <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(</span>
<span id="cb3-10">            <span class="va" style="color: #111111;">self</span>.linear.weight.norm(p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb3-11"></span>
<span id="cb3-12"></span>
<span id="cb3-13">  <span class="co" style="color: #5E5E5E;"># Code loosely inspired by</span></span>
<span id="cb3-14">  <span class="co" style="color: #5E5E5E;"># https://github.com/catid/dora/blob/main/dora.py</span></span>
<span id="cb3-15"></span>
<span id="cb3-16">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb3-17">        lora <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.lora.A <span class="op" style="color: #5E5E5E;">@</span> <span class="va" style="color: #111111;">self</span>.lora.B</span>
<span id="cb3-18">        numerator <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.linear.weight <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.lora.alpha<span class="op" style="color: #5E5E5E;">*</span>lora.T</span>
<span id="cb3-19">        denominator <span class="op" style="color: #5E5E5E;">=</span> numerator.norm(p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-20">        directional_component <span class="op" style="color: #5E5E5E;">=</span> numerator <span class="op" style="color: #5E5E5E;">/</span> denominator</span>
<span id="cb3-21">        new_weight <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.m <span class="op" style="color: #5E5E5E;">*</span> directional_component</span>
<span id="cb3-22">        <span class="cf" style="color: #003B4F;">return</span> F.linear(x, new_weight, <span class="va" style="color: #111111;">self</span>.linear.bias)</span></code></pre></div>
</div>
<p>I’ll also create a regular linear layer using one of the in/out feature values in the Raschka article:</p>
<div class="cell" data-outputid="5a631bc3-b6ef-49b4-c1df-1c32dab0254f" data-execution_count="6">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">linear <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(in_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">784</span>, out_features<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb4-2">linear</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Linear(in_features=784, out_features=128, bias=True)</code></pre>
</div>
</div>
<div class="cell" data-outputid="f7d1e34c-c79b-4135-e904-3d1cfa69f834" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dora_layer <span class="op" style="color: #5E5E5E;">=</span> LinearWithDoRAMerged(linear, <span class="dv" style="color: #AD0000;">256</span>, <span class="dv" style="color: #AD0000;">512</span>)</span>
<span id="cb6-2">dora_layer</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>LinearWithDoRAMerged(
  (linear): Linear(in_features=784, out_features=128, bias=True)
  (lora): LoRALayer()
)</code></pre>
</div>
</div>
<p>Here’s the key value: the shape of the magnitude vector. In Raschka’s code, it’s 1 x 784, where 784 is the number of linear <code>in_features</code>.</p>
<div class="cell" data-outputid="6dd100d0-55e6-42bc-c49a-9d0eecf0d5a2" data-execution_count="11">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dora_layer.m.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>torch.Size([1, 784])</code></pre>
</div>
</div>
<p>Looking at <code>LinearWithDoRAMerged.__init__</code>:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="va" style="color: #111111;">self</span>.m <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(</span>
<span id="cb10-2">            <span class="va" style="color: #111111;">self</span>.linear.weight.norm(p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span></code></pre></div>
<p>The <code>norm</code> is taking over <code>dim=0</code>, which is the dimension of <code>out_features</code>:</p>
<div class="cell" data-outputid="c9bf9bab-831b-4c3a-ea4a-f0c54642b4a0" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">linear.weight.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>torch.Size([128, 784])</code></pre>
</div>
</div>
<p>In other words, we end up with 1 magnitude value for each of the 784 input neurons.</p>
</section>
<section id="peft-implementation" class="level2">
<h2 class="anchored" data-anchor-id="peft-implementation"><code>peft</code> Implementation</h2>
<p>From <a href="https://github.com/huggingface/peft/blob/main/src/peft/tuners/lora/dora.py"><code>src/peft/tuners/lora/dora.py</code></a>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">class</span> DoraLinearLayer(nn.Module):</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, fan_in_fan_out):</span>
<span id="cb13-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb13-4">        <span class="va" style="color: #111111;">self</span>.fan_in_fan_out <span class="op" style="color: #5E5E5E;">=</span> fan_in_fan_out</span>
<span id="cb13-5"></span>
<span id="cb13-6">    <span class="kw" style="color: #003B4F;">def</span> get_weight_norm(<span class="va" style="color: #111111;">self</span>, weight, lora_weight, scaling) <span class="op" style="color: #5E5E5E;">-&gt;</span> torch.Tensor:</span>
<span id="cb13-7">        <span class="co" style="color: #5E5E5E;"># calculate L2 norm of weight matrix, column-wise</span></span>
<span id="cb13-8">        weight <span class="op" style="color: #5E5E5E;">=</span> transpose(weight, <span class="va" style="color: #111111;">self</span>.fan_in_fan_out)</span>
<span id="cb13-9">        weight <span class="op" style="color: #5E5E5E;">=</span> weight <span class="op" style="color: #5E5E5E;">+</span> scaling <span class="op" style="color: #5E5E5E;">*</span> lora_weight</span>
<span id="cb13-10">        weight_norm <span class="op" style="color: #5E5E5E;">=</span> torch.linalg.norm(weight, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).to(weight.dtype)</span>
<span id="cb13-11">        <span class="cf" style="color: #003B4F;">return</span> weight_norm</span>
<span id="cb13-12"></span>
<span id="cb13-13">    ...</span></code></pre></div>
<p>The very important attribute here is <code>fan_in_fan_out</code>. I found a few places in the peft codebase which documented it as follows:</p>
<pre><code>Set this to True if the layer to replace stores weight like (fan_in, fan_out)</code></pre>
<ul>
<li><a href="https://github.com/huggingface/peft/blob/0facdebf6208139cbd8f3586875acb378813dd97/src/peft/tuners/ia3/config.py#L79">src/peft/tuners/ia3/config.py</a></li>
<li><a href="https://github.com/huggingface/peft/blob/0facdebf6208139cbd8f3586875acb378813dd97/src/peft/tuners/vblora/layer.py#L122">src/peft/tuners/vblora/layer.py</a></li>
<li><a href="https://github.com/huggingface/peft/blob/0facdebf6208139cbd8f3586875acb378813dd97/src/peft/tuners/vblora/layer.py#L122">src/peft/tuners/vblora/layer.py</a></li>
</ul>
<p>How I interpret this: if the weights are stored as (in, out), <code>fan_in_fan_out</code> is <code>True</code>, if stored as (out, in) <code>fan_in_fan_out</code> is <code>False</code>.</p>
<p>Looking at an example, I’ll peft-ify SmolLM2-135M:</p>
<div class="cell" data-outputid="f2fdc27d-3a29-4b72-9c84-ce1d79ea74d9" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">model_nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'HuggingFaceTB/SmolLM2-135M'</span></span>
<span id="cb15-2">model_nm</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'HuggingFaceTB/SmolLM2-135M'</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">model <span class="op" style="color: #5E5E5E;">=</span> transformers.AutoModelForSequenceClassification.from_pretrained(model_nm, num_labels<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">peft_config <span class="op" style="color: #5E5E5E;">=</span> LoraConfig(r<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, use_rslora<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, use_dora<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, target_modules<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'down_proj'</span>, <span class="st" style="color: #20794D;">'gate_proj'</span>, <span class="st" style="color: #20794D;">'k_proj'</span>, <span class="st" style="color: #20794D;">'o_proj'</span>, <span class="st" style="color: #20794D;">'q_proj'</span>, <span class="st" style="color: #20794D;">'up_proj'</span>, <span class="st" style="color: #20794D;">'v_proj'</span>])</span></code></pre></div>
</div>
<div class="cell" data-outputid="4166bf0b-8ce5-44df-bc5f-43ac8a7e4bc2" data-execution_count="18">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">model <span class="op" style="color: #5E5E5E;">=</span> get_peft_model(model, peft_config)</span>
<span id="cb19-2">model.print_trainable_parameters()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>trainable params: 78,307,200 || all params: 212,823,360 || trainable%: 36.7945</code></pre>
</div>
</div>
<p>Looking at one of the layers which has a different number of input and output features, <code>k_proj</code>:</p>
<div class="cell" data-outputid="c9b363b2-1042-4507-e625-7065bdaa5d89" data-execution_count="19">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">k_proj <span class="op" style="color: #5E5E5E;">=</span> model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.k_proj</span>
<span id="cb21-2">k_proj</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>lora.Linear(
  (base_layer): Linear(in_features=576, out_features=192, bias=False)
  (lora_dropout): ModuleDict(
    (default): Identity()
  )
  (lora_A): ModuleDict(
    (default): Linear(in_features=576, out_features=256, bias=False)
  )
  (lora_B): ModuleDict(
    (default): Linear(in_features=256, out_features=192, bias=False)
  )
  (lora_embedding_A): ParameterDict()
  (lora_embedding_B): ParameterDict()
  (lora_magnitude_vector): ModuleDict(
    (default): lora.dora.DoraLinearLayer()
  )
)</code></pre>
</div>
</div>
<p>The base layer has 576 <code>in_features</code> and 192 <code>out_features</code>:</p>
<div class="cell" data-outputid="937ded35-e1fd-4b5c-d98b-4a4781871a2d" data-execution_count="22">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">k_proj.base_layer.weight.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>torch.Size([192, 576])</code></pre>
</div>
</div>
<p>The <code>fan_in_fan_out</code> attribute is <code>False</code> which checks out by looking at the shape above which is (out, in).</p>
<div class="cell" data-outputid="a2b509cf-8cba-425d-95ae-d29baf2d806c" data-execution_count="24">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">k_proj.fan_in_fan_out</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>False</code></pre>
</div>
</div>
<p>Why is <code>fan_in_fan_out</code> such a big deal to me? Well, because look at how <code>get_weight_norm</code> is written:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> get_weight_norm(<span class="va" style="color: #111111;">self</span>, weight, lora_weight, scaling) <span class="op" style="color: #5E5E5E;">-&gt;</span> torch.Tensor:</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;"># calculate L2 norm of weight matrix, column-wise</span></span>
<span id="cb27-3">    weight <span class="op" style="color: #5E5E5E;">=</span> transpose(weight, <span class="va" style="color: #111111;">self</span>.fan_in_fan_out)</span>
<span id="cb27-4">    weight <span class="op" style="color: #5E5E5E;">=</span> weight <span class="op" style="color: #5E5E5E;">+</span> scaling <span class="op" style="color: #5E5E5E;">*</span> lora_weight</span>
<span id="cb27-5">    weight_norm <span class="op" style="color: #5E5E5E;">=</span> torch.linalg.norm(weight, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).to(weight.dtype)</span>
<span id="cb27-6">    <span class="cf" style="color: #003B4F;">return</span> weight_norm</span></code></pre></div>
<p>I’ll walk through each line, starting with the base layers weight matrix:</p>
<div class="cell" data-outputid="b473b742-2715-4f33-d00b-259cf0805815" data-execution_count="25">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">weight <span class="op" style="color: #5E5E5E;">=</span> k_proj.base_layer.weight</span>
<span id="cb28-2">weight.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>torch.Size([192, 576])</code></pre>
</div>
</div>
<p>We then pass the weight and <code>fan_in_fan_out</code> to <code>transpose</code>:</p>
<div class="cell" data-outputid="d762eab8-6ab5-4627-c458-26759b37999c" data-execution_count="26">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">weight <span class="op" style="color: #5E5E5E;">=</span> transpose(weight, k_proj.fan_in_fan_out)</span>
<span id="cb30-2">weight.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>torch.Size([192, 576])</code></pre>
</div>
</div>
<p>It doesn’t transpose it! That’s because <a href="https://github.com/huggingface/peft/blob/0facdebf6208139cbd8f3586875acb378813dd97/src/peft/utils/other.py#L559">in <code>tranpose</code></a> if <code>fan_in_fan_out</code> is <code>False</code> it returns the <code>weight</code> as is:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;">def</span> transpose(weight, fan_in_fan_out):</span>
<span id="cb32-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> fan_in_fan_out:</span>
<span id="cb32-3">        <span class="cf" style="color: #003B4F;">return</span> weight</span>
<span id="cb32-4"></span>
<span id="cb32-5">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(weight, torch.nn.Parameter):</span>
<span id="cb32-6">        <span class="cf" style="color: #003B4F;">return</span> torch.nn.Parameter(weight.T)</span>
<span id="cb32-7">    <span class="cf" style="color: #003B4F;">return</span> weight.T</span></code></pre></div>
<p>This is absolutely critical in determining the shape of the magnitude vector:</p>
<div class="cell" data-outputid="769830c0-55ff-49cd-85bc-399aa864a4f9" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">weight_norm <span class="op" style="color: #5E5E5E;">=</span> torch.linalg.norm(weight, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>).to(weight.dtype)</span>
<span id="cb33-2">weight_norm.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>torch.Size([192])</code></pre>
</div>
</div>
<p>Note two things here: - they take the <code>norm</code> across <code>dim=1</code> (the number of <code>in_features</code>) - we end up with 1 magnitude value for each of the 192 <em>output</em> neurons. Contrast this with Raschka’s article where we had 1 magnitude value for each of the <em>input</em> neurons.</p>
</section>
<section id="aside-claude-conversation" class="level2">
<h2 class="anchored" data-anchor-id="aside-claude-conversation">Aside: Claude Conversation</h2>
<p>While I was re-reading the DoRA paper, I found the emphasis on <em>column-wise</em> vector norm interesting so I asked Claude about it:</p>
<blockquote class="blockquote">
<p><strong>Prompt</strong>: Why columns? What is special about doing this for columns and not rows. Is there something fundamental about columns in a matrix of pretrained weights?</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Response</strong>: For neural networks, columns of weight matrices map features from one layer’s dimension to another’s. Each column represents all the connections to a single output neuron. So columns form natural functional units, making column-wise normalization more meaningful than row-wise for understanding and modifying the network’s learned transformations.</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Prompt</strong>: So suppose we have an input vector <code>x</code> which contains values corresponding to each input variable, the pretrained weight matrix would is d x k so <code>x</code> would be 1 x d.&nbsp;Each row in pretrained weight matrix would represent one input variable. Multiplying 1 x d with d x k gives us 1 x k where k is the number of activations (i.e.&nbsp;the number of neurons).</p>
</blockquote>
<blockquote class="blockquote">
<p><strong>Response</strong>: Yes, that’s correct. The output for a single neuron (one column of the weight matrix) is the dot product between the input vector and that column’s weights. So when we do column-wise normalization, we’re normalizing the set of weights that feed into each individual output neuron. This helps explain why column-wise normalization is natural - each column represents a complete “unit” in terms of how the network processes information to produce one output activation.</p>
</blockquote>
<p>So, it seems like decomposing the weight matrix into a magnitude vector and direction matrix <em>corresponding to output neurons</em> seems really important.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Explorations like this is why I’m grateful for open source code. The efforts of folks like HuggingFace and Raschka to democratize LLMs allows folks like me to curate insightful explorations for myself, and I’m obviously happy to share them out in this blog post. If you find something incorrect in my interpretation of Raschka’s or peft’s code, please at me on Twitter <span class="citation" data-cites="vishal_learner">@vishal_learner</span>.</p>
<p>A future exercise that I want to do: train DoRA implementations with a column-wise norm and a row-wise norm and compare results. This would truly highlight whether it’s important to align the decomposition with the output neurons of the weight matrix.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-01-DoRA-Magnitude-Vector/index.html</guid>
  <pubDate>Sat, 01 Feb 2025 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Recreating the PLAID ColBERTv2 Scoring Pipeline: From Research Code to RAGatouille</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/index.html</link>
  <description><![CDATA[ 



<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install RAGatouille <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> colbert</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">from</span> fastcore.utils <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> torch</span></code></pre></div>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>This walkthrough reconstructs the PLAID scoring pipeline by tracing code paths in the <a href="https://github.com/stanford-futuredata/ColBERT">ColBERT research codebase</a> that reproduce RAGatouille’s verified results. This is a reverse engineering process - I pulled at promising threads (code related to centroids, passage IDs, and scores) and validated my understanding by comparing against RAGatouille’s known-correct outputs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="4-Stage PLAID Scoring Pipeline" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">4-Stage PLAID Scoring Pipeline</figcaption><p></p>
</figure>
</div>
<p>Here’s my video walkthrough of the code in this notebook:</p>
<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/XRPP5LHHk0o" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="ragatouille-results" class="level2">
<h2 class="anchored" data-anchor-id="ragatouille-results">RAGatouille Results</h2>
<p>In this notebook, the gold truth scores for the documents given a query are determined by the RAGatouille library. I create a query (<em>What is Python?</em>) and a simple set of documents where one document is the obvious right answer (<em>Python is a programming language. It is easy to learn</em>) , one is a hard negative in that it’s about Python (<em>Python was created by Guido van Rossum in 1991</em>) and one is a easier negative as it’s related to the programming but not about Python (<em>Java is a popular coding language used in many applications</em>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"colbert-ir/colbertv2.0"</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="89b586b3-11b0-4cae-8e03-54496bf75f35" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">q <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"What is Python?"</span></span>
<span id="cb4-2">q</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'What is Python?'</code></pre>
</div>
</div>
<div class="cell" data-outputid="5e61a859-1291-48d1-e3cb-430ec494cdf7" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">documents <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb6-2">    <span class="st" style="color: #20794D;">"Python is a programming language. It is easy to learn"</span>,</span>
<span id="cb6-3">    <span class="st" style="color: #20794D;">"Java is a popular coding language used in many applications"</span>,</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;">"Python was created by Guido van Rossum in 1991"</span></span>
<span id="cb6-5">]</span>
<span id="cb6-6">documents</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>['Python is a programming language. It is easy to learn',
 'Java is a popular coding language used in many applications',
 'Python was created by Guido van Rossum in 1991']</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(index_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"toy_example"</span>, collection<span class="op" style="color: #5E5E5E;">=</span>documents)</span></code></pre></div>
</div>
<div class="cell" data-outputid="14b79968-f1f3-4da6-801c-631016f860b3" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">index_path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'.ragatouille/colbert/indexes/toy_example'</code></pre>
</div>
</div>
<div class="cell" data-outputid="9e40747b-0e07-4e78-abe4-d3dc5f3d94ff" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(q)</span>
<span id="cb11-2">results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>WARNING: k value is larger than the number of documents in the index! Lowering k to 3...</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>[{'content': 'Python is a programming language. It is easy to learn',
  'score': 27.6875,
  'rank': 1,
  'document_id': '8aa5aade-10d5-4144-b634-c7866578b43c',
  'passage_id': 0},
 {'content': 'Python was created by Guido van Rossum in 1991',
  'score': 22.28125,
  'rank': 2,
  'document_id': '12352328-9bb1-4a51-896e-a002d3548adc',
  'passage_id': 2},
 {'content': 'Java is a popular coding language used in many applications',
  'score': 13.953125,
  'rank': 3,
  'document_id': '1fe9788e-ccec-4b9e-a004-14acc657915e',
  'passage_id': 1}]</code></pre>
</div>
</div>
<p>Note the <code>score</code> and <code>passage_id</code>—these are values I’ll continuously reference throughout my walkthrough:</p>
<table class="table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><code>passage_id</code></th>
<th style="text-align: center;"><code>score</code></th>
<th style="text-align: center;">passage text</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">27.6875</td>
<td style="text-align: center;">“Python is a programming language. It is easy to learn”</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">22.28125</td>
<td style="text-align: center;">“Python was created by Guido van Rossum in 1991”</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">13.953125</td>
<td style="text-align: center;">“Java is a popular coding language used in many applications”</td>
</tr>
</tbody>
</table>
</section>
<section id="where-to-start" class="level2">
<h2 class="anchored" data-anchor-id="where-to-start">Where to Start?</h2>
<p>Starting at the top—the model in play: of type <code>ColBERT</code></p>
<div class="cell" data-outputid="a569389d-4ae5-45fe-e11d-3e4c9c340d81" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">m <span class="op" style="color: #5E5E5E;">=</span> RAG.model</span>
<span id="cb14-2">m</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>&lt;ragatouille.models.colbert.ColBERT at 0x7d0a4cc14670&gt;</code></pre>
</div>
</div>
<p>And its index—of type <code>PLAIDModelIndex</code>.</p>
<div class="cell" data-outputid="07afbe51-fa27-4156-e6c5-a4a01e73de0c" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">index <span class="op" style="color: #5E5E5E;">=</span> m.model_index</span>
<span id="cb16-2">index</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>&lt;ragatouille.models.index.PLAIDModelIndex at 0x7d0bd8bb7e80&gt;</code></pre>
</div>
</div>
<p>Inside the source code for <a href="https://github.com/AnswerDotAI/RAGatouille/blob/8183aad64a9a6ba805d4066dcab489d97615d316/ragatouille/models/index.py#L284"><code>PLAIDModelIndex</code></a> the most promising method seemed be the <code>_search</code> method, which contains the following line:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.searcher.search(query, k<span class="op" style="color: #5E5E5E;">=</span>k, pids<span class="op" style="color: #5E5E5E;">=</span>pids)</span></code></pre></div>
<p>This contained three things I recognized: the <code>query</code>, the top <code>k</code> value and the passage IDs <code>pids</code>.</p>
<div class="cell" data-outputid="737f4016-6a3e-49a7-ee28-ccfd19dd095e" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">index.searcher</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>&lt;colbert.searcher.Searcher at 0x7d0a4cdc6530&gt;</code></pre>
</div>
</div>
</section>
<section id="the-searcher-class" class="level2">
<h2 class="anchored" data-anchor-id="the-searcher-class">The <code>Searcher</code> Class</h2>
<p>I couldn’t find the <code>Searcher</code> in RAGAtouille’s codebase as it was imported from <code>colbert</code>. Thankfully, installing RAGatouille gives you access to this library!</p>
<div class="cell" data-outputid="6abf22d1-2cb2-4a49-a70a-0121cac86de5" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">colbert.Searcher</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.searcher.Searcher</b><br>def __init__(index, checkpoint=None, collection=None, config=None, index_root=None, verbose: int=3)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/searcher.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 22);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<p>The <code>Searcher</code> takes as a required argument an <code>index</code> path—which we have!</p>
<div class="cell" data-outputid="56727311-62b7-45d7-a5bb-58e710870a54" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">searcher <span class="op" style="color: #5E5E5E;">=</span> colbert.Searcher(index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'toy_example'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Dec 24, 15:59:52] #&gt; Loading codec...
[Dec 24, 15:59:52] #&gt; Loading IVF...
[Dec 24, 15:59:52] #&gt; Loading doclens...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 1/1 [00:00&lt;00:00, 4315.13it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Dec 24, 15:59:52] #&gt; Loading codes and residuals...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
100%|██████████| 1/1 [00:00&lt;00:00, 454.67it/s]</code></pre>
</div>
</div>
<p>Notice that it loads the <code>codec</code>, <code>IVF</code> and <code>doclens</code>, all things we’ll look at throughout this notebook. Looking inside the <code>Searcher.search</code> method (which was called in the <code>PLAIDModelIndex._search</code> method) <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/searcher.py#L65">I see the following</a>:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;">def</span> search(<span class="va" style="color: #111111;">self</span>, text: <span class="bu" style="color: null;">str</span>, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, filter_fn<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, full_length_search<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, pids<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb27-2">    Q <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.encode(text, full_length_search<span class="op" style="color: #5E5E5E;">=</span>full_length_search)</span>
<span id="cb27-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.dense_search(Q, k, filter_fn<span class="op" style="color: #5E5E5E;">=</span>filter_fn, pids<span class="op" style="color: #5E5E5E;">=</span>pids)</span></code></pre></div>
<p>This is encoding the <code>text</code> into <code>Q</code>. Looks promising. I’ll see what that gets me:</p>
<div class="cell" data-outputid="5877b31f-6555-45e1-c697-e47c726a989a" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">Q <span class="op" style="color: #5E5E5E;">=</span> searcher.encode(q)</span>
<span id="cb28-2">Q.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>torch.Size([1, 32, 128])</code></pre>
</div>
</div>
<p>Looks good! It has 32 tokens, each with a 128-dimension encoding.</p>
<p><code>Searcher.search</code> returns the output of <code>Searcher.dense_search</code>, and the <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/searcher.py#L106"><code>Searcher.dense_search</code></a> method looks <em>very</em> promising. It takes queries <code>Q</code> and passages IDs and returns passage IDs and <code>scores</code>.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pids, scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ranker.rank(<span class="va" style="color: #111111;">self</span>.config, Q, filter_fn<span class="op" style="color: #5E5E5E;">=</span>filter_fn, pids<span class="op" style="color: #5E5E5E;">=</span>pids)</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="cf" style="color: #003B4F;">return</span> pids[:k], <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, k<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)), scores[:k]</span></code></pre></div>
<div class="cell" data-outputid="5dd61d17-137b-40e7-bb37-7fde4118079c" data-execution_count="17">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">searcher.dense_search</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.searcher.Searcher.dense_search</b><br>def dense_search(Q: torch.Tensor, k=10, filter_fn=None, pids=None)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/searcher.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 106);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<div class="cell" data-outputid="abd2a719-2384-47ff-b1e6-0aaa88182c91" data-execution_count="18">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">searcher.dense_search(Q)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>([0], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [27.6875])</code></pre>
</div>
</div>
<p>Excellent!! The first value is <code>pids[:k]</code>, which I understand to be the passage IDs corresponding to the top-k results. In this case it’s just 1 passage ID, <code>0</code>, the first passage (<em>“Python is a programming language. It is easy to learn”</em>). The second value is <code>list(range(1,k+1))</code> which is just a list from 1 to <code>k</code>. The final value is <code>scores[:k]</code> which is score corresponding to the top-k values. In this case it’s just one score, but an important one in our journey, as it is the same as RAGatouille for this passage (27.6875) !</p>
<div class="cell" data-outputid="a003d766-cd30-4fbd-c15d-cec4b6b73fee" data-execution_count="19">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">results[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>{'content': 'Python is a programming language. It is easy to learn',
 'score': 27.6875,
 'rank': 1,
 'document_id': '8aa5aade-10d5-4144-b634-c7866578b43c',
 'passage_id': 0}</code></pre>
</div>
</div>
<p>This is incredibly exciting, but I’m only getting 1 score instead of 3. Looking more closely at <code>dense_search</code> I see that the value of <code>k</code> determines the value of <code>config.ncells</code>:</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="cf" style="color: #003B4F;">if</span> k <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span>:</span>
<span id="cb36-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.config.ncells <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb36-3">        <span class="va" style="color: #111111;">self</span>.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb36-4">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.config.centroid_score_threshold <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb36-5">        <span class="va" style="color: #111111;">self</span>.configure(centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb36-6">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.config.ndocs <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb36-7">        <span class="va" style="color: #111111;">self</span>.configure(ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<p>Afterwhich <code>dense_search</code> calls:</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">pids, scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ranker.rank(<span class="va" style="color: #111111;">self</span>.config, Q, filter_fn<span class="op" style="color: #5E5E5E;">=</span>filter_fn, pids<span class="op" style="color: #5E5E5E;">=</span>pids)</span></code></pre></div>
<p>I’ll look at <code>Searcher.ranker.rank</code> next.</p>
</section>
<section id="searcher.ranker.rank" class="level2">
<h2 class="anchored" data-anchor-id="searcher.ranker.rank"><code>Searcher.ranker.rank</code></h2>
<div class="cell" data-outputid="2aeba55e-d7d8-4d4e-8f0e-2b38acdfb5b6" data-execution_count="20">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">searcher.ranker.rank</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.search.index_storage.IndexScorer.rank</b><br>def rank(config, Q, filter_fn=None, pids=None)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/search/index_storage.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 87);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<p>The first parameter, <code>config</code>, <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/searcher.py#L37">is found in the <code>Searcher</code></a>:</p>
<div class="cell" data-outputid="85a314f5-4d5a-4574-8269-d0cca718cf75" data-execution_count="21">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">searcher.config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=1, centroid_score_threshold=0.5, ndocs=256, load_index_with_mmap=False, index_path=None, index_bsize=32, nbits=4, kmeans_niters=20, resume=False, similarity='cosine', bsize=64, accumsteps=1, lr=1e-05, maxsteps=400000, save_every=None, warmup=20000, warmup_bert=None, relu=False, nway=64, use_ib_negatives=True, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name=None, query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=128, doc_maxlen=256, mask_punctuation=True, checkpoint='colbert-ir/colbertv2.0', triples='/future/u/okhattab/root/unit/experiments/2021.10/downstream.distillation.round2.2_score/round2.nway6.cosine.ib/examples.64.json', collection=&lt;colbert.data.collection.Collection object at 0x7d0a4cc052d0&gt;, queries='/future/u/okhattab/data/MSMARCO/queries.train.tsv', index_name='toy_example', overwrite=False, root='.ragatouille/', experiment='colbert', index_root=None, name='2024-12/24/15.52.48', rank=0, nranks=1, amp=True, gpus=1, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<p><code>ncells</code> is <code>1</code>.</p>
<div class="cell" data-outputid="7ed5b79f-e2fa-4aba-d22a-d8e90f6e91ea" data-execution_count="22">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">searcher.config.ncells</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>1</code></pre>
</div>
</div>
<p>From my previous amblings through the codebase, and which will see later on, I learned that <code>ncells</code> is synonymous with the <img src="https://latex.codecogs.com/png.latex?n_%7Bprobe%7D"> parameter in the ColBERTv2 and PLAID ColBERTv2 papers (i.e.&nbsp;the number of centroids closest to each query token). In the papers they use values of 1, 4, and 8. I’ll pick a value of <code>4</code>.</p>
<div class="cell" data-outputid="607b13a5-da93-48ea-d9a0-40885ff730d3" data-execution_count="23">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">searcher.config.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb43-2">searcher.config.ncells</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>4</code></pre>
</div>
</div>
<p>I’ll now pass <code>config</code> to <code>Searcher.ranker.rank</code> along with my encoded query <code>Q</code>:</p>
<div class="cell" data-outputid="5fde9ef4-3ae5-4553-ad55-4180a9857c55" data-execution_count="24">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">searcher.ranker.rank(config<span class="op" style="color: #5E5E5E;">=</span>searcher.config, Q<span class="op" style="color: #5E5E5E;">=</span>Q)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>([0, 2, 1], [27.6875, 22.28125, 13.953125])</code></pre>
</div>
</div>
<p>Major success!! I now see three passage IDs and their corresponding scores, an exact match with RAGatouille’s results.</p>
<div class="cell" data-outputid="d8e74f8d-3f01-4cd0-aedc-bca25c620d83" data-execution_count="25">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>[{'content': 'Python is a programming language. It is easy to learn',
  'score': 27.6875,
  'rank': 1,
  'document_id': '8aa5aade-10d5-4144-b634-c7866578b43c',
  'passage_id': 0},
 {'content': 'Python was created by Guido van Rossum in 1991',
  'score': 22.28125,
  'rank': 2,
  'document_id': '12352328-9bb1-4a51-896e-a002d3548adc',
  'passage_id': 2},
 {'content': 'Java is a popular coding language used in many applications',
  'score': 13.953125,
  'rank': 3,
  'document_id': '1fe9788e-ccec-4b9e-a004-14acc657915e',
  'passage_id': 1}]</code></pre>
</div>
</div>
<p>At this point I felt confident in the threads I was pulling and could now dig deeper and start recreating each stage of the PLAID scoring pipeline, starting with Stage 1.</p>
</section>
<section id="stage-1-initial-candidate-generation" class="level2">
<h2 class="anchored" data-anchor-id="stage-1-initial-candidate-generation">Stage 1: Initial Candidate Generation</h2>
<p>In Stage 1, we retrieve the passage IDs corresponding to the <code>ncells</code> centroid IDs neareest to each of the query tokens. I have set <code>ncells</code> to 4 and have 32 query tokens so we’re dealing with a maximum of 4 x 32 = 128 centroid IDs.</p>
<p>The first promising line in <code>Searcher.ranker.rank</code> is <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/search/index_storage.py#L90">the call to <code>retrieve</code></a>:</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">if</span> pids <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb49-2">    pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.retrieve(config, Q)</span></code></pre></div>
<section id="searcher.ranker.retrieve" class="level3">
<h3 class="anchored" data-anchor-id="searcher.ranker.retrieve"><code>Searcher.ranker.retrieve</code></h3>
<div class="cell" data-outputid="68dbbf65-0afc-4456-de7e-481aa0e4faae" data-execution_count="26">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">searcher.ranker.retrieve</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.search.index_storage.IndexScorer.retrieve</b><br>def retrieve(config, Q)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/search/index_storage.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 77);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<div class="cell" data-outputid="48688f7e-6996-4f2c-e991-be956644b074" data-execution_count="27">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.retrieve(searcher.config, Q)</span>
<span id="cb51-2">pids, centroid_scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(tensor([0, 1, 2], device='cuda:0', dtype=torch.int32), torch.Size([64, 32]))</code></pre>
</div>
</div>
<p>This is where I start to get really excited. I’m seeing abstract concepts in a research paper come to life! <code>pids</code> is now familiar—the three indexes <code>0</code>, <code>1</code>, and <code>2</code>. What’s more interesting is <code>centroid_scores</code> which has 64 rows and 32 columns. We know from the PLAID paper that the MaxSim scores between centroids and query tokens is matrix with number of rows being the number of centroids and the number of columns being the number of tokens.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" title="Section 4.1 from the PLAID ColBERTv2 Paper" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Section 4.1 from the PLAID ColBERTv2 Paper</figcaption><p></p>
</figure>
</div>
<p>Looking <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/search/index_storage.py#L77">inside of <code>Searcher.ranker.retrieve</code></a> we see that it calls <code>Searcher.ranker.generate_candidates</code>:</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.generate_candidates(config, Q)</span></code></pre></div>
</section>
<section id="generate_candidates" class="level3">
<h3 class="anchored" data-anchor-id="generate_candidates"><code>generate_candidates</code></h3>
<div class="cell" data-outputid="95fba38b-fef8-4847-b8b3-94a3b47abccb" data-execution_count="28">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">searcher.ranker.generate_candidates</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.search.candidate_generation.CandidateGeneration.generate_candidates</b><br>def generate_candidates(config, Q)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/search/candidate_generation.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 45);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<p>This will only be a brief pit stop. There are three lines of interest:</p>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">Q <span class="op" style="color: #5E5E5E;">=</span> Q.squeeze(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb55-2">Q <span class="op" style="color: #5E5E5E;">=</span> Q.cuda().half()</span>
<span id="cb55-3"></span>
<span id="cb55-4">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.generate_candidate_pids(Q, ncells)</span></code></pre></div>
<div class="cell" data-outputid="0418b741-08b0-45ba-8cc4-984c312cd429" data-execution_count="29">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">Q <span class="op" style="color: #5E5E5E;">=</span> Q.squeeze(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb56-2">Q.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>torch.Size([32, 128])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">Q <span class="op" style="color: #5E5E5E;">=</span> Q.cuda().half()</span></code></pre></div>
</div>
<div class="cell" data-outputid="2ef50c3e-9288-449e-a656-836d4361d88c" data-execution_count="31">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">searcher.ranker.generate_candidates</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.search.candidate_generation.CandidateGeneration.generate_candidates</b><br>def generate_candidates(config, Q)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/search/candidate_generation.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 45);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<div class="cell" data-outputid="f333e2c3-12b7-4ae9-885d-3af5c98dde09" data-execution_count="32">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">cells, scores <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.generate_candidates(searcher.config, Q)</span>
<span id="cb60-2">cells.shape, scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>(torch.Size([3]), torch.Size([64, 32]))</code></pre>
</div>
</div>
<p>There’s that 64 x 32 shape again.</p>
<div class="cell" data-outputid="09e75872-fded-4321-e776-ac1c3e172bae" data-execution_count="33">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">cells</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>tensor([0, 1, 2], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<p>I’m not entirely sure what <code>cells</code> is (I’m tempted to say it’s our passage IDs based on the values). Let’s look at <code>get_candidate_pids</code> first:</p>
</section>
<section id="generate_candidate_pids" class="level3">
<h3 class="anchored" data-anchor-id="generate_candidate_pids"><code>generate_candidate_pids</code></h3>
<p>Another quick stop, we see the following two very interesting line:</p>
<div class="sourceCode" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">cells, scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.get_cells(Q, ncells)</span>
<span id="cb64-2"></span>
<span id="cb64-3">pids, cell_lengths <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ivf.lookup(cells)</span></code></pre></div>
<p>From reading the paper, I know that in Stage 1 we get the centroid IDs that are close to the query tokens, which I think is what <code>get_cells</code> does. I also know that the PLAID index stores a mapping between passage IDs and centroid IDs, which is what I think <code>ivf.lookup</code> is looking up!</p>
</section>
<section id="get_cells" class="level3">
<h3 class="anchored" data-anchor-id="get_cells"><code>get_cells</code></h3>
<div class="sourceCode" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="kw" style="color: #003B4F;">def</span> get_cells(<span class="va" style="color: #111111;">self</span>, Q, ncells):</span>
<span id="cb65-2">    scores <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.codec.centroids <span class="op" style="color: #5E5E5E;">@</span> Q.T)</span>
<span id="cb65-3">    <span class="cf" style="color: #003B4F;">if</span> ncells <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>:</span>
<span id="cb65-4">        cells <span class="op" style="color: #5E5E5E;">=</span> scores.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb65-5">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb65-6">        cells <span class="op" style="color: #5E5E5E;">=</span> scores.topk(ncells, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).indices.permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>)  <span class="co" style="color: #5E5E5E;"># (32, ncells)</span></span>
<span id="cb65-7">    cells <span class="op" style="color: #5E5E5E;">=</span> cells.flatten().contiguous()  <span class="co" style="color: #5E5E5E;"># (32 * ncells,)</span></span>
<span id="cb65-8">    cells <span class="op" style="color: #5E5E5E;">=</span> cells.unique(<span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb65-9">    <span class="cf" style="color: #003B4F;">return</span> cells, scores</span></code></pre></div>
<p>The first line is critical: <code>self.codec.centroids @ Q.T</code> is almost verbatim the matrix multiplication formula in the paper. This confirms that the 64 x 32 shape of <code>scores</code> is number of centroids x number of query tokens!</p>
<div class="cell" data-outputid="001e0d17-a842-48fa-f583-866aac965eea" data-execution_count="34">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">searcher.ranker.codec.centroids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>torch.Size([64, 128])</code></pre>
</div>
</div>
<p>There are indeed 64 centroids, each of them with 128 dimensions. So cool to see!!</p>
<div class="cell" data-outputid="e6692878-b07b-4c2f-863c-569c90ad2d50" data-execution_count="35">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">_scores <span class="op" style="color: #5E5E5E;">=</span> (searcher.ranker.codec.centroids <span class="op" style="color: #5E5E5E;">@</span> Q.T)</span>
<span id="cb68-2">_scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>torch.Size([64, 32])</code></pre>
</div>
</div>
<div class="cell" data-outputid="a724de6c-e23d-4609-fc1a-f1ab9010ab6b" data-execution_count="36">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">(scores <span class="op" style="color: #5E5E5E;">==</span> _scores).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor(1., device='cuda:0')</code></pre>
</div>
</div>
<p>The next line of interest is:</p>
<div class="sourceCode" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">cells <span class="op" style="color: #5E5E5E;">=</span> scores.topk(ncells, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).indices.permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>)  <span class="co" style="color: #5E5E5E;"># (32, ncells)</span></span></code></pre></div>
<div class="cell" data-outputid="3894ec15-d048-4d18-81a2-3e72a7028a14" data-execution_count="37">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>torch.Size([64, 32])</code></pre>
</div>
</div>
<div class="cell" data-outputid="c0ea0697-8c08-4dcd-fe54-b63d4c460e64" data-execution_count="38">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">scores</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor([[ 0.0879,  0.0498,  0.0136,  ...,  0.0586,  0.0564,  0.0699],
        [ 0.0798, -0.0043,  0.0223,  ..., -0.0271, -0.0166, -0.0172],
        [ 0.2053,  0.0300,  0.1144,  ...,  0.0100,  0.0226,  0.0177],
        ...,
        [ 0.4587,  0.9458,  0.1954,  ...,  0.9507,  0.9482,  0.9482],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
        [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000]],
       device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p><code>scores.topk</code> seems to return the scores corresponding to the top-4 cosine similarities (between centroids and query tokens) for each token.</p>
<div class="cell" data-outputid="7f5c02f1-2af0-4466-c5df-dd08277d50c0" data-execution_count="39">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">scores.topk(<span class="dv" style="color: #AD0000;">4</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>tensor([[0.5786, 0.9521, 0.7397, 0.7510, 0.9395, 0.5850, 0.5859, 0.9131, 0.6782,
         0.5186, 0.6353, 0.7104, 0.9209, 0.9014, 0.9443, 0.9473, 0.9434, 0.9497,
         0.9468, 0.9331, 0.9355, 0.9233, 0.9370, 0.9336, 0.7026, 0.9468, 0.9131,
         0.7529, 0.9517, 0.9482, 0.9448, 0.9429],
        [0.5361, 0.8901, 0.6255, 0.6245, 0.9097, 0.5220, 0.7354, 0.8682, 0.6260,
         0.4663, 0.5654, 0.6030, 0.8486, 0.8306, 0.9429, 0.8979, 0.8950, 0.8960,
         0.8965, 0.8799, 0.8892, 0.8770, 0.8794, 0.8774, 0.5869, 0.8921, 0.8418,
         0.6328, 0.8931, 0.9009, 0.8970, 0.8994],
        [0.7129, 0.9458, 0.4612, 0.4766, 0.9658, 0.4229, 0.5332, 0.9219, 0.7002,
         0.4092, 0.4729, 0.5034, 0.9111, 0.8955, 0.8872, 0.9487, 0.9458, 0.9497,
         0.9492, 0.9375, 0.9419, 0.9312, 0.9380, 0.9365, 0.4958, 0.9453, 0.9048,
         0.4829, 0.9482, 0.9507, 0.9482, 0.9482],
        [0.4753, 0.8882, 0.3442, 0.3616, 0.8799, 0.3958, 0.5195, 0.8589, 0.6108,
         0.4077, 0.4324, 0.4333, 0.8438, 0.8281, 0.8872, 0.8945, 0.8901, 0.8955,
         0.8926, 0.8745, 0.8813, 0.8687, 0.8774, 0.8745, 0.4360, 0.8911, 0.8394,
         0.3711, 0.8911, 0.8955, 0.8911, 0.8916]], device='cuda:0',
       dtype=torch.float16)</code></pre>
</div>
</div>
<p>The first value, <code>0.5786</code> represents the cosine similarity (dot product) between a centroid and the first query token.</p>
<div class="cell" data-outputid="48eeef66-91b6-4242-dee7-f6108e7acd93" data-execution_count="40">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">cells <span class="op" style="color: #5E5E5E;">=</span> scores.topk(<span class="dv" style="color: #AD0000;">4</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).indices.permute(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb79-2">cells.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>torch.Size([32, 4])</code></pre>
</div>
</div>
<p>The following line flattens out the 32 x 4 matrix into a 128-value 1D tensor.</p>
<div class="cell" data-outputid="7f891a56-005a-4266-efab-077890ecf51c" data-execution_count="41">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">cells <span class="op" style="color: #5E5E5E;">=</span> cells.flatten().contiguous()  <span class="co" style="color: #5E5E5E;"># (32 * ncells,)</span></span>
<span id="cb81-2">cells.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>torch.Size([128])</code></pre>
</div>
</div>
<p>The following gets the unique centroid IDs. In this case there are 10 unique centroids that give the top-4 cosine similarity with all 32 tokens.</p>
<div class="cell" data-outputid="b58ea42b-8e86-4b90-9b5a-f0575f063cca" data-execution_count="42">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">cells <span class="op" style="color: #5E5E5E;">=</span> cells.unique(<span class="bu" style="color: null;">sorted</span><span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb83-2">cells.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>torch.Size([10])</code></pre>
</div>
</div>
<div class="cell" data-outputid="e2f9020b-881b-4884-e315-c923918daca5" data-execution_count="43">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">cells</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>tensor([ 7,  8, 14, 19, 24, 29, 31, 38, 41, 61], device='cuda:0')</code></pre>
</div>
</div>
<p>Confirming that we can recreate the cosine similarity (0.5768) betweeen the first centroid (with ID = 7) and the first query token:</p>
<div class="cell" data-outputid="6d4924ca-6e71-4936-b6b8-14254db44352" data-execution_count="44">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">(searcher.ranker.codec.centroids[<span class="dv" style="color: #AD0000;">7</span>] <span class="op" style="color: #5E5E5E;">*</span> Q[<span class="dv" style="color: #AD0000;">0</span>].T).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>UserWarning: The use of `x.T` on tensors of dimension other than 2 to reverse their shape is deprecated and it will throw an error in a future release. Consider `x.mT` to transpose batches of matrices or `x.permute(*torch.arange(x.ndim - 1, -1, -1))` to reverse the dimensions of a tensor. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3683.)
  (searcher.ranker.codec.centroids[7] * Q[0].T).sum()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>tensor(0.5786, device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
</section>
<section id="ivf" class="level3">
<h3 class="anchored" data-anchor-id="ivf"><code>ivf</code></h3>
<p>The next line in <code>generate_candidate_pids</code> gets to the core of PLAID: the mapping between centroid IDs and passage IDs:</p>
<div class="sourceCode" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">pids, cell_lengths <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.ivf.lookup(cells)</span></code></pre></div>
<div class="cell" data-outputid="1391cb5b-fe7d-4229-a6bd-0da84227bd8f" data-execution_count="45">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">searcher.ranker.ivf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>&lt;colbert.search.strided_tensor.StridedTensor at 0x7d0a4f48e350&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="b02815c1-029b-4413-839e-f6160abd4a70" data-execution_count="46">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">pids, cell_lengths <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.ivf.lookup(cells)</span>
<span id="cb93-2">pids.shape, cell_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>(torch.Size([10]), torch.Size([10]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="fb9ce7c4-eaba-413a-af3b-b6b1037b6721" data-execution_count="47">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">cells</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>tensor([ 7,  8, 14, 19, 24, 29, 31, 38, 41, 61], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="3d77e596-24d6-4c5a-aed5-27b918bf45ed" data-execution_count="48">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([0, 0, 1, 0, 1, 2, 2, 2, 0, 0], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<div class="cell" data-outputid="90bc17a1-5de4-471b-a870-0503153a166a" data-execution_count="49">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">cell_lengths</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])</code></pre>
</div>
</div>
<p>How I interpret this: we have 10 centroid IDs (<code>cells</code>) and each are mapped to 1 passage ID. Now, given that we only have 3 passages to work with, there are some repeats (passage ID <code>0</code> corresponds to both centroid IDs <code>7</code> and <code>8</code>).</p>
<p>I’ll leave my full exploration of how <code>ivf</code> is constructed for a future video/blog post, but as an aside, I do want to highlight some things I learned, starting with the fact that our <code>index_path</code> contains a lot of interesting files!</p>
<div class="cell" data-outputid="00e35cd1-afb1-4adb-899b-d408ed08f36d" data-execution_count="50">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">path <span class="op" style="color: #5E5E5E;">=</span> Path(index_path)</span>
<span id="cb101-2">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>(#12) [Path('.ragatouille/colbert/indexes/toy_example/0.residuals.pt'),Path('.ragatouille/colbert/indexes/toy_example/collection.json'),Path('.ragatouille/colbert/indexes/toy_example/pid_docid_map.json'),Path('.ragatouille/colbert/indexes/toy_example/metadata.json'),Path('.ragatouille/colbert/indexes/toy_example/buckets.pt'),Path('.ragatouille/colbert/indexes/toy_example/doclens.0.json'),Path('.ragatouille/colbert/indexes/toy_example/centroids.pt'),Path('.ragatouille/colbert/indexes/toy_example/0.codes.pt'),Path('.ragatouille/colbert/indexes/toy_example/avg_residual.pt'),Path('.ragatouille/colbert/indexes/toy_example/plan.json'),Path('.ragatouille/colbert/indexes/toy_example/0.metadata.json'),Path('.ragatouille/colbert/indexes/toy_example/ivf.pid.pt')]</code></pre>
</div>
</div>
<p>Each passage contains 13 tokens:</p>
<div class="cell" data-outputid="dd501c7a-e88c-47e3-976e-ba35ab16ea64" data-execution_count="51">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">json.load(<span class="bu" style="color: null;">open</span>(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'doclens.0.json'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>[13, 13, 13]</code></pre>
</div>
</div>
<p>For a total of 39 token embeddings:</p>
<div class="cell" data-outputid="581f9d8a-5883-4c48-ac05-a3d596ee86ae" data-execution_count="52">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">metadata <span class="op" style="color: #5E5E5E;">=</span> json.load(<span class="bu" style="color: null;">open</span>(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'0.metadata.json'</span>))</span>
<span id="cb105-2">metadata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>{'passage_offset': 0,
 'num_passages': 3,
 'num_embeddings': 39,
 'embedding_offset': 0}</code></pre>
</div>
</div>
<p>There are indeed 64 centroids.</p>
<div class="cell" data-outputid="445ac68c-7e3b-47bb-f634-02b363076e03" data-execution_count="53">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">centroids <span class="op" style="color: #5E5E5E;">=</span> torch.load(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'centroids.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb107-2">centroids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>torch.Size([64, 128])</code></pre>
</div>
</div>
<p>There exists a mapping between the 64 centroid IDs and the 39 passage token embeddings</p>
<div class="cell" data-outputid="ab6ba143-47c3-4137-ad8e-fe8dd91c59fa" data-execution_count="54">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">codes <span class="op" style="color: #5E5E5E;">=</span> torch.load(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'0.codes.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb109-2">codes.shape, codes.<span class="bu" style="color: null;">min</span>(), codes.<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>(torch.Size([39]), tensor(0, dtype=torch.int32), tensor(61, dtype=torch.int32))</code></pre>
</div>
</div>
<p>There exists 39 residuals, one for each passage token! I’m not sure why there are only 64 dimensions.</p>
<div class="cell" data-outputid="0d13cdc5-103e-46d0-cc2f-e7f7fa85f828" data-execution_count="55">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1">residuals <span class="op" style="color: #5E5E5E;">=</span> torch.load(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'0.residuals.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb111-2">residuals.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>torch.Size([39, 64])</code></pre>
</div>
</div>
<p>The values of the residuals are integers!</p>
<div class="cell" data-outputid="96d44ade-01ab-4d05-8e91-1034be9b86ec" data-execution_count="56">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">residuals[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>tensor([191, 183,  50,  66, 203], dtype=torch.uint8)</code></pre>
</div>
</div>
<p>Okay, that’s enough of an aside. The final piece of interest in <code>generate_candidates</code> are the lines</p>
<div class="sourceCode" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.generate_candidate_pids(Q, ncells)</span>
<span id="cb115-2">sorter <span class="op" style="color: #5E5E5E;">=</span> pids.sort()</span>
<span id="cb115-3">pids <span class="op" style="color: #5E5E5E;">=</span> sorter.values</span>
<span id="cb115-4"></span>
<span id="cb115-5">pids, pids_counts <span class="op" style="color: #5E5E5E;">=</span> torch.unique_consecutive(pids, return_counts<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell" data-outputid="7442a075-ac5a-4cb5-965d-c9b26ea9fda5" data-execution_count="57">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.generate_candidate_pids(Q, ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb116-2">pids.shape, centroid_scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>(torch.Size([10]), torch.Size([64, 32]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="b831553f-f3f6-4821-8a5b-e60781ed0d9b" data-execution_count="58">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1">sorter <span class="op" style="color: #5E5E5E;">=</span> pids.sort()</span>
<span id="cb118-2">sorter</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>torch.return_types.sort(
values=tensor([0, 0, 0, 0, 0, 1, 1, 2, 2, 2], device='cuda:0', dtype=torch.int32),
indices=tensor([1, 0, 8, 3, 9, 4, 2, 7, 5, 6], device='cuda:0'))</code></pre>
</div>
</div>
<div class="cell" data-outputid="c5e52d1e-077f-4b94-99df-2dda31dec572" data-execution_count="59">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1">pids <span class="op" style="color: #5E5E5E;">=</span> sorter.values</span>
<span id="cb120-2">pids, pids_counts <span class="op" style="color: #5E5E5E;">=</span> torch.unique_consecutive(pids, return_counts<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb120-3">pids.shape, pids_counts.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>(torch.Size([3]), torch.Size([3]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="4970859c-2f07-4c1d-9572-b7d29ddc2c12" data-execution_count="60">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>tensor([0, 1, 2], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<div class="cell" data-outputid="23f5ecd1-471f-4b75-8bb4-f3a86670b0e5" data-execution_count="61">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">pids_counts</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>tensor([5, 2, 3], device='cuda:0')</code></pre>
</div>
</div>
<p>Let’s recap what we’ve done:</p>
<ul>
<li>We picked a number of centroid IDs nearest to each query token that we’re interested in (<code>ncells = 4</code>)</li>
<li>We calculated the cosine similarity between centroids and query tokens (<code>searcher.ranker.codec.centroids @ Q.T</code>)</li>
<li>We picked the top-4 scores per query token (<code>scores.topk</code>) and grabbed their indices along dim=0 (rows).</li>
<li>We then reduced those 32 x 4 = 128 centroid IDs down to the 10 unique ones.</li>
<li>And looked them up in our index to get the corresponding 10 passage IDs.</li>
<li>We reduced those to the 3 unique passage IDs.</li>
</ul>
<p>These are our candidate passages at the end of Stage 1!</p>
</section>
</section>
<section id="stage-2-centroid-interaction-with-pruning" class="level2">
<h2 class="anchored" data-anchor-id="stage-2-centroid-interaction-with-pruning">Stage 2: Centroid Interaction with Pruning</h2>
<p>We now want to keep PIDs corresponding to centroids that exceed a minimum threshold cosine similarity with query tokens.</p>
<p>Now that we’ve gotten the initial candidate <code>pids</code>, the next line of interest in <code>rank</code> is:</p>
<div class="sourceCode" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1">scores, pids <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.score_pids(config, Q, pids, centroid_scores)</span></code></pre></div>
<div class="cell" data-outputid="36c10cbe-9555-4eac-b579-36c06a2c0c0e" data-execution_count="62">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">searcher.ranker.score_pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.search.index_storage.IndexScorer.score_pids</b><br>def score_pids(config, Q, pids, centroid_scores)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.10/dist-packages/colbert/search/index_storage.pyAlways supply a flat list or tensor for `pids`.

Supply sizes Q = (1 | num_docs, *, dim) and D = (num_docs, *, dim).
If Q.size(0) is 1, the matrix will be compared with all passages.
Otherwise, each query matrix will be compared against the *aligned* passage.</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 111);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<p><code>score_pids</code> will handle both Stage 2 and Stage 3.</p>
<section id="picking-centroids-with-scores-above-threshold" class="level3">
<h3 class="anchored" data-anchor-id="picking-centroids-with-scores-above-threshold">Picking centroids with scores above threshold</h3>
<p>The first important line in <code>score_pids</code> is the following:</p>
<div class="sourceCode" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">idx <span class="op" style="color: #5E5E5E;">=</span> centroid_scores.<span class="bu" style="color: null;">max</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).values <span class="op" style="color: #5E5E5E;">&gt;=</span> config.centroid_score_threshold</span></code></pre></div>
<p>I’ll refresh our <code>pids</code> and <code>centroid_scores</code> to the values they would have inside of <code>rank</code>:</p>
<div class="cell" data-outputid="e93cd71f-ead6-48e4-b76a-ec375004c1bc" data-execution_count="63">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">Q <span class="op" style="color: #5E5E5E;">=</span> searcher.encode(q)</span>
<span id="cb129-2">Q.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>torch.Size([1, 32, 128])</code></pre>
</div>
</div>
<div class="cell" data-outputid="ff882296-ba0b-45b1-df87-35db539b4e39" data-execution_count="64">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">pids, centroid_scores <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.retrieve(searcher.config, Q)</span>
<span id="cb131-2">pids.shape, centroid_scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>(torch.Size([3]), torch.Size([64, 32]))</code></pre>
</div>
</div>
<p>The centroid score threshold is set in the <code>config</code></p>
<div class="cell" data-outputid="f2890fb8-bd7a-4155-c710-3abfb0f0ec03" data-execution_count="65">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">searcher.config.centroid_score_threshold</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>0.5</code></pre>
</div>
</div>
<div class="cell" data-outputid="0d115378-2cd9-4389-d419-c47f0280cb22" data-execution_count="66">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">idx <span class="op" style="color: #5E5E5E;">=</span> centroid_scores.<span class="bu" style="color: null;">max</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).values <span class="op" style="color: #5E5E5E;">&gt;=</span> searcher.config.centroid_score_threshold</span>
<span id="cb135-2">idx.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>torch.Size([64])</code></pre>
</div>
</div>
<p><code>idx</code> is a boolean tensor, <code>True</code> for rows where the maximum cosine similarity is at or above the threshold and <code>False</code> for where it’s under it.</p>
<div class="cell" data-outputid="3a5dec17-f8a6-493e-b362-f7cb0b97cae7" data-execution_count="67">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">idx</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>tensor([False, False, False, False, False, False, False,  True,  True, False,
        False, False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False, False, False, False,  True,
        False,  True, False, False, False, False, False, False,  True, False,
        False,  True, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False,  True, False, False], device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="looking-up-codes-centroid-ids-corresponding-to-passage-tokens" class="level3">
<h3 class="anchored" data-anchor-id="looking-up-codes-centroid-ids-corresponding-to-passage-tokens">Looking up codes (centroid IDs corresponding to passage tokens)</h3>
<p>The next line of interest in <code>score_pids</code> is:</p>
<div class="sourceCode" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">codes_packed, codes_lengths <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.embeddings_strided.lookup_codes(pids_)</span></code></pre></div>
<div class="cell" data-outputid="fb70d130-b532-48be-93d0-4a2012ccf387" data-execution_count="68">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">searcher.ranker.embeddings_strided</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>&lt;colbert.indexing.codecs.residual_embeddings_strided.ResidualEmbeddingsStrided at 0x7d0a4f48d180&gt;</code></pre>
</div>
</div>
<p>A key point here, which aligns with what I understood from the paper: we are looking up centroid IDs corresponding to the <em>passage tokens</em> in our passage IDs. Note that there are 39 values in <code>codes_packed</code> which correspond to the 39 passage token embeddings. I’ll leave me exploration for how I got this conclusion for a future video/blog post.</p>
<div class="cell" data-outputid="86ada23f-a306-472a-b667-f51d4d7e5e77" data-execution_count="69">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">codes_packed, codes_lengths <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.embeddings_strided.lookup_codes(pids)</span>
<span id="cb142-2">codes_packed.shape, codes_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>(torch.Size([39]), torch.Size([3]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="24fd298d-dcc6-4f3b-ac0f-8fbda9d8d59f" data-execution_count="70">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">codes_packed</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>tensor([41,  8, 61,  7,  7, 47, 60, 19, 19,  1, 42, 46, 41, 24, 58, 58, 14, 14,
         2,  3, 60, 23, 12,  2, 16, 48, 29, 38, 31, 37,  9,  6, 57,  5, 17, 13,
         0,  0, 29], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<p>Note that <code>codes_lengths</code> tells us how many tokens there are in each passage.</p>
<div class="cell" data-outputid="da17ddfb-81c5-46f1-ea56-5ac4aeaaa7a8" data-execution_count="71">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">codes_lengths</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>tensor([13, 13, 13])</code></pre>
</div>
</div>
<p>From the PLAID paper (emphasis mine):</p>
<blockquote class="blockquote">
<p>The procedure works as follows. Recall that <img src="https://latex.codecogs.com/png.latex?S_%7Bc,q%7D"> from Equation 2 stores the relevance scores for each centroid with respect to the query tokens. Suppose <img src="https://latex.codecogs.com/png.latex?I"> is <strong>the list of the centroid indices mapped to each of the tokens in the candidate set</strong>. Furthermore, let <img src="https://latex.codecogs.com/png.latex?S_%7Bc,q%7D"> denote the i-th row of <img src="https://latex.codecogs.com/png.latex?S_%7Bc,q%7D">. Then PLAID constructs the centroid-based approximate scores <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7BD%7D"> as:</p>
</blockquote>
</section>
<section id="picking-scores-for-centroid-ids-corresponding-to-passage-tokens" class="level3">
<h3 class="anchored" data-anchor-id="picking-scores-for-centroid-ids-corresponding-to-passage-tokens">Picking scores for centroid IDs corresponding to passage tokens</h3>
<p>The next line in <code>score_pids</code> does just that: pick the centroid IDs that correspond to the passage tokens of interest:</p>
<div class="cell" data-outputid="b258b905-4606-4f9f-828a-763f100965ae" data-execution_count="72">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1">idx_ <span class="op" style="color: #5E5E5E;">=</span> idx[codes_packed.<span class="bu" style="color: null;">long</span>()]</span>
<span id="cb148-2">idx_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>torch.Size([39])</code></pre>
</div>
</div>
<div class="cell" data-outputid="621559b8-2af6-4694-8f74-2216dc066afa" data-execution_count="73">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">idx_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>tensor([ True,  True,  True,  True,  True, False, False,  True,  True, False,
        False, False,  True, False, False, False,  True,  True, False, False,
        False, False, False, False, False, False,  True,  True,  True, False,
        False, False, False, False, False, False, False, False,  True],
       device='cuda:0')</code></pre>
</div>
</div>
<p>We then use this to index back into <code>codes_packed</code> to select the centroid IDs that are at or above the threshold of 0.5. There are 14 such centroid IDs.</p>
<div class="cell" data-outputid="0c38ced6-9d9a-41ad-e7ac-39f31949d246" data-execution_count="74">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">codes_packed_ <span class="op" style="color: #5E5E5E;">=</span> codes_packed[idx_]</span>
<span id="cb152-2">codes_packed_, codes_packed_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>(tensor([41,  8, 61,  7,  7, 19, 19, 41, 14, 14, 29, 38, 31, 29],
        device='cuda:0', dtype=torch.int32),
 torch.Size([14]))</code></pre>
</div>
</div>
<p>Finally, we can index into our scores and pick out the scores that correspond to these centroid IDs:</p>
<div class="cell" data-outputid="5de36e31-3d15-42ee-fc56-4239f69beeb1" data-execution_count="75">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1">approx_scores_ <span class="op" style="color: #5E5E5E;">=</span> centroid_scores[codes_packed_.<span class="bu" style="color: null;">long</span>()]</span>
<span id="cb154-2">approx_scores_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>torch.Size([14, 32])</code></pre>
</div>
</div>
<p>We now have the scores between 14 centroids that are mapped to our candidate passage ID’s tokens and all 32 query tokens.</p>
</section>
<section id="max-reducing-scores-to-get-1-score-per-passage-id" class="level3">
<h3 class="anchored" data-anchor-id="max-reducing-scores-to-get-1-score-per-passage-id">Max-reducing scores to get 1 score per passage ID</h3>
<p>The last step of Stage 2 is to max-reduce the scores down to 1 per passage. The following lines are of interest:</p>
<div class="sourceCode" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1">pruned_codes_strided <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(idx_, codes_lengths, use_gpu<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.use_gpu)</span>
<span id="cb156-2">pruned_codes_padded, pruned_codes_mask <span class="op" style="color: #5E5E5E;">=</span> pruned_codes_strided.as_padded_tensor()</span>
<span id="cb156-3">pruned_codes_lengths <span class="op" style="color: #5E5E5E;">=</span> (pruned_codes_padded <span class="op" style="color: #5E5E5E;">*</span> pruned_codes_mask).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb156-4"></span>
<span id="cb156-5">...</span>
<span id="cb156-6"></span>
<span id="cb156-7">approx_scores_strided <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(approx_scores_, pruned_codes_lengths, use_gpu<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.use_gpu)</span>
<span id="cb156-8">approx_scores_padded, approx_scores_mask <span class="op" style="color: #5E5E5E;">=</span> approx_scores_strided.as_padded_tensor()</span>
<span id="cb156-9">approx_scores_ <span class="op" style="color: #5E5E5E;">=</span> colbert_score_reduce(approx_scores_padded, approx_scores_mask, config)</span></code></pre></div>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1"><span class="im" style="color: #00769E;">from</span> colbert.search.strided_tensor <span class="im" style="color: #00769E;">import</span> StridedTensor, StridedTensorCore</span></code></pre></div>
</div>
<div class="cell" data-outputid="b39c3799-5e2c-4f14-845f-8a32abbcf118" data-execution_count="77">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">idx_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>torch.Size([39])</code></pre>
</div>
</div>
<div class="cell" data-outputid="f1ee182c-bce3-4a39-a0d5-5d4f4d019b00" data-execution_count="78">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1">pruned_codes_strided <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(idx_, codes_lengths)</span>
<span id="cb160-2">pruned_codes_strided</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<pre><code>&lt;colbert.search.strided_tensor.StridedTensor at 0x7d0a4f688e20&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="996c7d02-fb8c-4a5f-9f21-e2aa7bb21b0c" data-execution_count="79">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb162-1">pruned_codes_padded, pruned_codes_mask <span class="op" style="color: #5E5E5E;">=</span> pruned_codes_strided.as_padded_tensor()</span>
<span id="cb162-2">pruned_codes_padded.shape, pruned_codes_mask.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>(torch.Size([3, 13]), torch.Size([3, 13]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="82517510-0348-43be-8690-523fc6f5ae9c" data-execution_count="80">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb164-1">pruned_codes_padded</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>tensor([[ True,  True,  True,  True,  True, False, False,  True,  True, False,
         False, False,  True],
        [False, False, False,  True,  True, False, False, False, False, False,
         False, False, False],
        [ True,  True,  True, False, False, False, False, False, False, False,
         False, False,  True]], device='cuda:0')</code></pre>
</div>
</div>
<p>My understanding of <code>StridedTensor</code> is still spotty, but from what I can see it allows the reshaping of values from a 1-D 39 to 3 x 13. In this way, we are organizing centroid IDs by both passage ID and by passage token.</p>
<div class="cell" data-outputid="e7433db9-70ab-44af-fa41-18fe6404cf1b" data-execution_count="81">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">pruned_codes_lengths <span class="op" style="color: #5E5E5E;">=</span> (pruned_codes_padded <span class="op" style="color: #5E5E5E;">*</span> pruned_codes_mask).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb166-2">pruned_codes_lengths</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>tensor([8, 2, 4], device='cuda:0')</code></pre>
</div>
</div>
<p>There are 8 centroids corresponding to tokens in the first passage that cross the score threshold, 2 for the second passage and 4 for the third.</p>
<p>Note that <code>pruned_codes_mask</code> is <code>True</code> everywhere so multiplying <code>pruned_codes_padded</code> by it keeps all of its values intact:</p>
<div class="cell" data-outputid="7e98c61b-266a-4b77-f81e-0299b1ab355b" data-execution_count="82">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">pruned_codes_mask</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True],
        [True, True, True, True, True, True, True, True, True, True, True, True,
         True],
        [True, True, True, True, True, True, True, True, True, True, True, True,
         True]], device='cuda:0')</code></pre>
</div>
</div>
<p>The next lines reshapes our <code>approx_scores_</code> similarly.</p>
<div class="cell" data-outputid="06dba42e-0787-4a39-f9ec-8175c0d480b1" data-execution_count="83">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">approx_scores_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>torch.Size([14, 32])</code></pre>
</div>
</div>
<div class="cell" data-outputid="5635151e-8e69-4ff1-ee67-a4ac607766eb" data-execution_count="84">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">approx_scores_strided <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(approx_scores_, pruned_codes_lengths)</span>
<span id="cb172-2">approx_scores_padded, approx_scores_mask <span class="op" style="color: #5E5E5E;">=</span> approx_scores_strided.as_padded_tensor()</span>
<span id="cb172-3">approx_scores_padded.shape, approx_scores_mask.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>(torch.Size([3, 8, 32]), torch.Size([3, 8, 1]))</code></pre>
</div>
</div>
<p>What’s interesting to note here is <code>approx_scores_mask</code>. We know from <code>pruned_codes_lengths</code> that there are 8 centroid IDs for the first passage, 2 for the second, and 4 for the third. <code>approx_scores_mask</code> flags <code>True</code> for valid values and <code>False</code> for padding values.</p>
<div class="cell" data-outputid="b978dcbb-6664-40e2-80ce-377875829f91" data-execution_count="85">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">approx_scores_mask</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>tensor([[[ True],
         [ True],
         [ True],
         [ True],
         [ True],
         [ True],
         [ True],
         [ True]],

        [[ True],
         [ True],
         [False],
         [False],
         [False],
         [False],
         [False],
         [False]],

        [[ True],
         [ True],
         [ True],
         [ True],
         [False],
         [False],
         [False],
         [False]]], device='cuda:0')</code></pre>
</div>
</div>
<p>We then pass these padded scores to <code>colbert_reduce</code> which performs the famous MaxSim operation:</p>
<div class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb176-1"><span class="im" style="color: #00769E;">from</span> colbert.modeling.colbert <span class="im" style="color: #00769E;">import</span> colbert_score, colbert_score_packed, colbert_score_reduce</span></code></pre></div>
</div>
<div class="cell" data-outputid="16c19812-d57a-4acd-fd42-d1a454d35caf" data-execution_count="87">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">approx_scores_ <span class="op" style="color: #5E5E5E;">=</span> colbert_score_reduce(approx_scores_padded, approx_scores_mask, searcher.config)</span>
<span id="cb177-2">approx_scores_</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>tensor([27.2812, 12.9844, 22.1719], device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>Note that these are not the same values as our RAGatouille results. Instead, these are intermediate scores.</p>
<p>Taking a look at <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/modeling/colbert.py#L132"><code>colbert_score_reduce</code></a> there are four main lines of interest in my opinion:</p>
<div class="sourceCode" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">D_padding <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">~</span>D_mask.view(scores_padded.size(<span class="dv" style="color: #AD0000;">0</span>), scores_padded.size(<span class="dv" style="color: #AD0000;">1</span>)).<span class="bu" style="color: null;">bool</span>()</span>
<span id="cb179-2">scores_padded[D_padding] <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">9999</span></span>
<span id="cb179-3">scores <span class="op" style="color: #5E5E5E;">=</span> scores_padded.<span class="bu" style="color: null;">max</span>(<span class="dv" style="color: #AD0000;">1</span>).values</span>
<span id="cb179-4">scores.<span class="bu" style="color: null;">sum</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell" data-outputid="089876b1-d49d-4115-89a2-a1b1b7f8ae1a" data-execution_count="88">
<div class="sourceCode cell-code" id="cb180" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb180-1">D_padding <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">~</span>approx_scores_mask.view(approx_scores_padded.size(<span class="dv" style="color: #AD0000;">0</span>), approx_scores_padded.size(<span class="dv" style="color: #AD0000;">1</span>)).<span class="bu" style="color: null;">bool</span>()</span>
<span id="cb180-2">approx_scores_padded[D_padding] <span class="op" style="color: #5E5E5E;">=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">9999</span></span>
<span id="cb180-3">approx_scores_padded.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>torch.Size([3, 8, 32])</code></pre>
</div>
</div>
<p>We take the max along dim=1, which is the dimension with centroid IDs corresponding to passage tokens. So, in other words, we are finding the maximum score between centroid and query token for each query token per passage.</p>
<div class="cell" data-outputid="a8ad482d-d01d-40e1-f180-eaff91d04c45" data-execution_count="89">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb182-1">scores <span class="op" style="color: #5E5E5E;">=</span> approx_scores_padded.<span class="bu" style="color: null;">max</span>(<span class="dv" style="color: #AD0000;">1</span>).values</span>
<span id="cb182-2">scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="89">
<pre><code>torch.Size([3, 32])</code></pre>
</div>
</div>
<p>Finally, we sum across query tokens per passage ID.</p>
<div class="cell" data-outputid="49fcb173-d810-4288-bc97-5039c5b9622b" data-execution_count="90">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1">scores.<span class="bu" style="color: null;">sum</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>tensor([27.2812, 12.9844, 22.1719], device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
</section>
<section id="picking-the-top-ndocs-passages" class="level3">
<h3 class="anchored" data-anchor-id="picking-the-top-ndocs-passages">Picking the top-ndocs passages</h3>
<p>The last step is to pick the top-<code>ndocs</code> passage IDs.</p>
<div class="cell" data-outputid="230765fc-4cdb-49d7-f107-24b83b2c0756" data-execution_count="91">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">searcher.config.ndocs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>256</code></pre>
</div>
</div>
<p><code>ndocs</code> is 256, much larger than the number of passages we have, so I’ll rank with <code>k=3</code>:</p>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1"><span class="cf" style="color: #003B4F;">if</span> searcher.config.ndocs <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">4</span> <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="bu" style="color: null;">len</span>(approx_scores_):</span>
<span id="cb188-2">    pids <span class="op" style="color: #5E5E5E;">=</span> pids[torch.topk(approx_scores_, k<span class="op" style="color: #5E5E5E;">=</span>(searcher.config.ndocs <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">4</span>)).indices]</span></code></pre></div>
</div>
<div class="cell" data-outputid="3bff81bf-0e59-49c7-95bf-25d63367f8a4" data-execution_count="93">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1">pids <span class="op" style="color: #5E5E5E;">=</span> pids[torch.topk(approx_scores_, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>).indices]</span>
<span id="cb189-2">pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>tensor([0, 2, 1], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<p>To recap Stage 2:</p>
<ul>
<li>We select centroid IDs that were both at/above our threshold of 0.5 AND corresponded to passage tokens for the passage IDs in our initial candidate pool from Stage 1.</li>
<li>We then do some reshaping so we can calculate the MaxSim score for each passage ID.</li>
<li>We pick the top-<code>ndocs</code> passages.</li>
</ul>
</section>
</section>
<section id="stage-3-centroid-interaction-wo-pruning" class="level2">
<h2 class="anchored" data-anchor-id="stage-3-centroid-interaction-wo-pruning">Stage 3: Centroid Interaction w/o Pruning</h2>
<p>We now have our candidate set from Stage 2. We lookup the centroid IDs for the passage tokens in these passage IDs:</p>
<div class="cell" data-outputid="a72ebd87-0213-4961-8129-4a8258cfe40d" data-execution_count="94">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">codes_packed, codes_lengths <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.embeddings_strided.lookup_codes(pids)</span>
<span id="cb191-2">codes_packed.shape, codes_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>(torch.Size([39]), torch.Size([3]))</code></pre>
</div>
</div>
<p>We don’t use the threshold for this step—all centroids, even those who have a maximum cosine similarity with query tokens being less than our threshold:</p>
<div class="cell" data-outputid="b2f5cc5d-b29c-464f-a01f-3b5234f36639" data-execution_count="95">
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb193-1">approx_scores <span class="op" style="color: #5E5E5E;">=</span> centroid_scores[codes_packed.<span class="bu" style="color: null;">long</span>()]</span>
<span id="cb193-2">approx_scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>torch.Size([39, 32])</code></pre>
</div>
</div>
<p>Note how we are now dealing with 39 centroids, not 14 like we did in Stage 2.</p>
<p>We do the same reshaping/padding as we did in Stage 2, and use <code>colbert_score_reduce</code> again:</p>
<div class="cell" data-outputid="0718761e-be31-48b6-9ce7-934557b67051" data-execution_count="96">
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb195-1">approx_scores_strided <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(approx_scores, codes_lengths)</span>
<span id="cb195-2">approx_scores_padded, approx_scores_mask <span class="op" style="color: #5E5E5E;">=</span> approx_scores_strided.as_padded_tensor()</span>
<span id="cb195-3">approx_scores <span class="op" style="color: #5E5E5E;">=</span> colbert_score_reduce(approx_scores_padded, approx_scores_mask, searcher.config)</span>
<span id="cb195-4">approx_scores</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>tensor([27.2812, 22.1875, 13.7266], device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>We then pick the top-<code>ndocs//4</code> passage IDs, in this case all 3 of our passage IDs.</p>
<div class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb197-1"><span class="cf" style="color: #003B4F;">if</span> searcher.config.ndocs <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">4</span> <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="bu" style="color: null;">len</span>(approx_scores):</span>
<span id="cb197-2">    pids <span class="op" style="color: #5E5E5E;">=</span> pids[torch.topk(approx_scores, k<span class="op" style="color: #5E5E5E;">=</span>(searcher.config.ndocs <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">4</span>)).indices]</span></code></pre></div>
</div>
<div class="cell" data-outputid="b688dbdb-376c-49f4-a878-2f43979cf23b" data-execution_count="98">
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb198-1">pids <span class="op" style="color: #5E5E5E;">=</span> pids[torch.topk(approx_scores, k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>).indices]</span>
<span id="cb198-2">pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>tensor([0, 2, 1], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<p>This is the candidate set at the end of Stage 3. Note that the scores are still not quite the same as RAGatouille, as these are intermediate scores.</p>
</section>
<section id="stage-4-final-ranking-with-decompression" class="level2">
<h2 class="anchored" data-anchor-id="stage-4-final-ranking-with-decompression">Stage 4: Final ranking with decompression</h2>
<p>We’re now in the final Stage of the PLAID scoring pipeline. We now get the full 128-dimension vectors for all of our passage ID’s tokens:</p>
<div class="cell" data-outputid="38c13003-3d32-4f12-81f9-dc4155f2e279" data-execution_count="99">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb200-1">D_packed, D_mask <span class="op" style="color: #5E5E5E;">=</span> searcher.ranker.lookup_pids(pids)</span>
<span id="cb200-2">D_packed.shape, D_mask.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>(torch.Size([39, 128]), torch.Size([3]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="64f16da5-3c21-42bb-bae9-f1f0bb4ef83a" data-execution_count="100">
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb202-1">D_packed[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>tensor(-0.0102, device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>Since we only have one query:</p>
<div class="cell" data-outputid="2451029d-5f1d-4ed0-cc96-efcad8ac5c6e" data-execution_count="101">
<div class="sourceCode cell-code" id="cb204" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb204-1">Q.size(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>1</code></pre>
</div>
</div>
<p>We use the following lines of code:</p>
<div class="cell" data-outputid="5add352b-4bb2-4ef3-ad1b-8a489b2f12c3" data-execution_count="102">
<div class="sourceCode cell-code" id="cb206" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb206-1">colbert_score_packed(Q, D_packed, D_mask, searcher.config)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>tensor([27.6875, 22.2812, 13.9531], device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>Looking into <code>colbert_score_packed</code>, here are the lines of interest:</p>
<div class="cell" data-outputid="c7b81dc9-d4d5-4883-ecc4-a00b06410a07" data-execution_count="103">
<div class="sourceCode cell-code" id="cb208" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb208-1">Q <span class="op" style="color: #5E5E5E;">=</span> Q.squeeze(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb208-2">Q.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="103">
<pre><code>torch.Size([32, 128])</code></pre>
</div>
</div>
<p>We calculate the cosine similarity between each passage token and each query token:</p>
<div class="cell" data-outputid="35cfe4d1-0ff8-4689-9b9a-4fd9641ed38f" data-execution_count="104">
<div class="sourceCode cell-code" id="cb210" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb210-1">scores <span class="op" style="color: #5E5E5E;">=</span> D_packed <span class="op" style="color: #5E5E5E;">@</span> Q.to(dtype<span class="op" style="color: #5E5E5E;">=</span>D_packed.dtype).T</span>
<span id="cb210-2">scores.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>torch.Size([39, 32])</code></pre>
</div>
</div>
<p>Reshape them so we can max-reduce them by passage ID:</p>
<div class="cell" data-outputid="4952176c-4b95-4f3e-92b1-a821d4167301" data-execution_count="105">
<div class="sourceCode cell-code" id="cb212" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb212-1">scores_padded, scores_mask <span class="op" style="color: #5E5E5E;">=</span> StridedTensor(scores, D_mask).as_padded_tensor()</span>
<span id="cb212-2">scores_padded.shape, scores_mask.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>(torch.Size([3, 13, 32]), torch.Size([3, 13, 1]))</code></pre>
</div>
</div>
<p>And max-reduce with <code>colbert_score_reduce</code>:</p>
<div class="cell" data-outputid="a50d137e-4304-4f6a-f858-0eb907400deb" data-execution_count="106">
<div class="sourceCode cell-code" id="cb214" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb214-1">colbert_score_reduce(scores_padded, scores_mask, searcher.config)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>tensor([27.6875, 22.2812, 13.9531], device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>This matches exactly the scores we got using RAGatouille!</p>
<div class="cell" data-outputid="309baa66-6c65-41e0-f89b-6a111e571a5b" data-execution_count="107">
<div class="sourceCode cell-code" id="cb216" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb216-1">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="107">
<pre><code>[{'content': 'Python is a programming language. It is easy to learn',
  'score': 27.6875,
  'rank': 1,
  'document_id': '8aa5aade-10d5-4144-b634-c7866578b43c',
  'passage_id': 0},
 {'content': 'Python was created by Guido van Rossum in 1991',
  'score': 22.28125,
  'rank': 2,
  'document_id': '12352328-9bb1-4a51-896e-a002d3548adc',
  'passage_id': 2},
 {'content': 'Java is a popular coding language used in many applications',
  'score': 13.953125,
  'rank': 3,
  'document_id': '1fe9788e-ccec-4b9e-a004-14acc657915e',
  'passage_id': 1}]</code></pre>
</div>
</div>
<p>To recap Stage 4:</p>
<ul>
<li>We lookup the full vectors corresponding to all passage tokens in our passage IDs.</li>
<li>We reshape them to allow for max-reduction by passage ID.</li>
<li>We calculate the MaxSim score for each passage.</li>
</ul>
<p>In this way, we were able to recreate the entire 4-stage PLAID pipeline to match RAGatouille results!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>machine learning</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/index.html</guid>
  <pubDate>Tue, 24 Dec 2024 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/1.png" medium="image" type="image/png" height="59" width="144"/>
</item>
<item>
  <title>Scoring Full Text and Semantic Search on Chunk Sizes from 100 to 2000 Tokens</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-29-fastbook-benchmark-results/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:35:34.413312Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:35:34.413011Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:35:48.851237Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:35:48.850561Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:35:34.413283Z&quot;}" data-trusted="true">
<details>
<summary>pip installs and imports</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install sentence<span class="op" style="color: #5E5E5E;">-</span>transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq RAGatouille</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>pip install ftfy <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> sqlite3</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> ftfy <span class="im" style="color: #00769E;">import</span> fix_text</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">from</span> sentence_transformers <span class="im" style="color: #00769E;">import</span> SentenceTransformer</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> ragatouille.data <span class="im" style="color: #00769E;">import</span> CorpusProcessor</span>
<span id="cb1-18"></span>
<span id="cb1-19">corpus_processor <span class="op" style="color: #5E5E5E;">=</span> CorpusProcessor()</span>
<span id="cb1-20">emb_model <span class="op" style="color: #5E5E5E;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;">"BAAI/bge-small-en-v1.5"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:35:48.852942Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:35:48.852356Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.139480Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.138592Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:35:48.852914Z&quot;}" data-outputid="dfa04737-fb6e-46e3-c46e-a8e0ca6248ad" data-trusted="true" data-execution_count="3">
<details>
<summary>Download chapter ipynb files</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">urls <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1mmBjFH_plndPBC4iRZHChfMazgBxKK4_'</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;">'02_production.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1Cf5QHthHy1z13H0iu3qrzAWgquCfqVHk'</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=113909_BNulzyLIKUNJHdya0Hhoqie30I'</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1BtvStgFjUtvtqbSZNrL7Y2N-ey3seNZU'</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1rHFvwl_l-AJLg_auPjBpNrOgG9HDnfqg'</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1pg1pH7jMMElzrXS0kBBz14aAuDsi2DEP'</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=19P-eEHpAO3WrOvdxgXckyhHhfv_R-hnS'</span></span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;">def</span> download_file(url, filename):</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># Send a GET request to the URL</span></span>
<span id="cb2-13">    response <span class="op" style="color: #5E5E5E;">=</span> requests.get(url)</span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="co" style="color: #5E5E5E;"># Check if the request was successful</span></span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;">if</span> response.status_code <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">200</span>:</span>
<span id="cb2-17">        <span class="co" style="color: #5E5E5E;"># Open the file in write-binary mode</span></span>
<span id="cb2-18">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(filename, <span class="st" style="color: #20794D;">'wb'</span>) <span class="im" style="color: #00769E;">as</span> <span class="bu" style="color: null;">file</span>:</span>
<span id="cb2-19">            <span class="co" style="color: #5E5E5E;"># Write the content of the response to the file</span></span>
<span id="cb2-20">            <span class="bu" style="color: null;">file</span>.write(response.content)</span>
<span id="cb2-21">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"File downloaded successfully: </span><span class="sc" style="color: #5E5E5E;">{</span>filename<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb2-23">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Failed to download file. Status code: </span><span class="sc" style="color: #5E5E5E;">{</span>response<span class="sc" style="color: #5E5E5E;">.</span>status_code<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="cf" style="color: #003B4F;">for</span> fname, url <span class="kw" style="color: #003B4F;">in</span> urls.items():</span>
<span id="cb2-26">  download_file(url, fname)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>File downloaded successfully: 01_intro.ipynb
File downloaded successfully: 02_production.ipynb
File downloaded successfully: 04_mnist_basics.ipynb
File downloaded successfully: 08_collab.ipynb
File downloaded successfully: 09_tabular.ipynb
File downloaded successfully: 10_nlp.ipynb
File downloaded successfully: 13_convolutions.ipynb</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.141537Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.141247Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.145767Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.144919Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.141510Z&quot;}" data-trusted="true">
<details>
<summary><code>nbs</code> dict</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">nbs <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;">'1'</span>: <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>,</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;">'2'</span>: <span class="st" style="color: #20794D;">'02_production.ipynb'</span>,</span>
<span id="cb4-4">    <span class="st" style="color: #20794D;">'4'</span>: <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>,</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;">'8'</span>: <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>,</span>
<span id="cb4-6">    <span class="st" style="color: #20794D;">'9'</span>: <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>,</span>
<span id="cb4-7">    <span class="st" style="color: #20794D;">'10'</span>: <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>,</span>
<span id="cb4-8">    <span class="st" style="color: #20794D;">'13'</span>: <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span></span>
<span id="cb4-9">}</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.146977Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.146769Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.580447Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.579593Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.146956Z&quot;}" data-trusted="true">
<details>
<summary>load questions</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://gist.githubusercontent.com/vishalbakshi/2c22ca69ac7bc4bc845052c1b9d949c8/raw/d498259f2fc75d27c485ddc73933f145987feef3/cs_bm25_baselines.csv'</span></span>
<span id="cb5-2">questions <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url).query(<span class="st" style="color: #20794D;">"is_answerable == 1"</span>)[[<span class="st" style="color: #20794D;">"chapter"</span>, <span class="st" style="color: #20794D;">"question_number"</span>, <span class="st" style="color: #20794D;">"question_text"</span>, <span class="st" style="color: #20794D;">"answer"</span>, <span class="st" style="color: #20794D;">"keywords"</span>]]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># remove double quotations from the question text</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;"># as these affect embeddings/cosine similarity: https://vishalbakshi.github.io/blog/posts/2024-11-08-punctuation-cosine-similarity/</span></span>
<span id="cb5-6">questions[<span class="st" style="color: #20794D;">'question_text'</span>] <span class="op" style="color: #5E5E5E;">=</span> questions[<span class="st" style="color: #20794D;">'question_text'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb5-7"><span class="cf" style="color: #003B4F;">assert</span> questions.shape <span class="op" style="color: #5E5E5E;">==</span> (<span class="dv" style="color: #AD0000;">191</span>,<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.581926Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.581642Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.791769Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.790918Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.581893Z&quot;}" data-outputid="7530aad2-4d99-4543-d502-ad55c01803f8" data-trusted="true">
<details>
<summary>download fastbook-benchmark</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">download_file(</span>
<span id="cb6-2">    <span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/vishalbakshi/a507b6e9e893475e93a4141e96b8947d/raw/e32835ba1dbf94384943ed5a65404112e1c89df2/fastbook-benchmark.json"</span>,</span>
<span id="cb6-3">    <span class="st" style="color: #20794D;">"fastbook-benchmark.json"</span></span>
<span id="cb6-4">    )</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;">def</span> load_benchmark():</span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;"># Load the benchmark data</span></span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'fastbook-benchmark.json'</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb6-9">        benchmark <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;">return</span> benchmark</span>
<span id="cb6-11"></span>
<span id="cb6-12">benchmark <span class="op" style="color: #5E5E5E;">=</span> load_benchmark()</span>
<span id="cb6-13"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(benchmark[<span class="st" style="color: #20794D;">'questions'</span>]) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>File downloaded successfully: fastbook-benchmark.json</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.792998Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.792738Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.798523Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.797592Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.792972Z&quot;}" data-trusted="true">
<details>
<summary><code>calculate_mrr</code> function</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> calculate_mrr(question, retrieved_passages, cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb8-2">    retrieved_passages <span class="op" style="color: #5E5E5E;">=</span> retrieved_passages[:cutoff]</span>
<span id="cb8-3">    highest_rank <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;">for</span> ans_comp <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">"answer_context"</span>]:</span>
<span id="cb8-6">        contexts <span class="op" style="color: #5E5E5E;">=</span> ans_comp.get(<span class="st" style="color: #20794D;">"context"</span>, [])</span>
<span id="cb8-7">        component_found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">        <span class="cf" style="color: #003B4F;">for</span> rank, passage <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(retrieved_passages, start<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb8-10">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">any</span>(fix_text(context) <span class="kw" style="color: #003B4F;">in</span> fix_text(passage) <span class="cf" style="color: #003B4F;">for</span> context <span class="kw" style="color: #003B4F;">in</span> contexts):</span>
<span id="cb8-11">                highest_rank <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(highest_rank, rank)</span>
<span id="cb8-12">                component_found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb8-13">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb8-14"></span>
<span id="cb8-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> component_found:</span>
<span id="cb8-16">            <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb8-17"></span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">/</span>highest_rank <span class="cf" style="color: #003B4F;">if</span> highest_rank <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="cf" style="color: #003B4F;">else</span> <span class="fl" style="color: #AD0000;">0.0</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.799879Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.799496Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.812780Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.812074Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.799852Z&quot;}" data-trusted="true">
<details>
<summary><code>calculate_recall</code> function</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> calculate_recall(question, retrieved_passages, cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb9-2">    retrieved_passages <span class="op" style="color: #5E5E5E;">=</span> retrieved_passages[:cutoff]</span>
<span id="cb9-3"></span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;"># Track if we've found at least one context for each answer component</span></span>
<span id="cb9-5">    ans_comp_found <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb9-6"></span>
<span id="cb9-7">    <span class="cf" style="color: #003B4F;">for</span> ans_comp <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">"answer_context"</span>]:</span>
<span id="cb9-8">        contexts <span class="op" style="color: #5E5E5E;">=</span> ans_comp.get(<span class="st" style="color: #20794D;">"context"</span>, [])</span>
<span id="cb9-9">        found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb9-10"></span>
<span id="cb9-11">        <span class="co" style="color: #5E5E5E;"># Check if any context for this answer component appears in retrieved passages</span></span>
<span id="cb9-12">        <span class="cf" style="color: #003B4F;">for</span> passage <span class="kw" style="color: #003B4F;">in</span> retrieved_passages:</span>
<span id="cb9-13">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">any</span>(fix_text(context) <span class="kw" style="color: #003B4F;">in</span> fix_text(passage) <span class="cf" style="color: #003B4F;">for</span> context <span class="kw" style="color: #003B4F;">in</span> contexts):</span>
<span id="cb9-14">                found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb9-15">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb9-16"></span>
<span id="cb9-17">        ans_comp_found.append(found)</span>
<span id="cb9-18"></span>
<span id="cb9-19">    <span class="co" style="color: #5E5E5E;"># Recall is ratio of answer components with at least one found context</span></span>
<span id="cb9-20">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">sum</span>(ans_comp_found) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(ans_comp_found)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.814669Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.813922Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.825978Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.825246Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.814632Z&quot;}" data-trusted="true">
<details>
<summary><code>load_data</code> function</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;">def</span> load_data(chunks, db_path, chapter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb10-2">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb10-3">        <span class="co" style="color: #5E5E5E;"># create virtual table if database doesn't exist</span></span>
<span id="cb10-4">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> os.path.exists(db_path):</span>
<span id="cb10-5">            <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(db_path) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb10-6">              cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb10-7">              cur.execute(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;">              CREATE VIRTUAL TABLE fastbook_text</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;">              USING FTS5(chapter, text);</span></span>
<span id="cb10-10"><span class="st" style="color: #20794D;">              """</span>)</span>
<span id="cb10-11">              conn.commit()</span>
<span id="cb10-12"></span>
<span id="cb10-13">        <span class="co" style="color: #5E5E5E;"># load in the chunks for each chapter</span></span>
<span id="cb10-14">        <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(db_path) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb10-15">            cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb10-16"></span>
<span id="cb10-17">            <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb10-18">                cur.execute(<span class="st" style="color: #20794D;">"INSERT INTO fastbook_text(chapter, text) VALUES (?, ?)"</span>, (chapter, chunk))</span>
<span id="cb10-19"></span>
<span id="cb10-20">            conn.commit()</span>
<span id="cb10-21">            res <span class="op" style="color: #5E5E5E;">=</span> cur.execute(<span class="st" style="color: #20794D;">"SELECT * FROM fastbook_text WHERE chapter = ?"</span>, (chapter,)).fetchall()</span>
<span id="cb10-22">        <span class="co" style="color: #5E5E5E;"># make sure all the data was loaded into the database</span></span>
<span id="cb10-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">len</span>(chunks):</span>
<span id="cb10-24">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(<span class="ss" style="color: #20794D;">f"Number of inserted chunks (</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(res)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">) doesn't match input chunks (</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(chunks)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb10-27"></span>
<span id="cb10-28">    <span class="cf" style="color: #003B4F;">except</span> sqlite3.Error <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb10-29">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"An error occurred: </span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-30">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span> <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb10-32">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"An unexpected error occurred: </span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-33">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.828738Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.828429Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.843414Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.842734Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.828713Z&quot;}" data-trusted="true">
<details>
<summary><code>db_search</code> function</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> db_search(df, limit<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb11-2">  results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb11-3">  <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(<span class="st" style="color: #20794D;">'fastbook.db'</span>) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb11-4">    cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb11-5">    <span class="co" style="color: #5E5E5E;"># concatenate the keywords into a string "keyword1 OR keyword 2 OR keyword3 ..."</span></span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;">for</span> _, row <span class="kw" style="color: #003B4F;">in</span> df.iterrows():</span>
<span id="cb11-7">      keywords <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">' OR '</span>.join([<span class="ss" style="color: #20794D;">f'"</span><span class="sc" style="color: #5E5E5E;">{</span>keyword<span class="sc" style="color: #5E5E5E;">.</span>strip(<span class="st" style="color: #20794D;">","</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"'</span> <span class="cf" style="color: #003B4F;">for</span> keyword <span class="kw" style="color: #003B4F;">in</span> row[<span class="st" style="color: #20794D;">'keywords'</span>].replace(<span class="st" style="color: #20794D;">'"'</span>, <span class="st" style="color: #20794D;">''</span>).split()])</span>
<span id="cb11-8"></span>
<span id="cb11-9">      q <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb11-10"><span class="ss" style="color: #20794D;">        SELECT text, rank</span></span>
<span id="cb11-11"><span class="ss" style="color: #20794D;">        FROM fastbook_text</span></span>
<span id="cb11-12"><span class="ss" style="color: #20794D;">        WHERE fastbook_text MATCH ?</span></span>
<span id="cb11-13"><span class="ss" style="color: #20794D;">        AND chapter = ?</span></span>
<span id="cb11-14"><span class="ss" style="color: #20794D;">        ORDER BY rank</span></span>
<span id="cb11-15"><span class="ss" style="color: #20794D;">        LIMIT ?</span></span>
<span id="cb11-16"><span class="ss" style="color: #20794D;">        """</span></span>
<span id="cb11-17">      res <span class="op" style="color: #5E5E5E;">=</span> cur.execute(q, (keywords, <span class="bu" style="color: null;">str</span>(row[<span class="st" style="color: #20794D;">'chapter'</span>]), limit)).fetchall()</span>
<span id="cb11-18">      <span class="co" style="color: #5E5E5E;"># grab the retrieved chunk from the query results</span></span>
<span id="cb11-19">      res <span class="op" style="color: #5E5E5E;">=</span> [item[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> item <span class="kw" style="color: #003B4F;">in</span> res]</span>
<span id="cb11-20"></span>
<span id="cb11-21">      <span class="co" style="color: #5E5E5E;"># if there are multiple chunks retrieved, combine them into a single string</span></span>
<span id="cb11-22">      results.append(res)</span>
<span id="cb11-23"></span>
<span id="cb11-24">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.844600Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.844324Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.857436Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.856702Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.844565Z&quot;}" data-trusted="true">
<details>
<summary><code>fts_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;">def</span> fts_retrieval(data, df, chunk_size):</span>
<span id="cb12-2">    <span class="cf" style="color: #003B4F;">if</span> os.path.exists(<span class="st" style="color: #20794D;">"fastbook.db"</span>):</span>
<span id="cb12-3">        os.remove(<span class="st" style="color: #20794D;">"fastbook.db"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb12-6">        documents <span class="op" style="color: #5E5E5E;">=</span> corpus_processor.process_corpus(chunks, chunk_size<span class="op" style="color: #5E5E5E;">=</span>chunk_size)</span>
<span id="cb12-7">        documents <span class="op" style="color: #5E5E5E;">=</span> [doc[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> doc <span class="kw" style="color: #003B4F;">in</span> documents]</span>
<span id="cb12-8">        <span class="cf" style="color: #003B4F;">assert</span> load_data(documents, <span class="st" style="color: #20794D;">'fastbook.db'</span>, chapter)</span>
<span id="cb12-9"></span>
<span id="cb12-10">    results <span class="op" style="color: #5E5E5E;">=</span> db_search(df, limit<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb12-11">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb12-14">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb12-15"></span>
<span id="cb12-16">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.859170Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.858590Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.871005Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.870199Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.859133Z&quot;}" data-trusted="true">
<details>
<summary><code>single_vector_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">def</span> single_vector_retrieval(data, benchmark, chunk_size):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;"># Group questions by chapter</span></span>
<span id="cb13-3">    questions <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> benchmark[<span class="st" style="color: #20794D;">"questions"</span>]:</span>
<span id="cb13-5">        chapter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(q[<span class="st" style="color: #20794D;">"chapter"</span>])</span>
<span id="cb13-6">        <span class="cf" style="color: #003B4F;">if</span> chapter <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> questions:</span>
<span id="cb13-7">            questions[chapter] <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-8">        questions[chapter].append(q[<span class="st" style="color: #20794D;">'question_text'</span>].strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>))</span>
<span id="cb13-9"></span>
<span id="cb13-10">    q_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;">for</span> chapter, _ <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb13-12">        qs <span class="op" style="color: #5E5E5E;">=</span> questions[chapter]</span>
<span id="cb13-13">        q_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(qs, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-14"></span>
<span id="cb13-15">    results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb13-16">    <span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb13-17">        <span class="co" style="color: #5E5E5E;"># chunk chapter text</span></span>
<span id="cb13-18">        documents <span class="op" style="color: #5E5E5E;">=</span> corpus_processor.process_corpus(chunks, chunk_size<span class="op" style="color: #5E5E5E;">=</span>chunk_size)</span>
<span id="cb13-19">        documents <span class="op" style="color: #5E5E5E;">=</span> [doc[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> doc <span class="kw" style="color: #003B4F;">in</span> documents]</span>
<span id="cb13-20"></span>
<span id="cb13-21">        <span class="co" style="color: #5E5E5E;"># Embed documents</span></span>
<span id="cb13-22">        data_embs <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(documents, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb13-23"></span>
<span id="cb13-24">        <span class="co" style="color: #5E5E5E;"># Compute cosine similarity and get top 10 indices for each row</span></span>
<span id="cb13-25">        idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb13-26">        top_10_idxs <span class="op" style="color: #5E5E5E;">=</span> idxs[:, :<span class="dv" style="color: #AD0000;">10</span>]  <span class="co" style="color: #5E5E5E;"># Get the top 10 indices for each row</span></span>
<span id="cb13-27"></span>
<span id="cb13-28">        <span class="co" style="color: #5E5E5E;"># Extract top 10 chunks for each row</span></span>
<span id="cb13-29">        top_10_chunks <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb13-30">            [documents[idx.item()] <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> row_idxs]</span>
<span id="cb13-31">            <span class="cf" style="color: #003B4F;">for</span> row_idxs <span class="kw" style="color: #003B4F;">in</span> top_10_idxs</span>
<span id="cb13-32">        ]</span>
<span id="cb13-33">        results.extend(top_10_chunks)</span>
<span id="cb13-34"></span>
<span id="cb13-35">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb13-36"></span>
<span id="cb13-37">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb13-38">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb13-39"></span>
<span id="cb13-40">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.872282Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.872001Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.886865Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.886203Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.872258Z&quot;}" data-trusted="true">
<details>
<summary><code>index_free_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> index_free_retrieval(data, model_nm, chunk_size, benchmark):</span>
<span id="cb14-2">    questions_by_chapter <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> benchmark[<span class="st" style="color: #20794D;">"questions"</span>]:</span>
<span id="cb14-4">        chapter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(q[<span class="st" style="color: #20794D;">"chapter"</span>])</span>
<span id="cb14-5">        <span class="cf" style="color: #003B4F;">if</span> chapter <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> questions_by_chapter:</span>
<span id="cb14-6">            questions_by_chapter[chapter] <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb14-7">        questions_by_chapter[chapter].append(q)</span>
<span id="cb14-8"></span>
<span id="cb14-9">    <span class="co" style="color: #5E5E5E;"># Dictionary to store results per chapter</span></span>
<span id="cb14-10">    chapter_results <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;"># Process each chapter separately</span></span>
<span id="cb14-13">    <span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> nbs.keys():</span>
<span id="cb14-14">        <span class="co" style="color: #5E5E5E;"># instantiate new RAG object</span></span>
<span id="cb14-15">        RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(model_nm)</span>
<span id="cb14-16"></span>
<span id="cb14-17">        <span class="co" style="color: #5E5E5E;"># Get questions for this chapter</span></span>
<span id="cb14-18">        chapter_questions <span class="op" style="color: #5E5E5E;">=</span> questions_by_chapter[chapter]</span>
<span id="cb14-19"></span>
<span id="cb14-20">        <span class="co" style="color: #5E5E5E;"># encode chapter documents</span></span>
<span id="cb14-21">        documents <span class="op" style="color: #5E5E5E;">=</span> corpus_processor.process_corpus(data[chapter], chunk_size<span class="op" style="color: #5E5E5E;">=</span>chunk_size)</span>
<span id="cb14-22">        RAG.encode([x[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> documents], document_metadatas<span class="op" style="color: #5E5E5E;">=</span>[{<span class="st" style="color: #20794D;">"chapter"</span>: chapter} <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(documents))])</span>
<span id="cb14-23"></span>
<span id="cb14-24">        <span class="co" style="color: #5E5E5E;"># Perform retrieval for each question in this chapter</span></span>
<span id="cb14-25">        results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb14-26">        <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> chapter_questions:</span>
<span id="cb14-27">            top_k <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="bu" style="color: null;">len</span>(documents))</span>
<span id="cb14-28">            retrieved <span class="op" style="color: #5E5E5E;">=</span> RAG.search_encoded_docs(query <span class="op" style="color: #5E5E5E;">=</span> q[<span class="st" style="color: #20794D;">"question_text"</span>].strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>), k<span class="op" style="color: #5E5E5E;">=</span>top_k)</span>
<span id="cb14-29">            results.append(retrieved)</span>
<span id="cb14-30"></span>
<span id="cb14-31">        <span class="co" style="color: #5E5E5E;"># Store results</span></span>
<span id="cb14-32">        chapter_results[chapter] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb14-33"></span>
<span id="cb14-34">    results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb14-35">    <span class="cf" style="color: #003B4F;">for</span> chapter, res <span class="kw" style="color: #003B4F;">in</span> chapter_results.items():</span>
<span id="cb14-36">        results.extend(res)</span>
<span id="cb14-37"></span>
<span id="cb14-38">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">    final_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb14-41">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb14-42">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb14-43">        intermediate_results <span class="op" style="color: #5E5E5E;">=</span> [r[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> r <span class="kw" style="color: #003B4F;">in</span> res]</span>
<span id="cb14-44">        final_results.append(intermediate_results)</span>
<span id="cb14-45"></span>
<span id="cb14-46">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(final_results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb14-47">    <span class="cf" style="color: #003B4F;">return</span> final_results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.887930Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.887716Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.900132Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.899389Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.887908Z&quot;}" data-trusted="true">
<details>
<summary><code>do_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> do_retrieval(method, chunk_size, data, benchmark, questions<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, benchmark_results<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb15-2">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"bm25"</span>: results <span class="op" style="color: #5E5E5E;">=</span> fts_retrieval(data, questions, chunk_size)</span>
<span id="cb15-3">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"single_vector"</span>: results <span class="op" style="color: #5E5E5E;">=</span> single_vector_retrieval(data, benchmark, chunk_size)</span>
<span id="cb15-4">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"colbertv2"</span>: results <span class="op" style="color: #5E5E5E;">=</span> index_free_retrieval(data<span class="op" style="color: #5E5E5E;">=</span>data, model_nm<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbert-ir/colbertv2.0"</span>, chunk_size<span class="op" style="color: #5E5E5E;">=</span>chunk_size, benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark)</span>
<span id="cb15-5">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"answerai_colbert"</span>: results <span class="op" style="color: #5E5E5E;">=</span> index_free_retrieval(data<span class="op" style="color: #5E5E5E;">=</span>data, model_nm<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>, chunk_size<span class="op" style="color: #5E5E5E;">=</span>chunk_size, benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark)</span>
<span id="cb15-6"></span>
<span id="cb15-7">  <span class="co" style="color: #5E5E5E;">#name = f"{method}_{chunking_strategy}"</span></span>
<span id="cb15-8">  q_mrr, q_recall <span class="op" style="color: #5E5E5E;">=</span> score_retrieval(results, benchmark)</span>
<span id="cb15-9">  <span class="co" style="color: #5E5E5E;">#benchmark_results = save_results(results, benchmark_results, q_mrr, q_recall, name=name)</span></span>
<span id="cb15-10"></span>
<span id="cb15-11">  <span class="cf" style="color: #003B4F;">return</span> pd.Series(q_mrr).mean(), pd.Series(q_recall).mean()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.901370Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.901123Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.913227Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.912491Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.901347Z&quot;}" data-trusted="true">
<details>
<summary><code>score_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> score_retrieval(results, benchmark):</span>
<span id="cb16-2">    q_mrr <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb16-3">    q_recall <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb16-4"></span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;">for</span> i, question <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(benchmark[<span class="st" style="color: #20794D;">"questions"</span>]):</span>
<span id="cb16-6">        mrr <span class="op" style="color: #5E5E5E;">=</span> calculate_mrr(question, results[i], cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb16-7">        recall <span class="op" style="color: #5E5E5E;">=</span> calculate_recall(question, results[i], cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb16-8">        q_mrr.append(mrr)</span>
<span id="cb16-9">        q_recall.append(recall)</span>
<span id="cb16-10"></span>
<span id="cb16-11">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(q_mrr) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(benchmark[<span class="st" style="color: #20794D;">"questions"</span>])</span>
<span id="cb16-12">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(q_recall) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(benchmark[<span class="st" style="color: #20794D;">"questions"</span>])</span>
<span id="cb16-13"></span>
<span id="cb16-14">    <span class="cf" style="color: #003B4F;">return</span> q_mrr, q_recall</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.914264Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.914042Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.924181Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.923516Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.914242Z&quot;}" data-trusted="true">
<details>
<summary><code>save_results</code> function</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;">def</span> save_results(results, df, q_mrr, q_recall, name):</span>
<span id="cb17-2">    flat_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb17-3">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb17-4">        flat_results.append(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">"</span>.join(res))</span>
<span id="cb17-5"></span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(flat_results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb17-7"></span>
<span id="cb17-8">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_retrieval'</span>] <span class="op" style="color: #5E5E5E;">=</span> flat_results</span>
<span id="cb17-9">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_mrr10'</span>] <span class="op" style="color: #5E5E5E;">=</span> q_mrr</span>
<span id="cb17-10">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_recall10'</span>] <span class="op" style="color: #5E5E5E;">=</span> q_recall</span>
<span id="cb17-11"></span>
<span id="cb17-12">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.925325Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.925090Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.935453Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.934718Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.925302Z&quot;}" data-trusted="true">
<details>
<summary><code>notebook_to_string</code> function</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> notebook_to_string(path):</span>
<span id="cb18-2">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(path, <span class="st" style="color: #20794D;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'utf-8'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb18-3">    notebook <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb18-4"></span>
<span id="cb18-5">  all_text <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb18-6">  found_questionnaire <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb18-7"></span>
<span id="cb18-8">  <span class="cf" style="color: #003B4F;">for</span> cell <span class="kw" style="color: #003B4F;">in</span> notebook[<span class="st" style="color: #20794D;">'cells'</span>]:</span>
<span id="cb18-9">    <span class="cf" style="color: #003B4F;">if</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'markdown'</span> <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">any</span>(<span class="st" style="color: #20794D;">'## Questionnaire'</span> <span class="kw" style="color: #003B4F;">in</span> line <span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> cell[<span class="st" style="color: #20794D;">'source'</span>]):</span>
<span id="cb18-10">      found_questionnaire <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb18-11">      <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb18-12"></span>
<span id="cb18-13">    <span class="cf" style="color: #003B4F;">if</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'markdown'</span>, <span class="st" style="color: #20794D;">'code'</span>]:</span>
<span id="cb18-14">      all_text <span class="op" style="color: #5E5E5E;">+=</span> <span class="st" style="color: #20794D;">''</span>.join(cell[<span class="st" style="color: #20794D;">'source'</span>]) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span></span>
<span id="cb18-15">  <span class="cf" style="color: #003B4F;">return</span> all_text</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.937125Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.936441Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.946918Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.946355Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.937089Z&quot;}" data-trusted="true">
<details>
<summary><code>chunk_string</code> function</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> chunk_string(text, n):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;">"""Split text into n chunks."""</span></span>
<span id="cb19-3">    skip <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(<span class="bu" style="color: null;">len</span>(text) <span class="op" style="color: #5E5E5E;">/</span> n)</span>
<span id="cb19-4">    <span class="cf" style="color: #003B4F;">return</span> [text[i:i <span class="op" style="color: #5E5E5E;">+</span> skip] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="bu" style="color: null;">len</span>(text), skip)]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.947888Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.947679Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.956866Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.956184Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.947866Z&quot;}" data-trusted="true">
<details>
<summary><code>clean_html</code> function</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;">def</span> clean_html(text):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;"># Step 1: Temporarily replace double-bracketed content with a placeholder</span></span>
<span id="cb20-3">    <span class="im" style="color: #00769E;">import</span> uuid</span>
<span id="cb20-4">    placeholder <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"PLACEHOLDER_</span><span class="sc" style="color: #5E5E5E;">{</span>uuid<span class="sc" style="color: #5E5E5E;">.</span>uuid4()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb20-5">    double_bracketed <span class="op" style="color: #5E5E5E;">=</span> re.findall(<span class="vs" style="color: #20794D;">r'&lt;&lt;[^&gt;]*&gt;&gt;'</span>, text)</span>
<span id="cb20-6">    step1 <span class="op" style="color: #5E5E5E;">=</span> re.sub(<span class="vs" style="color: #20794D;">r'&lt;&lt;[^&gt;]*&gt;&gt;'</span>, placeholder, text)</span>
<span id="cb20-7"></span>
<span id="cb20-8">    <span class="co" style="color: #5E5E5E;"># Step 2: Remove HTML tags</span></span>
<span id="cb20-9">    step2 <span class="op" style="color: #5E5E5E;">=</span> re.sub(<span class="vs" style="color: #20794D;">r'&lt;[/]?[a-zA-Z][^&gt;]*&gt;'</span>, <span class="st" style="color: #20794D;">''</span>, step1)</span>
<span id="cb20-10"></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;"># Step 3: Restore double-bracketed content</span></span>
<span id="cb20-12">    <span class="cf" style="color: #003B4F;">if</span> double_bracketed:</span>
<span id="cb20-13">        step3 <span class="op" style="color: #5E5E5E;">=</span> step2.replace(placeholder, double_bracketed[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb20-14">        <span class="cf" style="color: #003B4F;">return</span> step3</span>
<span id="cb20-15">    <span class="cf" style="color: #003B4F;">return</span> step2</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.958034Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.957806Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.966934Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.966284Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.958012Z&quot;}" data-trusted="true">
<details>
<summary><code>remove_punctuation</code> function</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> remove_punctuation(text):</span>
<span id="cb21-2">    <span class="im" style="color: #00769E;">import</span> string</span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">''</span>.join(char <span class="cf" style="color: #003B4F;">if</span> char.isalnum() <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">' '</span> <span class="cf" style="color: #003B4F;">if</span> char <span class="kw" style="color: #003B4F;">in</span> string.punctuation <span class="cf" style="color: #003B4F;">else</span> char <span class="cf" style="color: #003B4F;">for</span> char <span class="kw" style="color: #003B4F;">in</span> text)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.968107Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.967856Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:07.976869Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:07.976069Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.968083Z&quot;}" data-trusted="true">
<details>
<summary><code>process_contexts</code> function</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">def</span> process_contexts(data):</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;"># Process questions</span></span>
<span id="cb22-3">    <span class="cf" style="color: #003B4F;">for</span> question <span class="kw" style="color: #003B4F;">in</span> data[<span class="st" style="color: #20794D;">'questions'</span>]:</span>
<span id="cb22-4">        <span class="co" style="color: #5E5E5E;"># Process only answer_context</span></span>
<span id="cb22-5">        <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'answer_context'</span> <span class="kw" style="color: #003B4F;">in</span> question:</span>
<span id="cb22-6">            <span class="cf" style="color: #003B4F;">for</span> context_item <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">'answer_context'</span>]:</span>
<span id="cb22-7">                <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'context'</span> <span class="kw" style="color: #003B4F;">in</span> context_item:</span>
<span id="cb22-8">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(context_item[<span class="st" style="color: #20794D;">'context'</span>], <span class="bu" style="color: null;">list</span>):</span>
<span id="cb22-9">                        <span class="co" style="color: #5E5E5E;"># If context is a list, process each string in the list</span></span>
<span id="cb22-10">                        context_item[<span class="st" style="color: #20794D;">'context'</span>] <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb22-11">                            remove_punctuation(text) <span class="cf" style="color: #003B4F;">if</span> text <span class="cf" style="color: #003B4F;">else</span> text</span>
<span id="cb22-12">                            <span class="cf" style="color: #003B4F;">for</span> text <span class="kw" style="color: #003B4F;">in</span> context_item[<span class="st" style="color: #20794D;">'context'</span>]</span>
<span id="cb22-13">                        ]</span>
<span id="cb22-14">                    <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(context_item[<span class="st" style="color: #20794D;">'context'</span>], <span class="bu" style="color: null;">str</span>):</span>
<span id="cb22-15">                        <span class="co" style="color: #5E5E5E;"># If context is a single string, process it directly</span></span>
<span id="cb22-16">                        context_item[<span class="st" style="color: #20794D;">'context'</span>] <span class="op" style="color: #5E5E5E;">=</span> remove_punctuation(context_item[<span class="st" style="color: #20794D;">'context'</span>])</span>
<span id="cb22-17"></span>
<span id="cb22-18">    <span class="cf" style="color: #003B4F;">return</span> data</span></code></pre></div>
</details>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook, I evaluate four retrieval methods on my fastbook-benchmark dataset using various chunk sizes:</p>
<ul>
<li>Full text search (using sqlite and Claude-generated keywords).</li>
<li>Single-vector cosine similarity (using <code>SentenceTransformer("BAAI/bge-small-en-v1.5")</code>).</li>
<li>ColBERTv2 (using ragatouille).</li>
<li>answerai-colbert-small-v1 (ragatouille).</li>
</ul>
<p>For each retrieval method, I’m looking to find the best MRR@10 and Recall@10 for three chunk size ranges:</p>
<ul>
<li>Small: 100-500 tokens</li>
<li>Medium: 500-1000 tokens</li>
<li>Large: 1000+ tokens</li>
</ul>
<p>I chose these ranges based on trends I saw during some experiments I ran with ColBERTv2 and answerai-colbert-small-v1 for a chunk size range of 100-3000 tokens.</p>
<p>I’m using <code>corpus_processor.process_corpus</code> for chunking.</p>
</section>
<section id="data-preprocessing" class="level2">
<h2 class="anchored" data-anchor-id="data-preprocessing">Data Preprocessing</h2>
<p>For each retrieval method/chunk size combination, I’ll preprocess my data three ways:</p>
<ul>
<li>No preprocessing.</li>
<li>Remove HTML tags.</li>
<li>Remove punctuation.</li>
</ul>
<p>Note that in each case, I am first converting the <code>.ipynb</code> for each chapter into a single string and splitting them into 2-3 chunks since for full-length texts were causing OOM during ColBERTv2 encoding.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:07.990323Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:07.990007Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:08.029468Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:08.028908Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:07.990288Z&quot;}" data-trusted="true" data-execution_count="23">
<details>
<summary>Prep <code>no preprocessing</code> dataset</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">data_no_pp <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb23-2">n_chars <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb23-5">    data_no_pp[chapter] <span class="op" style="color: #5E5E5E;">=</span> chunk_string(notebook_to_string(nb), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb23-6">    <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> data_no_pp[chapter]:</span>
<span id="cb23-7">        n_chars <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(c)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="cf" style="color: #003B4F;">assert</span> n_chars <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">503769</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:08.030689Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:08.030342Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:08.039049Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:08.038342Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:08.030653Z&quot;}" data-trusted="true" data-execution_count="24">
<details>
<summary>Prep <code>no HTML</code> dataset</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">data_no_html <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb24-2"></span>
<span id="cb24-3">n_chars <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb24-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb24-5">    data_no_html[chapter] <span class="op" style="color: #5E5E5E;">=</span> chunk_string(notebook_to_string(nb), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-6">    <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> data_no_html[chapter]:</span>
<span id="cb24-7">        n_chars <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(c)</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="cf" style="color: #003B4F;">assert</span> n_chars <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">503769</span></span>
<span id="cb24-10"></span>
<span id="cb24-11">n_chars <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb24-12"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data_no_html.items():</span>
<span id="cb24-13">    data_no_html[chapter] <span class="op" style="color: #5E5E5E;">=</span> [clean_html(chunk) <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks]</span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;">for</span> string <span class="kw" style="color: #003B4F;">in</span> data_no_html[chapter]: n_chars <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(string)</span>
<span id="cb24-15"></span>
<span id="cb24-16"><span class="cf" style="color: #003B4F;">assert</span> n_chars <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">493604</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-28T13:36:08.040141Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-28T13:36:08.039913Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-28T13:36:08.129082Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-28T13:36:08.128486Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-28T13:36:08.040118Z&quot;}" data-trusted="true" data-execution_count="25">
<details>
<summary>Prep <code>no punctuation</code> dataset</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">data_no_punc <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb25-2"></span>
<span id="cb25-3">n_chars <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb25-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb25-5">    data_no_punc[chapter] <span class="op" style="color: #5E5E5E;">=</span> chunk_string(notebook_to_string(nb), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-6">    <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> data_no_punc[chapter]:</span>
<span id="cb25-7">        n_chars <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(c)</span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="cf" style="color: #003B4F;">assert</span> n_chars <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">503769</span></span>
<span id="cb25-10"></span>
<span id="cb25-11">n_chars <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb25-12"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data_no_punc.items():</span>
<span id="cb25-13">    data_no_punc[chapter] <span class="op" style="color: #5E5E5E;">=</span> [remove_punctuation(chunk) <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks]</span>
<span id="cb25-14">    <span class="cf" style="color: #003B4F;">for</span> string <span class="kw" style="color: #003B4F;">in</span> data_no_punc[chapter]: n_chars <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(string)</span>
<span id="cb25-15"></span>
<span id="cb25-16"><span class="co" style="color: #5E5E5E;"># we are replacing punctuation with single space so n_chars doesn't change</span></span>
<span id="cb25-17"><span class="cf" style="color: #003B4F;">assert</span> n_chars <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">503769</span></span></code></pre></div>
</details>
</div>
</section>
<section id="benchmark-dataset" class="level2">
<h2 class="anchored" data-anchor-id="benchmark-dataset">Benchmark Dataset</h2>
<div class="cell" data-trusted="true" data-execution_count="26">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">benchmark <span class="op" style="color: #5E5E5E;">=</span> load_benchmark()</span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(benchmark[<span class="st" style="color: #20794D;">'questions'</span>]) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb26-3"></span>
<span id="cb26-4">processed_benchmark <span class="op" style="color: #5E5E5E;">=</span> process_contexts(benchmark)</span>
<span id="cb26-5"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(processed_benchmark[<span class="st" style="color: #20794D;">'questions'</span>]) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span></code></pre></div>
</div>
</section>
<section id="running-retrieval-100-2000-token-chunks" class="level2">
<h2 class="anchored" data-anchor-id="running-retrieval-100-2000-token-chunks">Running Retrieval (100-2000 token chunks)</h2>
<div class="cell" data-outputid="5cd7551c-7df0-480a-fc61-07f3c155239c" data-execution_count="28">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;">from</span> google.colab <span class="im" style="color: #00769E;">import</span> drive</span>
<span id="cb27-2">drive.mount(<span class="st" style="color: #20794D;">'/content/drive'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mounted at /content/drive</code></pre>
</div>
</div>
<section id="data-no-preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="data-no-preprocessing">Data: No Preprocessing</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="cf" style="color: #003B4F;">for</span> method <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"bm25"</span>, <span class="st" style="color: #20794D;">"single_vector"</span>, <span class="st" style="color: #20794D;">"colbertv2"</span>, <span class="st" style="color: #20794D;">"answerai_colbert"</span>]:</span>
<span id="cb29-4">  <span class="cf" style="color: #003B4F;">for</span> chunk_size <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2100</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb29-5">    mrr, recall <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(method, chunk_size, data_no_pp, load_benchmark(), questions)</span>
<span id="cb29-6">    results.append((<span class="st" style="color: #20794D;">'no preprocessing'</span>, method, chunk_size, mrr, recall))</span>
<span id="cb29-7"></span>
<span id="cb29-8">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(results, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'data'</span>, <span class="st" style="color: #20794D;">'method'</span>, <span class="st" style="color: #20794D;">'chunk_size'</span>, <span class="st" style="color: #20794D;">'MRR@10'</span>, <span class="st" style="color: #20794D;">'Recall@10'</span>])</span>
<span id="cb29-9">df.to_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no preprocessing.csv"</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="data-no-html-tags" class="level3">
<h3 class="anchored" data-anchor-id="data-no-html-tags">Data: No HTML Tags</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="cf" style="color: #003B4F;">for</span> method <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"bm25"</span>, <span class="st" style="color: #20794D;">"single_vector"</span>, <span class="st" style="color: #20794D;">"colbertv2"</span>, <span class="st" style="color: #20794D;">"answerai_colbert"</span>]:</span>
<span id="cb30-4">  <span class="cf" style="color: #003B4F;">for</span> chunk_size <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2100</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb30-5">    mrr, recall <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(method, chunk_size, data_no_html, load_benchmark(), questions)</span>
<span id="cb30-6">    results.append((<span class="st" style="color: #20794D;">'no HTML'</span>, method, chunk_size, mrr, recall))</span>
<span id="cb30-7"></span>
<span id="cb30-8">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(results, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'data'</span>, <span class="st" style="color: #20794D;">'method'</span>, <span class="st" style="color: #20794D;">'chunk_size'</span>, <span class="st" style="color: #20794D;">'MRR@10'</span>, <span class="st" style="color: #20794D;">'Recall@10'</span>])</span>
<span id="cb30-9">df.to_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no HTML.csv"</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="data-no-punctuation" class="level3">
<h3 class="anchored" data-anchor-id="data-no-punctuation">Data: No Punctuation</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="cf" style="color: #003B4F;">for</span> method <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"bm25"</span>, <span class="st" style="color: #20794D;">"single_vector"</span>, <span class="st" style="color: #20794D;">"colbertv2"</span>, <span class="st" style="color: #20794D;">"answerai_colbert"</span>]:</span>
<span id="cb31-4">  <span class="cf" style="color: #003B4F;">for</span> chunk_size <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">2100</span>, <span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb31-5">    mrr, recall <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(method, chunk_size, data_no_punc, process_contexts(benchmark), questions)</span>
<span id="cb31-6">    results.append((<span class="st" style="color: #20794D;">'no punctuation'</span>, method, chunk_size, mrr, recall))</span>
<span id="cb31-7"></span>
<span id="cb31-8">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(results, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'data'</span>, <span class="st" style="color: #20794D;">'method'</span>, <span class="st" style="color: #20794D;">'chunk_size'</span>, <span class="st" style="color: #20794D;">'MRR@10'</span>, <span class="st" style="color: #20794D;">'Recall@10'</span>])</span>
<span id="cb31-9">df.to_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no punctuation.csv"</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
</section>
<section id="analyzing-results" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-results">Analyzing Results</h2>
<div class="cell" data-outputid="3c4780a2-0223-469a-8b56-b2f50ef92949" data-execution_count="195">
<details>
<summary>Load saved results CSVs</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">no_pp <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no preprocessing.csv"</span>)</span>
<span id="cb32-2">no_html <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no HTML.csv"</span>)</span>
<span id="cb32-3">no_punc <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">"/content/drive/MyDrive/2024-11-29-fastbook-benchmark-results_no punctuation.csv"</span>)</span>
<span id="cb32-4">df <span class="op" style="color: #5E5E5E;">=</span> pd.concat([no_pp, no_html, no_punc])</span>
<span id="cb32-5">df.shape</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="195">
<pre><code>(240, 5)</code></pre>
</div>
</div>
<section id="best-overall-mrr10" class="level3">
<h3 class="anchored" data-anchor-id="best-overall-mrr10">Best Overall MRR@10</h3>
<p>Surprisingly, full text search had the highest-overall MRR@10 with 0.67 for 2000-token chunks, for text with punctuation removed.</p>
<div class="cell" data-outputid="966b62a2-8407-45be-8f1e-6ed74042077f" data-execution_count="32">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df[df[<span class="st" style="color: #20794D;">'MRR@10'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'MRR@10'</span>].<span class="bu" style="color: null;">max</span>()]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">


  <div id="df-ea293031-af15-4fcd-bb00-77b780978cbb" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>data</th>
      <th>method</th>
      <th>chunk_size</th>
      <th>MRR@10</th>
      <th>Recall@10</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19</th>
      <td>no punctuation</td>
      <td>bm25</td>
      <td>2000</td>
      <td>0.668046</td>
      <td>0.94315</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-ea293031-af15-4fcd-bb00-77b780978cbb')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-ea293031-af15-4fcd-bb00-77b780978cbb button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-ea293031-af15-4fcd-bb00-77b780978cbb');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    </div>
  </div>
</div>
</div>
</section>
<section id="best-overall-recall10" class="level3">
<h3 class="anchored" data-anchor-id="best-overall-recall10">Best Overall Recall@10</h3>
<p>Full text search also yielded the best overall Recall@10 at 95%, also at a chunk size of 2000 tokens, but for text with no preprocessing on it (other than splitting the notebook into 2-3 chunks). Wow!</p>
<div class="cell" data-outputid="52b55409-0b36-4a53-c9f0-8e77a5de3b4f" data-execution_count="33">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df[df[<span class="st" style="color: #20794D;">'Recall@10'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'Recall@10'</span>].<span class="bu" style="color: null;">max</span>()]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">


  <div id="df-27ff4a6e-ae12-430a-8b49-93dbfd0a6221" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>data</th>
      <th>method</th>
      <th>chunk_size</th>
      <th>MRR@10</th>
      <th>Recall@10</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>19</th>
      <td>no preprocessing</td>
      <td>bm25</td>
      <td>2000</td>
      <td>0.658541</td>
      <td>0.95493</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-27ff4a6e-ae12-430a-8b49-93dbfd0a6221')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-27ff4a6e-ae12-430a-8b49-93dbfd0a6221 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-27ff4a6e-ae12-430a-8b49-93dbfd0a6221');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    </div>
  </div>
</div>
</div>
</section>
<section id="analyzing-metrics-by-chunk-size-range" class="level3">
<h3 class="anchored" data-anchor-id="analyzing-metrics-by-chunk-size-range">Analyzing Metrics by Chunk Size Range</h3>
<p>I care about chunk size because eventually I am going to pass on the retrieved context to an LLM for answer generation and context size will dictate latency and potentially performance.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df[<span class="st" style="color: #20794D;">'category'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.cut(df[<span class="st" style="color: #20794D;">'chunk_size'</span>], bins<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">2000</span>], labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'small'</span>, <span class="st" style="color: #20794D;">'medium'</span>, <span class="st" style="color: #20794D;">'large'</span>], include_lowest<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<section id="mrr10" class="level4">
<h4 class="anchored" data-anchor-id="mrr10">MRR@10</h4>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Chunk Size Category</th>
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">MRR@10</th>
<th style="text-align: center;">Chunk Size</th>
<th style="text-align: center;">Dataset</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Small (100-500 tokens)</td>
<td style="text-align: center;">answer-colbert-small-v1</td>
<td style="text-align: center;">0.59</td>
<td style="text-align: center;">500 tokens</td>
<td style="text-align: center;">No punctuation</td>
</tr>
<tr class="even">
<td style="text-align: center;">Medium (501-1000 tokens)</td>
<td style="text-align: center;">ColBERTv2</td>
<td style="text-align: center;">0.61</td>
<td style="text-align: center;">600 tokens</td>
<td style="text-align: center;">No punctuation</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Large (1001-2000 tokens)</td>
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">0.67</td>
<td style="text-align: center;">2000 tokens</td>
<td style="text-align: center;">No punctuation</td>
</tr>
</tbody>
</table>
<p>Interesting to note:</p>
<ul>
<li>600 tokens was the best-performing chunk size for medium chunks.</li>
<li>In all three cases, text without punctuation resulted in the best MRR@10.</li>
</ul>
</section>
<section id="recall10" class="level4">
<h4 class="anchored" data-anchor-id="recall10">Recall@10</h4>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Chunk Size Category</th>
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">Recall@10</th>
<th style="text-align: center;">Chunk Size</th>
<th style="text-align: center;">Data</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Small (100-500 tokens)</td>
<td style="text-align: center;">answer-colbert-small-v1</td>
<td style="text-align: center;">0.88</td>
<td style="text-align: center;">500 tokens</td>
<td style="text-align: center;">No punctuation</td>
</tr>
<tr class="even">
<td style="text-align: center;">Medium (501-1000 tokens)</td>
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">0.92</td>
<td style="text-align: center;">1000 tokens</td>
<td style="text-align: center;">No preprocessing</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Large (1001-2000 tokens)</td>
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">0.95</td>
<td style="text-align: center;">2000 tokens</td>
<td style="text-align: center;">No preprocessing</td>
</tr>
</tbody>
</table>
<p>Interesting to note:</p>
<ul>
<li>The highest chunk size in each range yielded the best MRR@10.</li>
<li>Text without punctuation worked best for small chunks while unprocessed text worked best for medium and large chunks.</li>
</ul>
</section>
</section>
<section id="visualizing-metrics-by-chunk-size-and-method" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-metrics-by-chunk-size-and-method">Visualizing Metrics by Chunk Size and Method</h3>
<div class="cell" data-execution_count="162">
<details>
<summary>Show <code>plot_metrics</code> function</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;">def</span> plot_metrics(df, metric<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"MRR@10"</span>):</span>
<span id="cb37-2">  plt.style.use(<span class="st" style="color: #20794D;">'seaborn-v0_8-bright'</span>)</span>
<span id="cb37-3">  fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb37-4">  colors <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'#268BD2'</span>, <span class="st" style="color: #20794D;">'#DC322F'</span>, <span class="st" style="color: #20794D;">'#859900'</span>, <span class="st" style="color: #20794D;">'#6C71C4'</span>]</span>
<span id="cb37-5"></span>
<span id="cb37-6">  <span class="cf" style="color: #003B4F;">for</span> i, dataset <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>([<span class="st" style="color: #20794D;">'no preprocessing'</span>, <span class="st" style="color: #20794D;">'no HTML'</span>, <span class="st" style="color: #20794D;">'no punctuation'</span>]):</span>
<span id="cb37-7">    data_df <span class="op" style="color: #5E5E5E;">=</span> df[df[<span class="st" style="color: #20794D;">'data'</span>] <span class="op" style="color: #5E5E5E;">==</span> dataset]</span>
<span id="cb37-8"></span>
<span id="cb37-9">    <span class="cf" style="color: #003B4F;">for</span> j, method <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">sorted</span>(data_df[<span class="st" style="color: #20794D;">'method'</span>].unique())):</span>
<span id="cb37-10">      method_data <span class="op" style="color: #5E5E5E;">=</span> data_df[data_df[<span class="st" style="color: #20794D;">'method'</span>] <span class="op" style="color: #5E5E5E;">==</span> method]</span>
<span id="cb37-11">      axs[i].plot(method_data[<span class="st" style="color: #20794D;">'chunk_size'</span>], method_data[metric],</span>
<span id="cb37-12">                        linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb37-13">                        color<span class="op" style="color: #5E5E5E;">=</span>colors[j],</span>
<span id="cb37-14">                        label<span class="op" style="color: #5E5E5E;">=</span>method)</span>
<span id="cb37-15">      <span class="co" style="color: #5E5E5E;">#axs[i].scatter(method_data['chunk_size'], method_data[metric], color=colors[j], s=25)</span></span>
<span id="cb37-16"></span>
<span id="cb37-17">      axs[i].set_xlabel(<span class="st" style="color: #20794D;">'Chunk Size (Tokens)'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb37-18">      axs[i].set_ylabel(<span class="st" style="color: #20794D;">'Score'</span> <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">''</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb37-19">      axs[i].set_title(dataset.replace(<span class="st" style="color: #20794D;">'no '</span>, <span class="st" style="color: #20794D;">'No '</span>), fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>, pad<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb37-20">      axs[i].tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'both'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">14</span>)</span>
<span id="cb37-21">      axs[i].grid(<span class="va" style="color: #111111;">True</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.8</span>)</span>
<span id="cb37-22">      axs[i].set_xlim(<span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">2050</span>)</span>
<span id="cb37-23">      <span class="cf" style="color: #003B4F;">if</span> metric <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'MRR@10'</span>: axs[i].set_ylim(<span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.7</span>)</span>
<span id="cb37-24">      <span class="cf" style="color: #003B4F;">else</span>: axs[i].set_ylim(<span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb37-25">  handles, labels <span class="op" style="color: #5E5E5E;">=</span> axs[<span class="dv" style="color: #AD0000;">0</span>].get_legend_handles_labels()</span>
<span id="cb37-26">  fig.legend(handles, labels, loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'right'</span>, bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.03</span>, <span class="fl" style="color: #AD0000;">0.5</span>), fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb37-27"></span>
<span id="cb37-28">  fig.suptitle(<span class="ss" style="color: #20794D;">f"fastbook-benchmark </span><span class="sc" style="color: #5E5E5E;">{</span>metric<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> by Chunk Size"</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">24</span>, y<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.05</span>)</span>
<span id="cb37-29">  plt.tight_layout()</span>
<span id="cb37-30">  plt.subplots_adjust(right<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.85</span>)</span>
<span id="cb37-31">  plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-outputid="22209e74-d208-4031-8e17-a5444e743802" data-execution_count="163">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">plot_metrics(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-35-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-29-fastbook-benchmark-results/index_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Takeaways:</p>
<ul>
<li>All semantic search methods peak at a chunk size of ~500 tokens.</li>
<li>Full text search (BM25) mostly monotonically improves with chunk size.</li>
<li>Single-vector cosine simililarity is the worst-performing method after ~250 tokens.</li>
<li>For semantic search methods, in general, answerai-colbert-small-v1 &gt; ColBERTv2 &gt; Single-vector cosine similarity.</li>
</ul>
<div class="cell" data-outputid="6d5cb540-5d7a-4fd7-8099-79499b94cd2e" data-execution_count="164">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">plot_metrics(df, metric<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Recall@10"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-36-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-29-fastbook-benchmark-results/index_files/figure-html/cell-36-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Takeaways:</p>
<ul>
<li>When the data is not preprocessed, all semantic search methods’ Recall@10 decreases from ~500 tokens to ~1000 tokens, then increase again to 2000 tokens.</li>
<li>After 500 tokens, full text search (BM25) has the best Recall@10 for most of the way.</li>
</ul>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>This was an incredibly awesome experience. I did a couple iterations of these experiments before this notebook, each time refactoring my approach so that I could relatively concisely run these chunk size experiments. That process was tough at times but really rewarding.</p>
<p>My three main takeaways:</p>
<ul>
<li>For small chunks, answerai-colbert-small-v1 has the best MRR@10 and Recall@10.</li>
<li>For medium chunks, use ColBERTv2 for the best MRR@10 and full text search for the best Recall@10.</li>
<li>For large chunks, full text search has the best MRR@10 and Recall@10.</li>
</ul>
<p>I expect to try out all of these approaches after I integrate an LLM to turn this information retrieval pipeline to a RAG pipeline. My hypothesis is that smaller chunks will yield better responses from the LLM since there will be less “noise” and more “signal” in the context.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>RAG</category>
  <category>information retrieval</category>
  <category>fastbookRAG</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-29-fastbook-benchmark-results/index.html</guid>
  <pubDate>Fri, 29 Nov 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Implementing Image-to-Image Generation for Stable Diffusion</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T13:18:05.871852Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T13:18:05.871314Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T13:19:06.856593Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T13:19:06.855831Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T13:18:05.871831Z&quot;}">
<details>
<summary>Show setup</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq diffusers transformers<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">4.46.2</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq pillow<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">11.0.0</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> diffusers <span class="im" style="color: #00769E;">import</span> LMSDiscreteScheduler, AutoencoderKL, UNet2DConditionModel, StableDiffusionPipeline</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> torchvision.transforms <span class="im" style="color: #00769E;">import</span> ToTensor</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> tqdm.auto <span class="im" style="color: #00769E;">import</span> tqdm</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> display</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> torch, math</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-12"></span>
<span id="cb1-13">tokenizer <span class="op" style="color: #5E5E5E;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16)</span>
<span id="cb1-14">text_encoder <span class="op" style="color: #5E5E5E;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-15">vae <span class="op" style="color: #5E5E5E;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;">"stabilityai/sd-vae-ft-ema"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-16">unet <span class="op" style="color: #5E5E5E;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">beta_start,beta_end <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.00085</span>,<span class="fl" style="color: #AD0000;">0.012</span></span>
<span id="cb1-19">scheduler <span class="op" style="color: #5E5E5E;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;">=</span>beta_start, beta_end<span class="op" style="color: #5E5E5E;">=</span>beta_end, beta_schedule<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21">height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-22">width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-23">num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">70</span></span>
<span id="cb1-24">guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span></span>
<span id="cb1-25">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In Lesson 10 of the fastai course (Part 2) Jeremy assigns us the following homework assignment:</p>
<blockquote class="blockquote">
<p>try picking one of the extra tricks we learned about like image-to-image, or negative prompts; see if you can implement negative prompt in your version of this; or try doing image-to-image; try adding callbacks</p>
</blockquote>
<p>In this blog post I’ll implement negative prompting using the diffusion loop code provided in the course’s <a href="https://github.com/fastai/diffusion-nbs/blob/master/stable_diffusion.ipynb">Stable Diffusion with Diffusers</a> notebook.</p>
<p>I’ll start by copy/pasting all of the boilerplate code provided in that notebook, and running it to make sure we get the desired images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T13:28:23.790908Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T13:28:23.790670Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T13:28:23.797107Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T13:28:23.796589Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T13:28:23.790890Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> text_enc(prompts, maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">if</span> maxlen <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: maxlen <span class="op" style="color: #5E5E5E;">=</span> tokenizer.model_max_length</span>
<span id="cb2-3">    inp <span class="op" style="color: #5E5E5E;">=</span> tokenizer(prompts, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>maxlen, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">return</span> text_encoder(inp.input_ids.to(<span class="st" style="color: #20794D;">"cuda"</span>))[<span class="dv" style="color: #AD0000;">0</span>].half()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">def</span> mk_img(t):</span>
<span id="cb2-7">    image <span class="op" style="color: #5E5E5E;">=</span> (t<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>).detach().cpu().permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>).numpy()</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">return</span> Image.fromarray((image<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span>).<span class="bu" style="color: null;">round</span>().astype(<span class="st" style="color: #20794D;">"uint8"</span>))</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb2-11">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb2-12">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb2-13">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb2-14">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb2-16"></span>
<span id="cb2-17">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb2-18">    scheduler.set_timesteps(steps)</span>
<span id="cb2-19">    <span class="co" style="color: #5E5E5E;">#latents = latents.to("cuda").half() * scheduler.init_noise_sigma</span></span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;">#latents = latents.to("cuda").half()</span></span>
<span id="cb2-21">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb2-22"></span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb2-24">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-26">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb2-27">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb2-28"></span>
<span id="cb2-29">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T13:29:18.641278Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T13:29:18.641043Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T13:29:28.807514Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T13:29:28.806911Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T13:29:18.641261Z&quot;}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'A dancer wearing a colorful dress'</span>])</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_33/2843554848.py:17: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6a3078084e204a0c9e7447e8581893d4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-4-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index_files/figure-html/cell-4-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="implementing-image-to-image-generation" class="level2">
<h2 class="anchored" data-anchor-id="implementing-image-to-image-generation">Implementing Image-to-Image Generation</h2>
<p>In the default implementation of the stable diffusion loop, we start out with a set of random latents:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb5-2">latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span></code></pre></div>
<p>What we want for image-to-image generation is to start with noisy latents for some initial image. This will involve:</p>
<ul>
<li>Loading an image as a tensor.</li>
<li>Encoding the image into latents.</li>
<li>Adding some noise to the latents.</li>
</ul>
<section id="loading-an-image-as-a-tensor" class="level3">
<h3 class="anchored" data-anchor-id="loading-an-image-as-a-tensor">Loading an image as a tensor</h3>
<p>I’ll use this Macaw from Lesson 10 as the initial image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:11.204851Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:11.204266Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:11.253725Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:11.253162Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:11.204828Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">init_image_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"macaw.jpg"</span></span>
<span id="cb6-2">im <span class="op" style="color: #5E5E5E;">=</span> Image.<span class="bu" style="color: null;">open</span>(init_image_path)</span>
<span id="cb6-3">im</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-5-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The original image contains values between <code>0</code> and <code>255</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:11.860720Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:11.860141Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:11.866142Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:11.865593Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:11.860698Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">np.array(im).<span class="bu" style="color: null;">min</span>(), np.array(im).<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>(0, 255)</code></pre>
</div>
</div>
<p>The following lines load the image, resize it to the desired size (512x512) and convert it to a tensor using <code>torchvision.transforms.ToTensor</code>. I also make sure the image is on the GPU and is using <code>half</code>-precision (which is used by the VAE):</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:12.600519Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:12.599890Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:12.639371Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:12.638708Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:12.600493Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">transform <span class="op" style="color: #5E5E5E;">=</span> ToTensor()</span>
<span id="cb9-2">init_image <span class="op" style="color: #5E5E5E;">=</span> transform(Image.<span class="bu" style="color: null;">open</span>(init_image_path).convert(<span class="st" style="color: #20794D;">'RGB'</span>).resize((<span class="dv" style="color: #AD0000;">512</span>, <span class="dv" style="color: #AD0000;">512</span>))).to(<span class="st" style="color: #20794D;">"cuda"</span>).half()</span></code></pre></div>
</div>
<p>The transformed image (to tensor) contains values between <code>0</code> and <code>1</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:13.771012Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:13.770450Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:13.776280Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:13.775765Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:13.770989Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">init_image.<span class="bu" style="color: null;">min</span>(), init_image.<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>(tensor(0., device='cuda:0', dtype=torch.float16),
 tensor(1., device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
</section>
<section id="encoding-the-image-into-latents" class="level3">
<h3 class="anchored" data-anchor-id="encoding-the-image-into-latents">Encoding the image into latents</h3>
<p>I reference the following line from <code>mk_img</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">image <span class="op" style="color: #5E5E5E;">=</span> (t<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>).detach().cpu().permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>).numpy()</span></code></pre></div>
<p>and the following line from <code>mk_samples</code>:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
<p>to encode the initial image into latents with the following line:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:14.776602Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:14.775956Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:14.787577Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:14.786938Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:14.776535Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">latents <span class="op" style="color: #5E5E5E;">=</span> vae.encode(init_image.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>).latent_dist.sample() <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.18215</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:16.897011Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:16.896425Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:16.900844Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:16.900254Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:16.896988Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">latents.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
<p>Note that the VAE encoder expects values between <code>-1</code> and <code>1</code> so we have to transform the image tensor accordingly:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:17.458562Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:17.458134Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:17.465208Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:17.464604Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:17.458539Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">shifted_im <span class="op" style="color: #5E5E5E;">=</span> init_image.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb17-2">shifted_im.<span class="bu" style="color: null;">min</span>(), shifted_im.<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>(tensor(-1., device='cuda:0', dtype=torch.float16),
 tensor(1., device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
</section>
<section id="adding-some-noise-to-the-latents" class="level3">
<h3 class="anchored" data-anchor-id="adding-some-noise-to-the-latents">Adding some noise to the latents</h3>
<p>We don’t want to start the diffusion loop with the original image’s latents because the UNet is trained to predict noise on noisy latents. In order to give the UNet it’s expected input (noisy latents) we need to add noise to our initial image’s latents!</p>
<p>We don’t want to literally <em>add</em> (with <code>+</code>) noise to the latents. Instead, we want to simulating the diffusion process as if it were starting from pure random noise. To do this, we need to prep the <code>scheduler</code> with the total number of <code>steps</code> (so it can calculate noise appropriately), pick some initial step for our noise, and add it to our latents with <code>add_noise</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:23.056353Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:23.055659Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:23.062361Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:23.061809Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:23.056333Z&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># set timesteps</span></span>
<span id="cb19-2">steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">70</span></span>
<span id="cb19-3">scheduler.set_timesteps(steps)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;"># get start timestep</span></span>
<span id="cb19-6">init_strength <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.15</span> <span class="co" style="color: #5E5E5E;"># can be anything 0-1</span></span>
<span id="cb19-7">init_step <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(init_strength <span class="op" style="color: #5E5E5E;">*</span> steps)</span>
<span id="cb19-8">ts_start <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([scheduler.timesteps[init_step]])</span>
<span id="cb19-9"></span>
<span id="cb19-10"><span class="co" style="color: #5E5E5E;"># create noise</span></span>
<span id="cb19-11">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-12">noise <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>)).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb19-13"></span>
<span id="cb19-14"><span class="co" style="color: #5E5E5E;"># add noise</span></span>
<span id="cb19-15">latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.add_noise(latents, noise, ts_start).half()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_33/3549084226.py:12: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  noise = torch.randn((bs, unet.in_channels, height//8, width//8)).to("cuda")</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:23.381289Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:23.380821Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:23.385088Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:23.384548Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:23.381270Z&quot;}" data-execution_count="62">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">latents.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>torch.Size([1, 4, 64, 64])</code></pre>
</div>
</div>
<p>Note that <code>init_step</code> and <code>ts_start</code> are two different values.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T15:49:42.261829Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T15:49:42.261343Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T15:49:42.273193Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T15:49:42.272715Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T15:49:42.261811Z&quot;}" data-execution_count="63">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">init_step, ts_start</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>(10, tensor([854.2174]))</code></pre>
</div>
</div>
</section>
<section id="running-the-diffusion-loop" class="level3">
<h3 class="anchored" data-anchor-id="running-the-diffusion-loop">Running the diffusion loop</h3>
<p>I’ll define some of the related inputs so I can run the diffusion loop with our initial image’s noisy latents. Note that we are not starting the diffusion loop with the first <code>ts</code> but rather starting at the <code>init_step</code> we calculated above:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:31:55.216963Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:31:55.216429Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:31:55.234369Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:31:55.233913Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:31:55.216941Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">prompts<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'A dancer wearing a colorful dress'</span>]</span>
<span id="cb25-2">g <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span></span>
<span id="cb25-3">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb25-4"></span>
<span id="cb25-5">bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb25-6">text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb25-7">uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb25-8">emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb25-9"><span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:31:56.032350Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:31:56.031899Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:32:01.445511Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:32:01.445068Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:31:56.032332Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps[init_step:])):</span>
<span id="cb26-2">    inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb26-3"></span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb26-5">    pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb26-6">    latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): </span>
<span id="cb26-9">    final_image <span class="op" style="color: #5E5E5E;">=</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6b73f194398e422f9974f31d4de427c8","version_major":2,"version_minor":0}
</script>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:32:01.447562Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:32:01.447421Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:32:01.649725Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:32:01.649249Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:32:01.447548Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">display(mk_img(final_image[<span class="dv" style="color: #AD0000;">0</span>]))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-17-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>As a reminder, here is the initial image, we can see the similarities in color structure (note the transitions from red –&gt; blue –&gt; green –&gt; yellow).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:30:35.761977Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:30:35.761425Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:30:35.809960Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:30:35.809387Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:30:35.761955Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">Image.<span class="bu" style="color: null;">open</span>(init_image_path)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-18-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="varying-init_strength" class="level2">
<h2 class="anchored" data-anchor-id="varying-init_strength">Varying <code>init_strength</code></h2>
<p>With the core functionality of image-to-image generation working properly, I’ll wrap it all into a function so I can loop through different <code>init_strength</code> values to see how it affects the generated image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:43:46.865913Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:43:46.865471Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:43:46.871618Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:43:46.871129Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:43:46.865893Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, init_image_path, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, init_strength<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.15</span>):</span>
<span id="cb29-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb29-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb29-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb29-5">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb29-6">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb29-7"></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;"># load image as tensor</span></span>
<span id="cb29-9">    transform <span class="op" style="color: #5E5E5E;">=</span> ToTensor()</span>
<span id="cb29-10">    init_image <span class="op" style="color: #5E5E5E;">=</span> transform(Image.<span class="bu" style="color: null;">open</span>(init_image_path).convert(<span class="st" style="color: #20794D;">'RGB'</span>).resize((<span class="dv" style="color: #AD0000;">512</span>, <span class="dv" style="color: #AD0000;">512</span>))).to(<span class="st" style="color: #20794D;">"cuda"</span>).half()</span>
<span id="cb29-11"></span>
<span id="cb29-12">    <span class="co" style="color: #5E5E5E;"># encode image into latents</span></span>
<span id="cb29-13">    latents <span class="op" style="color: #5E5E5E;">=</span> vae.encode(init_image.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>).latent_dist.sample() <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.18215</span></span>
<span id="cb29-14"></span>
<span id="cb29-15">    <span class="co" style="color: #5E5E5E;"># set timesteps</span></span>
<span id="cb29-16">    scheduler.set_timesteps(steps)</span>
<span id="cb29-17"></span>
<span id="cb29-18">    <span class="co" style="color: #5E5E5E;"># get start timestep</span></span>
<span id="cb29-19">    init_step <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(init_strength <span class="op" style="color: #5E5E5E;">*</span> steps)</span>
<span id="cb29-20">    ts_start <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([scheduler.timesteps[init_step]])</span>
<span id="cb29-21"></span>
<span id="cb29-22">    <span class="co" style="color: #5E5E5E;"># create noise</span></span>
<span id="cb29-23">    noise <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>)).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb29-24"></span>
<span id="cb29-25">    <span class="co" style="color: #5E5E5E;"># add noise</span></span>
<span id="cb29-26">    latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.add_noise(latents, noise, ts_start).half()</span>
<span id="cb29-27"></span>
<span id="cb29-28">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps[init_step:])):</span>
<span id="cb29-29">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb29-30"></span>
<span id="cb29-31">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb29-32">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb29-33">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb29-34"></span>
<span id="cb29-35">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span>
<span id="cb29-36">    </span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:44:31.729769Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:44:31.729006Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:50:27.569619Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:50:27.569049Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:44:31.729740Z&quot;}">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">imgs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb30-3">  images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"A dancer wearing a colorful dress"</span>], init_image_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"macaw.jpg"</span>, init_strength<span class="op" style="color: #5E5E5E;">=</span>i<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb30-4">  imgs.append(images[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:51:29.705116Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:51:29.704833Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:51:31.753480Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:51:31.752790Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:51:29.705097Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">imgs <span class="op" style="color: #5E5E5E;">=</span> [mk_img(img.squeeze()) <span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> imgs]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-27T14:51:37.391596Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-27T14:51:37.391308Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-27T14:51:50.329505Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-27T14:51:50.328829Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-27T14:51:37.391576Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">imgs[<span class="dv" style="color: #AD0000;">0</span>].save(<span class="ss" style="color: #20794D;">f'init_strength.gif'</span>, save_all<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, append_images<span class="op" style="color: #5E5E5E;">=</span>imgs[<span class="dv" style="color: #AD0000;">1</span>:], duration<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, loop<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="init_strength.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="init_strength goes from 0 to 1.0"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/init_strength.gif" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption"><code>init_strength</code> goes from 0 to 1.0</figcaption><p></p>
</figure>
</div>
<p>As <code>init_strength</code> goes from <code>0.0</code> (totally random initial noise) to <code>0.99</code> (very lightly noised initial image) we can see how the prompt conforms to the color and structure of the initial image.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Working through this implementation solidified my understanding of the diffusion loop. A few small but key points that I paid more attention to this time around:</p>
<ul>
<li>The VAE encoder expects latent values between <code>-1</code> and <code>1</code> so we have to transform our image tensor accordingly.</li>
<li>Adding noise to our initial image’s latents requires:
<ul>
<li>Picking a total number of inference steps.</li>
<li>Picking an initial step (at which we will apply the noise) and the corresponding <code>scheduler</code> timestep.</li>
<li>Using <code>scheduler.add_noise</code>.</li>
</ul></li>
<li>The text encoding process remains untouched.</li>
<li>The only change to the diffusion loop is starting at <code>scheduler.timesteps[init_step]</code> instead of the first timestep.</li>
</ul>
<p>The last implementation for this HW assignment will be to implement callbacks, which I’ll do in a future blog post! Thanks for reading!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>stable diffusion</category>
  <category>fastai</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>generative AI</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/index.html</guid>
  <pubDate>Wed, 27 Nov 2024 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-11-27-image-to-image-diffusion/init_strength.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Evaluating 4 Retrieval Methods with 6 Chunking Strategies on my fastbook-benchmark Dataset</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-26-fastbook-benchmark-results/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I re-run my full text search and semantic search retrieval methods for fastbook questions and use my newly curated <a href="https://gist.github.com/vishalbakshi/a507b6e9e893475e93a4141e96b8947d">fastbook-benchmark</a> dataset to calculate Answer Component MRR@10 and Answer Component Recall@10 retrieval metrics. Due to how my benchmark dataset is structured, I had to modify (with Claude’s help) the classic MRR and Recall functions:</p>
<ul>
<li><p>Answer Component MRR@10: Returns the rank of the n-th passage needed to satisfy all <code>answer_component</code>s for the question. So, if a question has 4 <code>answer_component</code>s and their relevant contexts were contained across the first 5 retrieved passages, MRR would be 1/5 = 0.2.</p></li>
<li><p>Answer Component Recall@10: Measures the proportion of answer components for which at least one supporting context was retrieved. Using the same example, if the top-10 passages only contain contexts relevant to 2 <code>answer_component</code>s, Recall would be 2/4 = 0.5</p></li>
</ul>
<p>See the section below to see how my benchmark dataset is structured.</p>
<p>There are four retrieval methods I implement in this notebook:</p>
<ul>
<li>Full text search (using sqlite and Claude-generated keywords)</li>
<li>Single-vector cosine similarity (using BAAI/bge-small-en-v1.5)</li>
<li>ColBERTv2</li>
<li>answerai-colbert-small-v1</li>
</ul>
<p>There are six chunking strategies I implement:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chunking Strategy Name</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">1-paragraph (w/headers)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">3-paragraph (w/headers)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">1-paragraph (w/o headers)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">3-paragraph (w/o headers)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">3-paragraph (w/headers, w/o HTML tags)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">3-paragraph (w/headers, w/o HTML tags, w/o punctuation)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook:</p>
<p><strong>Answer Component MRR@10</strong></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">A</th>
<th style="text-align: center;">B</th>
<th style="text-align: center;">C</th>
<th style="text-align: center;">D</th>
<th style="text-align: center;">E</th>
<th style="text-align: center;">F</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">0.30</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.29</td>
<td style="text-align: center;">0.44</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.46</td>
</tr>
<tr class="even">
<td style="text-align: center;">Single-vector cosine similiarity</td>
<td style="text-align: center;">0.38</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.35</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.49</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERTv2</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.49</td>
<td style="text-align: center;">0.41</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.49</td>
<td style="text-align: center;">0.44</td>
</tr>
<tr class="even">
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">0.48</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.45</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.45</td>
</tr>
</tbody>
</table>
<p><br></p>
<p><strong>Answer Component Recall@10</strong></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">A</th>
<th style="text-align: center;">B</th>
<th style="text-align: center;">C</th>
<th style="text-align: center;">D</th>
<th style="text-align: center;">E</th>
<th style="text-align: center;">F</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">65%</td>
<td style="text-align: center;">83%</td>
<td style="text-align: center;">65%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">83%</td>
<td style="text-align: center;">83%</td>
</tr>
<tr class="even">
<td style="text-align: center;">Single-vector cosine similiarity</td>
<td style="text-align: center;">71%</td>
<td style="text-align: center;">85%</td>
<td style="text-align: center;">72%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">87%</td>
<td style="text-align: center;">86%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERTv2</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">74%</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">81%</td>
<td style="text-align: center;">71%</td>
</tr>
<tr class="even">
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">84%</td>
<td style="text-align: center;">77%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">84%</td>
<td style="text-align: center;">73%</td>
</tr>
</tbody>
</table>
<p>The best-performing retrieval method and chunking strategies:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Metric Name</th>
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">Chunking Strategies</th>
<th style="text-align: center;">Metric Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Answer Component MRR@10</td>
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">B, D, E</td>
<td style="text-align: center;">0.52</td>
</tr>
<tr class="even">
<td style="text-align: center;">Answer Component Recall@10</td>
<td style="text-align: center;">Single-vector cosine similiarty</td>
<td style="text-align: center;">E</td>
<td style="text-align: center;">87%</td>
</tr>
</tbody>
</table>
</section>
<section id="the-fastbook-benchmark-dataset" class="level2">
<h2 class="anchored" data-anchor-id="the-fastbook-benchmark-dataset">The fastbook-benchmark Dataset</h2>
<p>The fastbook-benchmark dataset contains a list of items (questions). Each item looks something like this:</p>
<pre><code>{
            "chapter": 1,
            "question_number": 1,
            "question_text": "Do you need these for deep learning?\n\n- Lots of math..."",
            "answer_context": [
                {
                    "answer_component": "\"Lots of math..."",
                    "scoring_type": "simple",
                    "context": [
                        "...Lots of math..."
                    ],
                    "explicit_context": "true",
                    "extraneous_answer": "false"
                }
            ],
            "question_context": []
        },</code></pre>
<p>I have broken down each <code>gold_standard_answer</code> into separate <code>answer_component</code>s, each of which has associated with it one or more <code>context</code>s from the chapter text that address that <code>answer_component</code>. Here’s an example of a question with two <code>answer_component</code>s:</p>
<pre><code>{
            "chapter": 1,
            "question_number": 5,
            "question_text": "What were the two theoretical misunderstandings that held back the field of neural networks?",
            "gold_standard_answer": "\"In 1969..."",
            "answer_context": [
                {
                    "answer_component": "\"In 1969..."",
                    "scoring_type": "simple",
                    "context": [
                        "An MIT professor named..."
                    ],
                    "explicit_context": "true",
                    "extraneous_answer": "false"
                },
                {
                    "answer_component": "\"\n\nIn the 1980's..."",
                    "scoring_type": "simple",
                    "context": [
                        "In the 1980's..."
                    ],
                    "explicit_context": "true",
                    "extraneous_answer": "false"
                }
            ],
            "question_context": []
        },</code></pre>
<p>Any one of the <code>context</code>s is sufficient to address the associated <code>answer_component</code>. For example, for Chapter 1 Question 12:</p>
<pre><code>{
  "answer_component": "We instead use the term parameters.",
  "scoring_type": "simple",
  "context": [
      "By the way, what Samuel called \"weights\" are most generally referred to as model *parameters* these days",

      "The *weights* are called *parameters*"
  ],
  "explicit_context": "true",
  "extraneous_answer": "false"
}</code></pre>
<p>For some questions’ <code>gold_standard_answer</code> I found that some <code>answer_component</code>s were extraneous to the goal of the question. These have been marked with the flag <code>"extraneous_answer": "false"</code>.</p>
<p>For some <code>answer_component</code>s I found the corresponding <code>context</code> implicitly addressing it. These have been marked with the flag <code>"explicit_context": "false"</code>.</p>
<p>Finally, for some <code>answer_component</code>s I did not find relevant context in the given chapter so the <code>context</code> field is assigned an empty list <code>[]</code>.</p>
<p>All of the design decisions for this fastbook-benchmark dataset have largely been driven by one goal: don’t change the <code>gold_standard_answer</code>. I have been using the fastai Forums’ Wiki solutions page for each chapter as the gold standard answer set (<a href="https://forums.fast.ai/t/fastbook-chapter-1-questionnaire-solutions-wiki/65647">example</a>).</p>
</section>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<p>::: {.cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ trusted=‘true’}</p>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>pip install sentence<span class="op" style="color: #5E5E5E;">-</span>transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq RAGatouille</span>
<span id="cb4-3"><span class="op" style="color: #5E5E5E;">!</span>pip install ftfy <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
<p>:::</p>
<div class="cell" data-trusted="true">
<details>
<summary>Show imports</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">import</span> sqlite3</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb5-3"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb5-4"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb5-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb5-6"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb5-7"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb5-8"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb5-9"><span class="im" style="color: #00769E;">from</span> ftfy <span class="im" style="color: #00769E;">import</span> fix_text</span>
<span id="cb5-10"><span class="im" style="color: #00769E;">from</span> sentence_transformers <span class="im" style="color: #00769E;">import</span> SentenceTransformer</span>
<span id="cb5-11"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb5-12">emb_model <span class="op" style="color: #5E5E5E;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;">"BAAI/bge-small-en-v1.5"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:40:50.025834Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:40:50.025034Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:40:50.036117Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:40:50.035220Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:40:50.025798Z&quot;}" data-trusted="true" data-execution_count="3">
<details>
<summary>Show chunking code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> get_chunks(notebook_path):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(notebook_path, <span class="st" style="color: #20794D;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'utf-8'</span>) <span class="im" style="color: #00769E;">as</span> <span class="bu" style="color: null;">file</span>:</span>
<span id="cb6-3">        notebook <span class="op" style="color: #5E5E5E;">=</span> json.load(<span class="bu" style="color: null;">file</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5">    chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb6-6">    current_header <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="kw" style="color: #003B4F;">def</span> add_chunk(content):</span>
<span id="cb6-9">        <span class="cf" style="color: #003B4F;">if</span> content.strip():</span>
<span id="cb6-10">            chunks.append(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>current_header<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n\n</span><span class="sc" style="color: #5E5E5E;">{</span>content<span class="sc" style="color: #5E5E5E;">.</span>strip()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;">for</span> cell <span class="kw" style="color: #003B4F;">in</span> notebook[<span class="st" style="color: #20794D;">'cells'</span>]:</span>
<span id="cb6-13">        <span class="cf" style="color: #003B4F;">if</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'markdown'</span>:</span>
<span id="cb6-14">            content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span>.join(cell[<span class="st" style="color: #20794D;">'source'</span>])</span>
<span id="cb6-15">            <span class="co" style="color: #5E5E5E;"># see if the cell starts with a markdown header</span></span>
<span id="cb6-16">            header_match <span class="op" style="color: #5E5E5E;">=</span> re.match(<span class="vs" style="color: #20794D;">r'^(#+\s+.*?)$'</span>, content, re.MULTILINE)</span>
<span id="cb6-17">            <span class="cf" style="color: #003B4F;">if</span> header_match:</span>
<span id="cb6-18">                <span class="co" style="color: #5E5E5E;"># grab the header</span></span>
<span id="cb6-19">                current_header <span class="op" style="color: #5E5E5E;">=</span> header_match.group(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-20">                <span class="co" style="color: #5E5E5E;"># add any content after the header in the same cell</span></span>
<span id="cb6-21">                remaining_content <span class="op" style="color: #5E5E5E;">=</span> content[<span class="bu" style="color: null;">len</span>(current_header):].strip()</span>
<span id="cb6-22">                <span class="cf" style="color: #003B4F;">if</span> remaining_content:</span>
<span id="cb6-23">                    <span class="co" style="color: #5E5E5E;"># split content into paragraphs</span></span>
<span id="cb6-24">                    paragraphs <span class="op" style="color: #5E5E5E;">=</span> re.split(<span class="vs" style="color: #20794D;">r'\n\s*\n'</span>, remaining_content)</span>
<span id="cb6-25">                    <span class="co" style="color: #5E5E5E;"># append the paragraph to the list of chunks</span></span>
<span id="cb6-26">                    <span class="cf" style="color: #003B4F;">for</span> paragraph <span class="kw" style="color: #003B4F;">in</span> paragraphs:</span>
<span id="cb6-27">                        add_chunk(paragraph)</span>
<span id="cb6-28">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-29">                <span class="co" style="color: #5E5E5E;"># split content into paragraphs</span></span>
<span id="cb6-30">                paragraphs <span class="op" style="color: #5E5E5E;">=</span> re.split(<span class="vs" style="color: #20794D;">r'\n\s*\n'</span>, content)</span>
<span id="cb6-31">                <span class="co" style="color: #5E5E5E;"># append the paragraph to the list of chunks</span></span>
<span id="cb6-32">                <span class="cf" style="color: #003B4F;">for</span> paragraph <span class="kw" style="color: #003B4F;">in</span> paragraphs:</span>
<span id="cb6-33">                    add_chunk(paragraph)</span>
<span id="cb6-34">        <span class="cf" style="color: #003B4F;">elif</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'code'</span>:</span>
<span id="cb6-35">          code_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'```python</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">''</span>.join(cell[<span class="st" style="color: #20794D;">'source'</span>]) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">```'</span></span>
<span id="cb6-36"></span>
<span id="cb6-37">          <span class="co" style="color: #5E5E5E;"># include the output of the code cell</span></span>
<span id="cb6-38">          output_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb6-39">          <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'outputs'</span> <span class="kw" style="color: #003B4F;">in</span> cell <span class="kw" style="color: #003B4F;">and</span> cell[<span class="st" style="color: #20794D;">'outputs'</span>]:</span>
<span id="cb6-40">              <span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> cell[<span class="st" style="color: #20794D;">'outputs'</span>]:</span>
<span id="cb6-41">                  <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'text'</span> <span class="kw" style="color: #003B4F;">in</span> output:</span>
<span id="cb6-42">                      output_content <span class="op" style="color: #5E5E5E;">+=</span> <span class="st" style="color: #20794D;">''</span>.join(output[<span class="st" style="color: #20794D;">'text'</span>])</span>
<span id="cb6-43">                  <span class="cf" style="color: #003B4F;">elif</span> <span class="st" style="color: #20794D;">'data'</span> <span class="kw" style="color: #003B4F;">in</span> output <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'text/plain'</span> <span class="kw" style="color: #003B4F;">in</span> output[<span class="st" style="color: #20794D;">'data'</span>]:</span>
<span id="cb6-44">                      output_content <span class="op" style="color: #5E5E5E;">+=</span> <span class="st" style="color: #20794D;">''</span>.join(output[<span class="st" style="color: #20794D;">'data'</span>][<span class="st" style="color: #20794D;">'text/plain'</span>])</span>
<span id="cb6-45"></span>
<span id="cb6-46">          <span class="co" style="color: #5E5E5E;"># combine code and output in the same chunk</span></span>
<span id="cb6-47">          combined_content <span class="op" style="color: #5E5E5E;">=</span> code_content <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">Output:</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">+</span> output_content <span class="cf" style="color: #003B4F;">if</span> output_content <span class="cf" style="color: #003B4F;">else</span> code_content</span>
<span id="cb6-48">          add_chunk(combined_content)</span>
<span id="cb6-49"></span>
<span id="cb6-50">    <span class="kw" style="color: #003B4F;">def</span> filter_chunks(chunks, exclude_headers<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Questionnaire"</span>, <span class="st" style="color: #20794D;">"Further Research"</span>]):</span>
<span id="cb6-51">      filtered_chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb6-52">      <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb6-53">          lines <span class="op" style="color: #5E5E5E;">=</span> chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb6-54">          <span class="co" style="color: #5E5E5E;"># check if the first line (header) is in the exclude list</span></span>
<span id="cb6-55">          <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">any</span>(header <span class="kw" style="color: #003B4F;">in</span> lines[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> header <span class="kw" style="color: #003B4F;">in</span> exclude_headers):</span>
<span id="cb6-56">              filtered_chunks.append(chunk)</span>
<span id="cb6-57">      <span class="cf" style="color: #003B4F;">return</span> filtered_chunks</span>
<span id="cb6-58"></span>
<span id="cb6-59">    <span class="cf" style="color: #003B4F;">return</span> filter_chunks(chunks)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:40:57.639923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:40:57.639543Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:40:57.647438Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:40:57.646406Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:40:57.639889Z&quot;}" data-trusted="true" data-execution_count="59">
<details>
<summary>Show chunking code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> combine_chunks(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb7-2">    combined_chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-3">    current_header <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb7-4">    current_group <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-5"></span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb7-7">        <span class="co" style="color: #5E5E5E;"># Extract header from chunk</span></span>
<span id="cb7-8">        header <span class="op" style="color: #5E5E5E;">=</span> chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb7-9"></span>
<span id="cb7-10">        <span class="cf" style="color: #003B4F;">if</span> header <span class="op" style="color: #5E5E5E;">!=</span> current_header:</span>
<span id="cb7-11">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># Only add if group has content besides header</span></span>
<span id="cb7-12">                <span class="co" style="color: #5E5E5E;"># Add current group to combined chunks if header changes</span></span>
<span id="cb7-13">                combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb7-14">            <span class="co" style="color: #5E5E5E;"># Update current header</span></span>
<span id="cb7-15">            current_header <span class="op" style="color: #5E5E5E;">=</span> header</span>
<span id="cb7-16">            <span class="co" style="color: #5E5E5E;"># Start new group with header and content of current chunk</span></span>
<span id="cb7-17">            current_group <span class="op" style="color: #5E5E5E;">=</span> [header, chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">''</span>]</span>
<span id="cb7-18">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb7-19">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&lt;</span> num_p <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># +1 to account for header</span></span>
<span id="cb7-20">                <span class="co" style="color: #5E5E5E;"># Add chunk content (without header) to current group</span></span>
<span id="cb7-21">                current_group.append(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb7-22"></span>
<span id="cb7-23">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">==</span> num_p <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># +1 to account for header</span></span>
<span id="cb7-24">                <span class="co" style="color: #5E5E5E;"># Add full group to combined chunks</span></span>
<span id="cb7-25">                combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb7-26">                <span class="co" style="color: #5E5E5E;"># Reset current group, keeping the header</span></span>
<span id="cb7-27">                current_group <span class="op" style="color: #5E5E5E;">=</span> [current_header]</span>
<span id="cb7-28"></span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># Only add if group has content besides header</span></span>
<span id="cb7-30">        <span class="co" style="color: #5E5E5E;"># Add any remaining group to combined chunks</span></span>
<span id="cb7-31">        combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb7-32"></span>
<span id="cb7-33">    <span class="cf" style="color: #003B4F;">return</span> combined_chunks</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:04.360423Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:04.360060Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:04.367195Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:04.366259Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:04.360389Z&quot;}" data-trusted="true" data-execution_count="5">
<details>
<summary>Show the <code>load_data</code> function used for full text search</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> load_data(chunks, db_path, chapter<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb8-3">        <span class="co" style="color: #5E5E5E;"># create virtual table if database doesn't exist</span></span>
<span id="cb8-4">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> os.path.exists(db_path):</span>
<span id="cb8-5">            <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(db_path) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb8-6">              cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb8-7">              cur.execute(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb8-8"><span class="st" style="color: #20794D;">              CREATE VIRTUAL TABLE fastbook_text</span></span>
<span id="cb8-9"><span class="st" style="color: #20794D;">              USING FTS5(chapter, text);</span></span>
<span id="cb8-10"><span class="st" style="color: #20794D;">              """</span>)</span>
<span id="cb8-11">              conn.commit()</span>
<span id="cb8-12"></span>
<span id="cb8-13">        <span class="co" style="color: #5E5E5E;"># load in the chunks for each chapter</span></span>
<span id="cb8-14">        <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(db_path) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb8-15">            cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb8-16"></span>
<span id="cb8-17">            <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb8-18">                cur.execute(<span class="st" style="color: #20794D;">"INSERT INTO fastbook_text(chapter, text) VALUES (?, ?)"</span>, (chapter, chunk))</span>
<span id="cb8-19"></span>
<span id="cb8-20">            conn.commit()</span>
<span id="cb8-21">            res <span class="op" style="color: #5E5E5E;">=</span> cur.execute(<span class="st" style="color: #20794D;">"SELECT * FROM fastbook_text WHERE chapter = ?"</span>, (chapter,)).fetchall()</span>
<span id="cb8-22">        <span class="co" style="color: #5E5E5E;"># make sure all the data was loaded into the database</span></span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">!=</span> <span class="bu" style="color: null;">len</span>(chunks):</span>
<span id="cb8-24">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(<span class="ss" style="color: #20794D;">f"Number of inserted chunks (</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(res)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">) doesn't match input chunks (</span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(chunks)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">)"</span>)</span>
<span id="cb8-25"></span>
<span id="cb8-26">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb8-27"></span>
<span id="cb8-28">    <span class="cf" style="color: #003B4F;">except</span> sqlite3.Error <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb8-29">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"An error occurred: </span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb8-30">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb8-31">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">Exception</span> <span class="im" style="color: #00769E;">as</span> e:</span>
<span id="cb8-32">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"An unexpected error occurred: </span><span class="sc" style="color: #5E5E5E;">{</span>e<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb8-33">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:10.555260Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:10.554898Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:10.561423Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:10.560523Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:10.555227Z&quot;}" data-trusted="true" data-execution_count="6">
<details>
<summary>Show the <code>db_search</code> function used for full text search</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> db_search(df, limit<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb9-2">  results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb9-3">  <span class="cf" style="color: #003B4F;">with</span> sqlite3.<span class="ex" style="color: null;">connect</span>(<span class="st" style="color: #20794D;">'fastbook.db'</span>) <span class="im" style="color: #00769E;">as</span> conn:</span>
<span id="cb9-4">    cur <span class="op" style="color: #5E5E5E;">=</span> conn.cursor()</span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;"># concatenate the keywords into a string "keyword1 OR keyword 2 OR keyword3 ..."</span></span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">for</span> _, row <span class="kw" style="color: #003B4F;">in</span> df.iterrows():</span>
<span id="cb9-7">      keywords <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">' OR '</span>.join([<span class="ss" style="color: #20794D;">f'"</span><span class="sc" style="color: #5E5E5E;">{</span>keyword<span class="sc" style="color: #5E5E5E;">.</span>strip(<span class="st" style="color: #20794D;">","</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"'</span> <span class="cf" style="color: #003B4F;">for</span> keyword <span class="kw" style="color: #003B4F;">in</span> row[<span class="st" style="color: #20794D;">'keywords'</span>].replace(<span class="st" style="color: #20794D;">'"'</span>, <span class="st" style="color: #20794D;">''</span>).split()])</span>
<span id="cb9-8"></span>
<span id="cb9-9">      q <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"""</span></span>
<span id="cb9-10"><span class="ss" style="color: #20794D;">        SELECT text, rank</span></span>
<span id="cb9-11"><span class="ss" style="color: #20794D;">        FROM fastbook_text</span></span>
<span id="cb9-12"><span class="ss" style="color: #20794D;">        WHERE fastbook_text MATCH ?</span></span>
<span id="cb9-13"><span class="ss" style="color: #20794D;">        AND chapter = ?</span></span>
<span id="cb9-14"><span class="ss" style="color: #20794D;">        ORDER BY rank</span></span>
<span id="cb9-15"><span class="ss" style="color: #20794D;">        LIMIT ?</span></span>
<span id="cb9-16"><span class="ss" style="color: #20794D;">        """</span></span>
<span id="cb9-17">      res <span class="op" style="color: #5E5E5E;">=</span> cur.execute(q, (keywords, <span class="bu" style="color: null;">str</span>(row[<span class="st" style="color: #20794D;">'chapter'</span>]), limit)).fetchall()</span>
<span id="cb9-18">      <span class="co" style="color: #5E5E5E;"># grab the retrieved chunk from the query results</span></span>
<span id="cb9-19">      res <span class="op" style="color: #5E5E5E;">=</span> [item[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> item <span class="kw" style="color: #003B4F;">in</span> res]</span>
<span id="cb9-20"></span>
<span id="cb9-21">      <span class="co" style="color: #5E5E5E;"># if there are multiple chunks retrieved, combine them into a single string</span></span>
<span id="cb9-22">      results.append(res)</span>
<span id="cb9-23"></span>
<span id="cb9-24">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:18.494100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:18.493681Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:37.633040Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:37.632137Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:18.494059Z&quot;}" data-outputid="5ae64c31-c3da-4454-8bda-9378f25d3613" data-trusted="true" data-execution_count="7">
<details>
<summary>Download chapter ipynb files</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">urls <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb10-2">    <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1mmBjFH_plndPBC4iRZHChfMazgBxKK4_'</span>,</span>
<span id="cb10-3">    <span class="st" style="color: #20794D;">'02_production.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1Cf5QHthHy1z13H0iu3qrzAWgquCfqVHk'</span>,</span>
<span id="cb10-4">    <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=113909_BNulzyLIKUNJHdya0Hhoqie30I'</span>,</span>
<span id="cb10-5">    <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1BtvStgFjUtvtqbSZNrL7Y2N-ey3seNZU'</span>,</span>
<span id="cb10-6">    <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1rHFvwl_l-AJLg_auPjBpNrOgG9HDnfqg'</span>,</span>
<span id="cb10-7">    <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1pg1pH7jMMElzrXS0kBBz14aAuDsi2DEP'</span>,</span>
<span id="cb10-8">    <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=19P-eEHpAO3WrOvdxgXckyhHhfv_R-hnS'</span></span>
<span id="cb10-9">}</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="kw" style="color: #003B4F;">def</span> download_file(url, filename):</span>
<span id="cb10-12">    <span class="co" style="color: #5E5E5E;"># Send a GET request to the URL</span></span>
<span id="cb10-13">    response <span class="op" style="color: #5E5E5E;">=</span> requests.get(url)</span>
<span id="cb10-14"></span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;"># Check if the request was successful</span></span>
<span id="cb10-16">    <span class="cf" style="color: #003B4F;">if</span> response.status_code <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">200</span>:</span>
<span id="cb10-17">        <span class="co" style="color: #5E5E5E;"># Open the file in write-binary mode</span></span>
<span id="cb10-18">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(filename, <span class="st" style="color: #20794D;">'wb'</span>) <span class="im" style="color: #00769E;">as</span> <span class="bu" style="color: null;">file</span>:</span>
<span id="cb10-19">            <span class="co" style="color: #5E5E5E;"># Write the content of the response to the file</span></span>
<span id="cb10-20">            <span class="bu" style="color: null;">file</span>.write(response.content)</span>
<span id="cb10-21">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"File downloaded successfully: </span><span class="sc" style="color: #5E5E5E;">{</span>filename<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-22">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb10-23">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Failed to download file. Status code: </span><span class="sc" style="color: #5E5E5E;">{</span>response<span class="sc" style="color: #5E5E5E;">.</span>status_code<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="cf" style="color: #003B4F;">for</span> fname, url <span class="kw" style="color: #003B4F;">in</span> urls.items():</span>
<span id="cb10-26">  download_file(url, fname)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>File downloaded successfully: 01_intro.ipynb
File downloaded successfully: 02_production.ipynb
File downloaded successfully: 04_mnist_basics.ipynb
File downloaded successfully: 08_collab.ipynb
File downloaded successfully: 09_tabular.ipynb
File downloaded successfully: 10_nlp.ipynb
File downloaded successfully: 13_convolutions.ipynb</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:41.213422Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:41.213043Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:41.217836Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:41.216877Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:41.213381Z&quot;}" data-trusted="true" data-execution_count="8">
<details>
<summary>Show the dict w/ notebook filenames</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">nbs <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb12-2">    <span class="st" style="color: #20794D;">'1'</span>: <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>,</span>
<span id="cb12-3">    <span class="st" style="color: #20794D;">'2'</span>: <span class="st" style="color: #20794D;">'02_production.ipynb'</span>,</span>
<span id="cb12-4">    <span class="st" style="color: #20794D;">'4'</span>: <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>,</span>
<span id="cb12-5">    <span class="st" style="color: #20794D;">'8'</span>: <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>,</span>
<span id="cb12-6">    <span class="st" style="color: #20794D;">'9'</span>: <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>,</span>
<span id="cb12-7">    <span class="st" style="color: #20794D;">'10'</span>: <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>,</span>
<span id="cb12-8">    <span class="st" style="color: #20794D;">'13'</span>: <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span></span>
<span id="cb12-9">}</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:47.840474Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:47.839850Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:48.275128Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:48.274245Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:47.840432Z&quot;}" data-outputid="062365c7-026f-415c-82a8-2487ac087279" data-trusted="true" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># load the question texts</span></span>
<span id="cb13-2">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://gist.githubusercontent.com/vishalbakshi/2c22ca69ac7bc4bc845052c1b9d949c8/raw/d498259f2fc75d27c485ddc73933f145987feef3/cs_bm25_baselines.csv'</span></span>
<span id="cb13-3">questions <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url).query(<span class="st" style="color: #20794D;">"is_answerable == 1"</span>)[[<span class="st" style="color: #20794D;">"chapter"</span>, <span class="st" style="color: #20794D;">"question_number"</span>, <span class="st" style="color: #20794D;">"question_text"</span>, <span class="st" style="color: #20794D;">"answer"</span>, <span class="st" style="color: #20794D;">"keywords"</span>]]</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;"># remove double quotations from the question text</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;"># as these affect embeddings/cosine similarity: https://vishalbakshi.github.io/blog/posts/2024-11-08-punctuation-cosine-similarity/</span></span>
<span id="cb13-7">questions[<span class="st" style="color: #20794D;">'question_text'</span>] <span class="op" style="color: #5E5E5E;">=</span> questions[<span class="st" style="color: #20794D;">'question_text'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb13-8">questions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">


  <div id="df-3e6b4ae2-1a9d-4308-bcbd-b26864aa22b3" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>keywords</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>Do you need these for deep learning?\n\n- Lots...</td>
      <td>"Lots of math - False\nLots of data - False\nL...</td>
      <td>"deep learning, math, data, computers, PhD"</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>Name five areas where deep learning is now the...</td>
      <td>"Any five of the following:\nNatural Language ...</td>
      <td>deep learning, areas, best, world</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>What was the name of the first device that was...</td>
      <td>"Mark I perceptron built by Frank Rosenblatt"</td>
      <td>"neuron, neurons, device, artificial, principle"</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>Based on the book of the same name, what are t...</td>
      <td>"A set of processing units\nA state of activat...</td>
      <td>"parallel, distributed, processing, PDP, requi...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>What were the two theoretical misunderstanding...</td>
      <td>"In 1969, Marvin Minsky and Seymour Papert dem...</td>
      <td>"neural, networks, theoretical, misunderstandi...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-3e6b4ae2-1a9d-4308-bcbd-b26864aa22b3')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-3e6b4ae2-1a9d-4308-bcbd-b26864aa22b3 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-3e6b4ae2-1a9d-4308-bcbd-b26864aa22b3');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-05c06f37-b463-46c7-b469-35a27b3ccafc">
  <button class="colab-df-quickchart" onclick="quickchart('df-05c06f37-b463-46c7-b469-35a27b3ccafc')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-05c06f37-b463-46c7-b469-35a27b3ccafc button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:41:55.266890Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:41:55.265966Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:41:55.271153Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:41:55.270326Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:41:55.266842Z&quot;}" data-trusted="true" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;">assert</span> questions.shape <span class="op" style="color: #5E5E5E;">==</span> (<span class="dv" style="color: #AD0000;">191</span>,<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:05.050170Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:05.049578Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:05.255531Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:05.254600Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:05.050132Z&quot;}" data-outputid="16dfee82-dbf5-42b4-ef9b-6e7c4954cb08" data-trusted="true" data-execution_count="163">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># download fastbook-benchmark</span></span>
<span id="cb15-2">download_file(</span>
<span id="cb15-3">    <span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/vishalbakshi/a507b6e9e893475e93a4141e96b8947d/raw/e32835ba1dbf94384943ed5a65404112e1c89df2/fastbook-benchmark.json"</span>,</span>
<span id="cb15-4">    <span class="st" style="color: #20794D;">"fastbook-benchmark.json"</span></span>
<span id="cb15-5">    )</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;"># Load the benchmark data</span></span>
<span id="cb15-8"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'fastbook-benchmark.json'</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb15-9">    benchmark <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>File downloaded successfully: fastbook-benchmark.json</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:11.224927Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:11.224542Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:11.229055Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:11.228216Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:11.224887Z&quot;}" data-trusted="true" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(benchmark[<span class="st" style="color: #20794D;">'questions'</span>]) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:18.313016Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:18.312453Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:18.318329Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:18.317466Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:18.312980Z&quot;}" data-trusted="true" data-execution_count="13">
<details>
<summary>Show <code>calculate_mrr</code> function</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> calculate_mrr(question, retrieved_passages, cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb18-2">    retrieved_passages <span class="op" style="color: #5E5E5E;">=</span> retrieved_passages[:cutoff]</span>
<span id="cb18-3">    highest_rank <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;">for</span> ans_comp <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">"answer_context"</span>]:</span>
<span id="cb18-6">        contexts <span class="op" style="color: #5E5E5E;">=</span> ans_comp.get(<span class="st" style="color: #20794D;">"context"</span>, [])</span>
<span id="cb18-7">        component_found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb18-8"></span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;">for</span> rank, passage <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(retrieved_passages, start<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb18-10">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">any</span>(fix_text(context) <span class="kw" style="color: #003B4F;">in</span> fix_text(passage) <span class="cf" style="color: #003B4F;">for</span> context <span class="kw" style="color: #003B4F;">in</span> contexts):</span>
<span id="cb18-11">                highest_rank <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">max</span>(highest_rank, rank)</span>
<span id="cb18-12">                component_found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb18-13">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb18-14"></span>
<span id="cb18-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> component_found:</span>
<span id="cb18-16">            <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">0.0</span></span>
<span id="cb18-17"></span>
<span id="cb18-18">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">1.0</span><span class="op" style="color: #5E5E5E;">/</span>highest_rank <span class="cf" style="color: #003B4F;">if</span> highest_rank <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> <span class="cf" style="color: #003B4F;">else</span> <span class="fl" style="color: #AD0000;">0.0</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:24.358734Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:24.358394Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:24.364432Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:24.363549Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:24.358702Z&quot;}" data-trusted="true" data-execution_count="14">
<details>
<summary>Show <code>calculate_recall</code> function</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> calculate_recall(question, retrieved_passages, cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb19-2">    retrieved_passages <span class="op" style="color: #5E5E5E;">=</span> retrieved_passages[:cutoff]</span>
<span id="cb19-3"></span>
<span id="cb19-4">    <span class="co" style="color: #5E5E5E;"># Track if we've found at least one context for each answer component</span></span>
<span id="cb19-5">    ans_comp_found <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-6"></span>
<span id="cb19-7">    <span class="cf" style="color: #003B4F;">for</span> ans_comp <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">"answer_context"</span>]:</span>
<span id="cb19-8">        contexts <span class="op" style="color: #5E5E5E;">=</span> ans_comp.get(<span class="st" style="color: #20794D;">"context"</span>, [])</span>
<span id="cb19-9">        found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb19-10"></span>
<span id="cb19-11">        <span class="co" style="color: #5E5E5E;"># Check if any context for this answer component appears in retrieved passages</span></span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;">for</span> passage <span class="kw" style="color: #003B4F;">in</span> retrieved_passages:</span>
<span id="cb19-13">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">any</span>(fix_text(context) <span class="kw" style="color: #003B4F;">in</span> fix_text(passage) <span class="cf" style="color: #003B4F;">for</span> context <span class="kw" style="color: #003B4F;">in</span> contexts):</span>
<span id="cb19-14">                found <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb19-15">                <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb19-16"></span>
<span id="cb19-17">        ans_comp_found.append(found)</span>
<span id="cb19-18"></span>
<span id="cb19-19">    <span class="co" style="color: #5E5E5E;"># Recall is ratio of answer components with at least one found context</span></span>
<span id="cb19-20">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">sum</span>(ans_comp_found) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(ans_comp_found)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:31.976734Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:31.976386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:31.982038Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:31.981238Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:31.976705Z&quot;}" data-trusted="true" data-execution_count="15">
<details>
<summary>Show <code>fts_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;">def</span> fts_retrieval(data, questions):</span>
<span id="cb20-2">    <span class="cf" style="color: #003B4F;">if</span> os.path.exists(<span class="st" style="color: #20794D;">"fastbook.db"</span>):</span>
<span id="cb20-3">        os.remove(<span class="st" style="color: #20794D;">"fastbook.db"</span>)</span>
<span id="cb20-4"></span>
<span id="cb20-5">    <span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb20-6">      <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Chapter </span><span class="sc" style="color: #5E5E5E;">{</span>chapter<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:"</span>, load_data(chunks, <span class="st" style="color: #20794D;">'fastbook.db'</span>, chapter))</span>
<span id="cb20-7"></span>
<span id="cb20-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Retrieving passages..."</span>)</span>
<span id="cb20-9">    results <span class="op" style="color: #5E5E5E;">=</span> db_search(questions, limit<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb20-10"></span>
<span id="cb20-11">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb20-12">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb20-13">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb20-14"></span>
<span id="cb20-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Retrieval complete."</span>)</span>
<span id="cb20-16">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:42:40.213339Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:42:40.212942Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:42:40.221922Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:42:40.221014Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:42:40.213297Z&quot;}" data-trusted="true" data-execution_count="16">
<details>
<summary>Show <code>single_vector_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">def</span> single_vector_retrieval(data, benchmark):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;"># Group questions by chapter</span></span>
<span id="cb21-3">    questions <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb21-4">    <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> benchmark[<span class="st" style="color: #20794D;">"questions"</span>]:</span>
<span id="cb21-5">        chapter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(q[<span class="st" style="color: #20794D;">"chapter"</span>])</span>
<span id="cb21-6">        <span class="cf" style="color: #003B4F;">if</span> chapter <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> questions:</span>
<span id="cb21-7">            questions[chapter] <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-8">        questions[chapter].append(q[<span class="st" style="color: #20794D;">'question_text'</span>].strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>))</span>
<span id="cb21-9"></span>
<span id="cb21-10">    q_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb21-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Encoding Questions..."</span>)</span>
<span id="cb21-12">    <span class="cf" style="color: #003B4F;">for</span> chapter, _ <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb21-13">        qs <span class="op" style="color: #5E5E5E;">=</span> questions[chapter]</span>
<span id="cb21-14">        q_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(qs, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb21-15"></span>
<span id="cb21-16">    data_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb21-17">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Encoding Data..."</span>)</span>
<span id="cb21-18">    <span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb21-19">        data_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(chunks, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb21-20"></span>
<span id="cb21-21">    results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-22">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Retrieving passages..."</span>)</span>
<span id="cb21-23">    <span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb21-24">        <span class="co" style="color: #5E5E5E;"># Compute cosine similarity and get top 10 indices for each row</span></span>
<span id="cb21-25">        idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb21-26">        top_10_idxs <span class="op" style="color: #5E5E5E;">=</span> idxs[:, :<span class="dv" style="color: #AD0000;">10</span>]  <span class="co" style="color: #5E5E5E;"># Get the top 10 indices for each row</span></span>
<span id="cb21-27"></span>
<span id="cb21-28">        <span class="co" style="color: #5E5E5E;"># Extract top 10 chunks for each row</span></span>
<span id="cb21-29">        top_10_chunks <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb21-30">            [data[chapter][idx.item()] <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> row_idxs]</span>
<span id="cb21-31">            <span class="cf" style="color: #003B4F;">for</span> row_idxs <span class="kw" style="color: #003B4F;">in</span> top_10_idxs</span>
<span id="cb21-32">        ]</span>
<span id="cb21-33">        results.extend(top_10_chunks)</span>
<span id="cb21-34"></span>
<span id="cb21-35">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb21-36"></span>
<span id="cb21-37">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb21-38">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb21-39"></span>
<span id="cb21-40">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Retrieval complete."</span>)</span>
<span id="cb21-41">    <span class="cf" style="color: #003B4F;">return</span> results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:06:39.877391Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:06:39.877005Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:06:39.885940Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:06:39.885048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:06:39.877357Z&quot;}" data-trusted="true" data-execution_count="17">
<details>
<summary>Show <code>ragetouille_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;">def</span> ragatouille_retrieval(data, benchmark, model_nm<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbert-ir/colbertv2.0"</span>):</span>
<span id="cb22-2">    <span class="co" style="color: #5E5E5E;"># Group questions by chapter</span></span>
<span id="cb22-3">    questions_by_chapter <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> benchmark[<span class="st" style="color: #20794D;">"questions"</span>]:</span>
<span id="cb22-5">        chapter <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(q[<span class="st" style="color: #20794D;">"chapter"</span>])</span>
<span id="cb22-6">        <span class="cf" style="color: #003B4F;">if</span> chapter <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> questions_by_chapter:</span>
<span id="cb22-7">            questions_by_chapter[chapter] <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb22-8">        questions_by_chapter[chapter].append(q)</span>
<span id="cb22-9"></span>
<span id="cb22-10">    <span class="co" style="color: #5E5E5E;"># Dictionary to store results per chapter</span></span>
<span id="cb22-11">    chapter_results <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb22-12">    chapter_metrics <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb22-13"></span>
<span id="cb22-14">    <span class="co" style="color: #5E5E5E;"># Initialize ColBERTv2</span></span>
<span id="cb22-15">    RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(model_nm)</span>
<span id="cb22-16"></span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;"># Process each chapter separately</span></span>
<span id="cb22-18">    <span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> nbs.keys():</span>
<span id="cb22-19">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">Processing Chapter </span><span class="sc" style="color: #5E5E5E;">{</span>chapter<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb22-20"></span>
<span id="cb22-21">        <span class="co" style="color: #5E5E5E;"># Create chapter-specific index</span></span>
<span id="cb22-22">        index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb22-23">            index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"chapter_</span><span class="sc" style="color: #5E5E5E;">{</span>chapter<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb22-24">            collection<span class="op" style="color: #5E5E5E;">=</span>data[chapter],</span>
<span id="cb22-25">            document_ids<span class="op" style="color: #5E5E5E;">=</span>[<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>chapter<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span> <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(data[chapter]))]</span>
<span id="cb22-26">        )</span>
<span id="cb22-27"></span>
<span id="cb22-28">        <span class="co" style="color: #5E5E5E;"># Get questions for this chapter</span></span>
<span id="cb22-29">        chapter_questions <span class="op" style="color: #5E5E5E;">=</span> questions_by_chapter[chapter]</span>
<span id="cb22-30"></span>
<span id="cb22-31">        <span class="co" style="color: #5E5E5E;"># Perform retrieval for each question in this chapter</span></span>
<span id="cb22-32">        results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb22-33">        <span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> chapter_questions:</span>
<span id="cb22-34">            retrieved <span class="op" style="color: #5E5E5E;">=</span> RAG.search(q[<span class="st" style="color: #20794D;">"question_text"</span>].strip(<span class="st" style="color: #20794D;">'"</span><span class="ch" style="color: #20794D;">\'</span><span class="st" style="color: #20794D;">'</span>), k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb22-35">            results.append(retrieved)</span>
<span id="cb22-36"></span>
<span id="cb22-37">        <span class="co" style="color: #5E5E5E;"># Store results</span></span>
<span id="cb22-38">        chapter_results[chapter] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb22-39"></span>
<span id="cb22-40">    results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb22-41">    <span class="cf" style="color: #003B4F;">for</span> chapter, res <span class="kw" style="color: #003B4F;">in</span> chapter_results.items():</span>
<span id="cb22-42">        results.extend(res)</span>
<span id="cb22-43"></span>
<span id="cb22-44">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb22-45"></span>
<span id="cb22-46">    final_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb22-47">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb22-48">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(res) <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb22-49">        intermediate_results <span class="op" style="color: #5E5E5E;">=</span> [r[<span class="st" style="color: #20794D;">'content'</span>] <span class="cf" style="color: #003B4F;">for</span> r <span class="kw" style="color: #003B4F;">in</span> res]</span>
<span id="cb22-50">        final_results.append(intermediate_results)</span>
<span id="cb22-51"></span>
<span id="cb22-52">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Retrieval complete."</span>)</span>
<span id="cb22-53">    <span class="cf" style="color: #003B4F;">return</span> final_results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:06:51.651038Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:06:51.650684Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:06:51.656817Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:06:51.655754Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:06:51.651007Z&quot;}" data-trusted="true" data-execution_count="18">
<details>
<summary>Show <code>do_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;">def</span> do_retrieval(method, chunking_strategy, data, benchmark, benchmark_results, questions<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb23-2">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"bm25"</span>: results <span class="op" style="color: #5E5E5E;">=</span> fts_retrieval(data, questions)</span>
<span id="cb23-3">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"single_vector"</span>: results <span class="op" style="color: #5E5E5E;">=</span> single_vector_retrieval(data, benchmark)</span>
<span id="cb23-4">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"colbertv2"</span>: results <span class="op" style="color: #5E5E5E;">=</span> ragatouille_retrieval(data, benchmark, model_nm<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbert-ir/colbertv2.0"</span>)</span>
<span id="cb23-5">  <span class="cf" style="color: #003B4F;">if</span> method <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"answerai_colbert"</span>: results <span class="op" style="color: #5E5E5E;">=</span> ragatouille_retrieval(data, benchmark, model_nm<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7">  name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>method<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>chunking_strategy<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb23-8">  q_mrr, q_recall <span class="op" style="color: #5E5E5E;">=</span> score_retrieval(results, benchmark)</span>
<span id="cb23-9">  benchmark_results <span class="op" style="color: #5E5E5E;">=</span> save_results(results, benchmark_results, q_mrr, q_recall, name<span class="op" style="color: #5E5E5E;">=</span>name)</span>
<span id="cb23-10"></span>
<span id="cb23-11">  <span class="cf" style="color: #003B4F;">return</span> benchmark_results</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:43:03.484422Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:43:03.483575Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:43:03.491562Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:43:03.490588Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:43:03.484360Z&quot;}" data-trusted="true" data-execution_count="19">
<details>
<summary>Show <code>score_retrieval</code> function</summary>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;">def</span> score_retrieval(results, benchmark):</span>
<span id="cb24-2">    q_mrr <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb24-3">    q_recall <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb24-4"></span>
<span id="cb24-5">    <span class="cf" style="color: #003B4F;">for</span> i, question <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(benchmark[<span class="st" style="color: #20794D;">"questions"</span>]):</span>
<span id="cb24-6">        mrr <span class="op" style="color: #5E5E5E;">=</span> calculate_mrr(question, results[i], cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-7">        recall <span class="op" style="color: #5E5E5E;">=</span> calculate_recall(question, results[i], cutoff<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-8">        q_mrr.append(mrr)</span>
<span id="cb24-9">        q_recall.append(recall)</span>
<span id="cb24-10"></span>
<span id="cb24-11">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(q_mrr) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb24-12">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(q_recall) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb24-13"></span>
<span id="cb24-14">    <span class="cf" style="color: #003B4F;">return</span> q_mrr, q_recall</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:43:09.476964Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:43:09.476628Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:43:09.481771Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:43:09.480823Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:43:09.476931Z&quot;}" data-trusted="true" data-execution_count="20">
<details>
<summary>Show <code>save_results</code> function</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">def</span> save_results(results, df, q_mrr, q_recall, name):</span>
<span id="cb25-2">    flat_results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb25-3">    <span class="cf" style="color: #003B4F;">for</span> res <span class="kw" style="color: #003B4F;">in</span> results:</span>
<span id="cb25-4">        flat_results.append(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">"</span>.join(res))</span>
<span id="cb25-5"></span>
<span id="cb25-6">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(flat_results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">191</span></span>
<span id="cb25-7"></span>
<span id="cb25-8">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_retrieval'</span>] <span class="op" style="color: #5E5E5E;">=</span> flat_results</span>
<span id="cb25-9">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_mrr10'</span>] <span class="op" style="color: #5E5E5E;">=</span> q_mrr</span>
<span id="cb25-10">    df[<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_recall10'</span>] <span class="op" style="color: #5E5E5E;">=</span> q_recall</span>
<span id="cb25-11"></span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
</section>
<section id="chunking-strategy-a-1-paragraph-with-headers" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-a-1-paragraph-with-headers">Chunking Strategy A: 1-Paragraph (with headers)</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:51:29.646506Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:51:29.645668Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:51:29.685541Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:51:29.684729Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:51:29.646468Z&quot;}" data-outputid="a60b9b2b-05fd-4a7b-db14-bf2e9beb44e3" data-trusted="true" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># chunking each notebook</span></span>
<span id="cb26-2">data <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb26-5">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> get_chunks(nb)</span>
<span id="cb26-6"></span>
<span id="cb26-7">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb26-8"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb26-9">  <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb26-10">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="co" style="color: #5E5E5E;"># 1-paragraph chunks</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 307
2 227
4 433
8 157
9 387
10 190
13 266</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search">Retrieval Method: Full Text Search</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:52:53.273359Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:52:53.272986Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:52:54.283069Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:52:54.282328Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:52:53.273326Z&quot;}" data-outputid="3f99d796-b24e-438f-90a8-ff2eb672f1de" data-trusted="true" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb28-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb28-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb28-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb28-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb28-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>questions.copy(),</span>
<span id="cb28-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:52:59.673041Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:52:59.672738Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:52:59.679368Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:52:59.678484Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:52:59.673016Z&quot;}" data-outputid="e864e397-6c5c-448a-a695-d44dc34f075c" data-trusted="true" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_A_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_A_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(0.3, 0.65)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:53:13.136073Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:53:13.135765Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:53:19.206390Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:53:19.205660Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:53:13.136046Z&quot;}" data-outputid="fb291378-abfe-47e5-f8a4-2a798a99979e" data-trusted="true" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb32-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb32-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb32-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb32-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb32-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T00:53:22.883480Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T00:53:22.883045Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T00:53:22.890175Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T00:53:22.889157Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T00:53:22.883444Z&quot;}" data-outputid="d1507f36-f5b7-4c92-e298-4767378245b3" data-trusted="true" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_A_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_A_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(0.38, 0.71)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2">Retrieval Method: ColBERTv2</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb36-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb36-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb36-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb36-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb36-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:10:44.232174Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:10:44.231884Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:10:44.238858Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:10:44.238107Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:10:44.232146Z&quot;}" data-outputid="c0cee31e-9fe6-4d72-a579-90d37f48cf5e" data-trusted="true" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_A_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_A_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(0.46, 0.8)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb39-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb39-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"A"</span>,</span>
<span id="cb39-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb39-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb39-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:14:41.402607Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:14:41.401908Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:14:41.408764Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:14:41.407873Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:14:41.402570Z&quot;}" data-outputid="411aee2a-727b-424b-bc14-16097044747e" data-trusted="true" data-execution_count="29">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_A_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_A_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>(0.48, 0.82)</code></pre>
</div>
</div>
</section>
</section>
<section id="chunking-strategy-b-3-paragraph-with-headers" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-b-3-paragraph-with-headers">Chunking Strategy B: 3-Paragraph (with headers)</h2>
<p>Next, I’ll expand the chunks to include 3-paragraphs at a time. I’m still keeping the headers.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:15:08.474995Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:15:08.474668Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:15:08.484289Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:15:08.483444Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:15:08.474963Z&quot;}" data-outputid="427c0da0-a586-486b-9613-ef5d171172be" data-trusted="true" data-execution_count="30">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb42-2">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> combine_chunks(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb42-7">  <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb42-8">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb42-9"></span>
<span id="cb42-10"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">713</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 112
2 84
4 152
8 58
9 141
10 70
13 96</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search-1" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search-1">Retrieval Method: Full Text Search</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:21:42.900175Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:21:42.899823Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:21:44.142204Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:21:44.141542Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:21:42.900141Z&quot;}" data-outputid="abd4dc29-24af-4ab6-d031-567c7a8497f9" data-trusted="true" data-execution_count="31">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb44-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb44-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"B"</span>,</span>
<span id="cb44-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb44-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb44-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results,</span>
<span id="cb44-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:21:44.731440Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:21:44.731076Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:21:44.737976Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:21:44.737048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:21:44.731406Z&quot;}" data-outputid="b886106b-7d30-48c1-f78c-9a97bd1e5b34" data-trusted="true" data-execution_count="32">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_B_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_B_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>(0.46, 0.83)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity-1" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity-1">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:22:23.269973Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:22:23.269748Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:22:29.060680Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:22:29.059996Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:22:23.269948Z&quot;}" data-outputid="ee004991-ee4f-4778-c6b7-72d459ac81c1" data-trusted="true" data-execution_count="33">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb48-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb48-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"B"</span>,</span>
<span id="cb48-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb48-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb48-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:22:32.334662Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:22:32.333867Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:22:32.340872Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:22:32.339937Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:22:32.334624Z&quot;}" data-outputid="5484102d-1158-48c2-cb2e-f67d7751953b" data-trusted="true" data-execution_count="34">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_B_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_B_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(0.5, 0.85)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2-1" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2-1">Retrieval Method: ColBERTv2</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb52-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb52-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"B"</span>,</span>
<span id="cb52-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb52-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb52-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:26:40.994007Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:26:40.993740Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:26:41.000087Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:26:40.999259Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:26:40.993980Z&quot;}" data-outputid="7f153334-7712-4b1f-8277-54d93cf9ddcb" data-trusted="true" data-execution_count="36">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_B_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_B_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>(0.49, 0.8)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1-1" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1-1">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb55-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb55-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"B"</span>,</span>
<span id="cb55-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb55-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb55-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:30:18.190218Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:30:18.189864Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:30:18.197158Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:30:18.196203Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:30:18.190179Z&quot;}" data-outputid="0fbaa6c4-f6e8-4fd3-a9dd-41fffe8a5eef" data-trusted="true" data-execution_count="38">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_B_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_B_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>(0.52, 0.84)</code></pre>
</div>
</div>
</section>
</section>
<section id="chunking-strategy-c-1-paragraph-wo-headers" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-c-1-paragraph-wo-headers">Chunking Strategy C: 1-Paragraph (w/o headers)</h2>
<p>Next, I’ll remove markdown headers from each chunk.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:18:36.662925Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:18:36.662593Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:18:36.710061Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:18:36.709141Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:18:36.662894Z&quot;}" data-outputid="812b1cfa-de14-43a9-90f0-244bdfd34eb2" data-trusted="true" data-execution_count="39">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># chunking each notebook</span></span>
<span id="cb58-2">data <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb58-3"></span>
<span id="cb58-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb58-5">    data[chapter] <span class="op" style="color: #5E5E5E;">=</span> get_chunks(nb)</span>
<span id="cb58-6"></span>
<span id="cb58-7"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb58-8">    data[chapter] <span class="op" style="color: #5E5E5E;">=</span> [re.sub(<span class="vs" style="color: #20794D;">r'^#+\s+[^\n]+\n*'</span>, <span class="st" style="color: #20794D;">''</span>, c) <span class="cf" style="color: #003B4F;">for</span> c <span class="kw" style="color: #003B4F;">in</span> data[chapter]]</span>
<span id="cb58-9"></span>
<span id="cb58-10">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb58-11"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb58-12">    <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb58-13">    total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb58-14"></span>
<span id="cb58-15"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="co" style="color: #5E5E5E;"># 1-paragraph chunks</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 307
2 227
4 433
8 157
9 387
10 190
13 266</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search-2" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search-2">Retrieval Method: Full Text Search</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:50:28.409613Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:50:28.408983Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:50:29.306803Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:50:29.306115Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:50:28.409574Z&quot;}" data-outputid="2a763f15-020f-4031-e770-0115470e8698" data-trusted="true" data-execution_count="40">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb60-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb60-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"C"</span>,</span>
<span id="cb60-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb60-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb60-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results,</span>
<span id="cb60-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:50:29.977570Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:50:29.977247Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:50:29.983900Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:50:29.983041Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:50:29.977541Z&quot;}" data-outputid="7202028e-894e-4629-9d7c-a424626b1cfb" data-trusted="true" data-execution_count="41">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_C_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_C_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>(0.29, 0.65)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity-2" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity-2">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:51:05.345206Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:51:05.344866Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:51:10.910854Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:51:10.909942Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:51:05.345173Z&quot;}" data-outputid="8bb433d4-333f-4fe5-b908-480a0ecd232e" data-trusted="true" data-execution_count="42">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb64-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb64-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"C"</span>,</span>
<span id="cb64-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb64-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb64-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:51:19.644687Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:51:19.644254Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:51:19.651422Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:51:19.650429Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:51:19.644651Z&quot;}" data-outputid="e16721c1-080b-415d-898b-4bb81587c524" data-trusted="true" data-execution_count="43">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_C_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_C_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>(0.35, 0.72)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2-2" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2-2">Retrieval Method: ColBERTv2</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb68-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb68-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"C"</span>,</span>
<span id="cb68-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb68-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb68-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:55:36.156991Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:55:36.156709Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:55:36.163281Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:55:36.162427Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:55:36.156963Z&quot;}" data-outputid="00f173f8-10af-4ba9-f683-4445ac7b762e" data-trusted="true" data-execution_count="45">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_C_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_C_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>(0.41, 0.74)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1-2" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1-2">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb71-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb71-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"C"</span>,</span>
<span id="cb71-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb71-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb71-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T01:59:13.167358Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T01:59:13.166923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T01:59:13.174970Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T01:59:13.174299Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T01:59:13.167298Z&quot;}" data-outputid="b4d69dc6-1001-4e86-f231-9f7d7e5c26ba" data-trusted="true" data-execution_count="47">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_C_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_C_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>(0.45, 0.77)</code></pre>
</div>
</div>
</section>
</section>
<section id="chunking-strategy-d-3-paragraph-wo-headers" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-d-3-paragraph-wo-headers">Chunking Strategy D: 3-Paragraph (w/o headers)</h2>
<p>Expanding header-less chunks to 3-paragraphs.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:18:59.619716Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:18:59.618912Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:18:59.624729Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:18:59.623786Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:18:59.619681Z&quot;}" data-trusted="true" data-execution_count="48">
<details>
<summary>Show modified <code>combine_chunks</code> function</summary>
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="kw" style="color: #003B4F;">def</span> combine_chunks2(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb74-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;">    Combines text chunks into groups of specified size (num_p).</span></span>
<span id="cb74-4"><span class="co" style="color: #5E5E5E;">    If chunks have no headers, treats them as standalone content.</span></span>
<span id="cb74-5"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb74-6">    combined_chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb74-7">    current_group <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb74-8"></span>
<span id="cb74-9">    <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb74-10">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&lt;</span> num_p:</span>
<span id="cb74-11">            current_group.append(chunk)</span>
<span id="cb74-12"></span>
<span id="cb74-13">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">==</span> num_p:</span>
<span id="cb74-14">            combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb74-15">            current_group <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb74-16"></span>
<span id="cb74-17">    <span class="co" style="color: #5E5E5E;"># Add any remaining chunks</span></span>
<span id="cb74-18">    <span class="cf" style="color: #003B4F;">if</span> current_group:</span>
<span id="cb74-19">        combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb74-20"></span>
<span id="cb74-21">    <span class="cf" style="color: #003B4F;">return</span> combined_chunks</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:19:01.221431Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:19:01.221066Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:19:01.227953Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:19:01.227032Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:19:01.221397Z&quot;}" data-outputid="1a99dfba-0541-44f6-b31e-0e1f3cb0d4d0" data-trusted="true" data-execution_count="49">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb75-2">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> combine_chunks2(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb75-3"></span>
<span id="cb75-4">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb75-5"></span>
<span id="cb75-6"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb75-7">  <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb75-8">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb75-9"></span>
<span id="cb75-10"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">659</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 103
2 76
4 145
8 53
9 129
10 64
13 89</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search-3" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search-3">Retrieval Method: Full Text Search</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:19:08.187884Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:19:08.187252Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:19:09.404320Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:19:09.403632Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:19:08.187848Z&quot;}" data-outputid="c829e29b-5397-49a6-c798-2ee73ab94753" data-trusted="true" data-execution_count="50">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb77-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb77-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"D"</span>,</span>
<span id="cb77-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb77-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb77-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results,</span>
<span id="cb77-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:19:11.000307Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:19:10.999957Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:19:11.006879Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:19:11.005978Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:19:11.000258Z&quot;}" data-outputid="8bb81432-28e6-4472-d2e1-05e14e0c1e0f" data-trusted="true" data-execution_count="51">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_D_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_D_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>(0.44, 0.82)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity-3" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity-3">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:19:26.213399Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:19:26.212708Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:19:31.639801Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:19:31.639098Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:19:26.213361Z&quot;}" data-outputid="8feac0c6-3779-4b47-90ad-e4ed75fa12aa" data-trusted="true" data-execution_count="52">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb81-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb81-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"D"</span>,</span>
<span id="cb81-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb81-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb81-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:19:31.860104Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:19:31.859901Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:19:31.866516Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:19:31.865665Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:19:31.860081Z&quot;}" data-outputid="6a21ac81-4f08-4ead-fffc-08ddccf49f01" data-trusted="true" data-execution_count="53">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_D_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_D_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>(0.46, 0.82)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2-3" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2-3">Retrieval Method: ColBERTv2</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb85-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb85-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"D"</span>,</span>
<span id="cb85-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb85-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb85-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:25:00.952874Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:25:00.952598Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:25:00.959190Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:25:00.958249Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:25:00.952846Z&quot;}" data-outputid="db7e3b68-f54e-49f9-dada-53f746fe9d34" data-trusted="true" data-execution_count="55">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_D_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_D_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>(0.5, 0.8)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1-3" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1-3">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell" data-trusted="true">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb88-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb88-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"D"</span>,</span>
<span id="cb88-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb88-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb88-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-26T02:28:36.873734Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-26T02:28:36.873458Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-26T02:28:36.880094Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-26T02:28:36.879220Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-26T02:28:36.873707Z&quot;}" data-outputid="713135f7-7b6e-47f3-add7-5b3db7dbdbce" data-trusted="true" data-execution_count="57">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_D_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_D_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>(0.52, 0.82)</code></pre>
</div>
</div>
</section>
</section>
<section id="chunking-strategy-e-3-paragraph-wheaders-wo-html-tags" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-e-3-paragraph-wheaders-wo-html-tags">Chunking Strategy E: (3-paragraph w/headers, w/o HTML tags)</h2>
<p>I’ll add headers back, but will remove HTML tags.</p>
<div class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># chunking each notebook</span></span>
<span id="cb91-2">data <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb91-3"></span>
<span id="cb91-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb91-5">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> get_chunks(nb)</span>
<span id="cb91-6"></span>
<span id="cb91-7">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb91-8"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb91-9">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb91-10"></span>
<span id="cb91-11"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="co" style="color: #5E5E5E;"># 1-paragraph chunks</span></span>
<span id="cb91-12"></span>
<span id="cb91-13"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb91-14">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> combine_chunks(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb91-15"></span>
<span id="cb91-16">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb91-17"></span>
<span id="cb91-18"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb91-19">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb91-20"></span>
<span id="cb91-21"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">713</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="9f240ac1-b0ec-49c2-a440-fd29ac67be70" data-execution_count="138">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">chunks[<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="138">
<pre><code>'## The Magic of Convolutions\n\nIt turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use something called a *convolution*. A convolution requires nothing more than multiplication, and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book!\n\nA convolution applies a *kernel* across an image. A kernel is a little matrix, such as the 3×3 matrix in the top right of &lt;&lt;basic_conv&gt;&gt;.\n\n&lt;img src="images/chapter9_conv_basic.png" id="basic_conv" caption="Applying a kernel to one location" alt="Applying a kernel to one location" width="700"&gt;'</code></pre>
</div>
</div>
<div class="cell" data-outputid="20111447-31ee-48b8-9d01-a40bdd0c12d6" data-execution_count="139">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="kw" style="color: #003B4F;">def</span> clean_html(text):</span>
<span id="cb94-2">    <span class="co" style="color: #5E5E5E;"># Step 1: Temporarily replace double-bracketed content with a placeholder</span></span>
<span id="cb94-3">    <span class="im" style="color: #00769E;">import</span> uuid</span>
<span id="cb94-4">    placeholder <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"PLACEHOLDER_</span><span class="sc" style="color: #5E5E5E;">{</span>uuid<span class="sc" style="color: #5E5E5E;">.</span>uuid4()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb94-5">    double_bracketed <span class="op" style="color: #5E5E5E;">=</span> re.findall(<span class="vs" style="color: #20794D;">r'&lt;&lt;[^&gt;]*&gt;&gt;'</span>, text)</span>
<span id="cb94-6">    step1 <span class="op" style="color: #5E5E5E;">=</span> re.sub(<span class="vs" style="color: #20794D;">r'&lt;&lt;[^&gt;]*&gt;&gt;'</span>, placeholder, text)</span>
<span id="cb94-7"></span>
<span id="cb94-8">    <span class="co" style="color: #5E5E5E;"># Step 2: Remove HTML tags</span></span>
<span id="cb94-9">    step2 <span class="op" style="color: #5E5E5E;">=</span> re.sub(<span class="vs" style="color: #20794D;">r'&lt;[/]?[a-zA-Z][^&gt;]*&gt;'</span>, <span class="st" style="color: #20794D;">''</span>, step1)</span>
<span id="cb94-10"></span>
<span id="cb94-11">    <span class="co" style="color: #5E5E5E;"># Step 3: Restore double-bracketed content</span></span>
<span id="cb94-12">    <span class="cf" style="color: #003B4F;">if</span> double_bracketed:</span>
<span id="cb94-13">        step3 <span class="op" style="color: #5E5E5E;">=</span> step2.replace(placeholder, double_bracketed[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb94-14">        <span class="cf" style="color: #003B4F;">return</span> step3</span>
<span id="cb94-15">    <span class="cf" style="color: #003B4F;">return</span> step2</span>
<span id="cb94-16"></span>
<span id="cb94-17">clean_html(<span class="st" style="color: #20794D;">'The &lt;a href="#"&gt;text&lt;/a&gt; is &lt;&lt;untouched&gt;&gt;.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>'The text is &lt;&lt;untouched&gt;&gt;.'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="140">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb96-2">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> [clean_html(chunk) <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks]</span>
<span id="cb96-3"></span>
<span id="cb96-4">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb96-5"></span>
<span id="cb96-6"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb96-7">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb96-8"></span>
<span id="cb96-9"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">713</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="f0271933-ae7b-482e-cca5-32542a8e5130" data-execution_count="141">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">chunks[<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="141">
<pre><code>'## The Magic of Convolutions\n\nIt turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use something called a *convolution*. A convolution requires nothing more than multiplication, and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book!\n\nA convolution applies a *kernel* across an image. A kernel is a little matrix, such as the 3×3 matrix in the top right of &lt;&lt;basic_conv&gt;&gt;.\n\n'</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search-4" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search-4">Retrieval Method: Full Text Search</h3>
<div class="cell" data-outputid="af2da950-e989-4a3a-f7aa-2036de7e493b" data-execution_count="113">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb99-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb99-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"E"</span>,</span>
<span id="cb99-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb99-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb99-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results,</span>
<span id="cb99-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-outputid="83446096-6429-453b-a860-31a9cdcdfa82" data-execution_count="114">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_E_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_E_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="114">
<pre><code>(0.46, 0.83)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity-4" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity-4">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-outputid="831fe930-bc8a-4e64-9f5e-b709703860ba" data-execution_count="115">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb103-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb103-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"E"</span>,</span>
<span id="cb103-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb103-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb103-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-outputid="abadbb46-d641-4003-a353-5da32f447cbb" data-execution_count="116">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_E_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_E_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="116">
<pre><code>(0.5, 0.87)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2-4" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2-4">Retrieval Method: ColBERTv2</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb107-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb107-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"E"</span>,</span>
<span id="cb107-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb107-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb107-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="4108adcd-495a-4c42-c56b-5e5dc685cef5" data-execution_count="118">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_E_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_E_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">
<pre><code>(0.49, 0.81)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1-4" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1-4">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb110-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb110-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"E"</span>,</span>
<span id="cb110-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb110-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>benchmark,</span>
<span id="cb110-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="e723ecd0-7550-488b-a202-2b20b378a599" data-execution_count="120">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_E_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_E_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>(0.52, 0.84)</code></pre>
</div>
</div>
</section>
</section>
<section id="chunking-strategy-f-wheaders-wo-html-tags-wo-punctuation" class="level2">
<h2 class="anchored" data-anchor-id="chunking-strategy-f-wheaders-wo-html-tags-wo-punctuation">Chunking Strategy F: (w/headers, w/o HTML tags, w/o punctuation)</h2>
<p>Finally, I’ll keep headers, remove HTML tags and remove all punctuation.</p>
<div class="cell" data-outputid="ce7661e8-c5ee-44f5-950e-d01dd944b7f1" data-execution_count="142">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">chunks[<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="142">
<pre><code>'## The Magic of Convolutions\n\nIt turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use something called a *convolution*. A convolution requires nothing more than multiplication, and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book!\n\nA convolution applies a *kernel* across an image. A kernel is a little matrix, such as the 3×3 matrix in the top right of &lt;&lt;basic_conv&gt;&gt;.\n\n'</code></pre>
</div>
</div>
<div class="cell" data-outputid="cf3eb589-4d15-4760-82ab-c02317c613a2" data-execution_count="145">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="kw" style="color: #003B4F;">def</span> remove_punctuation(text):</span>
<span id="cb115-2">  <span class="im" style="color: #00769E;">import</span> string</span>
<span id="cb115-3">  <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">''</span>.join(char <span class="cf" style="color: #003B4F;">if</span> char.isalnum() <span class="kw" style="color: #003B4F;">or</span> char <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'#'</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">' '</span> <span class="cf" style="color: #003B4F;">if</span> char <span class="kw" style="color: #003B4F;">in</span> string.punctuation <span class="cf" style="color: #003B4F;">else</span> char <span class="cf" style="color: #003B4F;">for</span> char <span class="kw" style="color: #003B4F;">in</span> text)</span>
<span id="cb115-4"></span>
<span id="cb115-5">remove_punctuation(chunks[<span class="dv" style="color: #AD0000;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="145">
<pre><code>'## The Magic of Convolutions\n\nIt turns out that finding the edges in an image is a very common task in computer vision  and is surprisingly straightforward  To do it  we use something called a  convolution   A convolution requires nothing more than multiplication  and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book \n\nA convolution applies a  kernel  across an image  A kernel is a little matrix  such as the 3×3 matrix in the top right of   basic conv   \n\n'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="146">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb117-2">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> [remove_punctuation(chunk) <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks]</span>
<span id="cb117-3"></span>
<span id="cb117-4">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb117-5"></span>
<span id="cb117-6"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb117-7">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb117-8"></span>
<span id="cb117-9"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">713</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="421a9221-8070-419a-e330-f5382c9dee54" data-execution_count="147">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1">chunks[<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="147">
<pre><code>'## The Magic of Convolutions\n\nIt turns out that finding the edges in an image is a very common task in computer vision  and is surprisingly straightforward  To do it  we use something called a  convolution   A convolution requires nothing more than multiplication  and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model in this book \n\nA convolution applies a  kernel  across an image  A kernel is a little matrix  such as the 3×3 matrix in the top right of   basic conv   \n\n'</code></pre>
</div>
</div>
<p>Since I’m removing punctuation from the contexts, I need to do the same for the benchmark dataset. I think a better solution would be to modify the scoring functions by removing the punctuation there, but I’m saving some time and space by just copying the benchmark dataset and removing punctuation from each context string in it:</p>
<div class="cell" data-execution_count="164">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="kw" style="color: #003B4F;">def</span> process_contexts(data):</span>
<span id="cb120-2">    <span class="co" style="color: #5E5E5E;"># Process questions</span></span>
<span id="cb120-3">    <span class="cf" style="color: #003B4F;">for</span> question <span class="kw" style="color: #003B4F;">in</span> data[<span class="st" style="color: #20794D;">'questions'</span>]:</span>
<span id="cb120-4">        <span class="co" style="color: #5E5E5E;"># Process only answer_context</span></span>
<span id="cb120-5">        <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'answer_context'</span> <span class="kw" style="color: #003B4F;">in</span> question:</span>
<span id="cb120-6">            <span class="cf" style="color: #003B4F;">for</span> context_item <span class="kw" style="color: #003B4F;">in</span> question[<span class="st" style="color: #20794D;">'answer_context'</span>]:</span>
<span id="cb120-7">                <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'context'</span> <span class="kw" style="color: #003B4F;">in</span> context_item:</span>
<span id="cb120-8">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(context_item[<span class="st" style="color: #20794D;">'context'</span>], <span class="bu" style="color: null;">list</span>):</span>
<span id="cb120-9">                        <span class="co" style="color: #5E5E5E;"># If context is a list, process each string in the list</span></span>
<span id="cb120-10">                        context_item[<span class="st" style="color: #20794D;">'context'</span>] <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb120-11">                            remove_punctuation(text) <span class="cf" style="color: #003B4F;">if</span> text <span class="cf" style="color: #003B4F;">else</span> text</span>
<span id="cb120-12">                            <span class="cf" style="color: #003B4F;">for</span> text <span class="kw" style="color: #003B4F;">in</span> context_item[<span class="st" style="color: #20794D;">'context'</span>]</span>
<span id="cb120-13">                        ]</span>
<span id="cb120-14">                    <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(context_item[<span class="st" style="color: #20794D;">'context'</span>], <span class="bu" style="color: null;">str</span>):</span>
<span id="cb120-15">                        <span class="co" style="color: #5E5E5E;"># If context is a single string, process it directly</span></span>
<span id="cb120-16">                        context_item[<span class="st" style="color: #20794D;">'context'</span>] <span class="op" style="color: #5E5E5E;">=</span> remove_punctuation(context_item[<span class="st" style="color: #20794D;">'context'</span>])</span>
<span id="cb120-17"></span>
<span id="cb120-18">    <span class="cf" style="color: #003B4F;">return</span> data</span>
<span id="cb120-19"></span>
<span id="cb120-20">modified_benchmark <span class="op" style="color: #5E5E5E;">=</span> process_contexts(benchmark)</span></code></pre></div>
</div>
<div class="cell" data-outputid="7d2c1a5b-5162-481f-eb62-b5a1789e29f5" data-execution_count="165">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">modified_benchmark[<span class="st" style="color: #20794D;">'questions'</span>][<span class="dv" style="color: #AD0000;">4</span>][<span class="st" style="color: #20794D;">'answer_context'</span>][<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'context'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="165">
<pre><code>['An MIT professor named Marvin Minsky  who was a grade behind Rosenblatt at the same high school    along with Seymour Papert  wrote a book called  Perceptrons   MIT Press   about Rosenblatt s invention  They showed that a single layer of these devices was unable to learn some simple but critical mathematical functions  such as XOR   In the same book  they also showed that using multiple layers of the devices would allow these limitations to be addressed  Unfortunately  only the first of these insights was widely recognized  As a result  the global academic community nearly entirely gave up on neural networks for the next two decades ']</code></pre>
</div>
</div>
<section id="retrieval-method-full-text-search-5" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-full-text-search-5">Retrieval Method: Full Text Search</h3>
<div class="cell" data-outputid="13b24ca1-582e-416d-bbbf-eafaf4e4732f" data-execution_count="166">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb123-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bm25"</span>,</span>
<span id="cb123-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"F"</span>,</span>
<span id="cb123-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb123-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>modified_benchmark,</span>
<span id="cb123-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results,</span>
<span id="cb123-7">    questions<span class="op" style="color: #5E5E5E;">=</span>questions)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter 1: True
Chapter 2: True
Chapter 4: True
Chapter 8: True
Chapter 9: True
Chapter 10: True
Chapter 13: True
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-outputid="4f94af84-57fa-4326-ddf9-c65f4c6d1251" data-execution_count="167">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_F_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'bm25_F_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="167">
<pre><code>(0.46, 0.83)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-single-vector-cosine-similarity-5" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-single-vector-cosine-similarity-5">Retrieval Method: Single-Vector Cosine Similarity</h3>
<div class="cell" data-outputid="ec40a8af-9cc9-4051-c89c-760d8e374fff" data-execution_count="168">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb127-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"single_vector"</span>,</span>
<span id="cb127-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"F"</span>,</span>
<span id="cb127-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb127-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>modified_benchmark,</span>
<span id="cb127-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Encoding Questions...
Encoding Data...
Retrieving passages...
Retrieval complete.</code></pre>
</div>
</div>
<div class="cell" data-outputid="15ad5b99-d7b2-4560-b4ae-2be1280375a0" data-execution_count="169">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_F_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'single_vector_F_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="169">
<pre><code>(0.49, 0.86)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-colbertv2-5" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-colbertv2-5">Retrieval Method: ColBERTv2</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb131-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbertv2"</span>,</span>
<span id="cb131-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"F"</span>,</span>
<span id="cb131-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb131-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>modified_benchmark,</span>
<span id="cb131-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="2a96fd76-8b57-486d-947b-e049cb8be797" data-execution_count="171">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_F_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'colbertv2_F_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="171">
<pre><code>(0.44, 0.71)</code></pre>
</div>
</div>
</section>
<section id="retrieval-method-answerai-colbert-small-v1-5" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-method-answerai-colbert-small-v1-5">Retrieval Method: answerai-colbert-small-v1</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">benchmark_results <span class="op" style="color: #5E5E5E;">=</span> do_retrieval(</span>
<span id="cb134-2">    method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerai_colbert"</span>,</span>
<span id="cb134-3">    chunking_strategy<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"F"</span>,</span>
<span id="cb134-4">    data<span class="op" style="color: #5E5E5E;">=</span>data,</span>
<span id="cb134-5">    benchmark<span class="op" style="color: #5E5E5E;">=</span>modified_benchmark,</span>
<span id="cb134-6">    benchmark_results<span class="op" style="color: #5E5E5E;">=</span>benchmark_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="f72ca3d9-cfda-43ec-8548-14c4d124db5a" data-execution_count="173">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1"><span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_F_mrr10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>), <span class="bu" style="color: null;">round</span>(benchmark_results[<span class="st" style="color: #20794D;">'answerai_colbert_F_recall10'</span>].mean(),<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="173">
<pre><code>(0.45, 0.73)</code></pre>
</div>
</div>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Here are the definitions of the metrics, retrieval methods and chunking strategies that I am using in this benchmark evaluation:</p>
<p><strong>Metrics</strong></p>
<ul>
<li><p>Answer Component MRR@10: Returns the rank of the n-th passage needed to satisfy all <code>answer_component</code>s for the question. So, if a question has 4 <code>answer_component</code>s and their relevant contexts were contained across the first 5 retrieved passages, MRR would be 1/5 = 0.2.</p></li>
<li><p>Answer Component Recall@10: Measures the proportion of answer components for which at least one supporting context was retrieved. Using the same example, if the top-10 passages only contain contexts relevant to 2 <code>answer_component</code>s, Recall would be 2/4 = 0.5</p></li>
</ul>
<p><strong>Retrieval Methods</strong></p>
<ul>
<li>Full text search (using sqlite and Claude-generated keywords)</li>
<li>Single-vector cosine similarity (using BAAI/bge-small-en-v1.5)</li>
<li>ColBERTv2</li>
<li>answerai-colbert-small-v1</li>
</ul>
<p><strong>Chunking Strategies</strong></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chunking Strategy Name</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">1-paragraph (w/headers)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">3-paragraph (w/headers)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">1-paragraph (w/o headers)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">3-paragraph (w/o headers)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">3-paragraph (w/headers, w/o HTML tags)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">3-paragraph (w/headers, w/o HTML tags, w/o punctuation)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook:</p>
<p><strong>Answer Component MRR@10</strong></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">A</th>
<th style="text-align: center;">B</th>
<th style="text-align: center;">C</th>
<th style="text-align: center;">D</th>
<th style="text-align: center;">E</th>
<th style="text-align: center;">F</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">0.30</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.29</td>
<td style="text-align: center;">0.44</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.46</td>
</tr>
<tr class="even">
<td style="text-align: center;">Single-vector cosine similiarity</td>
<td style="text-align: center;">0.38</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.35</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.49</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERTv2</td>
<td style="text-align: center;">0.46</td>
<td style="text-align: center;">0.49</td>
<td style="text-align: center;">0.41</td>
<td style="text-align: center;">0.50</td>
<td style="text-align: center;">0.49</td>
<td style="text-align: center;">0.44</td>
</tr>
<tr class="even">
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">0.48</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.45</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.52</td>
<td style="text-align: center;">0.45</td>
</tr>
</tbody>
</table>
<p><strong>Answer Component Recall@10</strong></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">A</th>
<th style="text-align: center;">B</th>
<th style="text-align: center;">C</th>
<th style="text-align: center;">D</th>
<th style="text-align: center;">E</th>
<th style="text-align: center;">F</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Full text search</td>
<td style="text-align: center;">65%</td>
<td style="text-align: center;">83%</td>
<td style="text-align: center;">65%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">83%</td>
<td style="text-align: center;">83%</td>
</tr>
<tr class="even">
<td style="text-align: center;">Single-vector cosine similiarity</td>
<td style="text-align: center;">71%</td>
<td style="text-align: center;">85%</td>
<td style="text-align: center;">72%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">87%</td>
<td style="text-align: center;">86%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERTv2</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">74%</td>
<td style="text-align: center;">80%</td>
<td style="text-align: center;">81%</td>
<td style="text-align: center;">71%</td>
</tr>
<tr class="even">
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">84%</td>
<td style="text-align: center;">77%</td>
<td style="text-align: center;">82%</td>
<td style="text-align: center;">84%</td>
<td style="text-align: center;">73%</td>
</tr>
</tbody>
</table>
<p>The best-performing retrieval method and chunking strategies:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Metric Name</th>
<th style="text-align: center;">Retrieval Method</th>
<th style="text-align: center;">Chunking Strategies</th>
<th style="text-align: center;">Metric Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Answer Component MRR@10</td>
<td style="text-align: center;">answerai-colbert-small-v1</td>
<td style="text-align: center;">B, D, E</td>
<td style="text-align: center;">0.52</td>
</tr>
<tr class="even">
<td style="text-align: center;">Answer Component Recall@10</td>
<td style="text-align: center;">Single-vector cosine similiarty</td>
<td style="text-align: center;">E</td>
<td style="text-align: center;">87%</td>
</tr>
</tbody>
</table>
<p>I was quite surprised that single-vector cosine similarity yielded the best Recall. I was less surprised that answerai-colbert-small-v1 had the best MRR@10 since it was better than the other retrieval methods for 5 out of 6 chunking strategies. Other noteworthy observations:</p>
<ul>
<li>ColBERTv2 and answerai-colbert-small-v1 both experienced a considerable performance drop when punctuation was removed from the documents.</li>
<li>Full text search was very competitive after the chunk size was increased to 3-paragraphs (B, D, E, F). It yielded the second-highest MRR@10 for Chunking Strategy F (3-paragraph, w/headers, w/o HTMl tags, w/o punctuation).</li>
<li>Removing HTML tags (Chunking Strategy E) improved the performance of all four retrieval methods than when they were included (Chunking Strategy D). The biggest beneficiary of removing them was single-vector cosine similarity (82% –&gt; 87%).</li>
</ul>
<p>A couple of notes about my process:</p>
<ul>
<li>Having a benchmark dataset saved me about 15-20 hours of manual evaluation.</li>
<li>Refactoring the code (into a <code>do_retrieval</code> function) made it easier for me to iterate quickly different chunking strategies.</li>
</ul>
<p>Before I move on to experimenting with hybrid approaches (full text search + semantic search) I want to research and apply chunking strategies that are particularly suited to ColBERTv2 and answerai-colbert-small-v1 to see if I can improve on the overall-best Recall@10 of 87% and MRR@10 of 0.52.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>fastbookRAG</category>
  <category>information retrieval</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-26-fastbook-benchmark-results/index.html</guid>
  <pubDate>Tue, 26 Nov 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Implementing Negative Prompting for Stable Diffusion</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In Lesson 10 of the fastai course (Part 2) Jeremy assigns us the following homework assignment:</p>
<blockquote class="blockquote">
<p>try picking one of the extra tricks we learned about like image-to-image, or negative prompts; see if you can implement negative prompt in your version of this; or try doing image-to-image; try adding callbacks</p>
</blockquote>
<p>In this blog post I’ll implement negative prompting using the diffusion loop code provided in the course’s <a href="https://github.com/fastai/diffusion-nbs/blob/master/stable_diffusion.ipynb">Stable Diffusion with Diffusers</a> notebook.</p>
<p>I’ll start by copy/pasting all of the boilerplate code provided in that notebook, and running it to make sure we get the desired images.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:14:20.374652Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:14:20.373985Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:14:36.112519Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:14:36.111792Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:14:20.374573Z&quot;}" data-execution_count="1">
<details>
<summary>Show setup</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq diffusers transformers<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">4.46.2</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq pillow<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">11.0.0</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> diffusers <span class="im" style="color: #00769E;">import</span> LMSDiscreteScheduler, AutoencoderKL, UNet2DConditionModel, StableDiffusionPipeline</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> tqdm.auto <span class="im" style="color: #00769E;">import</span> tqdm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> display</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> torch, math</span>
<span id="cb1-10"></span>
<span id="cb1-11">tokenizer <span class="op" style="color: #5E5E5E;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16)</span>
<span id="cb1-12">text_encoder <span class="op" style="color: #5E5E5E;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-13">vae <span class="op" style="color: #5E5E5E;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;">"stabilityai/sd-vae-ft-ema"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-14">unet <span class="op" style="color: #5E5E5E;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16">beta_start,beta_end <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.00085</span>,<span class="fl" style="color: #AD0000;">0.012</span></span>
<span id="cb1-17">scheduler <span class="op" style="color: #5E5E5E;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;">=</span>beta_start, beta_end<span class="op" style="color: #5E5E5E;">=</span>beta_end, beta_schedule<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-20">width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-21">num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">70</span></span>
<span id="cb1-22">guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span></span>
<span id="cb1-23">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:15:35.161888Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:15:35.161676Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:15:35.166774Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:15:35.166240Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:15:35.161868Z&quot;}" data-execution_count="6">
<details>
<summary>Show stable diffusion implementation functions</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> text_enc(prompts, maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">if</span> maxlen <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: maxlen <span class="op" style="color: #5E5E5E;">=</span> tokenizer.model_max_length</span>
<span id="cb2-3">    inp <span class="op" style="color: #5E5E5E;">=</span> tokenizer(prompts, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>maxlen, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">return</span> text_encoder(inp.input_ids.to(<span class="st" style="color: #20794D;">"cuda"</span>))[<span class="dv" style="color: #AD0000;">0</span>].half()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">def</span> mk_img(t):</span>
<span id="cb2-7">    image <span class="op" style="color: #5E5E5E;">=</span> (t<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>).detach().cpu().permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>).numpy()</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">return</span> Image.fromarray((image<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span>).<span class="bu" style="color: null;">round</span>().astype(<span class="st" style="color: #20794D;">"uint8"</span>))</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb2-11">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb2-12">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb2-13">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb2-14">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb2-15">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb2-16"></span>
<span id="cb2-17">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb2-18">    scheduler.set_timesteps(steps)</span>
<span id="cb2-19">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb2-22">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb2-23">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-24">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb2-25">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb2-26"></span>
<span id="cb2-27">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:15:35.284336Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:15:35.283889Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:15:35.286531Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:15:35.286084Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:15:35.284317Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span>,</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;">'an oil painting of an astronaut riding a horse in the style of grant wood'</span></span>
<span id="cb3-4">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-19T12:34:39.165916Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-19T12:34:39.165708Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-19T12:34:39.658773Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-19T12:34:39.657968Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-19T12:34:39.165900Z&quot;}" data-outputid="860be359-1360-4bd1-d749-eb0c7e2d560e" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-5-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-5-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Looks good! These are the same two images generated in the course notebook.</p>
</section>
<section id="negative-prompting" class="level2">
<h2 class="anchored" data-anchor-id="negative-prompting">Negative Prompting</h2>
<p>What is negative prompting? I’ll illustrate an example using a stable diffusion pipeline:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:18:38.116844Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:18:38.116258Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:18:54.478222Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:18:54.477498Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:18:38.116822Z&quot;}" data-outputid="aa3bdd84-0d51-4564-e822-b8773ea00a8c">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pipe <span class="op" style="color: #5E5E5E;">=</span> StableDiffusionPipeline.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, variant<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"fp16"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span></code></pre></div>
</div>
<p>Here is the generated image for the prompt “Labrador in the style of Vermeer”.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:19:15.442983Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:19:15.442422Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:19:24.962680Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:19:24.961826Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:19:15.442962Z&quot;}" data-outputid="938c2d81-ecf7-4107-f608-05c88a2bacc5" data-execution_count="14">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb6-2">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span></span>
<span id="cb6-3">pipe(prompt).images[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7089c967c16241ecab32c9bfdcdffa4e","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-7-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>And here’s the result after passing a negative prompt: “blue”</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-19T17:03:58.822479Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-19T17:03:58.822214Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-19T17:04:03.745114Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-19T17:04:03.744354Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-19T17:03:58.822462Z&quot;}" data-outputid="c8b56e58-436f-4284-b79f-bba36d2dcc93" data-execution_count="247">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb7-2">pipe(prompt, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>).images[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"040efa5a85944f77b5b56cd8c9f0217c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="247">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-8-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-8-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Looking at these images side-by-side, without the negative prompt (left) and with the negative prompt (right) we see that with negative prompting, the blue hat and scarf are replaced with black ones. Additionally, the labrador’s eyes, snout, nose, ears and other features have also slightly changed.</p>
<p>It’s important to note that not all seeds return such desired results. For example, here is another lab in the style of Vermeer, notice the blue head scarf.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:19:30.585836Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:19:30.585153Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:19:35.465990Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:19:35.465321Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:19:30.585812Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-2">pipe(prompt).images[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"64b2bb959946478a8d3edc51ab2884d8","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-9-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The negative prompt result does remove the blue from the image, but it also considerably changes other features of the image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:21:03.285468Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:21:03.284801Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:21:08.145216Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:21:08.144417Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:21:03.285444Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb9-2">pipe(prompt, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>).images[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b959add04fd2484284ae01b7de41ea43","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-10-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<section id="original-image" class="level3">
<h3 class="anchored" data-anchor-id="original-image">Original Image</h3>
<p>I’ll choose the following generated image as the baseline image, using the same prompt and number of steps as the stable diffusion <code>pipe</code> generation, but now using the code from Lesson 10:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-19T12:35:44.474000Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-19T12:35:44.473813Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-19T12:35:51.093056Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-19T12:35:51.092293Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-19T12:35:44.473985Z&quot;}" data-outputid="5e0e1e59-e350-41b5-aeeb-761f7123d87d" data-execution_count="15">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb10-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_75/2343166050.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"410eca32d3a24bd8b803bb0b0b08d99d","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-11-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-11-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="working-implementation-replace-u-with-n" class="level2">
<h2 class="anchored" data-anchor-id="working-implementation-replace-u-with-n">Working Implementation: Replace <code>u</code> with <code>n</code></h2>
<p>I tried out four different implementations of negative prompting. Three of them did not succeed but I did learn a lot from implementing them. I’ll go into detail into those approaches later on in this post. The working solution I came up with was relatively simpler than the first two implementations I attempted.</p>
<p>In the diffusion loop, the following line of code is key:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span></code></pre></div>
<p><code>u</code> is the “starting point” or “reference point” for our predicted noise. It represents some general noisy-image features. <code>t</code> is our desired direction, and <code>g</code> is the <em>guidance scale</em>, amplifying the difference between <code>t</code> and <code>u</code>. Overall, we are moving <em>away</em> from <code>u</code> and <em>towards</em> <code>t</code>.</p>
<p>In this case, <code>u</code> is the UNet noise prediction given the unconditioned (empty string) prompt, and <code>t</code> is the UNet noise prediction given the desired prompt. Moving away from one prompt and moving towards another prompt sounded to me exactly like the goal of negative prompting. We want to move away from our negative prompt and towards our desired prompt. To implement this, I simply added a <code>negative_prompt</code> that defaults to an empty string (our unconditioned prompt scenario), passed this string to <code>text_enc</code> in the following line:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span></code></pre></div>
<p>And otherwise kept the <code>mk_samples</code> code unchanged.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:42:35.080250Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:42:35.079703Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:42:35.085893Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:42:35.085160Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:42:35.080226Z&quot;}" data-execution_count="17">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb14-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb14-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb14-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb14-5">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb14-6">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb14-7"></span>
<span id="cb14-8">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb14-9">    scheduler.set_timesteps(steps)</span>
<span id="cb14-10">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb14-11"></span>
<span id="cb14-12">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb14-13">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb14-14">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb14-15">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb14-16">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb14-17"></span>
<span id="cb14-18">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<p>Here is the output of <code>mk_samples</code> with no <code>negative_prompt</code> specific, this is essentially our normal classifier-free guidance implementation:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:43:15.206765Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:43:15.205853Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:43:21.724905Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:43:21.724396Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:43:15.206740Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb15-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb15-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3351458932.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"990740786383407cb2ab19c9a2788214","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-13-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-13-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>And here is the output with a <code>negative_prompt</code> provided:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:43:56.250945Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:43:56.250058Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:44:02.787863Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:44:02.787057Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:43:56.250913Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb17-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3351458932.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ce08e817060046e2b88e3964f1f71f73","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-14-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-14-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>This results in a (somewhat) desired image: ✅ the blue clothing has been removed (and changed to black) but ❌ the image structure and composition has <em>considerably</em> changed.</p>
<p>I found a seed (<code>20</code>) which performs better. Here is the original unconditioned prompt result:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:48:00.375698Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:48:00.375138Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:48:06.924758Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:48:06.924141Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:48:00.375676Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb19-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3351458932.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5a8d452064ff456fafbb283f050f10af","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-15-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-15-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>And here is the result after replacing the unconditioned prompt with the negative prompt <code>"blue"</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T13:48:23.732941Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T13:48:23.732206Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T13:48:30.352189Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T13:48:30.350608Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T13:48:23.732910Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb21-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3351458932.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"133d776d198f424cb8a2b93a73128c89","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-16-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-16-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>That’s much better! The dog does have a different pose (though a similar perspective), but the blue has been removed from the image.</p>
<p>As a sanity check, I wanted to see how Huggingface implements negative prompting in the <code>diffusers</code> library. I was thrilled (and relieved) to see that they implement it similarly! In the <a href="https://github.com/huggingface/diffusers/blob/89e4d6219805975bd7d253a267e1951badc9f1c0/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L454"><code>StableDiffusionPipeline.encode_prompt</code> method</a> they simply assign the negative prompt tokens to the <code>uncond_tokens</code> variable:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(negative_prompt, <span class="bu" style="color: null;">str</span>):</span>
<span id="cb23-2">                uncond_tokens <span class="op" style="color: #5E5E5E;">=</span> [negative_prompt]</span></code></pre></div>
<p>then they embed these tokens:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"></span>
<span id="cb24-2">negative_prompt_embeds <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.text_encoder(</span>
<span id="cb24-3">                uncond_input.input_ids.to(device),</span>
<span id="cb24-4">                attention_mask<span class="op" style="color: #5E5E5E;">=</span>attention_mask,</span>
<span id="cb24-5">            )</span></code></pre></div>
<p>And return them along with the desired prompt embeddings:</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="cf" style="color: #003B4F;">return</span> prompt_embeds, negative_prompt_embeds</span></code></pre></div>
<p>They then concatenate the desired and negative prompt embeddings:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">prompt_embeds <span class="op" style="color: #5E5E5E;">=</span> torch.cat([negative_prompt_embeds, prompt_embeds])</span></code></pre></div>
<p>And in the diffusion loop they get the UNet predictions:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">noise_pred <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.unet(</span>
<span id="cb27-2">    latent_model_input,</span>
<span id="cb27-3">    t,</span>
<span id="cb27-4">    encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>prompt_embeds,</span>
<span id="cb27-5">    timestep_cond<span class="op" style="color: #5E5E5E;">=</span>timestep_cond,</span>
<span id="cb27-6">    cross_attention_kwargs<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.cross_attention_kwargs,</span>
<span id="cb27-7">    added_cond_kwargs<span class="op" style="color: #5E5E5E;">=</span>added_cond_kwargs,</span>
<span id="cb27-8">    return_dict<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb27-9">)[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<p>and perform classifier-free guidance (where <code>noise_pred_uncond</code> are the UNet predictions for the negative prompt):</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.do_classifier_free_guidance:</span>
<span id="cb28-2">    noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;">=</span> noise_pred.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb28-3">    noise_pred <span class="op" style="color: #5E5E5E;">=</span> noise_pred_uncond <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.guidance_scale <span class="op" style="color: #5E5E5E;">*</span> (noise_pred_text <span class="op" style="color: #5E5E5E;">-</span> noise_pred_uncond)</span></code></pre></div>
</section>
<section id="implementation-1-pred-u-gt-u-n" class="level2">
<h2 class="anchored" data-anchor-id="implementation-1-pred-u-gt-u-n">Implementation 1: <code>pred = u + g*(t-u-n)</code></h2>
<p>The first approach I tried was to modify the classifier-free guidance code from this:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span></code></pre></div>
<p>to this:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u<span class="op" style="color: #5E5E5E;">-</span>n)</span></code></pre></div>
<p>My motivation for this was that this subtraction was analogous to “moving away from <code>n</code>”. In hindsight, this was a good first attempt and eventually led to (somewhat accidentally) implementing the correct solution as I was throwing things at the wall to see if they stuck.</p>
<p>I modified <code>mk_samples</code> with the following changes:</p>
<ul>
<li>Create a separate text embeddings (<code>n_embs</code>) for the negative prompt.</li>
<li>Concatenate <code>n_embs</code> to <code>uncond</code> and <code>text</code>.</li>
<li>Multiply <code>[latents]</code> by <code>3</code> when passing it to the <code>scheduler</code> as we now have three embeddings.</li>
<li><code>chunk</code> the UNet predictions into <code>3</code> instead of <code>2</code>.</li>
<li>Replace <code>pred = u + g*(t-u-n)</code> with <code>pred = u + g*(t-u-n)</code>.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:08:42.623455Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:08:42.623180Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:08:42.629180Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:08:42.628407Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:08:42.623435Z&quot;}" data-execution_count="23">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb31-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb31-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb31-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb31-5">    n_embs <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb31-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, n_embs])</span>
<span id="cb31-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb31-8"></span>
<span id="cb31-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb31-10">    scheduler.set_timesteps(steps)</span>
<span id="cb31-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb31-12"></span>
<span id="cb31-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb31-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb31-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,n <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb31-16">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u<span class="op" style="color: #5E5E5E;">-</span>n)</span>
<span id="cb31-17">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb31-18"></span>
<span id="cb31-19">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<p>Unfortunately, this resulted in garbled noise!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:09:00.507997Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:09:00.507348Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:09:09.754026Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:09:09.753560Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:09:00.507973Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb32-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb32-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3564900662.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0a4c68f366f54538ba2786ffccc57d61","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-18-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-18-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="implementation-2-pred-u-g2t-u-n" class="level2">
<h2 class="anchored" data-anchor-id="implementation-2-pred-u-g2t-u-n">Implementation 2: <code>pred = u + g*(2*t-u-n)</code></h2>
<p>As I was experimenting with the above <code>mk_samples</code> implementation, I found some success multiplying <code>t</code> by a scalar factor.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T15:26:17.491283Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T15:26:17.490462Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T15:26:17.499121Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T15:26:17.498409Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T15:26:17.491246Z&quot;}" data-execution_count="72">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb34-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb34-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb34-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb34-5">    n_embs <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb34-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, n_embs])</span>
<span id="cb34-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb34-8"></span>
<span id="cb34-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb34-10">    scheduler.set_timesteps(steps)</span>
<span id="cb34-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb34-12"></span>
<span id="cb34-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb34-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb34-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,n <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb34-16">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span>t<span class="op" style="color: #5E5E5E;">-</span>u<span class="op" style="color: #5E5E5E;">-</span>n)</span>
<span id="cb34-17">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb34-18"></span>
<span id="cb34-19">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<p>The resulting image, for both seeds <code>20</code> and <code>18</code>, are not bad! For <code>seed=20</code> the generated image looks coherent and similar to the structure and composition of the original image though the background still contains blue-ish tones,</p>
<p>The result for <code>seed=18</code> in my opinion is actually better than the <code>pred = n + g*(t-n)</code> implementation! Although the dog’s pose has changed, the dog is no longer wearing a blue sweater (instead it’s black) and more importantly, this approach has not generated a woman standing next to him.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:12:14.040162Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:12:14.039683Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:12:23.273373Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:12:23.272871Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:12:14.040142Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb35-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb35-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/4112522131.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dbb973e3579a4e2bb828cc786c3685e1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-20-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-20-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:13:55.203241Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:13:55.202416Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:14:04.419841Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:14:04.419357Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:13:55.203217Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb37-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/4112522131.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6db8899be6ae4b6e83ca269342c09207","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-21-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-21-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>I don’t understand the intuition behind why, but it seems like <code>2</code> is the magical factor for this implementation (in terms of generating somewhat stable images). Here’s a slightly different prompt:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T15:26:47.093243Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T15:26:47.092698Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T15:26:56.342350Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T15:26:56.341606Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T15:26:47.093222Z&quot;}" data-execution_count="74">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Cat in the style of Vermeer"</span>]</span>
<span id="cb39-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>)</span>
<span id="cb39-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/4112522131.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"62dfa61a9ebc4a8d810c38abb77c42e7","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-22-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-22-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>I was curious to see how the result changed given different values of the factor multiplying <code>t</code>. I tried 100 different factors, incrementing from <code>1</code> to <code>3</code>, for <code>seed=18</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:19:24.940422Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:19:24.939716Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:19:24.945747Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:19:24.945123Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:19:24.940399Z&quot;}" data-execution_count="28">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, t_factor<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb41-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb41-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb41-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb41-5">    n_embs <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb41-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, n_embs])</span>
<span id="cb41-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb41-8"></span>
<span id="cb41-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb41-10">    scheduler.set_timesteps(steps)</span>
<span id="cb41-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb41-12"></span>
<span id="cb41-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb41-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb41-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,n <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb41-16">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t_factor<span class="op" style="color: #5E5E5E;">*</span>t<span class="op" style="color: #5E5E5E;">-</span>u<span class="op" style="color: #5E5E5E;">-</span>n)</span>
<span id="cb41-17">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb41-18"></span>
<span id="cb41-19">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:20:22.377413Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:20:22.376502Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:36:59.198215Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:36:59.197350Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:20:22.377387Z&quot;}">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">images <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb42-2">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb42-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb42-4">  img <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, t_factor<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> (i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb42-5">  images.append(img)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:40:58.390472Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:40:58.389392Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:40:58.490761Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:40:58.490012Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:40:58.390435Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image, ImageDraw, ImageFont</span>
<span id="cb43-2">imgs <span class="op" style="color: #5E5E5E;">=</span> [mk_img(im.squeeze()) <span class="cf" style="color: #003B4F;">for</span> im <span class="kw" style="color: #003B4F;">in</span> images]</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="cf" style="color: #003B4F;">for</span> i, image <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(imgs):</span>
<span id="cb43-5">  font <span class="op" style="color: #5E5E5E;">=</span> ImageFont.load_default().font_variant(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">24</span>)</span>
<span id="cb43-6">  draw <span class="op" style="color: #5E5E5E;">=</span> ImageDraw.Draw(image)</span>
<span id="cb43-7">  text <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"t_factor = </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> (i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">2</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb43-8">  bbox <span class="op" style="color: #5E5E5E;">=</span> draw.textbbox((<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), text, font<span class="op" style="color: #5E5E5E;">=</span>font)  <span class="co" style="color: #5E5E5E;"># Get text boundaries</span></span>
<span id="cb43-9">  draw.rectangle(bbox, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>)  <span class="co" style="color: #5E5E5E;"># Draw black background</span></span>
<span id="cb43-10">  ImageDraw.Draw(image).text((<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">10</span>), text, font<span class="op" style="color: #5E5E5E;">=</span>font, fill<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"white"</span>)</span>
<span id="cb43-11">    </span>
<span id="cb43-12">imgs[<span class="dv" style="color: #AD0000;">0</span>].save(<span class="ss" style="color: #20794D;">f't_factor_18.gif'</span>, save_all<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, append_images<span class="op" style="color: #5E5E5E;">=</span>imgs[<span class="dv" style="color: #AD0000;">1</span>:], duration<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, loop<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="t_factor_18.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="t_factor GIF"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/t_factor_18.gif" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">t_factor GIF</figcaption><p></p>
</figure>
</div>
<p>We can see that for a only a very small range of <code>t_factor</code> values (around 2.00) do we get a coherent image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:46:30.057115Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:46:30.056426Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:46:30.061561Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:46:30.060836Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:46:30.057084Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="kw" style="color: #003B4F;">def</span> image_grid(imgs, rows, cols):</span>
<span id="cb44-2">    w,h <span class="op" style="color: #5E5E5E;">=</span> imgs[<span class="dv" style="color: #AD0000;">0</span>].size</span>
<span id="cb44-3">    grid <span class="op" style="color: #5E5E5E;">=</span> Image.new(<span class="st" style="color: #20794D;">'RGB'</span>, size<span class="op" style="color: #5E5E5E;">=</span>(cols<span class="op" style="color: #5E5E5E;">*</span>w, rows<span class="op" style="color: #5E5E5E;">*</span>h))</span>
<span id="cb44-4">    <span class="cf" style="color: #003B4F;">for</span> i, img <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(imgs): grid.paste(img, box<span class="op" style="color: #5E5E5E;">=</span>(i<span class="op" style="color: #5E5E5E;">%</span>cols<span class="op" style="color: #5E5E5E;">*</span>w, i<span class="op" style="color: #5E5E5E;">//</span>cols<span class="op" style="color: #5E5E5E;">*</span>h))</span>
<span id="cb44-5">    <span class="cf" style="color: #003B4F;">return</span> grid</span></code></pre></div>
</div>
<p>In fact for only three <code>t_factor</code> values out 100 (2.00, 2.02, 2.04) does the diffusion loop generate coherent images, and only in one of those (2.00) does the composition and style match the desired prompt (“in the style of Vermeer”).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:47:56.006600Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:47:56.005699Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:47:56.209978Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:47:56.209084Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:47:56.006567Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">image_grid([imgs[i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> [<span class="dv" style="color: #AD0000;">48</span>, <span class="dv" style="color: #AD0000;">49</span>, <span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">51</span>, <span class="dv" style="color: #AD0000;">52</span>, <span class="dv" style="color: #AD0000;">53</span>]], <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-27-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="implementation-2-pred-u-gt-u-n_factorn" class="level2">
<h2 class="anchored" data-anchor-id="implementation-2-pred-u-gt-u-n_factorn">Implementation 2: <code>pred = u + g*(t-u-n_factor*n)</code></h2>
<p>With some success achieved with that implementation, I decided to try a variant: scaling <code>n</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:52:10.435472Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:52:10.435105Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:52:10.442466Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:52:10.441411Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:52:10.435443Z&quot;}" data-execution_count="51">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, n_factor<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>):</span>
<span id="cb46-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb46-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb46-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb46-5">    n_embs <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb46-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, n_embs])</span>
<span id="cb46-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb46-8"></span>
<span id="cb46-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb46-10">    scheduler.set_timesteps(steps)</span>
<span id="cb46-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb46-12"></span>
<span id="cb46-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb46-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb46-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,n <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb46-16">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u<span class="op" style="color: #5E5E5E;">-</span>n_factor<span class="op" style="color: #5E5E5E;">*</span>n)</span>
<span id="cb46-17">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb46-18"></span>
<span id="cb46-19">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<p>However, with this approach, I found that only negligible values of <code>n_factor</code> produced coherent images, and <code>n</code>’s impact was so small that it did not remove any “blue” elements from the image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:55:27.534266Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:55:27.534009Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:55:37.032108Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:55:37.031410Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:55:27.534248Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb47-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, n_factor<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.005</span>)</span>
<span id="cb47-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/989121822.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4c5965cfc7044202badac4525473aeb6","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-29-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-29-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T14:55:41.183193Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T14:55:41.182598Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T14:55:50.782631Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T14:55:50.781841Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T14:55:41.183160Z&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb49-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, n_factor<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.05</span>)</span>
<span id="cb49-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/989121822.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"04664d9b0d4749f9b5f31a26d81f28ed","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-30-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-30-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="implementation-3-using-rejection-of-t-on-n" class="level2">
<h2 class="anchored" data-anchor-id="implementation-3-using-rejection-of-t-on-n">Implementation 3: Using Rejection of <code>t</code> on <code>n</code></h2>
<p>My final implementation was the result of a lengthy conversation with Claude where I explicitly asked it <em>not</em> to provide me with fully fleshed solutions to my prompts but to respond with probing questions based on first principles. This led me to a very engaging and interesting conversation where we explored and developed my intuition of vector geometry.</p>
<p>The implementation I came up with was based on the concept of <em>rejection</em>. In the image from Wikipedia below, <img src="https://latex.codecogs.com/png.latex?a_2"> is the rejection of <img src="https://latex.codecogs.com/png.latex?a"> onto <img src="https://latex.codecogs.com/png.latex?b">. In other words, it’s the component of vector <img src="https://latex.codecogs.com/png.latex?a"> that is perpendicular to vector <img src="https://latex.codecogs.com/png.latex?b">. We want to move our noise predictions away from <code>n</code>—adding the component of <code>t</code> that is perpendicular to <code>n</code> seemed an intuitive implementation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="Vector rejection"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Vector rejection</figcaption><p></p>
</figure>
</div>
<p>In my sketch below, I visualize in a simplified 2-D space how adding to <code>t</code> a vector <code>p</code> perpendicular to <code>n</code> moves it away from it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="Moving t away from n with p"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Moving <code>t</code> away from <code>n</code> with <code>p</code></figcaption><p></p>
</figure>
</div>
<p>The implementation of rejection between two vectors <code>t</code> and <code>n</code> (thanks Claude) is:</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">p <span class="op" style="color: #5E5E5E;">=</span> t <span class="op" style="color: #5E5E5E;">-</span> (t <span class="op" style="color: #5E5E5E;">*</span> n).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>) <span class="op" style="color: #5E5E5E;">*</span> n</span></code></pre></div>
<p>Here’s a trivial example showing that the full vector <code>a</code> is the perpendicular component to the orthogonal <code>b</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T15:15:00.669025Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T15:15:00.668760Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T15:15:00.676422Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T15:15:00.675610Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T15:15:00.669007Z&quot;}" data-execution_count="64">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">a <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]])</span>
<span id="cb52-2">b <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb52-3">a <span class="op" style="color: #5E5E5E;">-</span> (a <span class="op" style="color: #5E5E5E;">*</span> b).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>) <span class="op" style="color: #5E5E5E;">*</span> b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>tensor([[0, 0, 0]])</code></pre>
</div>
</div>
<p>Here’s the modifications I made to <code>mk_samples</code>:</p>
<ul>
<li>Calculate the rejection of <code>t</code> onto <code>n</code>: <code>p = t - (t * n).sum(dim=1, keepdim=True) * n</code>.</li>
<li>Add this vector (scaled) to the noise prediction: <code>pred = u + g*(t-u) + g2*p</code>.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T15:18:26.908117Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T15:18:26.907527Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T15:18:26.914087Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T15:18:26.913402Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T15:18:26.908096Z&quot;}" data-execution_count="68">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, negative_prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span>, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>, g2<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb54-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb54-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb54-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb54-5">    n_embs <span class="op" style="color: #5E5E5E;">=</span> text_enc([negative_prompt] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb54-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, n_embs])</span>
<span id="cb54-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb54-8"></span>
<span id="cb54-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb54-10">    scheduler.set_timesteps(steps)</span>
<span id="cb54-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb54-12"></span>
<span id="cb54-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb54-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb54-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,n <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb54-16">        </span>
<span id="cb54-17">        p <span class="op" style="color: #5E5E5E;">=</span> t <span class="op" style="color: #5E5E5E;">-</span> (t <span class="op" style="color: #5E5E5E;">*</span> n).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>) <span class="op" style="color: #5E5E5E;">*</span> n</span>
<span id="cb54-18">        </span>
<span id="cb54-19">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u) <span class="op" style="color: #5E5E5E;">+</span> g2<span class="op" style="color: #5E5E5E;">*</span>p</span>
<span id="cb54-20">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb54-21"></span>
<span id="cb54-22">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</details>
</div>
<p>On paper this seemed like an interesting approach but I found that only small values of <code>g2</code> allowed for coherent image generation, and even then, it did not remove any “blue” components.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T15:19:01.506812Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T15:19:01.506042Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T15:19:10.789727Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T15:19:10.789014Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T15:19:01.506787Z&quot;}" data-execution_count="71">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"Labrador in the style of Vermeer"</span>]</span>
<span id="cb55-2">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts, negative_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"blue"</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>, g2<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.001</span>)</span>
<span id="cb55-3"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_52/3545698243.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5d147460f31c4e08a92070a5fe5e7114","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-33-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index_files/figure-html/cell-33-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Working on these small, relatively contained stable diffusion experiments has been really fun and informative. On one hand, it’s broken some of the “mystique” around diffusion, as I’m able to change and somewhat control image generation with a few lines of code. On the other hand, it’s given a deeper insight into how mercurial and sensitive, and sometimes counterintuitive, the diffusion loop can be.</p>
<p>For negative prompting, the simplest implementation was the most stable one. Swapping the unconditioned prompt with the negative prompt allows for seemingly guaranteed coherent image generation (although I’m sure there will be prompts that would break it!). That being said, I found that <code>pred = u+g*(2*t-u-n)</code> yielded a better image generation for <code>seed=18</code> at the cost of a high level of difficulty (or chance in my case) of finding the right factor to multiply <code>t</code> with.</p>
<p>In the coming blog posts, I’ll be implementing other diffusion tricks, such as image-to-image generation and callbacks.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>stable diffusion</category>
  <category>fastai</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>generative AI</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/index.html</guid>
  <pubDate>Wed, 20 Nov 2024 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-11-20-negative-prompting/t_factor_18.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exploring Cosine Similarity in Stable Diffusion’s Latent Space</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:12:32.655053Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:12:32.654499Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:13:33.272143Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:13:33.271300Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:12:32.654986Z&quot;}">
<details>
<summary>Show setup code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq diffusers transformers<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">4.46.2</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq pillow<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">11.0.0</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> diffusers <span class="im" style="color: #00769E;">import</span> LMSDiscreteScheduler, AutoencoderKL, UNet2DConditionModel, StableDiffusionPipeline</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> CLIPTextModel, CLIPTokenizer</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> tqdm.auto <span class="im" style="color: #00769E;">import</span> tqdm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> display</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> torch, math</span>
<span id="cb1-12"></span>
<span id="cb1-13">tokenizer <span class="op" style="color: #5E5E5E;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16)</span>
<span id="cb1-14">text_encoder <span class="op" style="color: #5E5E5E;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-15">vae <span class="op" style="color: #5E5E5E;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;">"stabilityai/sd-vae-ft-ema"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-16">unet <span class="op" style="color: #5E5E5E;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"unet"</span>, torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.float16).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">beta_start,beta_end <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.00085</span>,<span class="fl" style="color: #AD0000;">0.012</span></span>
<span id="cb1-19">scheduler <span class="op" style="color: #5E5E5E;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;">=</span>beta_start, beta_end<span class="op" style="color: #5E5E5E;">=</span>beta_end, beta_schedule<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21">height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-22">width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb1-23">num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">70</span></span>
<span id="cb1-24">guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span></span>
<span id="cb1-25">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook, I’ll explore the question: how different are UNet predictions (in latent space) for the conditioned and unconditioned (empty) prompts? The code used in this notebook comes from the <a href="https://github.com/fastai/diffusion-nbs/blob/master/stable_diffusion.ipynb">“Stable Diffusion with Diffusers”</a> from part 2 of the fastai course.</p>
</section>
<section id="generating-images" class="level2">
<h2 class="anchored" data-anchor-id="generating-images">Generating Images</h2>
<p>I’ll start by running the code below to generate an image using stable diffusion:</p>
<ul>
<li><code>text_enc</code> tokenizes the given prompt and converts it to text embeddings using the <code>text_encoder</code>(“openai/clip-vit-large-patch14”).</li>
<li><code>mk_img</code> converts a Tensor to a PIL Image.</li>
<li><code>mk_samples</code> takes the prompt, guidance scale, seed, and number of inference steps to run the diffusion loop and generate a image using the <code>scheduler</code> (<code>LMSDiscreteScheduler</code>), UNet (<code>"CompVis/stable-diffusion-v1-4"</code>) and VAE (<code>"stabilityai/sd-vae-ft-ema"</code>).</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:20:33.918929Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:20:33.918110Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:20:33.923266Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:20:33.922680Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:20:33.918904Z&quot;}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> text_enc(prompts, maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;">if</span> maxlen <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>: maxlen <span class="op" style="color: #5E5E5E;">=</span> tokenizer.model_max_length</span>
<span id="cb2-3">    inp <span class="op" style="color: #5E5E5E;">=</span> tokenizer(prompts, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>maxlen, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;">return</span> text_encoder(inp.input_ids.to(<span class="st" style="color: #20794D;">"cuda"</span>))[<span class="dv" style="color: #AD0000;">0</span>].half()</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;">def</span> mk_img(t):</span>
<span id="cb2-7">    image <span class="op" style="color: #5E5E5E;">=</span> (t<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">+</span><span class="fl" style="color: #AD0000;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>).detach().cpu().permute(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>).numpy()</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;">return</span> Image.fromarray((image<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">255</span>).<span class="bu" style="color: null;">round</span>().astype(<span class="st" style="color: #20794D;">"uint8"</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:20:35.090161Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:20:35.089669Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:20:35.161702Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:20:35.161085Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:20:35.090140Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb3-2">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb3-3">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb3-4">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb3-5">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb3-7"></span>
<span id="cb3-8">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb3-9">    scheduler.set_timesteps(steps)</span>
<span id="cb3-10">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb3-13">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb3-14">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-15">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb3-16">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb3-17"></span>
<span id="cb3-18">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:21:14.748393Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:21:14.747871Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:21:31.511294Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:21:31.510669Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:21:14.748372Z&quot;}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb4-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span>,</span>
<span id="cb4-3">    <span class="st" style="color: #20794D;">'an oil painting of an astronaut riding a horse in the style of grant wood'</span></span>
<span id="cb4-4">]</span>
<span id="cb4-5"></span>
<span id="cb4-6">images <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb4-7"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/2926544816.py:8: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d2512caa5d4d487492325fd186bb4ee7","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-5-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-5-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-5-output-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-5-output-4.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>The two images are generated as expected!</p>
</section>
<section id="classifier-free-guidance" class="level2">
<h2 class="anchored" data-anchor-id="classifier-free-guidance">Classifier-Free Guidance</h2>
<p>The lines of code I’m most interested in for this notebook are:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb6-2">pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span></code></pre></div>
<p>In the first line, the <code>unet</code> takes the noisy input latents <code>inp</code>, timestep <code>ts</code> and text embeddings <code>emb</code> to predict the noise in the noisy latent. In the second line, the “final” prediction is taken as <code>u + g*(t-u)</code> where <code>t</code> and <code>u</code> are both predictions form the same UNet:</p>
<ul>
<li><code>u</code> is the predicted noise corresponding to the unconditioned prompt (<code>""</code>).</li>
<li><code>t</code> is the predicted noise corresponding to the conditioned prompt (e.g., <code>'a photograph of an astronaut riding a horse'</code>),</li>
<li><code>g</code> is the <em>guidance scale</em> which is the amount we want to weight the prediction towards <code>t</code> and away from <code>u</code>.</li>
</ul>
<p>Expanding this equation we get: <code>pred = u + gt - gu = gt - (g-1)u</code>. We amplify <code>t</code> by <code>g</code> and then subtract <code>(g-1)</code> times <code>u</code>. Conceptually, we are moving away from the empty prompt and toward the desired prompt. My understanding of why we need <code>u</code> is that we need a baseline or reference point to which we compare <code>t</code> so that we can guide the generation process to learn specific features of <code>t</code> in comparison to general noisy features of of <code>u</code>. This “comparison” is done with the <code>t-u</code> term.</p>
</section>
<section id="cosine-similarity-between-u-and-t" class="level2">
<h2 class="anchored" data-anchor-id="cosine-similarity-between-u-and-t">Cosine Similarity Between <code>u</code> and <code>t</code></h2>
<p>I’m going to modify <code>mk_samples</code> so that at each timestep, it calculates and stores the cosine similarity betwern <code>t</code> and <code>u</code>:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:35:41.642698Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:35:41.642141Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:35:41.648612Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:35:41.647843Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:35:41.642675Z&quot;}" data-execution_count="6">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb7-2">    cs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-3">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb7-4">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb7-5">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb7-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb7-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb7-8"></span>
<span id="cb7-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb7-10">    scheduler.set_timesteps(steps)</span>
<span id="cb7-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb7-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb7-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb7-16">       </span>
<span id="cb7-17">        cs.append(torch.nn.functional.cosine_similarity(t, u).mean().item())</span>
<span id="cb7-18">        </span>
<span id="cb7-19">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb7-20">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb7-21"></span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): </span>
<span id="cb7-23">        <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample, cs</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:36:05.207475Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:36:05.206940Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:36:12.111986Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:36:12.111308Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:36:05.207453Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span></span>
<span id="cb8-3">]</span>
<span id="cb8-4"></span>
<span id="cb8-5">images, cs <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb8-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/1126956742.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e500b98a0014449caa9ae37f28d0706b","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-7-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-7-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>I was shocked to find that the cosine similarity between the unconditioned and the conditioned UNet predictions is so high! Essentially 1.0!!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:36:36.840095Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:36:36.839390Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:36:36.861610Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:36:36.860857Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:36:36.840066Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">pd.Series(cs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>count    70.000000
mean      0.999616
std       0.000261
min       0.998535
25%       0.999512
50%       0.999512
75%       0.999878
max       1.000000
dtype: float64</code></pre>
</div>
</div>
<p>The two predictions start out basically exactly the same (cosine similarity = 1) and diverge as the diffusion process goes on, reaching the lowest cosine similarity at the 70 inference steps.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:37:53.376327Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:37:53.375586Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:37:53.483031Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:37:53.482459Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:37:53.376298Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plt.scatter(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(cs)),cs)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-9-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>This trend of high mean similarity between <code>t</code> and <code>u</code> overall and decreasing cosine similarity over time holds for other prompts as well:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:40:26.602907Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:40:26.602237Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:40:33.501365Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:40:33.500908Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:40:26.602885Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb13-2">    <span class="st" style="color: #20794D;">'a painting of a dog in the style of Picasso'</span></span>
<span id="cb13-3">]</span>
<span id="cb13-4"></span>
<span id="cb13-5">images, cs <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/1126956742.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4143e33405e242c4b5f50b2d893176e9","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-10-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-10-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:40:39.007007Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:40:39.006346Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:40:39.013248Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:40:39.012819Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:40:39.006983Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pd.Series(cs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>count    70.000000
mean      0.999923
std       0.000197
min       0.999023
25%       1.000000
50%       1.000000
75%       1.000000
max       1.000000
dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:40:41.651568Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:40:41.651118Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:40:41.723498Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:40:41.723084Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:40:41.651543Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">plt.scatter(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(cs)),cs)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-12-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:41:38.173642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:41:38.172961Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:41:45.086500Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:41:45.085913Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:41:38.173618Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb18-2">    <span class="st" style="color: #20794D;">'a drawing of a woman sitting on a park bench'</span></span>
<span id="cb18-3">]</span>
<span id="cb18-4"></span>
<span id="cb18-5">images, cs <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb18-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/1126956742.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3f0969eaf26e484ca8635aa5d3ac201e","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-13-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-13-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:41:51.700463Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:41:51.700200Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:41:51.707822Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:41:51.706892Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:41:51.700444Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">pd.Series(cs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>count    70.000000
mean      0.999679
std       0.000233
min       0.999512
25%       0.999512
50%       0.999512
75%       1.000000
max       1.000000
dtype: float64</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T00:41:59.939540Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T00:41:59.939271Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T00:42:00.016233Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T00:42:00.015750Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T00:41:59.939522Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">plt.scatter(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(cs)),cs)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-15-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="perturbations-in-pred" class="level2">
<h2 class="anchored" data-anchor-id="perturbations-in-pred">Perturbations in <code>pred</code></h2>
<p>My takeaway from the high cosine similarity between conditioned and unconditioned predictions is that the diffusion process is sensitive to small perturbations. However, I found that this wasn’t <em>always</em> the case. To illustrate, I’ll first add a large amount of noise to <code>pred</code> at each timestep and see how that impacts the resulting image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:00:31.574085Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:00:31.573468Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:00:31.579689Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:00:31.579216Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:00:31.574062Z&quot;}" data-execution_count="63">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb23-2">    cs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb23-3">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb23-4">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb23-5">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb23-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb23-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb23-8"></span>
<span id="cb23-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb23-10">    scheduler.set_timesteps(steps)</span>
<span id="cb23-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb23-12"></span>
<span id="cb23-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb23-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb23-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb23-16">       </span>
<span id="cb23-17">        cs.append(torch.nn.functional.cosine_similarity(t, u).mean().item())</span>
<span id="cb23-18">        </span>
<span id="cb23-19">        r <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span><span class="op" style="color: #5E5E5E;">*</span>torch.randn_like(t)</span>
<span id="cb23-20">        orig_pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb23-21">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u) <span class="op" style="color: #5E5E5E;">+</span> r</span>
<span id="cb23-22">        </span>
<span id="cb23-23">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb23-24"></span>
<span id="cb23-25">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): </span>
<span id="cb23-26">        <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample, cs, orig_pred, r</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:00:32.023341Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:00:32.022722Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:00:38.989202Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:00:38.988575Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:00:32.023319Z&quot;}" data-execution_count="64">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb24-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span></span>
<span id="cb24-3">]</span>
<span id="cb24-4"></span>
<span id="cb24-5">images, cs, orig_pred, r <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb24-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/2326634756.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a6f29010668b409ba26b9da46c9595f4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-17-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-17-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:00:42.604558Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:00:42.604291Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:00:42.609986Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:00:42.609483Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:00:42.604540Z&quot;}" data-execution_count="65">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">orig_pred.norm(), r.norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>(tensor(27.3281, device='cuda:0', dtype=torch.float16),
 tensor(12.6328, device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
<p>Adding a noise tensor with about half of the magnitude as the full noise prediction did not prevent the diffusion loop from generating a high quality image! At what point does random noise impact generation?</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:17:59.512567Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:17:59.512304Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:17:59.518575Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:17:59.518021Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:17:59.512548Z&quot;}" data-execution_count="81">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb28-2">    cs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb28-3">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb28-4">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb28-5">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb28-6">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text])</span>
<span id="cb28-7">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb28-8"></span>
<span id="cb28-9">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb28-10">    scheduler.set_timesteps(steps)</span>
<span id="cb28-11">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb28-12"></span>
<span id="cb28-13">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb28-14">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>), ts)</span>
<span id="cb28-15">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t <span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb28-16">       </span>
<span id="cb28-17">        cs.append(torch.nn.functional.cosine_similarity(t, u).mean().item())</span>
<span id="cb28-18">        </span>
<span id="cb28-19">        r <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.2</span><span class="op" style="color: #5E5E5E;">*</span>torch.randn_like(t)</span>
<span id="cb28-20">        orig_pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb28-21">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u) <span class="op" style="color: #5E5E5E;">+</span> r</span>
<span id="cb28-22">        </span>
<span id="cb28-23">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb28-24"></span>
<span id="cb28-25">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): </span>
<span id="cb28-26">        <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample, cs, orig_pred, r</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:18:00.929515Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:18:00.928822Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:18:07.809671Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:18:07.809194Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:18:00.929490Z&quot;}" data-execution_count="82">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb29-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span></span>
<span id="cb29-3">]</span>
<span id="cb29-4"></span>
<span id="cb29-5">images, cs, orig_pred, r <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb29-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/2882368180.py:9: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a149fb4c97b84b9aa738bb080babf4a2","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-20-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-20-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:18:10.238779Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:18:10.238107Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:18:10.243530Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:18:10.243177Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:18:10.238730Z&quot;}" data-execution_count="83">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">orig_pred.norm(), r.norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>(tensor(26.2188, device='cuda:0', dtype=torch.float16),
 tensor(25.2656, device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
<p>Adding random noise equal in magnitude to the guided prediction does visibly affect the quality of the generated image, though it still maintains its main structural components (earth, astronaut, horse).</p>
<p>What happens if instead of random noise, I add a UNet prediction based on some other unrelated prompt?</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:06:40.034353Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:06:40.033717Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:06:40.039798Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:06:40.039293Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:06:40.034330Z&quot;}" data-execution_count="73">
<details>
<summary>Show modified <code>mk_samples</code> function</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;">def</span> mk_samples(prompts, g<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">7.5</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">70</span>):</span>
<span id="cb33-2">    cs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb33-3">    bs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb33-4">    text <span class="op" style="color: #5E5E5E;">=</span> text_enc(prompts)</span>
<span id="cb33-5">    uncond <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb33-6">    other <span class="op" style="color: #5E5E5E;">=</span> text_enc([<span class="st" style="color: #20794D;">"a toad riding a bicycle"</span>] <span class="op" style="color: #5E5E5E;">*</span> bs, text.shape[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb33-7">    </span>
<span id="cb33-8">    emb <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond, text, other])</span>
<span id="cb33-9">    <span class="cf" style="color: #003B4F;">if</span> seed: torch.manual_seed(seed)</span>
<span id="cb33-10"></span>
<span id="cb33-11">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn((bs, unet.in_channels, height<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>, width<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb33-12">    scheduler.set_timesteps(steps)</span>
<span id="cb33-13">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(<span class="st" style="color: #20794D;">"cuda"</span>).half() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb33-14"></span>
<span id="cb33-15">    <span class="cf" style="color: #003B4F;">for</span> i,ts <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(tqdm(scheduler.timesteps)):</span>
<span id="cb33-16">        inp <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">3</span>), ts)</span>
<span id="cb33-17">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): u,t,o<span class="op" style="color: #5E5E5E;">=</span> unet(inp, ts, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>emb).sample.chunk(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb33-18">       </span>
<span id="cb33-19">        cs.append(torch.nn.functional.cosine_similarity(t, u).mean().item())</span>
<span id="cb33-20">        </span>
<span id="cb33-21">        orig_pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u)</span>
<span id="cb33-22">        pred <span class="op" style="color: #5E5E5E;">=</span> u <span class="op" style="color: #5E5E5E;">+</span> g<span class="op" style="color: #5E5E5E;">*</span>(t<span class="op" style="color: #5E5E5E;">-</span>u) <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.2</span><span class="op" style="color: #5E5E5E;">*</span>o</span>
<span id="cb33-23">        </span>
<span id="cb33-24">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(pred, ts, latents).prev_sample</span>
<span id="cb33-25"></span>
<span id="cb33-26">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): </span>
<span id="cb33-27">        <span class="cf" style="color: #003B4F;">return</span> vae.decode(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latents).sample, cs, orig_pred, o</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:06:40.697288Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:06:40.696550Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:06:50.405769Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:06:50.405209Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:06:40.697264Z&quot;}" data-execution_count="74">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb34-2">    <span class="st" style="color: #20794D;">'a photograph of an astronaut riding a horse'</span></span>
<span id="cb34-3">]</span>
<span id="cb34-4"></span>
<span id="cb34-5">images, cs, orig_pred, o <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb34-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/70226676.py:11: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b5ea457b2b5e4de1b0920c602d2c1f0c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-23-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-23-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:09:38.686134Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:09:38.685604Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:09:38.697326Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:09:38.696874Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:09:38.686112Z&quot;}" data-execution_count="77">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">orig_pred.norm(), (<span class="fl" style="color: #AD0000;">0.2</span><span class="op" style="color: #5E5E5E;">*</span>o).norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>(tensor(98.5625, device='cuda:0', dtype=torch.float16),
 tensor(19.9688, device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
<p>Now that I’ve introduced text embeddings related to a real prompt with a similar magnitude as the random noise, it’s significantly impacting the image generation result! Which by the way looks super cool.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:11:32.752244Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:11:32.751970Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:11:42.393102Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:11:42.392538Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:11:32.752224Z&quot;}" data-execution_count="78">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">prompts <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb38-2">    <span class="st" style="color: #20794D;">'a drawing of a woman sitting on a park bench'</span></span>
<span id="cb38-3">]</span>
<span id="cb38-4"></span>
<span id="cb38-5">images, cs, orig_pred, o <span class="op" style="color: #5E5E5E;">=</span> mk_samples(prompts)</span>
<span id="cb38-6"><span class="cf" style="color: #003B4F;">for</span> img <span class="kw" style="color: #003B4F;">in</span> images: display(mk_img(img))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_34/70226676.py:11: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  latents = torch.randn((bs, unet.in_channels, height//8, width//8))</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"21adc3fa9c3945539e06f12484ec10c4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-25-output-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index_files/figure-html/cell-25-output-3.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-20T01:11:42.396726Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-20T01:11:42.396427Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-20T01:11:42.403700Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-20T01:11:42.402900Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-20T01:11:42.396701Z&quot;}" data-execution_count="79">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">orig_pred.norm(), (<span class="fl" style="color: #AD0000;">0.2</span><span class="op" style="color: #5E5E5E;">*</span>o).norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>(tensor(110.1250, device='cuda:0', dtype=torch.float16),
 tensor(22.0625, device='cuda:0', dtype=torch.float16))</code></pre>
</div>
</div>
<p>I get a similar result using a different prompt.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>I hesitate to make any strong conclusions about the diffusion process as I’ve spent only a couple dozen hours experimenting with stable diffusion, but do want to summarize my observations from these experiments:</p>
<ul>
<li><strong>Unconditioned and conditioned prompt UNet predictions are similar</strong>: this was seen by the (very) high cosine similarity between the two at each time step, with cosine similarity decreasing as the time step increased.</li>
<li><strong>Small amounts of random noise doesn’t impact image generation</strong>: while the term “small” is relative, adding random noise that was 50% of the original guided prediction’s norm did not visibly alter the image. Even after adding random noise with the same magnitude as the original guided prediction, the generated image still maintained its core composition and structure.</li>
<li><strong>Adding another prompt’s UNet predictions drastically changes the generated image</strong>: while random noise of the same magnitude did not impact the output image, adding UNet predictions for an unrelated prompt completely changes the color, features and structure of the image (while still maintaining some thematic elements).</li>
</ul>
<p>These observations make me wonder the following questions, that I’ll keep in mind throughout part 2 of the fastai course:</p>
<ul>
<li>Is the small difference in direction between <code>t</code> and <code>u</code> the reason we need relatively large guidance scale values? Is it also the reason why if the guidance scale is too large, we start losing structural features of the desired prompt/image?</li>
<li>Does the fact that structured UNet predictions (as opposed to random noise) impact image generation significantly mean that UNet’s are not sensitive to random noise but are generally susceptible to structured data in the latent space? Why is that?</li>
</ul>
<p>I hope you enjoyed this blog post!</p>


</section>

 ]]></description>
  <category>stable diffusion</category>
  <category>generative AI</category>
  <category>python</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-19-diffusion-cosine-similarity/index.html</guid>
  <pubDate>Tue, 19 Nov 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Sentiment Classification with Qwen2-0.5B-Instruct</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:16:28.469994Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:16:28.469349Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:18:25.503200Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:18:25.502427Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:16:28.469918Z&quot;}">
<details>
<summary>Show <code>pip install</code>s</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install accelerate <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>pip install torch<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">2.2.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets<span class="op" style="color: #5E5E5E;">~=</span><span class="fl" style="color: #AD0000;">2.16.1</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">!</span>pip install scikit<span class="op" style="color: #5E5E5E;">-</span>learn<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">1.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:15.898137Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:15.897579Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:16.634963Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:16.634205Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:15.898114Z&quot;}" data-execution_count="5">
<details>
<summary>Show imports</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset, Dataset</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">from</span> pandas.api.types <span class="im" style="color: #00769E;">import</span> CategoricalDtype</span>
<span id="cb2-6"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb2-9">device <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cuda"</span> <span class="co" style="color: #5E5E5E;"># the device to load the model onto</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;">"Qwen/Qwen2-0.5B-Instruct"</span>,</span>
<span id="cb2-13">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span>,</span>
<span id="cb2-14">    device_map<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span></span>
<span id="cb2-15">)</span>
<span id="cb2-16">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"Qwen/Qwen2-0.5B-Instruct"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:46.679431Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:46.679029Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.352741Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.351913Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:46.679413Z&quot;}">
<details>
<summary>Show dataset loading functions</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># load dataset</span></span>
<span id="cb3-2">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(</span>
<span id="cb3-3">    <span class="st" style="color: #20794D;">"financial_phrasebank"</span>, <span class="st" style="color: #20794D;">"sentences_allagree"</span>, </span>
<span id="cb3-4">    split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>  <span class="co" style="color: #5E5E5E;"># note that the dataset does not have a default test split</span></span>
<span id="cb3-5">)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># create a new column with the numeric label verbalised as label_text (e.g. "positive" instead of "0")</span></span>
<span id="cb3-8">label_map <span class="op" style="color: #5E5E5E;">=</span> {i: label_text <span class="cf" style="color: #003B4F;">for</span> i, label_text <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(dataset.features[<span class="st" style="color: #20794D;">"label"</span>].names)}</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;">def</span> add_label_text(example):</span>
<span id="cb3-11">    example[<span class="st" style="color: #20794D;">"label_text"</span>] <span class="op" style="color: #5E5E5E;">=</span> label_map[example[<span class="st" style="color: #20794D;">"label"</span>]]</span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;">return</span> example</span>
<span id="cb3-13"></span>
<span id="cb3-14">dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_label_text)</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="bu" style="color: null;">print</span>(dataset)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.356381Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.356209Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.361805Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.360968Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.356363Z&quot;}" data-execution_count="8">
<details>
<summary>Show <code>generate_response</code> function</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> generate_response(prompt):</span>
<span id="cb4-2">    messages <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb4-3">        {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"system"</span>, <span class="st" style="color: #20794D;">"content"</span>: <span class="st" style="color: #20794D;">"You are a helpful assistant."</span>},</span>
<span id="cb4-4">        {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt}</span>
<span id="cb4-5">    ]</span>
<span id="cb4-6">    text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb4-7">        messages,</span>
<span id="cb4-8">        tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb4-9">        add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb4-10">    )</span>
<span id="cb4-11">    model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb4-12"></span>
<span id="cb4-13">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb4-14">        model_inputs.input_ids,</span>
<span id="cb4-15">        max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb4-16">    )</span>
<span id="cb4-17">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb4-18">        output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb4-19">    ]</span>
<span id="cb4-20"></span>
<span id="cb4-21">    response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;">return</span> response</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.365096Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.364922Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.371487Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.370703Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.365079Z&quot;}" data-execution_count="9">
<details>
<summary>Show <code>add_prompt</code> and <code>generate_responses</code> functions</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> add_prompt(item, prompt):</span>
<span id="cb5-2">        item[<span class="st" style="color: #20794D;">'prompt'</span>] <span class="op" style="color: #5E5E5E;">=</span> prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>item[<span class="st" style="color: #20794D;">'sentence'</span>])</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;">return</span> item</span>
<span id="cb5-4">    </span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;">def</span> generate_responses(dataset, prompt):</span>
<span id="cb5-6">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb5-7">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb5-8">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb5-9">    </span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb5-11">        messages <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb5-12">            {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}</span>
<span id="cb5-13">        ]</span>
<span id="cb5-14">        </span>
<span id="cb5-15">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb5-16">            messages,</span>
<span id="cb5-17">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb5-18">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb5-19">        )</span>
<span id="cb5-20">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb5-21"></span>
<span id="cb5-22">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb5-23">            model_inputs.input_ids,</span>
<span id="cb5-24">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb5-25">        )</span>
<span id="cb5-26">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb5-27">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb5-28">        ]</span>
<span id="cb5-29"></span>
<span id="cb5-30">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb5-31">        responses.append(response)</span>
<span id="cb5-32">        </span>
<span id="cb5-33">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb5-34">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb5-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb5-36">    <span class="co" style="color: #5E5E5E;">#df['responses'] = df['responses'].apply(lambda x: x if x in ['negative', 'positive', 'neutral'] else "other")</span></span>
<span id="cb5-37">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb5-38">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb5-39">    </span>
<span id="cb5-40">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.374652Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.374497Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.378945Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.378534Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.374638Z&quot;}" data-execution_count="10">
<details>
<summary>Show <code>make_cm</code> function</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> make_cm(df):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;">"""Create confusion matrix for true vs predicted sentiment classes"""</span></span>
<span id="cb6-3">    </span>
<span id="cb6-4">    cm <span class="op" style="color: #5E5E5E;">=</span> confusion_matrix(y_true<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'label_text'</span>], y_pred<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'responses'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb6-5">    disp <span class="op" style="color: #5E5E5E;">=</span> ConfusionMatrixDisplay(cm, display_labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb6-6">    </span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;"># I chose 8x8 so it fits on one screen but still is large</span></span>
<span id="cb6-8">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb6-9">    disp.plot(ax<span class="op" style="color: #5E5E5E;">=</span>ax,text_kw<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'fontsize'</span>: <span class="dv" style="color: #AD0000;">16</span>}, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Blues'</span>, colorbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;"># change label font size without changing label text</span></span>
<span id="cb6-12">    ax.xaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb6-13">    ax.yaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb6-14">    </span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># make tick labels larger</span></span>
<span id="cb6-16">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb6-17">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'x'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.381494Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.381332Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.385060Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.384497Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.381479Z&quot;}" data-execution_count="11">
<details>
<summary>Show <code>ds_subset</code> function</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> ds_subset(dataset, exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>]):</span>
<span id="cb7-2">    idxs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(dataset)))</span>
<span id="cb7-3">    idxs <span class="op" style="color: #5E5E5E;">=</span> [x <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> idxs <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> exclude_idxs]</span>
<span id="cb7-4">    ddf <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb7-5">    new_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(ddf.iloc[idxs, columns])</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">return</span> new_ds</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.387400Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.387210Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.393552Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.393013Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.387380Z&quot;}" data-execution_count="12">
<details>
<summary>Show <code>few_shot_responses</code>function</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb8-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb8-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb8-4">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb8-5">    </span>
<span id="cb8-6">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb8-7">    </span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb8-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb8-10">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb8-11">    </span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb8-13">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb8-14">        </span>
<span id="cb8-15">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb8-16">            messages,</span>
<span id="cb8-17">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb8-18">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb8-19">        )</span>
<span id="cb8-20">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb8-21"></span>
<span id="cb8-22">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb8-23">            model_inputs.input_ids,</span>
<span id="cb8-24">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb8-25">        )</span>
<span id="cb8-26">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-27">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb8-28">        ]</span>
<span id="cb8-29"></span>
<span id="cb8-30">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb8-31">        responses.append(response)</span>
<span id="cb8-32">        </span>
<span id="cb8-33">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb8-34">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb8-35">    </span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.395840Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.395695Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.399478Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.398810Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.395827Z&quot;}" data-execution_count="13">
<details>
<summary>Show <code>get_acc</code> function</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> get_acc(df):</span>
<span id="cb9-2">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb9-3">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb9-4">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;">return</span> acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:19:48.403462Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:19:48.403147Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:19:48.407433Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:19:48.406773Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:19:48.403445Z&quot;}" data-execution_count="14">
<details>
<summary>Show <code>get_ds</code> function</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;">def</span> get_ds(n):</span>
<span id="cb10-2">    exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb10-3">    prompt_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb10-4"></span>
<span id="cb10-5">    examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb10-7">        examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb10-8">        </span>
<span id="cb10-9">    <span class="bu" style="color: null;">print</span>(prompt_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples[:<span class="dv" style="color: #AD0000;">10</span>]])</span>
<span id="cb10-10">    </span>
<span id="cb10-11">    <span class="cf" style="color: #003B4F;">return</span> prompt_ds, examples</span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll use <a href="https://huggingface.co/Qwen/Qwen2-0.5B-Instruct">Qwen2-0.5B-Instruct</a> to classify sentiment in the <a href="https://huggingface.co/datasets/financial_phrasebank"><code>financial_phrasebank</code> dataset</a>. In previous notebooks I have performed <a href="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/">sentiment classification with Qwen2-1.5B-Instruct</a>, <a href="https://vishalbakshi.github.io/blog/posts/2024-08-31-tinysentiment-phi-2-sentiment-classification/">phi-2</a>, <a href="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-sentiment-classification/">phi-3</a>, <a href="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/">phi-3.5</a>, and <a href="https://vishalbakshi.github.io/blog/posts/2024-08-29-tinysentiment-claude-experiments/">the Claude series</a>.</p>
<p>This notebook is part of <a href="https://vishalbakshi.github.io/blog/#category=TinySentiment">a series of blog posts</a> for a project I’m working called TinySentiment where I’m experimenting with tiny models to improve their ability to classify sentiment in the <code>financial_phrasebank dataset</code>. I was inspired to do so after reading <a href="https://huggingface.co/blog/synthetic-data-save-costs">this blog post</a> and <a href="https://github.com/MoritzLaurer/synthetic-data-blog/blob/main/notebooks/synthetic_data_creation.ipynb">this corresponding notebook</a> by Moritz Laurer as part of a fastai study group last year.</p>
<p>Here are the results from my experiments so far (**the best-performing prompt from this notebook):</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Qwen2-1.5B</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">86.10%</td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">96% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">**Qwen2-0.5B</td>
<td style="text-align: center;">17-Shot</td>
<td style="text-align: center;">79.48%</td>
<td style="text-align: center;">69% (206/300)</td>
<td style="text-align: center;">86% (1180/1380)</td>
<td style="text-align: center;">71% (400/567)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook:</p>
<table class="table">
<thead>
<tr class="header">
<th>Prompt</th>
<th>Strategy</th>
<th>Accuracy</th>
<th>Negative</th>
<th>Neutral</th>
<th>Positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>0-Shot</td>
<td>62.41%</td>
<td>91% (276/303)</td>
<td>53% (735/1391)</td>
<td>71% (402/570)</td>
</tr>
<tr class="even">
<td>B</td>
<td>0-Shot</td>
<td>47.84%</td>
<td>90% (274/303)</td>
<td>57% (789/1391)</td>
<td>4% (20/570)</td>
</tr>
<tr class="odd">
<td>C</td>
<td>0-Shot</td>
<td>40.46%</td>
<td>91% (276/303)</td>
<td>43% (594/1391)</td>
<td>8% (46/570)</td>
</tr>
<tr class="even">
<td>D</td>
<td>0-Shot</td>
<td>68.29%</td>
<td>79% (240/303)</td>
<td>61% (851/1391)</td>
<td>80% (455/570)</td>
</tr>
<tr class="odd">
<td>E</td>
<td>0-Shot</td>
<td>51.19%</td>
<td>97% (293/303)</td>
<td>28% (396/1391)</td>
<td>82% (470/570)</td>
</tr>
<tr class="even">
<td>F</td>
<td>0-Shot</td>
<td>48.19%</td>
<td>94% (286/303)</td>
<td>21% (287/1391)</td>
<td>91% (518/570)</td>
</tr>
<tr class="odd">
<td>G</td>
<td>0-Shot</td>
<td>61.09%</td>
<td>93% (282/303)</td>
<td>46% (646/1391)</td>
<td>80% (455/570)</td>
</tr>
<tr class="even">
<td>H</td>
<td>0-Shot</td>
<td>65.42%</td>
<td>85% (257/303)</td>
<td>57% (798/1391)</td>
<td>75% (426/570)</td>
</tr>
<tr class="odd">
<td>I</td>
<td>0-Shot</td>
<td>66.12%</td>
<td>81% (245/303)</td>
<td>58% (800/1391)</td>
<td>79% (452/570)</td>
</tr>
<tr class="even">
<td>J</td>
<td>3-Shot</td>
<td>70.94%</td>
<td>43% (131/302)</td>
<td>75% (1042/1390)</td>
<td>76% (431/569)</td>
</tr>
<tr class="odd">
<td>K</td>
<td>3-Shot</td>
<td>74.88%</td>
<td>67% (201/302)</td>
<td>75% (1043/1390)</td>
<td>79% (449/569)</td>
</tr>
<tr class="even">
<td>L</td>
<td>3-Shot</td>
<td>68.11%</td>
<td>49% (149/302)</td>
<td>65% (900/1390)</td>
<td>86% (491/569)</td>
</tr>
<tr class="odd">
<td>M</td>
<td>3-Shot</td>
<td>56.97%</td>
<td>49% (149/302)</td>
<td>45% (625/1390)</td>
<td>90% (514/569)</td>
</tr>
<tr class="even">
<td>N</td>
<td>3-Shot</td>
<td>73.95%</td>
<td>62% (188/302)</td>
<td>75% (1038/1390)</td>
<td>78% (446/569)</td>
</tr>
<tr class="odd">
<td>O</td>
<td>3-Shot</td>
<td>59.97%</td>
<td>65% (196/302)</td>
<td>46% (635/1390)</td>
<td>92% (525/569)</td>
</tr>
<tr class="even">
<td>P</td>
<td>6-Shot</td>
<td>63.91%</td>
<td>95% (289/303)</td>
<td>49% (678/1389)</td>
<td>84% (476/566)</td>
</tr>
<tr class="odd">
<td>Q</td>
<td>6-Shot</td>
<td>65.72%</td>
<td>69% (207/302)</td>
<td>55% (765/1389)</td>
<td>90% (512/567)</td>
</tr>
<tr class="even">
<td>R</td>
<td>6-Shot</td>
<td>64.84%</td>
<td>94% (285/303)</td>
<td>49% (686/1387)</td>
<td>87% (493/568)</td>
</tr>
<tr class="odd">
<td>S</td>
<td>6-Shot</td>
<td>62.98%</td>
<td>96% (292/303)</td>
<td>47% (656/1387)</td>
<td>83% (474/568)</td>
</tr>
<tr class="even">
<td>T</td>
<td>6-Shot</td>
<td>68.87%</td>
<td>51% (155/302)</td>
<td>70% (966/1387)</td>
<td>76% (434/569)</td>
</tr>
<tr class="odd">
<td>U</td>
<td>12-Shot</td>
<td>65.50%</td>
<td>53% (159/302)</td>
<td>59% (820/1386)</td>
<td>88% (496/564)</td>
</tr>
<tr class="even">
<td>V</td>
<td>12-Shot</td>
<td>73.22%</td>
<td>70% (209/300)</td>
<td>80% (1103/1386)</td>
<td>60% (337/566)</td>
</tr>
<tr class="odd">
<td>W</td>
<td>12-Shot</td>
<td>70.43%</td>
<td>82% (246/301)</td>
<td>66% (912/1384)</td>
<td>75% (428/567)</td>
</tr>
<tr class="even">
<td>X</td>
<td>12-Shot</td>
<td>76.60%</td>
<td>91% (270/298)</td>
<td>72% (1000/1386)</td>
<td>80% (455/568)</td>
</tr>
<tr class="odd">
<td>Y</td>
<td>12-Shot</td>
<td>72.56%</td>
<td>80% (243/303)</td>
<td>77% (1069/1381)</td>
<td>57% (322/568)</td>
</tr>
<tr class="even">
<td>Z</td>
<td>18-Shot</td>
<td>71.33%</td>
<td>50% (150/301)</td>
<td>75% (1036/1382)</td>
<td>74% (416/563)</td>
</tr>
<tr class="odd">
<td><strong>AA</strong></td>
<td><strong>17-Shot</strong></td>
<td><strong>79.48%</strong></td>
<td>69% (206/300)</td>
<td>86% (1180/1380)</td>
<td>71% (400/567)</td>
</tr>
<tr class="even">
<td>AB</td>
<td>18-Shot</td>
<td>74.22%</td>
<td>77% (229/299)</td>
<td>76% (1054/1381)</td>
<td>68% (384/566)</td>
</tr>
<tr class="odd">
<td>AC</td>
<td>18-Shot</td>
<td>68.57%</td>
<td>49% (148/302)</td>
<td>73% (1013/1380)</td>
<td>67% (379/564)</td>
</tr>
<tr class="even">
<td>AD</td>
<td>18-Shot</td>
<td>74.98%</td>
<td>89% (271/303)</td>
<td>76% (1052/1379)</td>
<td>64% (361/564)</td>
</tr>
<tr class="odd">
<td>AE</td>
<td>24-Shot</td>
<td>74.91%</td>
<td>61% (181/299)</td>
<td>92% (1267/1375)</td>
<td>41% (230/566)</td>
</tr>
<tr class="even">
<td>AF</td>
<td>24-Shot</td>
<td>73.08%</td>
<td>37% (112/302)</td>
<td>91% (1246/1375)</td>
<td>50% (279/563)</td>
</tr>
<tr class="odd">
<td>AG</td>
<td>24-Shot</td>
<td>75.00%</td>
<td>58% (173/300)</td>
<td>92% (1265/1375)</td>
<td>43% (242/565)</td>
</tr>
<tr class="even">
<td>AH</td>
<td>24-Shot</td>
<td>77.46%</td>
<td>78% (233/299)</td>
<td>84% (1153/1375)</td>
<td>62% (349/566)</td>
</tr>
<tr class="odd">
<td>AI</td>
<td>23-Shot</td>
<td>75.37%</td>
<td>48% (143/301)</td>
<td>92% (1266/1375)</td>
<td>50% (280/565)</td>
</tr>
<tr class="even">
<td>AJ</td>
<td>30-Shot</td>
<td>77.39%</td>
<td>58% (172/298)</td>
<td>94% (1284/1370)</td>
<td>48% (273/566)</td>
</tr>
<tr class="odd">
<td>AK</td>
<td>30-Shot</td>
<td>67.78%</td>
<td>63% (187/299)</td>
<td>61% (844/1375)</td>
<td>86% (483/560)</td>
</tr>
<tr class="even">
<td>AL</td>
<td>30-Shot</td>
<td>76.54%</td>
<td>58% (173/299)</td>
<td>86% (1185/1372)</td>
<td>63% (352/563)</td>
</tr>
<tr class="odd">
<td>AM</td>
<td>30-Shot</td>
<td>74.84%</td>
<td>82% (242/296)</td>
<td>72% (984/1376)</td>
<td>79% (446/562)</td>
</tr>
<tr class="even">
<td>AN</td>
<td>30-Shot</td>
<td>73.81%</td>
<td>51% (154/300)</td>
<td>77% (1052/1372)</td>
<td>79% (443/562)</td>
</tr>
<tr class="odd">
<td>AO</td>
<td>45-Shot</td>
<td>74.18%</td>
<td>54% (159/297)</td>
<td>76% (1034/1366)</td>
<td>81% (453/556)</td>
</tr>
<tr class="even">
<td>AP</td>
<td>45-Shot</td>
<td>78.73%</td>
<td>63% (186/296)</td>
<td>87% (1192/1365)</td>
<td>66% (369/558)</td>
</tr>
<tr class="odd">
<td>AQ</td>
<td>45-Shot</td>
<td>72.01%</td>
<td>17% (51/301)</td>
<td>89% (1210/1359)</td>
<td>60% (337/559)</td>
</tr>
<tr class="even">
<td>AR</td>
<td>45-Shot</td>
<td>73.86%</td>
<td>53% (157/297)</td>
<td>80% (1094/1364)</td>
<td>70% (388/558)</td>
</tr>
<tr class="odd">
<td>AS</td>
<td>45-Shot</td>
<td>74.94%</td>
<td>42% (125/297)</td>
<td>89% (1219/1363)</td>
<td>57% (319/559)</td>
</tr>
<tr class="even">
<td>AT</td>
<td>60-Shot</td>
<td>72.19%</td>
<td>47% (138/292)</td>
<td>78% (1055/1356)</td>
<td>72% (398/556)</td>
</tr>
<tr class="odd">
<td>AU</td>
<td>60-Shot</td>
<td>76.86%</td>
<td>43% (127/296)</td>
<td>91% (1237/1356)</td>
<td>60% (330/552)</td>
</tr>
<tr class="even">
<td>AV</td>
<td>60-Shot</td>
<td>75.45%</td>
<td>26% (79/299)</td>
<td>89% (1206/1352)</td>
<td>68% (378/553)</td>
</tr>
<tr class="odd">
<td>AW</td>
<td>60-Shot</td>
<td>74.46%</td>
<td>29% (88/299)</td>
<td>86% (1157/1349)</td>
<td>71% (396/556)</td>
</tr>
<tr class="even">
<td><strong>AX</strong></td>
<td><strong>60-Shot</strong></td>
<td><strong>79.63%</strong></td>
<td>62% (179/290)</td>
<td>94% (1275/1352)</td>
<td>54% (301/562)</td>
</tr>
</tbody>
</table>
</section>
<section id="prompt-a" class="level2">
<h2 class="anchored" data-anchor-id="prompt-a">Prompt A</h2>
<p>I’ll start out with a simple instruction.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:06:57.416392Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:06:57.416240Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:06:57.419066Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:06:57.418576Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:06:57.416379Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">promptA <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="bu" style="color: null;">print</span>(promptA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: {text}</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:06:57.419951Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:06:57.419805Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:06:57.423086Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:06:57.422602Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:06:57.419938Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">formatted_prompt <span class="op" style="color: #5E5E5E;">=</span> promptA.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'sentence'</span>])</span>
<span id="cb13-2"><span class="bu" style="color: null;">print</span>(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:06:28.885140Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:06:28.884477Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:06:29.963491Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:06:29.963030Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:06:28.885121Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'Negative.'</code></pre>
</div>
</div>
<p>Good—at least it’s responding with a sensible answer, although it’s not formatted how I’d like to be, so I expect to need more data cleaning than Qwen2-1.5B-Instruct’s responses.</p>
<p>At ~35ms per prompt it will take about 80 seconds to run inference on the full 2264 item dataset.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:07:52.246526Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:07:52.245923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:07:54.728288Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:07:54.727624Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:07:52.246506Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>35.4 ms ± 472 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:06:57.423920Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:06:57.423771Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:08:21.273658Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:08:21.273041Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:06:57.423907Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptA)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5c7d5f99af714ca5bc16ef82cd36598c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<p>0.5B yields messier responses. Note the period at the end of some of the strings. For now I’ll manually check each set of responses and clean them accordingly.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:09:42.449650Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:09:42.449408Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:09:42.453694Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:09:42.453268Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:09:42.449632Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>array(['neutral.', 'positive', 'neutral', 'negative', 'positive.',
       'negative.', 'negot', 'negative profit', 'net interest', 'teleste',
       'neglig'], dtype=object)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:09:44.550987Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:09:44.550744Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:09:44.555325Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:09:44.554824Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:09:44.550970Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:09:45.888176Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:09:45.887936Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:09:45.891803Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:09:45.891351Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:09:45.888158Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span></code></pre></div>
</div>
<p>0.5B doesn’t do terribly on this simple prompt (62.4% accuracy) but it’s almost 20% less accurate than 1.5B (~82% accuracy).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:09:48.659229Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:09:48.658952Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:09:48.664254Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:09:48.663806Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:09:48.659210Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb27-2">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb27-3">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.6241166077738516</code></pre>
</div>
</div>
<p>0.5B does a great job at classifying <code>negative</code> sentiment, does quite well at <code>positive</code> sentences, and has very few <code>other</code> responses overall.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:09:55.592179Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:09:55.591912Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:09:55.710721Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:09:55.710240Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:09:55.592158Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-21-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:10:46.788934Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:10:46.788562Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:10:46.824757Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:10:46.823462Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:10:46.788911Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_A.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-b" class="level2">
<h2 class="anchored" data-anchor-id="prompt-b">Prompt B</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:19:52.401923Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:19:52.401380Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:19:52.404779Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:19:52.404267Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:19:52.401903Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">promptB <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb31-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb31-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:19:58.268457Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:19:58.267907Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:21:21.446669Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:21:21.446147Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:19:58.268457Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptB)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2400d2564ed7448bb9a62f7c661b3850","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral</code></pre>
</div>
</div>
<p>With this prompt (where the instruction is repeated after the dataset text) 0.5B responds much more cleanly.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:22:42.185977Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:22:42.185222Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:22:42.190027Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:22:42.189485Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:22:42.185957Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>array(['negative', 'neutral', 'positive'], dtype=object)</code></pre>
</div>
</div>
<p>However, it performs almost 20% worse!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:23:24.094096Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:23:24.093590Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:23:24.098934Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:23:24.098407Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:23:24.094077Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb36-2">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb36-3">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>0.47835689045936397</code></pre>
</div>
</div>
<p>While it’s quite good still with <code>negative</code> sentiment, it performs significantly worse on <code>positive</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:23:52.963662Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:23:52.962935Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:23:53.042260Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:23:53.041708Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:23:52.963642Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-27-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T02:24:46.629787Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T02:24:46.629542Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T02:24:46.652705Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T02:24:46.652177Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T02:24:46.629772Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_B.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-c" class="level2">
<h2 class="anchored" data-anchor-id="prompt-c">Prompt C</h2>
<p>I’ll use the same Prompt C as the 1.5B model: a reword of Prompt A (which performed well for 0.5B).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:11:42.451637Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:11:42.451364Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:11:42.454661Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:11:42.454054Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:11:42.451618Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">promptC <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Respond with a single word: negative, positive, or neutral</span></span>
<span id="cb40-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:11:50.438572Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:11:50.438227Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:13:13.073197Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:13:13.072496Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:11:50.438549Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptC)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1850d4d1251f4c6f96c147dc47c65bf0","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Respond with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:15:21.567381Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:15:21.567036Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:15:21.572013Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:15:21.571626Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:15:21.567357Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>array(['negative.', 'negative', 'neutral', 'neutral.', 'positive',
       'positive.', 'negative loss'], dtype=object)</code></pre>
</div>
</div>
<p>The change in prompt language significantly deteriorates 0.5B’s accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:15:59.334134Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:15:59.333858Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:15:59.341454Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:15:59.340898Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:15:59.334115Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb45-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb45-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb45-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb45-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>0.4045936395759717</code></pre>
</div>
</div>
<p>0.5B still does really well on <code>negative</code> sentiment, but does horribly on <code>positive</code> and underwhelming for <code>neutral</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:16:09.428930Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:16:09.428567Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:16:09.541818Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:16:09.540818Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:16:09.428906Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-33-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-33-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:21:20.952890Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:21:20.952259Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:21:20.969868Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:21:20.969377Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:21:20.952887Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_C.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-d" class="level2">
<h2 class="anchored" data-anchor-id="prompt-d">Prompt D</h2>
<p>I’ll change the order of sentiment listed in Prompt A by putting <code>positive</code> first:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:27:37.315441Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:27:37.314994Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:27:37.317890Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:27:37.317465Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:27:37.315417Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">promptD <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: positive, negative, or neutral</span></span>
<span id="cb49-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:27:54.359838Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:27:54.359529Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:29:18.187786Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:29:18.187151Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:27:54.359817Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptD)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"56f606b29d494edfa07c6c699f58ed31","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:40:51.283108Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:40:51.282770Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:40:51.289653Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:40:51.288635Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:40:51.283085Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>array(['neutral.', 'positive', 'positive.', 'neutral', 'net income',
       'the text', 'negative', 'negative.', 'negative net', 'negot',
       'subscription'], dtype=object)</code></pre>
</div>
</div>
<p>Changing the order of sentiment (putting <code>positive</code> first) increases the overall accuracy by ~6%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:41:17.193956Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:41:17.193527Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:41:17.201748Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:41:17.201048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:41:17.193933Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb54-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb54-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb54-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb54-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.6828621908127208</code></pre>
</div>
</div>
<p>0.5B’s performance on <code>negative</code> sentiment dips a bit (36 fewer correct) but that is more than compensated by the increase in correctly classified <code>positive</code> (+53) and <code>neutral</code> (+166) sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:41:50.466425Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:41:50.466145Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:41:50.550640Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:41:50.550069Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:41:50.466403Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-39-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-39-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:43:48.221661Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:43:48.220978Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:43:48.240803Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:43:48.240315Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:43:48.221633Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_D.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-e" class="level2">
<h2 class="anchored" data-anchor-id="prompt-e">Prompt E</h2>
<p>I’ll try another combination:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:57:10.476268Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:57:10.475999Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:57:10.479112Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:57:10.478662Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:57:10.476244Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">promptE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: negative, neutral, or positive</span></span>
<span id="cb58-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T15:57:11.899422Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T15:57:11.898626Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T15:58:34.403468Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T15:58:34.402934Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T15:57:11.899395Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptE)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a18fc62aaeaa4f1dbb934e3ced3673dc","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, neutral, or positive
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:10:02.399949Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:10:02.399307Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:10:02.408731Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:10:02.407068Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:10:02.399915Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>array(['negative.', 'positive', 'negative', 'positive.', 'neutral.',
       'neutral', 'negative profit', 'negot', 'teleste'], dtype=object)</code></pre>
</div>
</div>
<p>This ordering of sentiment worsens the accuracy by 10 points.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:10:14.729900Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:10:14.729337Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:10:14.738751Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:10:14.738157Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:10:14.729876Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb63-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb63-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb63-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb63-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>0.5119257950530035</code></pre>
</div>
</div>
<p>0.5B is nearly perfect for <code>negative</code> sentiment, and quite good with <code>positive</code> sentences, but abysmal for <code>neutral</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:13:42.609575Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:13:42.609047Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:13:42.699838Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:13:42.699210Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:13:42.609551Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-45-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-45-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:16:55.010380Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:16:55.009793Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:16:55.027764Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:16:55.027177Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:16:55.010357Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_E.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-f" class="level2">
<h2 class="anchored" data-anchor-id="prompt-f">Prompt F</h2>
<p>Trying the next permutation of sentiments:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:18:27.966340Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:18:27.965774Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:18:27.969015Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:18:27.968560Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:18:27.966319Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">promptF <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: positive, neutral, or negative</span></span>
<span id="cb67-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:18:38.888221Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:18:38.887609Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:20:00.199752Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:20:00.199224Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:18:38.888192Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptF)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9289395352be4e30a137504a14a920b1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, neutral, or negative
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:20:03.801905Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:20:03.801662Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:20:03.806739Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:20:03.806163Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:20:03.801889Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>array(['neutral.', 'positive', 'positive.', 'negative', 'negative.',
       'neutral', 'positive net', 'negativ', 'negot', 'subscription'],
      dtype=object)</code></pre>
</div>
</div>
<p>This ordering of sentiments further worsens the overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:20:05.977351Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:20:05.976777Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:20:05.985406Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:20:05.984899Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:20:05.977331Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb72-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb72-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb72-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb72-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>0.4818904593639576</code></pre>
</div>
</div>
<p><code>positive</code> sentences are classified correctly at the highest rate so far, and <code>negative</code> sentiment accuracy is very good, but the model does terribly on <code>neutral</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:32:37.359476Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:32:37.359228Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:32:37.441342Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:32:37.440585Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:32:37.359458Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-51-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-51-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:32:40.186530Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:32:40.186271Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:32:40.204090Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:32:40.203521Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:32:40.186510Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_F.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-g" class="level2">
<h2 class="anchored" data-anchor-id="prompt-g">Prompt G</h2>
<p>The next ordering of sentiments:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:44:27.274119Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:44:27.273834Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:44:27.277400Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:44:27.276812Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:44:27.274099Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">promptG <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: neutral, negative, or positive</span></span>
<span id="cb76-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:44:39.176959Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:44:39.176388Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:46:05.987881Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:46:05.987283Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:44:39.176935Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptG)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ed291cc5383142fbaa9e89602fe9cb93","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: neutral, negative, or positive
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:47:35.254527Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:47:35.254223Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:47:35.260071Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:47:35.259184Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:47:35.254505Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>array(['neutral.', 'positive', 'positive.', 'neutral', 'negative',
       'negative.', 'positive profit', 'negot'], dtype=object)</code></pre>
</div>
</div>
<p>The accuracy of 61% is worse than the best-performing Prompt D (68%).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:47:44.853309Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:47:44.853065Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:47:44.860139Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:47:44.859592Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:47:44.853291Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb81-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb81-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb81-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb81-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>0.6108657243816255</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:48:42.650613Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:48:42.650331Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:48:42.736844Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:48:42.736238Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:48:42.650593Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-57-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-57-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:49:18.201295Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:49:18.201015Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:49:18.219357Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:49:18.218733Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:49:18.201276Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_G.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-h" class="level2">
<h2 class="anchored" data-anchor-id="prompt-h">Prompt H</h2>
<p>The last ordering of sentiment:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:50:02.620945Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:50:02.620686Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:50:02.624335Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:50:02.623735Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:50:02.620926Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">promptH <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: neutral, positive, or negative</span></span>
<span id="cb85-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:50:13.987873Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:50:13.987344Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:51:36.797131Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:51:36.796546Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:50:13.987848Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptH)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a74227e8b18940dbbe9b163108a1dbd1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: neutral, positive, or negative
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:51:48.590402Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:51:48.589784Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:51:48.595347Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:51:48.594512Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:51:48.590374Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>array(['positive', 'neutral.', 'positive.', 'neutral', 'negative',
       'negative.', 'positive profit', 'negot'], dtype=object)</code></pre>
</div>
</div>
<p>This yields a 65% accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:51:50.330667Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:51:50.330087Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:51:50.338298Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:51:50.337747Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:51:50.330642Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb90-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb90-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb90-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb90-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>0.6541519434628975</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:52:04.746828Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:52:04.746140Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:52:04.834796Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:52:04.834229Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:52:04.746805Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-63-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-63-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-15T16:52:19.718116Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-15T16:52:19.717293Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-15T16:52:19.735506Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-15T16:52:19.734996Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-15T16:52:19.718056Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_H.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-i" class="level2">
<h2 class="anchored" data-anchor-id="prompt-i">Prompt I</h2>
<p>I’ll make a small change to my best-performing prompt by adding a period at the end of the instruction.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:08:04.010399Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:08:04.009720Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:08:04.013065Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:08:04.012470Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:08:04.010377Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">promptI <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: positive, negative, or neutral.</span></span>
<span id="cb94-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:08:06.298948Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:08:06.298427Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:09:30.860558Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:09:30.859947Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:08:06.298919Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptI)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f7b45463350241638856bab9db483ea5","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:09:30.862173Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:09:30.861908Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:09:30.867177Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:09:30.866590Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:09:30.862147Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array(['neutral.', 'positive', 'positive.', 'neutral', 'net income',
       'negative', 'negative.', 'negative profit', 'nord', 'negot',
       'the text', 'negation', 'neglig', 'subscription'], dtype=object)</code></pre>
</div>
</div>
<p>Adding a period to the end of the instruction worsens the accuracy a bit.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:09:30.868315Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:09:30.868080Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:09:30.875277Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:09:30.874630Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:09:30.868315Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">str</span>.replace(<span class="st" style="color: #20794D;">'.'</span>, <span class="st" style="color: #20794D;">''</span>, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb99-2">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb99-3">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb99-4">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb99-5">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.6612190812720848</code></pre>
</div>
</div>
<p>Adding a period worsens the performance on <code>neutral</code> by 51 sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:10:54.250514Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:10:54.250220Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:10:54.366578Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:10:54.365989Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:10:54.250495Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-69-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-69-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:12:28.511166Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:12:28.510931Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:12:28.531074Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:12:28.530572Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:12:28.511149Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_I.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-j" class="level2">
<h2 class="anchored" data-anchor-id="prompt-j">Prompt J</h2>
<p>I’ll now shift my attention to few-shot prompts, starting with 3-Shot.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T17:56:36.227336Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T17:56:36.227079Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T17:56:36.232314Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T17:56:36.231086Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T17:56:36.227313Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T17:56:40.143384Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T17:56:40.142984Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T17:56:40.190847Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T17:56:40.190145Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T17:56:40.143353Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1">promptJ_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs)</span>
<span id="cb104-2">promptJ_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2261
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:04:48.021046Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:04:48.020879Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:04:48.023404Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:04:48.022991Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:04:48.021034Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">promptJ <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: positive, negative, or neutral</span></span>
<span id="cb106-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<p>Since ordering seems to matter, I’ll start with a <code>neutral</code> example, <code>positive</code> example and <code>negative</code> example.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:35:39.911727Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:35:39.911071Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:35:39.917007Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:35:39.916420Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:35:39.911703Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb107-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb107-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb107-4"></span>
<span id="cb107-5">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>[('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:37:46.111876Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:37:46.110986Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:39:09.396371Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:39:09.395798Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:37:46.111853Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"606d1d4849b9409287d6f50ddfaae41f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:42:25.182570Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:42:25.182329Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:42:25.187267Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:42:25.186715Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:42:25.182553Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>3-Shot prompting resulted in the best accuracy so far! ~71%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:42:58.519436Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:42:58.518626Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:42:58.526054Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:42:58.525310Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:42:58.519417Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb113-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb113-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb113-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>0.709420610349403</code></pre>
</div>
</div>
<p>Compared to my best 0-Shot Prompt D (68%) this prompt results in the model significantly underperforming on <code>negative</code> sentences, (131 &lt; 240), but more than making up for it on <code>neutral</code> sentences (1042 &gt; 851).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:43:24.577313Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:43:24.577079Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:43:24.668210Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:43:24.667424Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:43:24.577296Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-78-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-78-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:44:51.201093Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:44:51.200511Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:44:51.219628Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:44:51.218946Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:44:51.201067Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_J.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-k" class="level2">
<h2 class="anchored" data-anchor-id="prompt-k">Prompt K</h2>
<p>I’ll re-order the examples and use the same Prompt J.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:55:14.095479Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:55:14.095018Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:55:14.098424Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:55:14.097751Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:55:14.095460Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:55:15.660698Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:55:15.660098Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:55:15.666226Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:55:15.665556Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:55:15.660673Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb118-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb118-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb118-4"></span>
<span id="cb118-5">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>[('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T15:55:27.086016Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T15:55:27.085551Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T15:56:55.766250Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T15:56:55.765608Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T15:55:27.085998Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6a5334d1277c433e9f1b22b417a02168","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:00:00.781085Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:00:00.780829Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:00:00.788849Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:00:00.788246Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:00:00.781066Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Changing the order of examples to <code>neutral</code>, <code>negative</code>, <code>positive</code> increases the overall accuracy to almost 75%!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:00:09.582843Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:00:09.582549Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:00:09.590055Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:00:09.589330Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:00:09.582823Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb124-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb124-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb124-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>0.7487837240159222</code></pre>
</div>
</div>
<p>The model improves on all three sentiments compared to Prompt J.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:00:52.046846Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:00:52.046570Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:00:52.130637Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:00:52.129935Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:00:52.046828Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-85-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-85-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:01:31.422192Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:01:31.421912Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:01:31.442329Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:01:31.441771Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:01:31.422173Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_K.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-l" class="level2">
<h2 class="anchored" data-anchor-id="prompt-l">Prompt L</h2>
<p>I’ll re-order the examples and use the same Prompt J.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:53:09.091102Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:53:09.090421Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:53:09.096950Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:53:09.096179Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:53:09.091091Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">292</span>]</span>
<span id="cb128-2"></span>
<span id="cb128-3">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb128-4"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb128-5">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb128-6"></span>
<span id="cb128-7">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>[("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:53:12.405932Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:53:12.405679Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:54:36.095190Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:54:36.094453Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:53:12.405914Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"01f57c52645d46cf814aa725a96f7747","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:55:43.750775Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:55:43.750186Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:55:43.755677Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:55:43.755190Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:55:43.750747Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This ordering of examples drops the accuracy to 68%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:55:46.251303Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:55:46.250749Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:55:46.258519Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:55:46.258031Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:55:46.251276Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb134-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb134-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb134-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>0.6811145510835913</code></pre>
</div>
</div>
<p>Compared to the best-performing Prompt K, this prompt yields a better accuracy for <code>positive</code> sentences (491 &gt; 449).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T16:56:07.120059Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T16:56:07.119530Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T16:56:07.207893Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T16:56:07.207391Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T16:56:07.120035Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-91-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-91-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:05:45.878112Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:05:45.877189Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:05:45.897256Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:05:45.896724Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:05:45.878077Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_L.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-m" class="level2">
<h2 class="anchored" data-anchor-id="prompt-m">Prompt M</h2>
<p>I’ll re-order the examples and use the same Prompt J.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:06:51.120531Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:06:51.120029Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:06:51.125610Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:06:51.124972Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:06:51.120513Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb138-2"></span>
<span id="cb138-3">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb138-4"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb138-5">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb138-6"></span>
<span id="cb138-7">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>[("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative'),
 ('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:06:53.547086Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:06:53.546549Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:08:17.036467Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:08:17.035964Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:06:53.547062Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4302906e714349518fd574ec4dfae09d","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:10:49.074858Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:10:49.074300Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:10:49.080201Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:10:49.079465Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:10:49.074829Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This ordering of examples worsens the accuracy, dropping it down to 57%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:10:52.645476Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:10:52.645171Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:10:52.654850Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:10:52.654233Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:10:52.645457Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb144-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb144-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb144-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>0.5696594427244582</code></pre>
</div>
</div>
<p>This prompt yields better results for <code>positive</code> sentiment (514 &gt; 449) than the best overall performing Prompt J.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:11:18.521032Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:11:18.520386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:11:18.603547Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:11:18.603050Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:11:18.521003Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-97-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-97-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-16T17:12:09.626877Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-16T17:12:09.626335Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-16T17:12:09.647834Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-16T17:12:09.647298Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-16T17:12:09.626854Z&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_M.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-n" class="level2">
<h2 class="anchored" data-anchor-id="prompt-n">Prompt N</h2>
<p>Trying the next ordering of sentiments:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T17:58:07.580523Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T17:58:07.579935Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T17:58:07.586872Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T17:58:07.585920Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T17:58:07.580500Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb148-2"></span>
<span id="cb148-3">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb148-4"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb148-5">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb148-6"></span>
<span id="cb148-7">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>[('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative'),
 ('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:02:03.166870Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:02:03.166144Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:03:36.992645Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:02:03.166828Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6973944f4a2d45c3b97fadcaa02fa27e","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:04:01.271855Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:04:01.270888Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:04:01.279344Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:04:01.278502Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:04:01.271815Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This ordering results in the second-highest overall accuracy at 74%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:04:14.277567Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:04:14.276719Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:04:14.285341Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:04:14.284486Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:04:14.277543Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb154-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb154-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb154-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>0.7394957983193278</code></pre>
</div>
</div>
<p>This prompt performs slightly worse for all three sentiments than the so far best-overall performing Prompt K.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:04:55.798501Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:04:55.798190Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:04:55.968689Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:04:55.967973Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:04:55.798482Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-103-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-103-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:12:51.868774Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:12:51.867994Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:12:51.893470Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:12:51.892649Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:12:51.868738Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_N.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-o" class="level2">
<h2 class="anchored" data-anchor-id="prompt-o">Prompt O</h2>
<p>Here’s the final 3-sentiment ordering:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:13:32.130448Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:13:32.129456Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:13:32.137291Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:13:32.136442Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:13:32.130411Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb158-2"></span>
<span id="cb158-3">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb158-4"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb158-5">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb158-6"></span>
<span id="cb158-7">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>[('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:13:34.944128Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:13:34.943306Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:15:08.938495Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:15:08.937842Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:13:34.944102Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8ac7113793924d79b01f81366fc539fe","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:15:20.865480Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:15:20.865180Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:15:20.870528Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:15:20.869869Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:15:20.865480Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb162-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This ordering of sentiment does not beat my so far best-performing accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:15:31.139347Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:15:31.138569Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:15:31.147849Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:15:31.146964Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:15:31.139324Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb164-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb164-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb164-3">acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb164-4">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.599734630694383</code></pre>
</div>
</div>
<p>This prompt yields a much better performance on <code>positive</code> sentiment than my best performing Prompt K (525 &gt; 449).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:16:03.893883Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:16:03.893078Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:16:03.983496Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:16:03.982776Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:16:03.893858Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-109-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-109-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:17:12.074844Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:17:12.074555Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:17:12.094606Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:17:12.093593Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:17:12.074824Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_O.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-p" class="level2">
<h2 class="anchored" data-anchor-id="prompt-p">Prompt P</h2>
<p>Next, I’ll increase the number of examples to 6. Note that I won’t be trying all permutations but a few random ones.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:22:45.506763Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:22:45.506309Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:22:45.525999Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:22:45.524985Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:22:45.506732Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb168-2">promptP_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb168-3">promptP_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2258
})</code></pre>
</div>
</div>
<p>The random examples I have picked don’t include a <code>negative</code> sentence. I’m curious to see how the model performs on this.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:24:39.883851Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:24:39.883147Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:24:39.890833Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:24:39.890089Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:24:39.883825Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb170-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb170-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb170-4"></span>
<span id="cb170-5">[el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>['positive', 'neutral', 'positive', 'neutral', 'positive', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:24:57.870957Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:24:57.870066Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:26:31.250443Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:26:31.249890Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:24:57.870923Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptP_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"183fab0bb79a4002a45e4128f4e9b018","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:27:31.129703Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:27:31.129012Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:27:31.134404Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:27:31.133817Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:27:31.129678Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt results in a worse performance in overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:27:36.542414Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:27:36.542094Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:27:36.549272Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:27:36.548595Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:27:36.542392Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb176-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>0.6390611160318866</code></pre>
</div>
</div>
<p>Even though no <code>negative</code> examples were given, this prompt yields considerably more correct <code>negative</code> sentences (289) than the best-performing Prompt K (201).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:27:59.202779Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:27:59.202423Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:27:59.294910Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:27:59.294212Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:27:59.202767Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb178-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-116-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-116-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:29:35.155708Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:29:35.155156Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:29:35.174855Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:29:35.174110Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:29:35.155686Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_P.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-q" class="level2">
<h2 class="anchored" data-anchor-id="prompt-q">Prompt Q</h2>
<p>I’ll try another random set of 6 examples, this time making sure there’s at least one of each sentiment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:30:44.091284Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:30:44.090544Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:30:44.107078Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:30:44.106408Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:30:44.091247Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb180" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb180-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb180-2">promptQ_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb180-3"></span>
<span id="cb180-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb180-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb180-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb180-7">    </span>
<span id="cb180-8">promptQ_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2258
 }),
 ['positive', 'positive', 'positive', 'neutral', 'negative', 'neutral'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:31:15.054828Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:31:15.054035Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:32:49.495380Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:32:49.494839Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:31:15.054803Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb182-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptQ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2b79208198b44f0db1c1a2939d3b12aa","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:34:57.682289Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:34:57.681391Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:34:57.689128Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:34:57.688168Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:34:57.682289Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>array(['neutral', 'positive', 'negative', 'live'], dtype=object)</code></pre>
</div>
</div>
<p>This set of 6 examples does not improve upon the best-overall accuracy of 75%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:35:03.426521Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:35:03.425759Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:35:03.432401Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:35:03.431896Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:35:03.426499Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>0.6572187776793623</code></pre>
</div>
</div>
<p>Something we haven’t seen in awhile, an <code>other</code> response.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:35:25.827435Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:35:25.826893Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:35:25.910215Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:35:25.909664Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:35:25.827414Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-122-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-122-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:35:48.026906Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:35:48.026189Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:35:48.047101Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:35:48.046564Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:35:48.026877Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_Q.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-r" class="level2">
<h2 class="anchored" data-anchor-id="prompt-r">Prompt R</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:36:39.272463Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:36:39.271784Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:36:39.287884Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:36:39.287385Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:36:39.272439Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb190-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb190-2">promptR_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb190-3"></span>
<span id="cb190-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb190-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb190-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb190-7">    </span>
<span id="cb190-8">promptR_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2258
 }),
 ['neutral', 'neutral', 'positive', 'positive', 'neutral', 'neutral'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:37:26.507209Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:37:26.506807Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:39:01.601663Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:39:01.600997Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:37:26.507184Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb192-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptR_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bb5acb86c42b4da9b40cb5ac0f82eb78","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:41:08.319693Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:41:08.319128Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:41:08.325689Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:41:08.324935Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:41:08.319672Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb194-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>No improvements on accuracy with this prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:41:14.089085Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:41:14.088319Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:41:14.095020Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:41:14.094465Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:41:14.089059Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb196" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb196-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>0.6483613817537643</code></pre>
</div>
</div>
<p>Compared to the best-performing Prompt K, this prompt yields considerably more correct <code>negative</code> (285 &gt; 201) and <code>positive</code> (493 &gt; 449) sentences but underperforms on <code>neutral</code> sentences (686 &lt; 1043).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:41:33.506474Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:41:33.506122Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:41:33.595267Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:41:33.594577Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:41:33.506441Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb198-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-128-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-128-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-17T18:42:48.974479Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-17T18:42:48.973801Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-17T18:42:48.994080Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-17T18:42:48.993159Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-17T18:42:48.974454Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb199-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_R.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-s" class="level2">
<h2 class="anchored" data-anchor-id="prompt-s">Prompt S</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:30:02.213626Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:30:02.213480Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:30:02.241444Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:30:02.240909Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:30:02.213613Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb200-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb200-2">promptS_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb200-3"></span>
<span id="cb200-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb200-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb200-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb200-7">    </span>
<span id="cb200-8">promptS_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2258
 }),
 ['neutral', 'neutral', 'positive', 'neutral', 'positive', 'neutral'])</code></pre>
</div>
</div>
<p>This set of examples has no <code>negative</code> sentences and a majority of <code>neutral</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:31:16.314738Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:31:16.314444Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:32:45.706853Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:32:45.706328Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:31:16.314703Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb202-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptS_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"875914eead224148b8ba4912d15c8193","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:34:20.439835Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:34:20.439100Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:34:20.445031Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:34:20.444594Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:34:20.439809Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb205" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb205-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>array(['negative', 'positive', 'neutral'], dtype=object)</code></pre>
</div>
</div>
<p>This set of examples does not improve on the best-overall accuracy of 75% (Prompt K).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:35:14.049197Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:35:14.048458Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:35:14.054289Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:35:14.053903Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:35:14.049173Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb207" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb207-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.6297608503100088</code></pre>
</div>
</div>
<p>It does, however, have a considerably larger number of correctly labeled <code>negative</code> sentences (292 &gt; 201).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:35:36.495935Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:35:36.494967Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:35:36.645012Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:35:36.644433Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:35:36.495909Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb209-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-134-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-134-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:36:24.089195Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:36:24.088355Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:36:24.117161Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:36:24.116540Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:36:24.089136Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb210" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb210-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_S.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>I’ll try one more 6-shot prompt before I increase the number of examples.</p>
</section>
<section id="prompt-t" class="level2">
<h2 class="anchored" data-anchor-id="prompt-t">Prompt T</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:55:34.309276Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:55:34.308778Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:55:34.323574Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:55:34.323142Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:55:34.309253Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb211-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">6</span>)]</span>
<span id="cb211-2">promptT_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb211-3"></span>
<span id="cb211-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb211-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb211-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb211-7">    </span>
<span id="cb211-8">promptT_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2258
 }),
 ['neutral', 'neutral', 'positive', 'neutral', 'negative', 'neutral'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:55:59.942812Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:55:59.942122Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:57:28.430965Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:57:28.430449Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:55:59.942789Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb213-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptT_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"141b6967bf0b4e5fa4b2c7974c023240","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:58:38.230184Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:58:38.229435Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:58:38.233870Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:58:38.233517Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:58:38.230184Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb215-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Similar to the other 6-Shot examples, this set of examples does not improve on the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:58:45.243422Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:58:45.242933Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:58:45.249270Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:58:45.248866Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:58:45.243401Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb217" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb217-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>0.6886625332152347</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:59:13.946858Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:59:13.946325Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:59:14.027807Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:59:14.027364Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:59:13.946845Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb219" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb219-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-140-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-140-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T13:59:32.786118Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T13:59:32.785380Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T13:59:32.806137Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T13:59:32.805471Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T13:59:32.786088Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb220" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb220-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_T.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-u" class="level2">
<h2 class="anchored" data-anchor-id="prompt-u">Prompt U</h2>
<p>I’ll now increase the number of examples in the prompt to 12, and try out 5 random sets of 12 examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:00:28.621634Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:00:28.620848Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:00:28.635296Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:00:28.634901Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:00:28.621601Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb221" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb221-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">12</span>)]</span>
<span id="cb221-2">promptU_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb221-3"></span>
<span id="cb221-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb221-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb221-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb221-7">    </span>
<span id="cb221-8">promptU_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2252
 }),
 ['positive',
  'negative',
  'positive',
  'neutral',
  'positive',
  'positive',
  'neutral',
  'positive',
  'neutral',
  'neutral',
  'positive',
  'neutral'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:01:38.389458Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:01:38.388825Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:03:23.033402Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:03:23.032762Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:01:38.389435Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb223" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb223-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptU_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e5a98d72cfc14621ad9798b3f5123995","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:06:51.541051Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:06:51.540185Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:06:51.545332Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:06:51.544741Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:06:51.541004Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb225" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb225-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Increasing the number of examples to 12, at least the 12 I chose here, doesn’t improve on the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:06:53.560404Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:06:53.559764Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:06:53.565967Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:06:53.565398Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:06:53.560384Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb227-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>0.6549733570159858</code></pre>
</div>
</div>
<p>The number of correct <code>positive</code> sentences is considerably higher than Prompt K (496 &gt; 449).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:07:27.529572Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:07:27.528960Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:07:27.615080Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:07:27.614550Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:07:27.529553Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb229" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb229-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-146-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-146-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:08:05.244580Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:08:05.243880Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:08:05.267617Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:08:05.267057Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:08:05.244559Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb230" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb230-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_U.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-v" class="level2">
<h2 class="anchored" data-anchor-id="prompt-v">Prompt V</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:08:41.538713Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:08:41.538231Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:08:41.555768Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:08:41.555300Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:08:41.538611Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb231" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb231-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">12</span>)]</span>
<span id="cb231-2">promptV_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb231-3"></span>
<span id="cb231-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb231-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb231-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb231-7">    </span>
<span id="cb231-8">promptV_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2252
 }),
 ['neutral',
  'positive',
  'positive',
  'neutral',
  'neutral',
  'negative',
  'negative',
  'neutral',
  'positive',
  'neutral',
  'positive',
  'negative'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:09:32.506121Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:09:32.505853Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:11:13.447020Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:11:13.446226Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:09:32.506103Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb233" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb233-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptV_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5f651aff3c8c441292594026344e8679","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:16:12.063113Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:16:12.062440Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:16:12.067632Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:16:12.067082Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:16:12.063088Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb235" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb235-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt performs well, and competes with but doesn’t improve upon the best overall accuracy of 75%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:16:16.461759Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:16:16.461499Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:16:16.467509Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:16:16.466967Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:16:16.461741Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb237" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb237-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>0.7322380106571936</code></pre>
</div>
</div>
<p>This prompt performs considerably better on <code>neutral</code> sentences than Prompt K (1103 &gt; 1043).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:17:55.890782Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:17:55.890082Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:17:55.976293Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:17:55.975697Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:17:55.890759Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb239" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb239-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-152-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-152-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:19:21.061429Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:19:21.060771Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:19:21.081270Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:19:21.080651Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:19:21.061407Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb240-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_V.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-w" class="level2">
<h2 class="anchored" data-anchor-id="prompt-w">Prompt W</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:19:45.810925Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:19:45.810659Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:19:45.827633Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:19:45.827027Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:19:45.810906Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb241" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb241-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">12</span>)]</span>
<span id="cb241-2">promptW_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb241-3"></span>
<span id="cb241-4">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb241-5"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb241-6">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb241-7">    </span>
<span id="cb241-8">promptW_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2252
 }),
 ['neutral',
  'negative',
  'neutral',
  'positive',
  'neutral',
  'neutral',
  'positive',
  'neutral',
  'neutral',
  'negative',
  'positive',
  'neutral'])</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:20:39.997678Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:20:39.996777Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:22:18.186953Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:22:18.186272Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:20:39.997642Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb243" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb243-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptW_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2fadb92efc1e4563bc3453b858f70373","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:28:46.745409Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:28:46.744894Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:28:46.750316Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:28:46.749521Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:28:46.745388Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb245" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb245-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The accuracy worsens with this set of 12 examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:28:59.755112Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:28:59.754567Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:28:59.760524Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:28:59.759989Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:28:59.755092Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb247" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb247-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>0.7042628774422736</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:29:15.903542Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:29:15.903018Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:29:15.990840Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:29:15.990293Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:29:15.903523Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb249" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb249-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-158-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-158-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-18T14:29:30.630260Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-18T14:29:30.629977Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-18T14:29:30.651992Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-18T14:29:30.651278Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-18T14:29:30.630241Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb250" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb250-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_W.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-x" class="level2">
<h2 class="anchored" data-anchor-id="prompt-x">Prompt X</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:34:05.787845Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:34:05.787245Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:34:05.791899Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:34:05.791285Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:34:05.787816Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb251" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb251-1"><span class="kw" style="color: #003B4F;">def</span> get_ds(n):</span>
<span id="cb251-2">    exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb251-3">    prompt_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb251-4"></span>
<span id="cb251-5">    examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb251-6">    <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb251-7">        examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb251-8">        </span>
<span id="cb251-9">    <span class="bu" style="color: null;">print</span>(prompt_ds, [el[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">for</span> el <span class="kw" style="color: #003B4F;">in</span> examples])</span>
<span id="cb251-10">    </span>
<span id="cb251-11">    <span class="cf" style="color: #003B4F;">return</span> prompt_ds, examples</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:34:07.213255Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:34:07.212988Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:34:07.243011Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:34:07.242173Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:34:07.213236Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb252" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb252-1">promptX_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2252
}) ['positive', 'neutral', 'negative', 'neutral', 'positive', 'negative', 'neutral', 'negative', 'negative', 'neutral', 'neutral', 'negative']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:35:04.463653Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:35:04.462984Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:36:51.883836Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:36:51.883265Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:35:04.463577Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb254" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb254-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptX_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ffff562f2f0a468798337b4b011c064b","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:36:51.885391Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:36:51.885031Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:36:51.893822Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:36:51.893300Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:36:51.885371Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb257" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb257-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Aha! This prompt improves upon the best overall accuracy, reaching about 77%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:36:51.894774Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:36:51.894597Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:36:51.900833Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:36:51.900265Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:36:51.894759Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb259" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb259-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>0.7659857904085258</code></pre>
</div>
</div>
<p>Compared to Prompt K (75%) this prompt performs worse on <code>neutral</code> sentences (1000 &lt; 1043) but more than makes up for it on <code>negative</code> (270 &gt; 201) and <code>positive</code> (455 &gt; 449) sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:36:51.902337Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:36:51.901979Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:36:52.019059Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:36:52.018219Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:36:51.902320Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb261" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb261-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-165-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-165-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:36:52.020433Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:36:52.019881Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:36:52.039493Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:36:52.039040Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:36:52.020413Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb262" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb262-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_X.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-y" class="level2">
<h2 class="anchored" data-anchor-id="prompt-y">Prompt Y</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:52:58.064059Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:52:58.063333Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:52:58.077867Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:52:58.077316Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:52:58.064034Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb263" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb263-1">promptY_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2252
}) ['neutral', 'neutral', 'neutral', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'neutral', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:53:40.014078Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:53:40.013266Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:55:19.769152Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:55:19.768418Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:53:40.014049Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb265" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb265-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptY_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7508b1005ef745398a214941f9314d67","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:55:19.772363Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:55:19.772166Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:55:19.777752Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:55:19.776977Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:55:19.772339Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb267" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb267-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>array(['negative', 'positive', 'neutral'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve on the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:55:19.781903Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:55:19.781666Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:55:19.788921Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:55:19.788213Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:55:19.781880Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb269" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb269-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0.7255772646536413</code></pre>
</div>
</div>
<p>This prompt performs well on <code>negative</code> and <code>neutral</code> sentences but its worse performance on <code>positive</code> sentences brings down the overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:55:19.792298Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:55:19.792068Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:55:19.877641Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:55:19.876956Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:55:19.792277Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb271-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-171-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-171-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T12:55:19.881782Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T12:55:19.881592Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T12:55:19.901251Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T12:55:19.900761Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T12:55:19.881763Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb272" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb272-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_Y.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Next, I’ll try 5 prompts with 18 examples.</p>
</section>
<section id="prompt-z" class="level2">
<h2 class="anchored" data-anchor-id="prompt-z">Prompt Z</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:04:14.959665Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:04:14.959345Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:04:14.977149Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:04:14.976517Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:04:14.959640Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb273-1">promptZ_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2246
}) ['neutral', 'neutral', 'neutral', 'positive', 'neutral', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'positive', 'positive', 'neutral', 'positive', 'negative', 'negative', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:04:52.757586Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:04:52.756975Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:07:00.822631Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:07:00.821877Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:04:52.757562Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb275-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptZ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f4d3fde5dc124a87b54dc92ad68555e1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:07:00.825784Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:07:00.825632Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:07:00.830913Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:07:00.830190Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:07:00.825770Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb277-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:07:00.833757Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:07:00.833569Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:07:00.840036Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:07:00.839316Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:07:00.833738Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb279" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb279-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>0.7132680320569902</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:07:00.842376Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:07:00.842238Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:07:00.928534Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:07:00.927958Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:07:00.842363Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb281" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb281-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-177-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-177-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:07:00.932023Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:07:00.931549Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:07:00.949250Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:07:00.948855Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:07:00.932004Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb282" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb282-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_Z.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-aa" class="level2">
<h2 class="anchored" data-anchor-id="prompt-aa">Prompt AA</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:10:00.027553Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:10:00.026691Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:10:00.043156Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:10:00.041761Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:10:00.027520Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb283" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb283-1">promptAA_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2247
}) ['neutral', 'negative', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'negative', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:10:18.080573Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:10:18.079668Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:12:26.095893Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:12:26.095119Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:10:18.080541Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb285" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb285-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAA_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"9eee93c8dafb42fab936d0e4163ab7c9","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:13:20.214039Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:13:20.213511Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:13:20.218763Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:13:20.218133Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:13:20.214019Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb287" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb287-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This set of 18 examples increases the best overall accuraacy to almost 80%!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:13:44.139042Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:13:44.138134Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:13:44.144734Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:13:44.144065Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:13:44.139011Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb289" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb289-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>0.7948375611927013</code></pre>
</div>
</div>
<p>Compared to Prompt X, this prompt performs worse on <code>negative</code> (206 &lt; 270) and <code>positive</code> (400 &lt; 455) but more than makes up for it on <code>neutral</code> sentences (1180 &gt; 1000).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:14:55.630928Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:14:55.630280Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:14:55.712690Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:14:55.712227Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:14:55.630904Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb291" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb291-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-183-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-183-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:17:38.622646Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:17:38.621923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:17:38.640908Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:17:38.640426Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:17:38.622618Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb292" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb292-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AA.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ab" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ab">Prompt AB</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:18:39.310382Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:18:39.309951Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:18:39.324078Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:18:39.323492Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:18:39.310361Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb293" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb293-1">promptAB_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2246
}) ['neutral', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'negative', 'neutral', 'negative', 'neutral', 'negative', 'neutral', 'positive', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:18:55.502725Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:18:55.502144Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:20:59.052763Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:20:59.051867Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:18:55.502702Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb295" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb295-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAB_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4971be2d1b2b4bb781db14c1184fbe1d","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:20:59.056101Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:20:59.055877Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:20:59.060932Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:20:59.060110Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:20:59.056101Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb297" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb297-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:20:59.064202Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:20:59.063708Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:20:59.069116Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:20:59.068587Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:20:59.064190Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb299" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb299-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>0.7422083704363313</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:20:59.070877Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:20:59.070782Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:20:59.155477Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:20:59.154892Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:20:59.070864Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb301" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb301-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-189-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-189-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-19T13:20:59.160025Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-19T13:20:59.159859Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-19T13:20:59.179450Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-19T13:20:59.178919Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-19T13:20:59.160005Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb302" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb302-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AB.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ac" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ac">Prompt AC</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:11:36.105141Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:11:36.104525Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:11:36.127962Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:11:36.127482Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:11:36.105121Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb303" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb303-1">promptAC_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2246
}) ['neutral', 'neutral', 'positive', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'neutral', 'positive', 'positive', 'positive', 'neutral', 'positive', 'neutral', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:12:13.238961Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:12:13.238364Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:14:20.573255Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:14:20.572804Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:12:13.238937Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb305" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb305-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAC_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"eef1dc7c1eba4872b16dbad716045260","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:14:20.574833Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:14:20.574189Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:14:20.582637Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:14:20.582294Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:14:20.574812Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb308" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb308-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:14:27.886786Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:14:27.886255Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:14:27.892243Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:14:27.891855Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:14:27.886766Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb310" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb310-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.6856634016028496</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:16:01.039671Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:16:01.038874Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:16:01.157578Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:16:01.157042Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:16:01.039647Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb312" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb312-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-195-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-195-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:16:12.545411Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:16:12.545167Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:16:12.566224Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:16:12.565714Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:16:12.545395Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb313" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb313-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AC.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ad" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ad">Prompt AD</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:17:01.824377Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:17:01.823863Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:17:01.837729Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:17:01.837160Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:17:01.824354Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb314" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb314-1">promptAD_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2246
}) ['neutral', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'neutral', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:17:31.376114Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:17:31.375623Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:19:32.081242Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:19:32.080760Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:17:31.376094Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb316" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb316-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"25f501e61aa44a089dff31dc0297bb6c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:19:51.564249Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:19:51.563537Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:19:51.569318Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:19:51.568689Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:19:51.564221Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb318" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb318-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:19:57.467901Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:19:57.467630Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:19:57.473771Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:19:57.473193Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:19:57.467883Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb320" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb320-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>0.7497773820124666</code></pre>
</div>
</div>
<p>This prompt yields considerably more correct <code>negative</code> sentences (271 &gt; 206) than the best-performing Prompt AA.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:20:13.407239Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:20:13.406655Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:20:13.486939Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:20:13.486458Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:20:13.407218Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb322" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb322-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-201-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-30"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-201-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T13:21:15.836880Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T13:21:15.836244Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T13:21:15.853934Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T13:21:15.853482Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T13:21:15.836858Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb323" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb323-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AD.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Next, I’ll try 5 prompts with 24 examples each.</p>
</section>
<section id="prompt-ae" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ae">Prompt AE</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:06:34.990200Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:06:34.989685Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:06:35.004289Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:06:35.003730Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:06:34.990178Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb324" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb324-1">promptAE_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2240
}) ['neutral', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'negative']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:07:01.009283Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:07:01.008551Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:09:29.947789Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:09:29.947126Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:07:01.009268Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb326" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb326-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAE_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b55f037fa913455d8f84840fc1a300bc","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:09:29.949424Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:09:29.948965Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:09:29.953744Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:09:29.953114Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:09:29.949405Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb328" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb328-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Increasing the number of examples to 24 (at least for these 24 examples) does not improve upon the overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:10:44.164112Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:10:44.163348Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:10:44.170178Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:10:44.169377Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:10:44.164089Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb330" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb330-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.7491071428571429</code></pre>
</div>
</div>
<p>Compared to the best performing Prompt AA, this prompt yields considerably more correct <code>neutral</code> sentences (1267 &gt; 1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:11:10.167126Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:11:10.166543Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:11:10.252463Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:11:10.251831Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:11:10.167105Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb332" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb332-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-207-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-207-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:11:48.264076Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:11:48.263561Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:11:48.281581Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:11:48.281073Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:11:48.264055Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb333" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb333-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AE.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-af" class="level2">
<h2 class="anchored" data-anchor-id="prompt-af">Prompt AF</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:12:27.100068Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:12:27.099320Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:12:27.113613Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:12:27.113006Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:12:27.100047Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb334" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb334-1">promptAF_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2240
}) ['positive', 'neutral', 'positive', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:12:51.846335Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:12:51.845791Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:15:15.133578Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:15:15.133044Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:12:51.846312Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb336" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb336-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAF_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"47c697ea14a7462d8fb0096424b59e55","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:15:22.017216Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:15:22.016516Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:15:22.021413Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:15:22.020806Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:15:22.017196Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb338" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb338-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt doesn’t improve upon the best overall accuracy, and performs better than Prompt AA on <code>neutral</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:15:25.450234Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:15:25.449355Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:15:25.457089Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:15:25.456414Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:15:25.450198Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb340" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb340-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>0.7308035714285714</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:15:29.809353Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:15:29.809059Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:15:29.891756Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:15:29.891270Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:15:29.809333Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb342" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb342-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-213-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-213-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:16:06.954846Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:16:06.954476Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:16:06.973681Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:16:06.973130Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:16:06.954818Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb343" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb343-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AF.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ag" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ag">Prompt AG</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:16:24.639488Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:16:24.638961Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:16:24.654808Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:16:24.654039Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:16:24.639467Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb344" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb344-1">promptAG_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2240
}) ['neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'positive', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:16:47.211752Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:16:47.211493Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:19:09.464632Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:19:09.463995Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:16:47.211731Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb346" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb346-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAG_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c18ad9c4ac9e4dd6a42ba51aeab75a83","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:19:09.467806Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:19:09.467666Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:19:09.472974Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:19:09.472433Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:19:09.467792Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb348" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb348-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The same trend continues for this set of 24 examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:20:00.038425Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:20:00.038168Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:20:00.044319Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:20:00.043761Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:20:00.038407Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb350" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb350-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>0.75</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:20:08.005110Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:20:08.004271Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:20:08.091111Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:20:08.090399Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:20:08.005086Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb352" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb352-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-219-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-33"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-219-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-20T14:20:33.937771Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-20T14:20:33.937013Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-20T14:20:33.955295Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-20T14:20:33.954706Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-20T14:20:33.937749Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb353" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb353-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AG.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Two more 24-Shot prompts to go.</p>
</section>
<section id="prompt-ah" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ah">Prompt AH</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:04:48.024066Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:04:48.023934Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:04:48.050141Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:04:48.049676Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:04:48.024055Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb354" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb354-1">promptAH_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2240
}) ['positive', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'negative', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:05:45.187470Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:05:45.186846Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:08:14.556903Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:08:14.556057Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:05:45.187445Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb356" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb356-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAH_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7f7fe740de8a47c291bcbdbb0193d2aa","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:08:14.558910Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:08:14.558490Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:08:14.569192Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:08:14.568319Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:08:14.558889Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb359" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb359-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon the best overall accuracy (though it comes close).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:08:14.570159Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:08:14.569979Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:08:14.578541Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:08:14.575950Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:08:14.570139Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb361" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb361-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.7745535714285714</code></pre>
</div>
</div>
<p>This prompt yields more correct <code>negative</code> sentences than Prompt AA (233 &gt; 206).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:08:14.579757Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:08:14.579586Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:08:14.727926Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:08:14.727196Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:08:14.579743Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb363" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb363-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-225-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-225-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:09:22.708743Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:09:22.708213Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:09:22.742293Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:09:22.741676Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:09:22.708723Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb364" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb364-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AH.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ai" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ai">Prompt AI</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:09:43.126015Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:09:43.125529Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:09:43.141079Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:09:43.140531Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:09:43.125994Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb365" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb365-1">promptAI_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2241
}) ['neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:10:12.415205Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:10:12.414529Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:12:36.825534Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:12:36.824801Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:10:12.415185Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb367" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb367-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAI_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"228125d0dfd248e79d375a95c3766411","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:12:36.827176Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:12:36.826743Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:12:36.831317Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:12:36.830718Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:12:36.827158Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb369" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb369-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:12:36.832467Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:12:36.832083Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:12:36.837421Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:12:36.836954Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:12:36.832453Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb371" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb371-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>0.7536813922356091</code></pre>
</div>
</div>
<p>This prompt yields considerably more correct <code>neutral</code> sentences than the best performing Prompt AA (1266 &gt; 1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:12:36.838479Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:12:36.838332Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:12:36.921047Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:12:36.920195Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:12:36.838467Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb373" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb373-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-231-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-35"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-231-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:14:00.234285Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:14:00.233667Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:14:00.257756Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:14:00.257214Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:14:00.234263Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb374" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb374-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AI.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Next, I’ll try 5 different 30-Shot prompts.</p>
</section>
<section id="prompt-aj" class="level2">
<h2 class="anchored" data-anchor-id="prompt-aj">Prompt AJ</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:14:58.308775Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:14:58.308394Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:14:58.324902Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:14:58.324385Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:14:58.308746Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb375" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb375-1">promptAJ_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
}) ['neutral', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'neutral', 'negative', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:15:33.793768Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:15:33.792810Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:18:26.300816Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:18:26.300275Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:15:33.793736Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb377" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb377-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAJ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"388a9a32dcd244488c6d29376f7e02e1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:18:26.302079Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:18:26.301894Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:18:26.313439Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:18:26.312950Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:18:26.302064Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb379" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb379-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt doesn’t improve the best overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:18:26.314278Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:18:26.314106Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:18:26.326790Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:18:26.326222Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:18:26.314258Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb381" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb381-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.7739480752014324</code></pre>
</div>
</div>
<p>As seems to be the trend, this prompt results in more correct <code>neutral</code> responses (1284) than Prompt AA (1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:18:26.328350Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:18:26.327918Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:18:26.428491Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:18:26.425775Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:18:26.328333Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb383" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb383-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-237-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-36"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-237-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:19:36.528018Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:19:36.527409Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:19:36.549860Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:19:36.549306Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:19:36.527996Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb384" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb384-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AJ.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ak" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ak">Prompt AK</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:20:20.954124Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:20:20.953339Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:20:20.968321Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:20:20.967835Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:20:20.954099Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb385" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb385-1">promptAK_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
}) ['neutral', 'neutral', 'neutral', 'negative', 'negative', 'positive', 'neutral', 'neutral', 'positive', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:20:43.738610Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:20:43.737832Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:23:39.346675Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:23:39.346094Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:20:43.738587Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb387" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb387-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAK_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"752ad28690584f4388f4874bed05f404","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:24:30.273053Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:24:30.272431Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:24:30.278835Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:24:30.278072Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:24:30.273010Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb389" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb389-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The model performs considerably worse with these 30 examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:24:35.408336Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:24:35.407467Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:24:35.414228Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:24:35.413554Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:24:35.408310Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb391" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb391-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>0.6777081468218442</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:24:58.777713Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:24:58.777114Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:24:58.860097Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:24:58.859621Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:24:58.777692Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb393" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb393-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-243-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-37"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-243-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-21T13:25:17.588606Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-21T13:25:17.588328Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-21T13:25:17.608148Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-21T13:25:17.607538Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-21T13:25:17.588591Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb394" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb394-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AK.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-al" class="level2">
<h2 class="anchored" data-anchor-id="prompt-al">Prompt AL</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:44:03.234919Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:44:03.234661Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:44:03.249997Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:44:03.249509Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:44:03.234901Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb395" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb395-1">promptAL_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
}) ['positive', 'neutral', 'positive', 'positive', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:44:07.149376Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:44:07.149110Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:46:52.918686Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:46:52.918132Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:44:07.149358Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb397" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb397-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAL_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"47d1acf2e84b46cda653d6ad786a3c11","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:46:52.921542Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:46:52.921362Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:46:52.926032Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:46:52.925554Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:46:52.921524Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb399" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb399-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The trend continues: the overall accuracy doesn’t improve but the model’s performance on <code>neutral</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:46:52.928711Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:46:52.928567Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:46:52.934045Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:46:52.933549Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:46:52.928697Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb401" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb401-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0.76544315129812</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:46:52.936119Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:46:52.935908Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:46:53.020152Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:46:53.019625Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:46:52.936101Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb403" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb403-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-249-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-38"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-249-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:46:53.022868Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:46:53.022717Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:46:53.042615Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:46:53.042137Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:46:53.022852Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb404" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb404-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AL.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Two more 30-Shot prompts to go.</p>
</section>
<section id="prompt-am" class="level2">
<h2 class="anchored" data-anchor-id="prompt-am">Prompt AM</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:48:02.571312Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:48:02.570969Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:48:02.588766Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:48:02.588223Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:48:02.571287Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb405" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb405-1">promptAM_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
}) ['negative', 'neutral', 'positive', 'negative', 'neutral', 'neutral', 'positive', 'negative', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:48:05.587942Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:48:05.587162Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:50:56.616413Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:50:56.615827Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:48:05.587921Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb407" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb407-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAM_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"0ce200d71898459580ee93e9041dd68a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:50:56.618963Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:50:56.618658Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:50:56.622701Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:50:56.622370Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:50:56.618946Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb409" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb409-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The overall accuracy doesn’t improve but the model’s performance on <code>negative</code> and <code>positive</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:50:56.625106Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:50:56.624784Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:50:56.629640Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:50:56.629305Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:50:56.625090Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb411" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb411-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.7484333034914951</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:50:56.631734Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:50:56.631376Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:50:56.711129Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:50:56.710722Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:50:56.631718Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb413" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb413-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-255-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-39"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-255-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:54:29.225555Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:54:29.224897Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:54:29.304296Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:54:29.303631Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:54:29.225526Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb414" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb414-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AM.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-an" class="level2">
<h2 class="anchored" data-anchor-id="prompt-an">Prompt AN</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:56:32.752141Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:56:32.751348Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:56:32.766574Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:56:32.765928Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:56:32.752117Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb415" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb415-1">promptAN_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
}) ['positive', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:56:48.089634Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:56:48.088913Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:59:44.860049Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:59:44.859324Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:56:48.089611Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb417" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb417-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAN_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"798beda697a54ce18f225ae0ba7e2375","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:59:44.863119Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:59:44.862967Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:59:44.868108Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:59:44.867323Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:59:44.863104Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb419" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb419-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The overall accuracy doesn’t improve but the model’s performance on <code>positive</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:59:44.870915Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:59:44.870764Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:59:44.876373Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:59:44.875818Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:59:44.870895Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb421" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb421-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>0.7381378692927484</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T14:59:44.878437Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T14:59:44.878290Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T14:59:44.966813Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T14:59:44.966381Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T14:59:44.878424Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb423" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb423-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-261-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-40"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-261-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:06:23.636494Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:06:23.635730Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:06:23.654901Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:06:23.654453Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:06:23.636468Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb424" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb424-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AN.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Next, I’ll increase the number of examples to 45.</p>
</section>
<section id="prompt-ao" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ao">Prompt AO</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:10:29.131009Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:10:29.130591Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:10:29.146418Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:10:29.146009Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:10:29.130987Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb425" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb425-1">promptAO_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2219
}) ['neutral', 'neutral', 'positive', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:10:47.464170Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:10:47.463358Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:14:32.928491Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:14:32.928034Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:10:47.464145Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb427" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb427-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAO_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"cec3262f3d434b96a9d723031d1b520c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:20:13.460268Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:20:13.459781Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:20:13.464427Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:20:13.463966Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:20:13.460246Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb429" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb429-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The overall accuracy doesn’t improve but the model’s performance on <code>positive</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:20:19.637107Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:20:19.636507Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:20:19.643040Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:20:19.642342Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:20:19.637085Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb431" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb431-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>0.7417755745831456</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:20:30.733104Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:20:30.732593Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:20:30.814586Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:20:30.814022Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:20:30.733085Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb433" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb433-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-267-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-41"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-267-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:23:03.728708Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:23:03.727797Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:23:03.752066Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:23:03.751438Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:23:03.728676Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb434" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb434-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AO.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ap" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ap">Prompt AP</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:23:30.705033Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:23:30.704766Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:23:30.722006Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:23:30.721399Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:23:30.705014Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb435" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb435-1">promptAP_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2219
}) ['neutral', 'positive', 'negative', 'neutral', 'positive', 'neutral', 'positive', 'positive', 'neutral', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:23:45.039933Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:23:45.039424Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:27:44.733850Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:27:44.733258Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:23:45.039914Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb437" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb437-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAP_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f5de94812e424e0e8f0d7fc342077431","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:27:44.736642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:27:44.736500Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:27:44.740547Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:27:44.740171Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:27:44.736628Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb439" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb439-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The overall accuracy doesn’t improve but the model’s performance on <code>neutral</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:27:44.742814Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:27:44.742678Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:27:44.748093Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:27:44.747612Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:27:44.742800Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb441" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb441-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>0.7872915727805317</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:27:44.750078Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:27:44.749944Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:27:44.832577Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:27:44.831788Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:27:44.750065Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb443" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb443-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-273-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-42"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-273-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:29:45.605092Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:29:45.604749Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:29:45.625955Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:29:45.625388Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:29:45.605065Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb444" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb444-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AP.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-aq" class="level2">
<h2 class="anchored" data-anchor-id="prompt-aq">Prompt AQ</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:30:17.896877Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:30:17.896340Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:30:17.912057Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:30:17.911549Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:30:17.896857Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb445" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb445-1">promptAQ_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2219
}) ['neutral', 'neutral', 'negative', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:30:36.925551Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:30:36.924795Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:34:20.670491Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:34:20.669841Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:30:36.925529Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb447" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb447-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAQ_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ecfe97cde26f4fb78d9d05000ee42c75","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:34:20.673221Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:34:20.673061Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:34:20.677376Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:34:20.676909Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:34:20.673221Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb449" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb449-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>The overall accuracy doesn’t improve but the model’s performance on <code>neutral</code> sentences does.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:34:20.679817Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:34:20.679694Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:34:20.684781Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:34:20.684289Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:34:20.679805Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb451" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb451-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>0.7201442091031997</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:34:20.686695Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:34:20.686550Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:34:20.767211Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:34:20.766771Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:34:20.686681Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb453" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb453-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-279-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-43"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-279-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-22T15:43:32.655535Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-22T15:43:32.654958Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-22T15:43:32.673359Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-22T15:43:32.672722Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-22T15:43:32.655513Z&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb454" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb454-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AQ.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ar" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ar">Prompt AR</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T16:56:39.257012Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T16:56:39.256490Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T16:56:39.273011Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T16:56:39.272393Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T16:56:39.256991Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb455" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb455-1">promptAR_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2219
}) ['neutral', 'negative', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'positive']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T16:56:44.444439Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T16:56:44.443754Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T17:00:37.805708Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T17:00:37.804769Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T16:56:44.444409Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb457" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb457-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAR_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f9583e14f7ec41f1b4bf77273e41cd69","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T17:00:37.807490Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T17:00:37.807133Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T17:00:37.816551Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T17:00:37.815884Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T17:00:37.807470Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb460" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb460-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt performs worse than the best overall Prompt AA.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T17:00:37.817666Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T17:00:37.817496Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T17:00:37.823581Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T17:00:37.823044Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T17:00:37.817651Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb462" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb462-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>0.7386210004506535</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T17:00:37.824794Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T17:00:37.824588Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T17:00:37.945184Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T17:00:37.944615Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T17:00:37.824776Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb464" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb464-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-285-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-44"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-285-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T17:01:32.220917Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T17:01:32.220256Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T17:01:32.259102Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T17:01:32.258494Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T17:01:32.220891Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb465" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb465-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AR.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-as" class="level2">
<h2 class="anchored" data-anchor-id="prompt-as">Prompt AS</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:14:49.541363Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:14:49.540820Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:14:49.585211Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:14:49.584745Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:14:49.541340Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb466" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb466-1">promptAS_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">45</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2219
}) ['neutral', 'negative', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:15:06.640204Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:15:06.639932Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:18:59.912588Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:18:59.911836Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:15:06.640183Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb468" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb468-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAS_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"82770a240e5d4098ae3ac2480be17e24","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.
Starting from v4.46, the `logits` model output will have the same type as the model (except at train time, where it will always be FP32)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:24:17.995156Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:24:17.994844Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:24:18.007158Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:24:18.006425Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:24:17.995147Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb471" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb471-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array(['positive', 'neutral', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Compared to Prompt AA, this prompt yields a worse overall accuracy but improves on <code>neutral</code> sentences (1291 &gt; 1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:24:22.940661Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:24:22.940381Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:24:22.946895Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:24:22.946352Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:24:22.940642Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb473" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb473-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0.7494366831906264</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:24:26.444460Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:24:26.443760Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:24:26.642284Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:24:26.641395Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:24:26.444432Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb475" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb475-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-291-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-45"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-291-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:25:07.495770Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:25:07.495464Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:25:07.524451Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:25:07.523689Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:25:07.495750Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb476" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb476-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AS.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>Next, I’ll move on to the final number of examples: 60.</p>
</section>
<section id="prompt-at" class="level2">
<h2 class="anchored" data-anchor-id="prompt-at">Prompt AT</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:25:58.954202Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:25:58.953826Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:25:58.974165Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:25:58.973415Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:25:58.954180Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb477" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb477-1">promptAT_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
}) ['positive', 'neutral', 'neutral', 'negative', 'negative', 'neutral', 'neutral', 'neutral', 'negative', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:26:15.186418Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:26:15.185600Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:31:02.017286Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:31:02.016812Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:26:15.186383Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb479" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb479-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAT_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d8237fa0d9834380b2a6431c28ec8acd","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:31:02.020144Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:31:02.019706Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:31:02.023681Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:31:02.023310Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:31:02.020125Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb481" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb481-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Upping the number of examples to 60 does not improve results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:31:02.026276Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:31:02.025844Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:31:02.030749Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:31:02.030388Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:31:02.026258Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb483" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb483-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0.7218693284936479</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:31:02.033012Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:31:02.032591Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:31:02.116057Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:31:02.115626Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:31:02.032995Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb485" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb485-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-297-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-46"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-297-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:32:08.073543Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:32:08.072695Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:32:08.094514Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:32:08.094080Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:32:08.073513Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb486" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb486-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AT.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-au" class="level2">
<h2 class="anchored" data-anchor-id="prompt-au">Prompt AU</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:32:40.591396Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:32:40.590317Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:32:40.609182Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:32:40.608772Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:32:40.591364Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb487" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb487-1">promptAU_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
}) ['neutral', 'positive', 'neutral', 'positive', 'negative', 'positive', 'positive', 'negative', 'positive', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:33:12.337099Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:33:12.336373Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:38:08.955608Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:38:08.954859Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:33:12.337074Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb489" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb489-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAU_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e0fc36010b744635995c2e97cc11e04c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:38:08.958564Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:38:08.958394Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:38:08.962971Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:38:08.962483Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:38:08.958557Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb491" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb491-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Compared to Prompt AA, this prompt yields a worse overall accuracy but improves on <code>neutral</code> sentences (1237 &gt; 1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:38:08.965851Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:38:08.965750Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:38:08.971395Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:38:08.970892Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:38:08.965845Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb493" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb493-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>0.7686025408348457</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:38:08.973429Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:38:08.973268Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:38:09.057795Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:38:09.057194Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:38:08.973378Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb495" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb495-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-303-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-47"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-303-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:41:33.155895Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:41:33.155120Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:41:33.175706Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:41:33.174993Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:41:33.155895Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb496" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb496-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AU.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-av" class="level2">
<h2 class="anchored" data-anchor-id="prompt-av">Prompt AV</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:42:03.776289Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:42:03.775695Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:42:03.796742Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:42:03.796107Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:42:03.776261Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb497" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb497-1">promptAV_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
}) ['positive', 'neutral', 'neutral', 'neutral', 'positive', 'positive', 'neutral', 'positive', 'negative', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:42:18.680778Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:42:18.680411Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:47:26.825007Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:47:26.824353Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:42:18.680749Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb499" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb499-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAV_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6023c7bb4f574d22a1ff430de9860e53","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:47:26.827734Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:47:26.827580Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:47:26.832589Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:47:26.832103Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:47:26.827719Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb501" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb501-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Compared to Prompt AA, this prompt yields a worse overall accuracy but improves on <code>neutral</code> sentences (1206 &gt; 1180).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:47:26.835430Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:47:26.835276Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:47:26.840976Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:47:26.840418Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:47:26.835412Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb503" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb503-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>0.7545372050816697</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:47:26.843270Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:47:26.843127Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:47:26.932167Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:47:26.931725Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:47:26.843256Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb505" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb505-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-309-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-48"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-309-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-23T22:57:19.777810Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-23T22:57:19.777386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-23T22:57:19.800638Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-23T22:57:19.800091Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-23T22:57:19.777778Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb506" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb506-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AV.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-aw" class="level2">
<h2 class="anchored" data-anchor-id="prompt-aw">Prompt AW</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:13:46.901252Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:13:46.899978Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:13:46.938335Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:13:46.937696Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:13:46.901210Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb507" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb507-1">promptAW_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
}) ['neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'neutral', 'negative', 'neutral', 'neutral', 'neutral']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:14:02.402419Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:14:02.401711Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:19:18.840331Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:19:18.839550Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:14:02.402390Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb509" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb509-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAW_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d8ff0d468c5c4a0580de6ef51f041e92","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:19:18.843142Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:19:18.841987Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:19:18.850895Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:19:18.850220Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:19:18.843105Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb512" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb512-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>This prompt does not improve upon Prompt AA results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:19:18.852817Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:19:18.851860Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:19:18.859471Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:19:18.858980Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:19:18.852786Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb514" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb514-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>0.7445553539019963</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:19:18.861731Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:19:18.860891Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:19:18.991387Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:19:18.990545Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:19:18.861699Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb516" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb516-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-315-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-49"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-315-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:19:45.108199Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:19:45.107485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:19:45.133530Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:19:45.132925Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:19:45.108173Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb517" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb517-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AW.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ax" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ax">Prompt AX</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:20:04.507414Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:20:04.506716Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:20:04.527938Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:20:04.527340Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:20:04.507385Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb518" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb518-1">promptAX_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
}) ['neutral', 'neutral', 'negative', 'negative', 'neutral', 'negative', 'positive', 'neutral', 'positive', 'negative']</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:20:10.091462Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:20:10.090750Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:25:27.191285Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:25:27.190228Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:20:10.091436Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb520" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb520-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAX_ds, promptJ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"4d221d9d4d0c4600a68af9640def59c3","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: positive, negative, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:25:27.198454Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:25:27.198174Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:25:27.204421Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:25:27.203540Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:25:27.198390Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb522" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb522-1">df[<span class="st" style="color: #20794D;">'responses'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>array(['neutral', 'positive', 'negative'], dtype=object)</code></pre>
</div>
</div>
<p>Aha! We finally improve on the overall accuracy of Prompt AA. This prompt yields a slightly higher accuracy that still rounds off to 80%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:25:27.209328Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:25:27.208741Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:25:27.217153Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:25:27.216291Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:25:27.209302Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb524" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb524-1">get_acc(df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>0.7962794918330308</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T14:25:17.853772Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T14:25:17.853150Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T14:25:18.029861Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T14:25:18.029273Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T14:25:17.853750Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb526" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb526-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-321-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-50"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index_files/figure-html/cell-321-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-10-24T23:28:23.698804Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-10-24T23:28:23.697946Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-10-24T23:28:23.720236Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-10-24T23:28:23.719380Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-10-24T23:28:23.698764Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb527" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb527-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-0.5B-Instruct_AX.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="running-inference-10-times-using-the-best-prompt" class="level2">
<h2 class="anchored" data-anchor-id="running-inference-10-times-using-the-best-prompt">Running Inference 10 Times Using the Best Prompt</h2>
<p>While 60-shot Prompt AX had a slightly higher accuracy (79.63%) I am going to pick the 16-Shot Prompt AA as my best prompt (79.48%) since it has less than a third of the examples, which translates to about a third of the tokens, thus leading to quicker response generation.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:24:58.367864Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:24:58.367297Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:24:58.373172Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:24:58.372462Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:24:58.367838Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb528" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb528-1"><span class="kw" style="color: #003B4F;">def</span> test_gen(examples):</span>
<span id="cb528-2">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb528-3">    </span>
<span id="cb528-4">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb528-5">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptJ.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb528-6">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb528-7">    </span>
<span id="cb528-8">    messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptJ.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'sentence'</span>])}]</span>
<span id="cb528-9">        </span>
<span id="cb528-10">    text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb528-11">        messages,</span>
<span id="cb528-12">        tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb528-13">        add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb528-14">    )</span>
<span id="cb528-15">    </span>
<span id="cb528-16">    model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb528-17"></span>
<span id="cb528-18">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb528-19">        model_inputs.input_ids,</span>
<span id="cb528-20">        max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb528-21">    )</span>
<span id="cb528-22">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb528-23">        output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb528-24">    ]</span>
<span id="cb528-25"></span>
<span id="cb528-26">    response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb528-27">    <span class="cf" style="color: #003B4F;">return</span> response</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:26:57.789368Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:26:57.788817Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:26:57.817121Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:26:57.816520Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:26:57.789348Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb529" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb529-1">promptAA_ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2246
}) ['negative', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'neutral', 'neutral', 'positive', 'positive']</code></pre>
</div>
</div>
<p>1 response generation takes 72ms. Running full dataset inference 10 times will take about 30 minutes.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T13:27:11.898558Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T13:27:11.897846Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T13:27:16.975223Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T13:27:16.974612Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T13:27:11.898534Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb531" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb531-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> test_gen(examples)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>72 ms ± 42.9 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T14:25:07.586952Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T14:25:07.586414Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T14:25:07.592898Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T14:25:07.592294Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T14:25:07.586932Z&quot;}" data-execution_count="35">
<details>
<summary>Show updated <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb534" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb534-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb534-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb534-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb534-4">    </span>
<span id="cb534-5">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb534-6">    </span>
<span id="cb534-7">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb534-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb534-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb534-10">    </span>
<span id="cb534-11">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb534-12">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb534-13">        </span>
<span id="cb534-14">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb534-15">            messages,</span>
<span id="cb534-16">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb534-17">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb534-18">        )</span>
<span id="cb534-19">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb534-20"></span>
<span id="cb534-21">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb534-22">            model_inputs.input_ids,</span>
<span id="cb534-23">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb534-24">        )</span>
<span id="cb534-25">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb534-26">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb534-27">        ]</span>
<span id="cb534-28"></span>
<span id="cb534-29">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb534-30">        responses.append(response)</span>
<span id="cb534-31">        </span>
<span id="cb534-32">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb534-33">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb534-34">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb534-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb534-36">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb534-37">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb534-38">    </span>
<span id="cb534-39">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T14:30:35.214749Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T14:30:35.214075Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T14:30:35.218795Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T14:30:35.217941Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T14:30:35.214728Z&quot;}" data-execution_count="38">
<details>
<summary>Show updated <code>get_ds</code> function</summary>
<div class="sourceCode cell-code" id="cb535" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb535-1"><span class="kw" style="color: #003B4F;">def</span> get_ds(n):</span>
<span id="cb535-2">    exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [random.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2263</span>) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb535-3">    prompt_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb535-4"></span>
<span id="cb535-5">    examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb535-6">    <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb535-7">        examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb535-8">    </span>
<span id="cb535-9">    <span class="cf" style="color: #003B4F;">return</span> prompt_ds, examples</span></code></pre></div>
</details>
</div>
<p>I didn’t store the exact 18 examples that I used the first time for Prompt AA, so I had to try different 18-Shot examples until I achieved an accuracy close to 79.48%. It took me about 20 tries, but I finally found a set of examples that broke the 79% threshold.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T14:54:34.566913Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T14:54:34.566209Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T14:56:40.474028Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T14:56:40.473384Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T14:54:34.566886Z&quot;}">
<div class="sourceCode cell-code" id="cb536" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb536-1"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">20</span>):</span>
<span id="cb536-2">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">18</span></span>
<span id="cb536-3">    ds, examples <span class="op" style="color: #5E5E5E;">=</span> get_ds(n)</span>
<span id="cb536-4">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(ds) <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">2264</span> <span class="op" style="color: #5E5E5E;">-</span> n: <span class="cf" style="color: #003B4F;">pass</span></span>
<span id="cb536-5">    df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(ds, promptJ, examples)</span>
<span id="cb536-6">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">round</span>(acc, <span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="fl" style="color: #AD0000;">0.79</span>: <span class="cf" style="color: #003B4F;">break</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T15:00:29.979940Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T15:00:29.979419Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T15:00:29.983830Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T15:00:29.983227Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T15:00:29.979918Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb537" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb537-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>0.815227070347284</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T15:02:22.448916Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T15:02:22.448661Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T15:02:22.453161Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T15:02:22.452663Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T15:02:22.448900Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb539" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb539-1">ds, <span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>(Dataset({
     features: ['sentence', 'label', 'label_text', '__index_level_0__'],
     num_rows: 2246
 }),
 18)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T15:02:31.195144Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T15:02:31.194651Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T15:23:40.781808Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T15:23:40.781140Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T15:02:31.195123Z&quot;}">
<div class="sourceCode cell-code" id="cb541" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb541-1">accs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb541-2"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb541-3">    df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(ds, promptJ, examples)</span>
<span id="cb541-4">    accs.append(acc)</span></code></pre></div>
</div>
<p>For this prompt, the overall accuracy ranges from 80.8% to 82.4%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-11-18T15:23:40.784481Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-11-18T15:23:40.784344Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-11-18T15:23:40.792597Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-11-18T15:23:40.792074Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-11-18T15:23:40.784466Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb542" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb542-1">pd.Series(accs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>count    10.000000
mean      0.816830
std       0.005397
min       0.807658
25%       0.814003
50%       0.817453
75%       0.819791
max       0.824577
dtype: float64</code></pre>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Takeaways from my Qwen2-0.5B experiments:</p>
<ul>
<li><strong>Example order matters</strong>: Testing 6 prompts with the same 3 examples in different orders yielded accuracies from 57% to 75%.<br>
</li>
<li><strong>Example selection matters</strong>: Recreating the performance of one of my best prompts (79.48% accuracy) took ~20 attempts, proving not all sets of examples perform equally.<br>
</li>
<li><strong>Result variance exists</strong>: Running a prompt 10 times produced accuracies ranging from 80.8% to 82.4%.</li>
</ul>
<p>Here are the results of Qwen2-0.5B in the context of the other models that I have experimented with:</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Qwen2-1.5B</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">86.10%</td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">96% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">**Qwen2-0.5B</td>
<td style="text-align: center;">17-Shot</td>
<td style="text-align: center;">79.48%</td>
<td style="text-align: center;">69% (206/300)</td>
<td style="text-align: center;">86% (1180/1380)</td>
<td style="text-align: center;">71% (400/567)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook:</p>
<table class="table">
<thead>
<tr class="header">
<th>Prompt</th>
<th>Strategy</th>
<th>Accuracy</th>
<th>Negative</th>
<th>Neutral</th>
<th>Positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>0-Shot</td>
<td>62.41%</td>
<td>91% (276/303)</td>
<td>53% (735/1391)</td>
<td>71% (402/570)</td>
</tr>
<tr class="even">
<td>B</td>
<td>0-Shot</td>
<td>47.84%</td>
<td>90% (274/303)</td>
<td>57% (789/1391)</td>
<td>4% (20/570)</td>
</tr>
<tr class="odd">
<td>C</td>
<td>0-Shot</td>
<td>40.46%</td>
<td>91% (276/303)</td>
<td>43% (594/1391)</td>
<td>8% (46/570)</td>
</tr>
<tr class="even">
<td>D</td>
<td>0-Shot</td>
<td>68.29%</td>
<td>79% (240/303)</td>
<td>61% (851/1391)</td>
<td>80% (455/570)</td>
</tr>
<tr class="odd">
<td>E</td>
<td>0-Shot</td>
<td>51.19%</td>
<td>97% (293/303)</td>
<td>28% (396/1391)</td>
<td>82% (470/570)</td>
</tr>
<tr class="even">
<td>F</td>
<td>0-Shot</td>
<td>48.19%</td>
<td>94% (286/303)</td>
<td>21% (287/1391)</td>
<td>91% (518/570)</td>
</tr>
<tr class="odd">
<td>G</td>
<td>0-Shot</td>
<td>61.09%</td>
<td>93% (282/303)</td>
<td>46% (646/1391)</td>
<td>80% (455/570)</td>
</tr>
<tr class="even">
<td>H</td>
<td>0-Shot</td>
<td>65.42%</td>
<td>85% (257/303)</td>
<td>57% (798/1391)</td>
<td>75% (426/570)</td>
</tr>
<tr class="odd">
<td>I</td>
<td>0-Shot</td>
<td>66.12%</td>
<td>81% (245/303)</td>
<td>58% (800/1391)</td>
<td>79% (452/570)</td>
</tr>
<tr class="even">
<td>J</td>
<td>3-Shot</td>
<td>70.94%</td>
<td>43% (131/302)</td>
<td>75% (1042/1390)</td>
<td>76% (431/569)</td>
</tr>
<tr class="odd">
<td>K</td>
<td>3-Shot</td>
<td>74.88%</td>
<td>67% (201/302)</td>
<td>75% (1043/1390)</td>
<td>79% (449/569)</td>
</tr>
<tr class="even">
<td>L</td>
<td>3-Shot</td>
<td>68.11%</td>
<td>49% (149/302)</td>
<td>65% (900/1390)</td>
<td>86% (491/569)</td>
</tr>
<tr class="odd">
<td>M</td>
<td>3-Shot</td>
<td>56.97%</td>
<td>49% (149/302)</td>
<td>45% (625/1390)</td>
<td>90% (514/569)</td>
</tr>
<tr class="even">
<td>N</td>
<td>3-Shot</td>
<td>73.95%</td>
<td>62% (188/302)</td>
<td>75% (1038/1390)</td>
<td>78% (446/569)</td>
</tr>
<tr class="odd">
<td>O</td>
<td>3-Shot</td>
<td>59.97%</td>
<td>65% (196/302)</td>
<td>46% (635/1390)</td>
<td>92% (525/569)</td>
</tr>
<tr class="even">
<td>P</td>
<td>6-Shot</td>
<td>63.91%</td>
<td>95% (289/303)</td>
<td>49% (678/1389)</td>
<td>84% (476/566)</td>
</tr>
<tr class="odd">
<td>Q</td>
<td>6-Shot</td>
<td>65.72%</td>
<td>69% (207/302)</td>
<td>55% (765/1389)</td>
<td>90% (512/567)</td>
</tr>
<tr class="even">
<td>R</td>
<td>6-Shot</td>
<td>64.84%</td>
<td>94% (285/303)</td>
<td>49% (686/1387)</td>
<td>87% (493/568)</td>
</tr>
<tr class="odd">
<td>S</td>
<td>6-Shot</td>
<td>62.98%</td>
<td>96% (292/303)</td>
<td>47% (656/1387)</td>
<td>83% (474/568)</td>
</tr>
<tr class="even">
<td>T</td>
<td>6-Shot</td>
<td>68.87%</td>
<td>51% (155/302)</td>
<td>70% (966/1387)</td>
<td>76% (434/569)</td>
</tr>
<tr class="odd">
<td>U</td>
<td>12-Shot</td>
<td>65.50%</td>
<td>53% (159/302)</td>
<td>59% (820/1386)</td>
<td>88% (496/564)</td>
</tr>
<tr class="even">
<td>V</td>
<td>12-Shot</td>
<td>73.22%</td>
<td>70% (209/300)</td>
<td>80% (1103/1386)</td>
<td>60% (337/566)</td>
</tr>
<tr class="odd">
<td>W</td>
<td>12-Shot</td>
<td>70.43%</td>
<td>82% (246/301)</td>
<td>66% (912/1384)</td>
<td>75% (428/567)</td>
</tr>
<tr class="even">
<td>X</td>
<td>12-Shot</td>
<td>76.60%</td>
<td>91% (270/298)</td>
<td>72% (1000/1386)</td>
<td>80% (455/568)</td>
</tr>
<tr class="odd">
<td>Y</td>
<td>12-Shot</td>
<td>72.56%</td>
<td>80% (243/303)</td>
<td>77% (1069/1381)</td>
<td>57% (322/568)</td>
</tr>
<tr class="even">
<td>Z</td>
<td>18-Shot</td>
<td>71.33%</td>
<td>50% (150/301)</td>
<td>75% (1036/1382)</td>
<td>74% (416/563)</td>
</tr>
<tr class="odd">
<td><strong>AA</strong></td>
<td><strong>17-Shot</strong></td>
<td><strong>79.48%</strong></td>
<td>69% (206/300)</td>
<td>86% (1180/1380)</td>
<td>71% (400/567)</td>
</tr>
<tr class="even">
<td>AB</td>
<td>18-Shot</td>
<td>74.22%</td>
<td>77% (229/299)</td>
<td>76% (1054/1381)</td>
<td>68% (384/566)</td>
</tr>
<tr class="odd">
<td>AC</td>
<td>18-Shot</td>
<td>68.57%</td>
<td>49% (148/302)</td>
<td>73% (1013/1380)</td>
<td>67% (379/564)</td>
</tr>
<tr class="even">
<td>AD</td>
<td>18-Shot</td>
<td>74.98%</td>
<td>89% (271/303)</td>
<td>76% (1052/1379)</td>
<td>64% (361/564)</td>
</tr>
<tr class="odd">
<td>AE</td>
<td>24-Shot</td>
<td>74.91%</td>
<td>61% (181/299)</td>
<td>92% (1267/1375)</td>
<td>41% (230/566)</td>
</tr>
<tr class="even">
<td>AF</td>
<td>24-Shot</td>
<td>73.08%</td>
<td>37% (112/302)</td>
<td>91% (1246/1375)</td>
<td>50% (279/563)</td>
</tr>
<tr class="odd">
<td>AG</td>
<td>24-Shot</td>
<td>75.00%</td>
<td>58% (173/300)</td>
<td>92% (1265/1375)</td>
<td>43% (242/565)</td>
</tr>
<tr class="even">
<td>AH</td>
<td>24-Shot</td>
<td>77.46%</td>
<td>78% (233/299)</td>
<td>84% (1153/1375)</td>
<td>62% (349/566)</td>
</tr>
<tr class="odd">
<td>AI</td>
<td>23-Shot</td>
<td>75.37%</td>
<td>48% (143/301)</td>
<td>92% (1266/1375)</td>
<td>50% (280/565)</td>
</tr>
<tr class="even">
<td>AJ</td>
<td>30-Shot</td>
<td>77.39%</td>
<td>58% (172/298)</td>
<td>94% (1284/1370)</td>
<td>48% (273/566)</td>
</tr>
<tr class="odd">
<td>AK</td>
<td>30-Shot</td>
<td>67.78%</td>
<td>63% (187/299)</td>
<td>61% (844/1375)</td>
<td>86% (483/560)</td>
</tr>
<tr class="even">
<td>AL</td>
<td>30-Shot</td>
<td>76.54%</td>
<td>58% (173/299)</td>
<td>86% (1185/1372)</td>
<td>63% (352/563)</td>
</tr>
<tr class="odd">
<td>AM</td>
<td>30-Shot</td>
<td>74.84%</td>
<td>82% (242/296)</td>
<td>72% (984/1376)</td>
<td>79% (446/562)</td>
</tr>
<tr class="even">
<td>AN</td>
<td>30-Shot</td>
<td>73.81%</td>
<td>51% (154/300)</td>
<td>77% (1052/1372)</td>
<td>79% (443/562)</td>
</tr>
<tr class="odd">
<td>AO</td>
<td>45-Shot</td>
<td>74.18%</td>
<td>54% (159/297)</td>
<td>76% (1034/1366)</td>
<td>81% (453/556)</td>
</tr>
<tr class="even">
<td>AP</td>
<td>45-Shot</td>
<td>78.73%</td>
<td>63% (186/296)</td>
<td>87% (1192/1365)</td>
<td>66% (369/558)</td>
</tr>
<tr class="odd">
<td>AQ</td>
<td>45-Shot</td>
<td>72.01%</td>
<td>17% (51/301)</td>
<td>89% (1210/1359)</td>
<td>60% (337/559)</td>
</tr>
<tr class="even">
<td>AR</td>
<td>45-Shot</td>
<td>73.86%</td>
<td>53% (157/297)</td>
<td>80% (1094/1364)</td>
<td>70% (388/558)</td>
</tr>
<tr class="odd">
<td>AS</td>
<td>45-Shot</td>
<td>74.94%</td>
<td>42% (125/297)</td>
<td>89% (1219/1363)</td>
<td>57% (319/559)</td>
</tr>
<tr class="even">
<td>AT</td>
<td>60-Shot</td>
<td>72.19%</td>
<td>47% (138/292)</td>
<td>78% (1055/1356)</td>
<td>72% (398/556)</td>
</tr>
<tr class="odd">
<td>AU</td>
<td>60-Shot</td>
<td>76.86%</td>
<td>43% (127/296)</td>
<td>91% (1237/1356)</td>
<td>60% (330/552)</td>
</tr>
<tr class="even">
<td>AV</td>
<td>60-Shot</td>
<td>75.45%</td>
<td>26% (79/299)</td>
<td>89% (1206/1352)</td>
<td>68% (378/553)</td>
</tr>
<tr class="odd">
<td>AW</td>
<td>60-Shot</td>
<td>74.46%</td>
<td>29% (88/299)</td>
<td>86% (1157/1349)</td>
<td>71% (396/556)</td>
</tr>
<tr class="even">
<td><strong>AX</strong></td>
<td><strong>60-Shot</strong></td>
<td><strong>79.63%</strong></td>
<td>62% (179/290)</td>
<td>94% (1275/1352)</td>
<td>54% (301/562)</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>python</category>
  <category>LLM</category>
  <category>TinySentiment</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-18-tinysentiment-Qwen2-0.5B-SC/index.html</guid>
  <pubDate>Mon, 18 Nov 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>WebGPU Puzzles: Walk through of Official Solutions</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>This file contains my walkthrough of the official WebGPU Puzzle solutions that I found challenging to understand and/or critical in helping me understand core concepts of GPU programming. You can find the Excel spreadsheet with my solution visualizations <a href="https://github.com/vishalbakshi/webgpupuzzles/blob/main/webgpupuzzles.xlsx">here</a>. The WebGPU puzzles are published by Answer.AI at https://gpupuzzles.answer.ai/puzzles.</p>
</section>
<section id="puzzle-7" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-7">Puzzle 7</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}}); // workgroup sizes
const twg = vec3({{totalWorkgroups}}); // total workgroups

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
        @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
        @builtin(workgroup_id) wid: vec3&lt;u32&gt;
        ) {

  let wgSize: u32 = wgs.x * wgs.y * wgs.z;
  let wg = wid.x + wid.y * twg.x;
  let i = lid.x + lid.y * wgs.x + wg * wgSize;
  out[i] = a[i] + 10;
}</code></pre>
<pre><code>___________________________________
Test case 1 

Workgroup Size       ( 2, 2, 1 )
Total Workgroups     ( 2, 2, 1 )

Input a  [  0  1  2  3  4  5  6  7  8 ]
Expected [ 10 11 12 13 14 15 16 17 18 ]

___________________________________
Test case 2 

Workgroup Size       ( 2, 2, 1 )
Total Workgroups     ( 3, 3, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ]
Expected [ 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ]</code></pre>
<p>I actually didn’t quite understand this solution until I revisited it while I was working on Puzzle #14 after I recalled that this solution dealt with situations where the number of threads in a workgroup was less than the number of positions in the input array.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Visualizing the official solution to puzzle #7 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_7.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing the official solution to puzzle #7 in Excel</figcaption><p></p>
</figure>
</div>
<p>I interpret <code>wg</code> as being the global “workgroup indexer” and <code>i</code> as the global “thread indexer.” In <code>wg</code>, the value of <code>wid.x</code> (0, 1, 2) is incremented by 1 as you go down <code>wid.y</code> by the term <code>wid.y * twg.x</code>. Similarly for <code>i</code>, <code>lid.y * wgs.x</code> increments the index by 1 as you go down <code>lid.y</code> while <code>wg * wgSize</code> increments the <code>i</code> by 4 as you traverse over the <code>wg</code> index of the workgroup. In this way, while no single workgroup can handle all 25 elements of the input array, spreading them out across 9 workgroups make this light work.</p>
</section>
<section id="puzzle-8" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-8">Puzzle 8</h2>
<p>This puzzle also had fewer threads per block than number of elements in the input array.</p>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

// workgroup sizes x, y, z
const wgs = vec3({{workgroupSize}});
// total workgroups x, y, z
const twg = vec3({{totalWorkgroups}}); 
// flat shared memory array
var&lt;workgroup&gt; smem: array&lt;f32, {{smemSize}}&gt;; 

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
        @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
        @builtin(workgroup_id) wid: vec3&lt;u32&gt;) {
  if (gid.x &lt; arrayLength(&amp;a)) {
    smem[lid.x] = a[gid.x];
  }
  workgroupBarrier(); 
  out[gid.x] = smem[lid.x] + 10;
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 4, 1, 1 )
Total Workgroups     ( 2, 1, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7 ]

Expected [ 10 11 12 13 14 15 16 17 ]

___________________________________
Test case 2

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 2, 1, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 ]

Expected [ 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ]</code></pre>
<p>The following lines load the input array into shared memory:</p>
<pre class="wgsl"><code>if (gid.x &lt; arrayLength(&amp;a)) {
    smem[lid.x] = a[gid.x];
}</code></pre>
<p>Visualizing Test Case 1: in each workgroup, since <code>lid.x</code> is (0, 1, 2, 3), only the first four elements of shared memory are filled with data. In the first workgroup, <code>gid.x</code> is (0, 1, 2, 3) and in the second workgroup, it’s (4, 5, 6, 7) so the corresponding elements of input array <code>a</code> are loaded into shared memory.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Visualizing test case 1 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
<p>The following line assigns to <code>out</code> in each workgroup the first four elements of <code>smem</code>:</p>
<pre class="wgsl"><code>out[gid.x] = smem[lid.x];</code></pre>
<p>Visualizing that in Excel for Test Case 1:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Visualizing test case 1 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
<p><code>lid.x</code> is always (0, 1, 2, 3) so the first four elements of <code>smem</code> are always indexed. <code>gid.x</code> is (0, 1, 2, 3) for <code>wid.x = 0</code> and (4, 5, 6, 7) for <code>wid.x = 1</code> so the first four elements of <code>out</code> are loaded with the first four elements of <code>smem</code> for the first workgroup and the second four elements of <code>out</code> are loaded with the first four elements of <code>smem</code> for the second workgroup. Adding 10 to <code>smem</code> values gives the expected output:</p>
<pre class="wgsl"><code>out[gid.x] = smem[lid.x];</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Visualizing test case 1 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
<p>Here are is the solution visualized for Test Case 2:</p>
<p>The full 8-element shared memory array is filled with values from the 16-element input array <code>a</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Visualizing test case 2 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 2 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
<p>Again <code>lid.x</code> is equal in both workgroups, so the first 8 elements of <code>smem</code> are loaded into the corresponding sequence of 8 elements in <code>out</code> using <code>gid.x</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Visualizing test case 2 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_5.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 2 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
<p>Adding 10 to the <code>smem</code> values yields the expected result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_8_6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Visualizing test case 2 for puzzle 8 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_8_6.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 2 for puzzle 8 in Excel</figcaption><p></p>
</figure>
</div>
</section>
<section id="puzzle-9" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-9">Puzzle 9</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}}); // workgroup sizes
const twg = vec3({{totalWorkgroups}}); // total workgroups
var&lt;workgroup&gt; smem: array&lt;f32, {{smemSize}}&gt;;

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
        @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
        @builtin(workgroup_id) wid: vec3&lt;u32&gt;
        ) {
    let i = lid.x + lid.y * wgs.x;
    smem[lid.x] = a[i];
    workgroupBarrier();
    out[lid.x] = smem[lid.x];
    if (lid.x &gt; 0) {
        out[lid.x] += smem[lid.x - 1];
        if (lid.x &gt; 1) {
            out[lid.x] += smem[lid.x - 2];
        }
    }
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7 ]
Expected [  0  1  3  6  9 12 15 18 ]

___________________________________
Test case 2

Workgroup Size       ( 10, 1, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 10, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 ]
Expected [  0  1  3  6  9 12 15 18 21 24 ]</code></pre>
<p>Since we have only one workgroup with size (8, 1, 1) in Test Case 1, <code>wgs.x</code> is <code>0</code> and <code>lid.y</code> is <code>0</code>, so <code>i</code> ends up being equal to <code>lid.x</code>. The shared memory array <code>smem</code> has the same size as the input array <code>a</code> (and the workgroup) so <code>smem[lid.x] = a[i]</code> loads in the entire array <code>a</code> into shared memory.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_9_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Visualizing test case 1 for puzzle 9 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_9_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 9 in Excel</figcaption><p></p>
</figure>
</div>
<p>Next, we load into <code>out</code> the entire array <code>smem</code> with the following line:</p>
<pre class="wgsl"><code>out[lid.x] = smem[lid.x];</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_9_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="Visualizing test case 1 for puzzle 9 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_9_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 9 in Excel</figcaption><p></p>
</figure>
</div>
<p>Our goal is to “sum together the last 3 positions of <code>a</code> and store it in <code>out</code>.” To do this, we first “slide” or “shift” <code>smem</code> one element to the right with the code <code>smem[lid.x - 1]</code>, and add it to <code>out</code>. We only do this for <code>i</code> values above <code>0</code> since we don’t want to index into <code>smem</code> with <code>-1</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_9_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="Visualizing test case 1 for puzzle 9 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_9_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 9 in Excel</figcaption><p></p>
</figure>
</div>
<p>We shift <code>smem</code> by 2 elements to the right (again only doing it for <code>i</code> values that won’t result in a negative index, <code>i &gt; 1</code>) and add that to <code>out</code> to get our expected result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_9_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="Visualizing test case 1 for puzzle 9 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_9_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 9 in Excel</figcaption><p></p>
</figure>
</div>
</section>
<section id="puzzle-10" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-10">Puzzle 10</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; b : array&lt;f32&gt;;
@group(0) @binding(2) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});
var&lt;workgroup&gt; smem: array&lt;f32, {{smemSize}}&gt;;

@compute @workgroup_size({{workgroupSize}})
fn  main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
         @builtin(global_invocation_id) gid: vec3&lt;u32&gt;) {
    
   // assumes wgs.x &gt; arrayLength(&amp;a);
   smem[lid.x]  = a[gid.x] * b[gid.x];
   
   workgroupBarrier();
             
    if (gid.x == 0) {
        for (var i: u32=0; i&lt;arrayLength(&amp;a); i+=1) {
            out[0] += smem[i];
        }
    }
}</code></pre>
<pre><code>___________________________________
Test case 1 

Workgroup Size       ( 4, 1, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 4, 1, 1 )

Input a  [  0  1  2  3 ]
Input b  [  0  1  2  3 ]

Expected [ 14 ]

___________________________________
Test case 2 

Workgroup Size       ( 5, 1, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 5, 1, 1 )

Input a  [  0  1  2  3  4 ]
Input b  [  0  1  2  3  4 ]

Expected [ 30 ]</code></pre>
<p>To take the dot product between two 1-D array, we need to take their cumulative element-wise sum. The official solution starts by loading these element-wise sums into shared memory with:</p>
<pre class="wgsl"><code>smem[lid.x]  = a[gid.x] * b[gid.x];</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_10_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="Visualizing test case 1 for puzzle 10 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_10_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 10 in Excel</figcaption><p></p>
</figure>
</div>
<p>After that, we simply iterate through the shared memory array and accumulate the sum with:</p>
<pre class="wgsl"><code>if (gid.x == 0) {
    for (var i: u32=0; i&lt;arrayLength(&amp;a); i+=1) {
        out[0] += smem[i];
    }
}</code></pre>
<p>IIUC, the guard <code>if (gid.x == 0)</code> prevents more than one thread from working on this task.</p>
</section>
<section id="puzzle-11" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-11">Puzzle 11</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; b : array&lt;f32&gt;;
@group(0) @binding(2) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});

var&lt;workgroup&gt; smemA: array&lt;f32, wgs.x * wgs.y * wgs.z + 4&gt;;
var&lt;workgroup&gt; smemB: array&lt;f32, 4&gt;;

@compute @workgroup_size({{workgroupSize}})
fn  main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
         @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
         @builtin(workgroup_id) wid: vec3&lt;u32&gt;
         ) {
    // Each workgroup is responsible computes total workgroup size
    // values of out and caches total workgroup size + 4 values
    // of a
    let wgSize: u32 = wgs.x; // assumes wgs.y = wgs.z = 1
    smemA[lid.x] = a[gid.x];
    if (lid.x &lt; 4) {
        smemB[lid.x] = b[lid.x];
        if (wid.x * wgSize + wgSize + lid.x &lt; arrayLength(&amp;a)) {
            smemA[wgSize + lid.x] = 
                a[wid.x * wgSize + wgSize + lid.x];
        } else {
            smemA[wgSize + lid.x] = 0.0;
        }
    }
    workgroupBarrier();
    var sum: f32 = 0.0;
    for (var i: u32 = 0; i &lt; 4; i += 1) {
        if (gid.x + i &lt; arrayLength(&amp;a)) {
            sum = sum + smemA[lid.x + i] * smemB[i];
        }
    }
    out[gid.x] = sum;
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 2, 1, 1 )
Shared Memory  Size  ( 12, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 ]
Input b  [  0  1  2  3 ]

Expected [ 14 20 26 32 38 44 50 56 62 68 74 80 41 14  0 ]

___________________________________
Test case 2

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 3, 1, 1 )
Shared Memory  Size  ( 12, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 ]
Input b  [  0  1  2  3 ]

Expected [ 14 20 26 32 38 44 50 56 62 68 74 80 86 92 98 50 17  0 ]</code></pre>
<p>In Test case 1, our workgroup has 8 threads, our shared memory arrays have 12 spots, and our input has 15 elements. We start by loading the first 8 elements of <code>a</code> into <code>smemA</code> with <code>lid.x</code> and <code>gid.x</code>:</p>
<pre class="wgsl"><code>smemA[lid.x] = a[gid.x];</code></pre>
<p>Here’s what that looks like in Excel. Each workgroup gets assigned its consecutive sequence of 8 elements:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>Next, to load in the remaining 4 elements of <code>a</code> into <code>smemA</code> and all four elements of <code>b</code> into <code>smemB</code> we run the following code:</p>
<pre class="wgsl"><code>if (lid.x &lt; 4) {
    smemB[lid.x] = b[lid.x];
    if (wid.x * wgSize + wgSize + lid.x &lt; arrayLength(&amp;a)) {
        smemA[wgSize + lid.x] = a[wid.x * wgSize + wgSize + lid.x];
    } else {
        smemA[wgSize + lid.x] = 0.0;
    }
}</code></pre>
<p>The guard <code>lid.x &lt; 4</code> ensures that we are only handling 4 elements at a time. The next line is simple, and loads the full contents of <code>b</code> into <code>smemB</code>:</p>
<pre class="wgsl"><code>smemB[lid.x] = b[lid.x];</code></pre>
<p>Now we get into some more tricky stuff to assign the correct set of 4 final elements to shared memory in the appropriate workgroup. Let’s first visulize the more involved index (where <code>wgSize</code> is <code>wgs.x</code> which is <code>8</code> in Test case 1):</p>
<pre class="wgsl"><code>wid.x * wgSize + wgSize + lid.x</code></pre>
<p>Visualizing this index in Excel for each workgroup, noting that it’s restricted to 4 elements (due to our guard <code>lid.x &lt; 4</code>) as it builds off <code>lid.x</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>The other index that we use is <code>wgSize + lid.x</code> which is more straightforward (it adds <code>8</code> to each of the four elements of <code>lid.x</code>):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>This index will be used to <em>extend</em> the index into the lat 4 elements of shared memory array past the <code>8</code> elements available in <code>lid.x</code> or <code>gid.x</code> for each workgroup with the following code:</p>
<pre class="wgsl"><code>if (wid.x * wgSize + wgSize + lid.x &lt; arrayLength(&amp;a)) {
    smemA[wgSize + lid.x] = a[wid.x * wgSize + wgSize + lid.x];
} else {
    smemA[wgSize + lid.x] = 0.0;
}</code></pre>
<p>For the first workgroup, the maximum value of <code>wid.x * wgSize + wgSize + lid.x</code> is less than <code>arrayLength(&amp;a)</code> so we load in the 9th to 12th elements of <code>a</code> into <code>smemA</code>. For the second workgroup, the maximum value of <code>wid.x * wgSize + wgSize + lid.x</code> is more than <code>arrayLength(&amp;a)</code> so we assign 0s:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>In this way, we have assigned a maximum of 12 elements of <code>a</code> into <code>smemA</code>, <em>extending</em> the available indexes <code>gid.x</code> and <code>lid.x</code> past their maximum of 8 elements using <code>wid.x</code> and <code>wgs.x</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_5.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>With our data loaded into shared memory arrays we can now go about performing 1-D convolution between <code>a</code> and <code>b</code> with the following code:</p>
<pre class="wgsl"><code>var sum: f32 = 0.0;
for (var i: u32 = 0; i &lt; 4; i += 1) {
    if (gid.x + i &lt; arrayLength(&amp;a)) {
        sum = sum + smemA[lid.x + i] * smemB[i];
    }
}
out[gid.x] = sum;</code></pre>
<p>Understanding this loop was a pivotal point in my understanding of parallelism. While we are iterating over <code>i</code> which is a 32-bit unsigned integer, we are performing 8 element-wise operations in each loop iteration at the same time (since we are using <code>lid.x</code> to index into <code>smemA</code>) in each workgroup (which is why we use <code>gid.x</code> to index into <code>out</code> to assign the correct value of <code>sum</code>).</p>
<p>What’s counterintuitive at first is that <code>sum</code> is a single <code>f32</code> 32-bit floating point number, but since we are using <code>lid.x</code> and <code>gid.x</code> it is being manipulated 16 different ways (8 threads across 2 workgroups). So although to me it initially <em>looked</em> like <code>sum</code> was behaving as an array, it’s not. The array-like behavior is the parallelism of the GPU.</p>
<p>The following line:</p>
<pre class="wgsl"><code>sum = sum + smemA[lid.x + i] * smemB[i];</code></pre>
<p>is visualized in Excel for the first workgroup as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_6.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>Note that in each iteration of the loop we are shifting <code>smemA</code> and <code>smemB</code> by 1 element to the left and taking the elementwise product (across 8 threads). From the individual thread’s perspective, it’s a product between two numbers, accumulating their sum over each loop iteration.</p>
<p>Here’s a visualization of the loop iterations in the second workgroup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_7.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
<p>After each loop is finished, we assign the resulting number to its corresponding location in <code>out</code> to get our final result:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_11_8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="Visualizing test case 1 for puzzle 11 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_11_8.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing test case 1 for puzzle 11 in Excel</figcaption><p></p>
</figure>
</div>
</section>
<section id="puzzle-12" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-12">Puzzle 12</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});
var&lt;workgroup&gt; smem: array&lt;f32, {{smemSize}}&gt;;

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
        @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
        @builtin(workgroup_id) wid: vec3&lt;u32&gt;) {
    smem[lid.x] = a[gid.x];
    workgroupBarrier();
    for (var skip: u32 = 1; skip &lt; wgs.x; skip = skip * 2) {
        if (lid.x % skip == 0 
            &amp;&amp; lid.x + skip &lt; wgs.x 
            &amp;&amp; gid.x + skip &lt; arrayLength(&amp;a)) {
            smem[lid.x] = smem[lid.x] + smem[lid.x + skip];
        }
        workgroupBarrier();
    }
    if (lid.x == 0) {
        out[wid.x] = smem[0];
    }
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7 ]
Expected [ 28 ]

___________________________________
Test case 2

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 2, 1, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  [  0  1  2  3  4  5  6  7  8  9 ]
Expected [ 28 17 ]</code></pre>
<p>In this puzzle we want to take the block-wise cumulative sum. For Test case 1, there is only 1 block (workgroup) so we want the sum of the full array, which is <code>28</code>. For Test case 2, we have two 8-thread blocks and a 10-element input array. The cumulative sum for the first block is the sum of the first 8 elements (<code>28</code>) and the cumulative sum for the second block is the sum of the next two elements (<code>17</code>).</p>
<p>The first line of the solution is simple: we want to load into shared memory the corresponding set of 8-elements from the input array:</p>
<pre class="wgsl"><code>smem[lid.x] = a[gid.x];</code></pre>
<p>Visualizing this in Excel for each workgroup:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_12_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="Visualizing puzzle 12 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_12_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 12 in Excel</figcaption><p></p>
</figure>
</div>
<p>The next chunk of code is quite involved—its goal is to find the cumulative sum of the elements stored in shared memory following certain guards:</p>
<pre class="wgsl"><code>for (var skip: u32 = 1; skip &lt; wgs.x; skip = skip * 2) {
    if (lid.x % skip == 0 
        &amp;&amp; lid.x + skip &lt; wgs.x 
        &amp;&amp; gid.x + skip &lt; arrayLength(&amp;a)) {
        smem[lid.x] = smem[lid.x] + smem[lid.x + skip];
    }
    workgroupBarrier();
}</code></pre>
<p>Here’s what that code looks visualized in Excel where each column of arrays corresponds to each iteration of the loop. The cells highlighted in green in each array are the elements which pass the guard conditions in the <code>if</code>-statement:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_12_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="Visualizing puzzle 12 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_12_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 12 in Excel</figcaption><p></p>
</figure>
</div>
<p>For <code>skip</code> = 1, the first six elements pass the guard conditions. In each case (<code>lid.x</code> of 0, 1, 2, 3, 4, 5), <code>lid.x % skip == 0</code> is true, <code>lid.x + skip &lt; wgs.x</code> is true, and <code>gid.x + skip &lt; arrayLength(&amp;a)</code> is true. For the seventh element (<code>lid.x = 7</code>):</p>
<ul>
<li><code>lid.x % skip == 0</code>: <code>7 % 1 == 0</code> is true</li>
<li><code>lid.x + skip &lt; wgs.x</code>: <code>7 + 1 &lt; 8</code> is false</li>
<li><code>gid.x + skip &lt; arrayLength(&amp;a)</code>: <code>7 + 1 &lt; 8</code> is false</li>
</ul>
<p>For <code>skip</code> = 2: only the 0th, 2nd and 4th element pass the guard conditions. While the 6th element does pass the first guard (<code>lid.x % skip == 0</code>: <code>6 % 2 == 0</code> is true) it fails the second two guards as <code>6 + 2</code> is not less than <code>wgs.x</code> or <code>arrayLength(&amp;a)</code>.</p>
<p>Finally for <code>skip</code> = 4, only the 0th element passes all guard conditions. The 4th element does pass the first condition (<code>lid.x % skip == 0</code>: <code>4 % 4 == 0</code> is true) but fails the second two guards as <code>4 + 4</code> is not less than <code>wgs.x</code> or <code>arrayLength(&amp;a)</code>.</p>
<p>For each <code>skip</code> we slide the elements over by <code>skip</code> and sum them to the previous iteration’s <code>smem</code>.</p>
<p>In Test case 2, we have the same prefix sum (<code>28</code>) for the first block. We also have a second block for which the prefix sum is much simpler since the <code>skip</code> value in only one iteration of the for loop passes all guard conditions.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_12_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="Visualizing puzzle 12 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_12_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 12 in Excel</figcaption><p></p>
</figure>
</div>
<p>For <code>skip</code> = 1:</p>
<ul>
<li><code>lid.x % skip == 0</code>: is true for all 7 elements.</li>
<li><code>lid.x + skip &lt; wgs.x</code>: is true for all 7 elements.</li>
<li><code>gid.x + skip &lt; arrayLength(&amp;a)</code>: <code>8 + 1 &lt; 10</code> is true <strong>only for the first element</strong>, so that’s the only sum that takes place (8 + 9 = 17).</li>
</ul>
<p>For <code>skip</code> = 2 and <code>skip</code> = 4:</p>
<ul>
<li><code>lid.x % skip == 0</code>: is true for some elements.</li>
<li><code>lid.x + skip &lt; wgs.x</code>: is true for some elements.</li>
<li><code>gid.x + skip &lt; arrayLength(&amp;a)</code>: is true <strong>for no element</strong>, therefore the code inside the if-condition never runs.</li>
</ul>
<p>Understanding the prefix sum algorithm took an unreasonable amount of time for me, and I’m still not completely comfortable, but the following visual did help solidify for me how it works. Green-highlighted cells are pairwise sums corresponding to the given <code>skip</code>. At the bottom I’ve listed out within which pairwise sums the given original array element is included.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_12_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24" title="Visualizing puzzle 12 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_12_4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 12 in Excel</figcaption><p></p>
</figure>
</div>
</section>
<section id="puzzle-13" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-13">Puzzle 13</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a : array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; out : array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});
var&lt;workgroup&gt; smem: array&lt;f32, {{smemSize}}&gt;;

const nRows = 4;

@compute @workgroup_size({{workgroupSize}})
fn main(@builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
        @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
        @builtin(workgroup_id) wid: vec3&lt;u32&gt;) {
    let nCols = arrayLength(&amp;a) / nRows;
    smem[lid.x] = a[wid.y * nCols + lid.x];
    workgroupBarrier();
    for (var skip: u32 = 1; lid.x + skip &lt; nCols; skip *= 2) {
        smem[lid.x] += smem[lid.x+skip];
    }
    
    if (lid.x % nCols == 0) {
        out[wid.y] = smem[0];
    }
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 1, 4, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  
        0    1    2    3    4    5  
        6    7    8    9   10   11  
       12   13   14   15   16   17  
       18   19   20   21   22   23

Expected [ 15 51 87 123 ]

___________________________________
Test case 2

Workgroup Size       ( 8, 1, 1 )
Total Workgroups     ( 1, 4, 1 )
Shared Memory  Size  ( 8, 1, 1 )

Input a  
        0    1    2    3  
        4    5    6    7  
        8    9   10   11  
       12   13   14   15

Expected [  6 22 38 54 ]</code></pre>
<p>The goal of this exercise is to find the sum of each “row” in the input array. I put “row” in quotation marks because the input array is actually 1-D, so we look at the example to determine how many rows and columns we want.</p>
<p>I’ll walk through Test case 1.</p>
<p>The number of rows is a constant 4:</p>
<pre class="wgsl"><code>const nRows = 4;</code></pre>
<p>The number of columns is the length of the array divided by the number of rows:</p>
<pre class="wgsl"><code>let nCols = arrayLength(&amp;a) / nRows;</code></pre>
<p>Each row of the input array is stored in a separate workgroup’s shared memory. This is achieved by multiplying <code>nCols</code> by <code>wid.y</code> before adding <code>lid.x</code>:</p>
<pre class="wgsl"><code>smem[lid.x] = a[wid.y * nCols + lid.x];</code></pre>
<p>Here’s what that index, <code>wid.y * nCols + lid.x</code>, looks like for each row:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><code>wid.y</code></th>
<th style="text-align: center;"><code>wid.y * nCols + lid.x</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>0</code></td>
<td style="text-align: center;"><code>0, 1, 2, 3, 4, 5</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>1</code></td>
<td style="text-align: center;"><code>6, 7, 8, 9, 10, 11</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>2</code></td>
<td style="text-align: center;"><code>12, 13, 14, 15, 16, 17</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>3</code></td>
<td style="text-align: center;"><code>18, 19, 20, 21, 22, 23</code></td>
</tr>
</tbody>
</table>
<p>Visualizing how, using the index <code>wid.y * nCols + lid.x</code>, we load the input array <code>a</code> into each workgroup’s shared memory <code>smem</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_13_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="Visualizing puzzle 13 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_13_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 13 in Excel</figcaption><p></p>
</figure>
</div>
<p>Next, similar to the previous puzzle’s prefix sum algorithm, we iterate through each row, accumulating the sum by iterating over array elements in increasing <code>skip</code> amounts:</p>
<pre class="wgsl"><code>for (var skip: u32 = 1; lid.x + skip &lt; nCols; skip *= 2) {
    smem[lid.x] += smem[lid.x+skip];
}</code></pre>
<p>Visualizing that for-loop in the first workgroup, in which we find the sum of the first row of <code>a</code> (highlighted in green):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_13_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26" title="Visualizing puzzle 13 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_13_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 13 in Excel</figcaption><p></p>
</figure>
</div>
<p>I’m not 100% sure why we don’t have guards in this puzzle as we did in Puzzle 12, but my guess is that we don’t need it here since the number of threads in the workgroup (8) is the same as the shared memory size (8).</p>
<p>Visualizing the for-loops that occur in the other three workgroups, one for each row of the input array with the final cumulative sum highlighted in green:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_13_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27" title="Visualizing puzzle 13 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_13_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 13 in Excel</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_13_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28" title="Visualizing puzzle 13 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_13_4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 13 in Excel</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_13_5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29" title="Visualizing puzzle 13 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_13_5.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 13 in Excel</figcaption><p></p>
</figure>
</div>
</section>
<section id="puzzle-14" class="level2">
<h2 class="anchored" data-anchor-id="puzzle-14">Puzzle 14</h2>
<pre class="wgsl"><code>@group(0) @binding(0) var&lt;storage, read_write&gt; a: array&lt;f32&gt;;
@group(0) @binding(1) var&lt;storage, read_write&gt; b: array&lt;f32&gt;;
@group(0) @binding(2) var&lt;storage, read_write&gt; output: array&lt;f32&gt;;

const wgs = vec3({{workgroupSize}});
const twg = vec3({{totalWorkgroups}});
const tileSize = vec3({{workgroupSize}});
var&lt;workgroup&gt; a_shared: array&lt;f32, 256&gt;;
var&lt;workgroup&gt; b_shared: array&lt;f32, 256&gt;;

@compute @workgroup_size({{workgroupSize}})
fn main(
  @builtin(local_invocation_id) lid: vec3&lt;u32&gt;,
  @builtin(global_invocation_id) gid: vec3&lt;u32&gt;,
  @builtin(workgroup_id) wid: vec3&lt;u32&gt;) {
    let N = u32(sqrt(f32(arrayLength(&amp;a))));
    let i = wid.x * wgs.x + lid.x;
    let j = wid.y * wgs.y + lid.y;
    let local_i = lid.x;
    let local_j = lid.y;

    var acc: f32 = 0.0;

    for (var k: u32 = 0u; k &lt; N; k = k + tileSize.x) {
      if (j &lt; N &amp;&amp; k + local_i &lt; N) {
        a_shared[local_j * tileSize.x + local_i] 
        = a[j * N + (k + local_i)];
      } else {
        a_shared[local_j * tileSize.x + local_i] = 0.0;
      }
      if (i &lt; N &amp;&amp; k + local_j &lt; N) {
        b_shared[local_j * tileSize.x + local_i] 
        = b[i + (k + local_j) * N];
      } else {
        b_shared[local_j * tileSize.x + local_i] = 0.0;
      }

      workgroupBarrier();

      let local_k_max = min(tileSize.x, N - k);
      for (var local_k: u32 = 0u; 
            local_k &lt; local_k_max; 
            local_k = local_k + 1u) {
        acc += a_shared[local_j * tileSize.x + local_k] 
          * b_shared[local_k * tileSize.x + local_i];
      }

      workgroupBarrier();
    }

    if (i &lt; N &amp;&amp; j &lt; N) {
      output[i + j * N] = acc;
    }
}</code></pre>
<pre><code>___________________________________
Test case 1

Workgroup Size       ( 3, 3, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 3, 3, 1 )

Input a  
        0    1  
        2    3

Input b  
        0    1  
        2    3

Expected 
        2    3  
        6   11

___________________________________
Test case 2

Workgroup Size       ( 1, 1, 1 )
Total Workgroups     ( 2, 2, 1 )
Shared Memory  Size  ( 3, 3, 1 )

Input a  
        0    1  
        2    3

Input b  
        0    1  
        2    3

Expected 
        2    3  
        6   11

___________________________________
Test case 3

Workgroup Size       ( 4, 4, 1 )
Total Workgroups     ( 1, 1, 1 )
Shared Memory  Size  ( 4, 4, 1 )

Input a  
        0    1    2  
        3    4    5  
        6    7    8

Input b  
        9   10   11  
       12   13   14  
       15   16   17

Expected 
       42   45   48  
      150  162  174  
      258  279  300

___________________________________
Test case 4

Workgroup Size       ( 2, 2, 1 )
Total Workgroups     ( 2, 2, 1 )
Shared Memory  Size  ( 2, 2, 1 )

Input a  
        0    1    2  
        3    4    5  
        6    7    8

Input b  
        9   10   11  
       12   13   14  
       15   16   17

Expected 
       42   45   48  
      150  162  174  
      258  279  300

___________________________________
Test case 5

Workgroup Size       ( 2, 2, 1 )
Total Workgroups     ( 2, 2, 1 )
Shared Memory  Size  ( 2, 2, 1 )

Input a  
        0    1    2    3  
        4    5    6    7  
        8    9   10   11  
       12   13   14   15

Input b  
        0    1    2    3  
        4    5    6    7  
        8    9   10   11  
       12   13   14   15

Expected 
       56   62   68   74  
      152  174  196  218  
      248  286  324  362  
      344  398  452  506</code></pre>
<p>Walking through this puzzle’s official solution was another pivotal point in my understanding of GPU parallelism. I’ll start with Test case 1.</p>
<p>There are three, what I call, “core indexes” that this solution establishes: <code>local_i</code>, <code>local_j</code> and <code>local_j * tileSize.x + local_i</code>. We can see that <code>local_i</code> indexes across rows while <code>local_j</code> indexes down columns. <code>local_j * tileSize.x + local_i</code> indexes the threads left-to-right and top-to-bottom.</p>
<pre class="wgsl"><code>let N = u32(sqrt(f32(arrayLength(&amp;a))));
let i = wid.x * wgs.x + lid.x;
let j = wid.y * wgs.y + lid.y;
let local_i = lid.x;
let local_j = lid.y;</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-30" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The indexes <code>i</code> and <code>j</code> (which we’ll look at shortly), because we have only 1 workgroup for Test case 1, are the same as <code>local_i</code> and <code>local_j</code>, respectively.</p>
<p>Let’s next tackle the code which loads input arrays <code>a</code> and <code>b</code> into shared memory <code>a_shared</code> and <code>b_shared</code>, respectively:</p>
<pre class="wgsl"><code>if (j &lt; N &amp;&amp; k + local_i &lt; N) {
    a_shared[local_j * tileSize.x + local_i] = a[j * N + (k + local_i)];
} else {
    a_shared[local_j * tileSize.x + local_i] = 0.0;
}

if (i &lt; N &amp;&amp; k + local_j &lt; N) {
    b_shared[local_j * tileSize.x + local_i] = b[i + (k + local_j) * N];
} else {
    b_shared[local_j * tileSize.x + local_i] = 0.0;
}</code></pre>
<p>Note that this code runs inside a for-loop:</p>
<pre class="wgsl"><code>for (var k: u32 = 0u; k &lt; N; k = k + tileSize.x) { ... }</code></pre>
<p>but since <code>N</code> is <code>2</code> and <code>tileSize.x</code> is <code>3</code> for this test case this outermost loop runs only once.</p>
<p>The visualization below is, at the highest level, broken into two boxes: one for <code>a_shared</code> (left) and one for <code>b_shared</code> (right).</p>
<pre class="wgsl"><code>if (j &lt; N &amp;&amp; k + local_i &lt; N) {
    a_shared[local_j * tileSize.x + local_i] = a[j * N + (k + local_i)];
} else {
    a_shared[local_j * tileSize.x + local_i] = 0.0;
}</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Let’s walk through <code>a_shared</code> first.</p>
<p>The cells highlighted in green are the threads that satisfy the guard condition <code>j &lt; N</code>. In this single iteration of the outermost loop, <code>k = 0</code>. The second condition in the guard is <code>k + local_i &lt; N</code>, the threads in the workgroup which satisfy this condition are highlighted in green. When combining the use of indexes <code>j</code> and <code>k + local_i</code> we see that the threads which satisfy the full condition <code>j &lt; N &amp;&amp; k + local_i &lt; N</code> are highlighted in green. There are four such threads and they are indexed 0, 1, 2, 3—these are used to index into <code>a</code> when assigning values to <code>a_shared</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The grid on the right shows the values of <code>a</code> that are assigned to <code>a_shared</code> at the indexes in the grid shown on the left:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-33" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Here’s a mapping of index to value for <code>a_shared</code>—this is key in understanding the next part of the code:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Index</th>
<th style="text-align: center;">Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">3</td>
</tr>
</tbody>
</table>
<p>We can now go into the inner-most loop:</p>
<pre class="wgsl"><code>let local_k_max = min(tileSize.x, N - k);
for (
        var local_k: u32 = 0u; 
        local_k &lt; local_k_max; 
        local_k = local_k + 1u
    ) {
        acc += a_shared[local_j * tileSize.x + local_k] * b_shared[local_k * tileSize.x + local_i];
}</code></pre>
<p><code>local_k_max</code> is <code>2</code> (<code>N - k</code>), so the loop iterates twice, as shown in the visualization below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_5.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Going left-to-right in each loop iterations:</p>
<ul>
<li><code>local_j * tileSize.x + local_k</code>: the index into <code>a_shared</code>.</li>
<li><code>local_k * tileSize.x + local_i</code>: the index into <code>b_shared</code>.</li>
<li><code>a_shared[local_j * tileSize.x + local_k]</code>: the values of <code>a_shared</code> used in the loop iteration.</li>
<li><code>b_shared[local_k * tileSize.x + local_i]</code>: the values of <code>b_shared</code> used in the loop iteration.</li>
<li><code>acc</code>: the element-wise product of <code>a_shared[local_j * tileSize.x + local_k]</code> and <code>b_shared[local_k * tileSize.x + local_i]</code>.</li>
</ul>
<p>Note that while <code>acc</code> looks like an array, it’s actually just a single floating point value (<code>var acc: f32 = 0.0;</code>) which has a different value in each workgroup thread. That is the power of indexing!</p>
<p>Looking at the matrix multiplication between <code>a</code> and <code>b</code> as we would do it by hand:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cleft%5B%5Cbegin%7Bmatrix%7D0%20&amp;%201%20%5C%202%20&amp;%203%5Cend%7Bmatrix%7D%5Cright%5D%20%5Ctimes%20%5Cleft%5B%5Cbegin%7Bmatrix%7D0%20&amp;%201%20%5C%202%20&amp;%203%5Cend%7Bmatrix%7D%5Cright%5D%20=%20%5Cleft%5B%5Cbegin%7Bmatrix%7D2%20&amp;%203%20%5C%206%20&amp;%2011%5Cend%7Bmatrix%7D%5Cright%5D"></p>
<p>The top-left value in the result (2) is the dot product between the first row of <code>a</code> and the first column of <code>b</code>. In our GPU-implementation, that dot product occurs across two loop iterations and different threads as shown in the purple-highlighted cells below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-35" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_6.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Let’s now take a look at test case 2.</p>
<p>Here are the constants and “core indexes” for this test case (same code, different organization than test case 1).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-36" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_7.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>For this test case, the outermost loop runs twice and each time the innermost loop runs once. Here’s the first iteration of the outermost loop:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-37" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_8.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>and here’s the second iteration of the outermost loop (with its single iteration of the innermost loop):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_9.png" class="lightbox" data-gallery="quarto-lightbox-gallery-38" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_9.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Note that the value of <code>acc</code> at the end of each outermost loop iteration is the same as test case 1 except that now, since we have 4 workgroups each with 1 thread, each value of the four values of <code>acc</code> in test case 2 are assigned to one workgroup each.</p>
<p>Let’s move on to test case 3, in which we now are performing matrix multiplication between two 3x3 matrices in a single workgroup, analogous to test case 1.</p>
<p>The constants and core indexes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_10.png" class="lightbox" data-gallery="quarto-lightbox-gallery-39" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_10.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The outermost loop, for this test case, runs only once. Here are the indexes used and values of <code>a_shared</code> and <code>b_shared</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_11.png" class="lightbox" data-gallery="quarto-lightbox-gallery-40" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_11.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p><code>local_k_max</code> is <code>3</code> so the innermost loop runs three times, with the final result highlighted in green:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_12.png" class="lightbox" data-gallery="quarto-lightbox-gallery-41" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_12.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Moving on to test case 4, which is unique so far in the sense that the number of threads per workgroup (2x2 = 4) is less than the number of elements in each matrix being multiplied (3x3 = 9). However, the core indexes and inner- and outermost loops still suffice.</p>
<p>The constants and core indexes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_13.png" class="lightbox" data-gallery="quarto-lightbox-gallery-42" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_13.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The outermost loop has two iterations. Here is the first iteration, in which the innermost loop runs twice:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_14.png" class="lightbox" data-gallery="quarto-lightbox-gallery-43" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_14.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>In the second-most iteration of the outermost loop, the innermost loop runs only once, note the final result highlighted in green:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_15.png" class="lightbox" data-gallery="quarto-lightbox-gallery-44" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_15.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Here’s a visualization of how the dot product of the first row of <code>a</code> (0, 1, 2) and the first column of <code>b</code> (9, 12, 15) accumulates through element-wise products across different loop iterations to yield the final result of <code>42</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_16.png" class="lightbox" data-gallery="quarto-lightbox-gallery-45" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_16.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The last test case is test case 5, in which the number of available threads (16) matches the number of elements in each input array (16).</p>
<p>The constants and core indexes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_17.png" class="lightbox" data-gallery="quarto-lightbox-gallery-46" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_17.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>The outermost loop runs twice and each time the innermost loop runs twice as well. Here’s the first iteration of the outermost loop:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_18.png" class="lightbox" data-gallery="quarto-lightbox-gallery-47" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_18.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Here is the second iteration of the outermost loop (the inner loop runs twice). Note the final result highlighted in green, uses up all threads:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_19.png" class="lightbox" data-gallery="quarto-lightbox-gallery-48" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_19.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>Here I visualize the dot product between the first row of <code>a</code> (0, 1, 2, 3) and the first column of <code>b</code> (0, 4, 8, 12) to yield the result <code>56</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="screenshots/solution_14_20.png" class="lightbox" data-gallery="quarto-lightbox-gallery-49" title="Visualizing puzzle 14 in Excel"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_14_20.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Visualizing puzzle 14 in Excel</figcaption><p></p>
</figure>
</div>
<p>That’s a wrap for the official solutions’ walk through! You can find the Excel spreadsheet <a href="https://github.com/vishalbakshi/webgpupuzzles/blob/main/webgpupuzzles.xlsx">here</a>.</p>


</section>

 ]]></description>
  <category>AnswerAI</category>
  <category>WebGPU</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/index.html</guid>
  <pubDate>Sun, 17 Nov 2024 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-11-17-webgpupuzzles/screenshots/solution_7.png" medium="image" type="image/png" height="50" width="144"/>
</item>
<item>
  <title>Training Textual Inversion Embeddings on Some Samurai Jack Drawings</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In Lesson 9 of the fastai course (Part 2) we are introduced to the concept of <em>textual inversion</em>, where you train an embedding on a new set of images the model hasn’t seen before, and then use that embedding during inference to have the model adapt its style (or object) in the generated image. To get some experience with training and inference, I decided to train a textual inversion embeddings on six pencil/pen drawings I made of one of my favorite childhood cartoons: Samurai Jack.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="drawings.jpg" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Samurai Jack pencil/pen drawings"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/drawings.jpg" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Samurai Jack pencil/pen drawings</figcaption><p></p>
</figure>
</div>
<p>I have uploaded the trained embeddings to Huggingface: <a href="https://huggingface.co/sd-concepts-library/samurai-jack">sd-concepts-library/samurai-jack</a>. I have created <a href="https://colab.research.google.com/drive/1UXrBTMM4DkBijETN-_tRV5cQ6kE_Yy5G?usp=sharing">this minimal Colab demo</a> for inference.</p>
</section>
<section id="version-1-initial-training" class="level2">
<h2 class="anchored" data-anchor-id="version-1-initial-training">Version 1: Initial Training</h2>
<p>I used the Huggingface-provided <a href="https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/sd_textual_inversion_training.ipynb">notebook</a> to train my textual inversion embeddings.</p>
<p>I used the default hyperparameters for the first version of the embeddings I trained, which took about 45 minutes to train with a Free-A4000 on Paperspace:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">hyperparameters <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb1-2">    <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">5e-04</span>,</span>
<span id="cb1-3">    <span class="st" style="color: #20794D;">"scale_lr"</span>: <span class="va" style="color: #111111;">True</span>,</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;">"max_train_steps"</span>: <span class="dv" style="color: #AD0000;">2000</span>,</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;">"save_steps"</span>: <span class="dv" style="color: #AD0000;">250</span>,</span>
<span id="cb1-6">    <span class="st" style="color: #20794D;">"train_batch_size"</span>: <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb1-7">    <span class="st" style="color: #20794D;">"gradient_accumulation_steps"</span>: <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-8">    <span class="st" style="color: #20794D;">"gradient_checkpointing"</span>: <span class="va" style="color: #111111;">True</span>,</span>
<span id="cb1-9">    <span class="st" style="color: #20794D;">"mixed_precision"</span>: <span class="st" style="color: #20794D;">"fp16"</span>,</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb1-11">    <span class="st" style="color: #20794D;">"output_dir"</span>: <span class="st" style="color: #20794D;">"sd-concept-output"</span></span>
<span id="cb1-12">}</span></code></pre></div>
<p>Here are some images I generated using the trained embeddings with the prompts displayed in the caption:</p>
<section id="inference-steps" class="level3">
<h3 class="anchored" data-anchor-id="inference-steps">30 Inference Steps</h3>
<p>The prompt corresponding to the image is listed below it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-man-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="prompt: “a man in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-man-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a man in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-woman-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="prompt: “a woman in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-woman-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a woman in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-person-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="prompt: “a person in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-person-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a person in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-cat-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="prompt: “a cat in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-cat-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a cat in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="prompt: “in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="sj-only-v1-30.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="prompt: “<samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/sj-only-v1-30.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “&lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
</section>
<section id="inference-steps-1" class="level3">
<h3 class="anchored" data-anchor-id="inference-steps-1">50 Inference Steps</h3>
<p>The prompt corresponding to the image is listed below it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-man-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9" title="prompt: “a man in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-man-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a man in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-woman-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10" title="prompt: “a woman in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-woman-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a woman in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-person-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11" title="prompt: “a person in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-person-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a person in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-cat-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12" title="prompt: “a cat in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-cat-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a cat in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14" title="prompt: “in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="sj-only-v1-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15" title="prompt: “<samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/sj-only-v1-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “&lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
</section>
<section id="reflecting-on-version-1" class="level3">
<h3 class="anchored" data-anchor-id="reflecting-on-version-1">Reflecting on Version 1</h3>
<p>The trained embeddings (with the associated token <code>\&lt;samurai-jack\&gt;</code>) have clearly learned features related to my original drawings. The generated images have similar clothing and weapons. However, at both 30 and 50 inference steps, the style of the generated images doesn’t really resemble the style I drew the source drawings with (pencil/pen sketch). Additionally, the generated images have color, whereas my drawings were grayscale. I do like the generated images for the cat and mouse prompts. Finally, there’s something stereotypical about the generated images which bothers me—it’s almost like the model has detected that the trained embeddings represent japanese art and it has drawn upon whatever training data aligns with that.</p>
</section>
</section>
<section id="version-2-longer-training" class="level2">
<h2 class="anchored" data-anchor-id="version-2-longer-training">Version 2: Longer Training</h2>
<p>I provided my code and 5 generated images to Claude, asking it for feedback on what hyperparameters I could try to improve my embeddings. It suggested to increase the number of training steps, batch size and gradient accumulation steps, and lower the learning rate to yield a training that learned more details from my input images. While I couldn’t increase the batch size without getting an OOM error, I applied the rest of its suggestions in my training script:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">hyperparameters <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb2-2">    <span class="st" style="color: #20794D;">"learning_rate"</span>: <span class="fl" style="color: #AD0000;">1e-04</span>,</span>
<span id="cb2-3">    <span class="st" style="color: #20794D;">"scale_lr"</span>: <span class="va" style="color: #111111;">True</span>,</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;">"max_train_steps"</span>: <span class="dv" style="color: #AD0000;">4000</span>,</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;">"save_steps"</span>: <span class="dv" style="color: #AD0000;">2000</span>,</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;">"train_batch_size"</span>: <span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;">"gradient_accumulation_steps"</span>: <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;">"gradient_checkpointing"</span>: <span class="va" style="color: #111111;">True</span>,</span>
<span id="cb2-9">    <span class="st" style="color: #20794D;">"mixed_precision"</span>: <span class="st" style="color: #20794D;">"fp16"</span>,</span>
<span id="cb2-10">    <span class="st" style="color: #20794D;">"seed"</span>: <span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb2-11">    <span class="st" style="color: #20794D;">"output_dir"</span>: <span class="st" style="color: #20794D;">"sd-concept-output-2"</span></span>
<span id="cb2-12">}</span></code></pre></div>
<p>The resulting training took about 6 hours to run (with seconds to spare before Paperspace’s auto-shutdown!).</p>
<p>Here are some images I generated using the trained embeddings with the prompts displayed in the caption. Note that I only used 50 inference steps as I like the resulting generations more than the 30-step ones.</p>
<section id="inference-steps-2" class="level3">
<h3 class="anchored" data-anchor-id="inference-steps-2">50 Inference Steps</h3>
<p>The prompt corresponding to the image is listed below it.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-man-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16" title="prompt: “a man in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-man-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a man in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-woman-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17" title="prompt: “a woman in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-woman-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a woman in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-person-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18" title="prompt: “a person in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-person-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a person in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-cat-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19" title="prompt: “a cat in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-cat-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a cat in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21" title="prompt: “in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="sj-only-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22" title="prompt: “<samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/sj-only-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “&lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
</section>
<section id="reflecting-on-version-2" class="level3">
<h3 class="anchored" data-anchor-id="reflecting-on-version-2">Reflecting on Version 2</h3>
<p>While the image generations using this embeddings are more abstract, I find them better quality and more similar to the original style of my drawings. The following prompts generated more pencil/pen-sketch styled generations:</p>
<ul>
<li>“a man in the style of &lt;samurai-jack&gt;”</li>
<li>“a woman in the style of &lt;samurai-jack&gt;”</li>
<li>“a person in the style of &lt;samurai-jack&gt;”</li>
<li>“in the style of &lt;samurai-jack&gt;”</li>
</ul>
<p>While the generated image for the prompt <code>"\&lt;samurai-jack\&gt;"</code> looks nothing like my original drawings, I do find them very beautiful.</p>
<p>There were still some “stereotypical” features in some of the generated outputs. For example, the following images contained a red spot (I’m not an art historian but I recall seeing similar red spots/marks/seals in japanese paintings)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-cat-v2-50-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23" title="prompt: “a cat in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-cat-v2-50-2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a cat in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<p>These red spots were more abstract in some of the generations:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<p>Additionally, some of the generations contained unsolicited language-like characters:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-cartoon-man-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25" title="prompt: “a cartoon man in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-cartoon-man-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a cartoon man in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="v2-50-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26" title="prompt: “in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/v2-50-2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>There is much I haven’t explored in this experiment, for example, using my input drawings to train an “object” to see how that fares during inference, and of course, trying different hyperparameters. That being said, I’m happy that what I attempted at least worked! I found many of the generated images pleasant to look at, as the pencil+pen-sketch style was captured quite well by my version 2 embedddings.</p>
<p>I’ll end this post with some of the other prompt/generation pairs that I found interesting/beautiful. The prompt corresponding to the image is listed below it:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="an-african-gray-parrot-swordfighting-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27" title="prompt: “an african gray swordfighting in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/an-african-gray-parrot-swordfighting-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “an african gray swordfighting in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v2-50-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v2-50-2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v2-50-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v2-50-3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-mouse-v2-50-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-30" title="prompt: “a mouse in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-mouse-v2-50-4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a mouse in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-man-fighting-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31" title="prompt: “a man fighting in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-man-fighting-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a man fighting in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-drawing-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32" title="prompt: “a drawing in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-drawing-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a drawing in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-dog-v2-50.png" class="lightbox" data-gallery="quarto-lightbox-gallery-33" title="prompt: “a dog in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-dog-v2-50.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a dog in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="a-dog-v2-50-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34" title="prompt: “a dog in the style of <samurai-jack>”"><img src="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/a-dog-v2-50-2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">prompt: “a dog in the style of &lt;samurai-jack&gt;”</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>stable diffusion</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/index.html</guid>
  <pubDate>Wed, 13 Nov 2024 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-11-13-textual-inversion/drawings.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Comparing Cosine Similarity Between Embeddings of Semantically Similar and Dissimilar Texts with Varying Punctuation</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-11-08-punctuation-cosine-similarity/index.html</link>
  <description><![CDATA[ 



<div class="cell">
<details>
<summary>Show pip install and imports</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install sentence<span class="op" style="color: #5E5E5E;">-</span>transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sentence_transformers <span class="im" style="color: #00769E;">import</span> SentenceTransformer</span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I was reading the ColBERT paper as part of a fastai study group and it mentions the following:</p>
<blockquote class="blockquote">
<p>After passing this input sequence through BERT and the subsequent linear layer, the document encoder filters out the embeddings corresponding to punctuation symbols, determined via a pre-defined list. This filtering is meant to reduce the number of embeddings per document, as we hypothesize that (even contextualized) embeddings of punctuation are unnecessary for effectiveness.</p>
</blockquote>
<p>I’m not going to understand (or test) their hypothesis in full in this notebook but I am doing a tiny experiment to see how punctuation changes translate to embedding changes.</p>
<p>Starting with a smaller model:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">emb_model <span class="op" style="color: #5E5E5E;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;">"BAAI/bge-small-en-v1.5"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>I asked Claude for some examples of sentences where a comma would change its meaning and it gave me the following pair which I’m expanding upon in this notebook:</p>
<blockquote class="blockquote">
<p>“The woman said the judge is dishonest”</p>
<p>“The woman, said the judge, is dishonest”</p>
</blockquote>
<p>In the first sentence, the woman is saying that the judge is dishonest. In the second sentence by adding commas the meaning changes.</p>
<p>I’ve also added some variants of the sentence using different punctuation.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">d1 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The woman said the judge is dishonest"</span></span>
<span id="cb3-2">d2 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The woman, said the judge, is dishonest"</span></span>
<span id="cb3-3">d3 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The woman said: the judge is dishonest"</span></span>
<span id="cb3-4">d4 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'The woman said: "the judge is dishonest"'</span></span>
<span id="cb3-5">d5 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'The judge said: "the woman is dishonest"'</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">q <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Is the woman or the judge dishonest?"</span></span>
<span id="cb3-8">s1 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The woman is dishonest"</span></span>
<span id="cb3-9">s2 <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"The judge is dishonest"</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">d1_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d1, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-12">d2_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d2, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-13">d3_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d3, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-14">d4_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d4, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-15">d5_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d5, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-16"></span>
<span id="cb3-17">q_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(q, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-18">s1_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(s1, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-19">s2_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(s2, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>The most similar text to the question <em>“Is the woman or the judge dishonest?”</em>, by cosine similarity, is <em>“The woman, said the judge, is dishonest”</em>. The least similar is <em>‘The woman said: “the judge is dishonest”’</em>. My guess is that the additional punctuation (<code>:</code> and <code>"</code>) causes this dissimilarity.</p>
<pre><code>q = "Is the woman or the judge dishonest?"</code></pre>
<div class="cell" data-outputid="f3c16173-d0c3-4b5f-f6ca-fa33bb918b1b" data-execution_count="16">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">(</span>
<span id="cb5-2">    F.cosine_similarity(q_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb5-3">    F.cosine_similarity(q_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb5-4">    F.cosine_similarity(q_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb5-5">    F.cosine_similarity(q_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb5-6">    F.cosine_similarity(q_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb5-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(tensor(0.9355),
 tensor(0.9292),
 tensor(0.9170),
 tensor(0.9149),
 tensor(0.8996))</code></pre>
</div>
</div>
<p>The text</p>
<blockquote class="blockquote">
<p>The woman is dishonest</p>
</blockquote>
<p>is most similar by cosine similarity to the text:</p>
<blockquote class="blockquote">
<p>The woman, said the judge, is dishonest</p>
</blockquote>
<p>That makes sense. However, <em>“The woman is dishonest”</em> has a lower cosine similarity with the semantically similar <em>‘The judge said: “the woman is dishonest”’</em> (<code>0.8561</code>) than the semantically dissimilar <em>“The woman said the judge is dishonest”</em> (<code>0.8631</code>).</p>
<pre><code>s1 = "The woman is dishonest"</code></pre>
<div class="cell" data-outputid="6c95783d-ad14-467e-d96a-b3013eaccdab" data-execution_count="20">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">res <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(</span>
<span id="cb8-2">        [</span>
<span id="cb8-3">            F.cosine_similarity(s1_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb8-4">            F.cosine_similarity(s1_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb8-5">            F.cosine_similarity(s1_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb8-6">            F.cosine_similarity(s1_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb8-7">            F.cosine_similarity(s1_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb8-8">        ]</span>
<span id="cb8-9">    )</span>
<span id="cb8-10"></span>
<span id="cb8-11">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>tensor([0.8812, 0.8631, 0.8561, 0.8502, 0.8383])</code></pre>
</div>
</div>
<div class="cell" data-outputid="2545110c-e9c8-4e57-d798-fedd02132644" data-execution_count="21">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">torch.median(res)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor(0.8561)</code></pre>
</div>
</div>
<p>For the following text:</p>
<pre><code>s2 = "The judge is dishonest"</code></pre>
<p>The most similar, by cosine similarity, is <em>“The woman, said the judge, is dishonest”</em> which is semantically dissimilar.</p>
<div class="cell" data-outputid="e03cd236-3f1b-491a-d452-31661fb6ddec" data-execution_count="24">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">res <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(</span>
<span id="cb13-2">        [</span>
<span id="cb13-3">          F.cosine_similarity(s2_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb13-4">          F.cosine_similarity(s2_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb13-5">          F.cosine_similarity(s2_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb13-6">          F.cosine_similarity(s2_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>),  <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb13-7">          F.cosine_similarity(s2_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb13-8">        ]</span>
<span id="cb13-9">    )</span>
<span id="cb13-10">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>tensor([0.9208, 0.9194, 0.9102, 0.8969, 0.8907])</code></pre>
</div>
</div>
<div class="cell" data-outputid="556b37d9-b17b-4379-911f-2501ec04c668" data-execution_count="25">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">torch.median(res)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>tensor(0.9102)</code></pre>
</div>
</div>
<p>Trying a bigger model that ranks higher on the MTEB leaderboard:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">emb_model <span class="op" style="color: #5E5E5E;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;">"dunzhang/stella_en_1.5B_v5"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">d1_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d1, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-2">d2_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d2, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-3">d3_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d3, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-4">d4_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d4, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-5">d5_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(d5, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">q_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(q, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-8">s1_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(s1, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-9">s2_emb <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(s2, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>For this model, for this text:</p>
<pre><code>q = "Is the woman or the judge dishonest?"</code></pre>
<p>the closest text by cosine similarity is <em>“The woman said: the judge is dishonest”</em>.</p>
<div class="cell" data-outputid="02cb77c7-70f4-4f98-a13c-6ec834aa2707" data-execution_count="28">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">(</span>
<span id="cb20-2">    F.cosine_similarity(q_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb20-3">    F.cosine_similarity(q_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb20-4">    F.cosine_similarity(q_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb20-5">    F.cosine_similarity(q_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb20-6">    F.cosine_similarity(q_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>),  <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb20-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>(tensor(0.8180),
 tensor(0.8175),
 tensor(0.7875),
 tensor(0.7849),
 tensor(0.7731))</code></pre>
</div>
</div>
<p>For the following text:</p>
<pre><code>s1 = "The woman is dishonest"</code></pre>
<p>the most similar text, by cosine similarity, is <em>“The woman said the judge is dishonest”</em> which is semantically dissimilar.</p>
<div class="cell" data-outputid="292900c4-0195-471a-a223-131bd3bed800" data-execution_count="29">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">res <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(</span>
<span id="cb23-2">        [</span>
<span id="cb23-3">            F.cosine_similarity(s1_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb23-4">            F.cosine_similarity(s1_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb23-5">            F.cosine_similarity(s1_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb23-6">            F.cosine_similarity(s1_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb23-7">            F.cosine_similarity(s1_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb23-8">        ]</span>
<span id="cb23-9">    )</span>
<span id="cb23-10"></span>
<span id="cb23-11">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([0.9738, 0.9461, 0.9042, 0.8714, 0.8577])</code></pre>
</div>
</div>
<div class="cell" data-outputid="a8bc2af1-dd10-4607-a2f7-f40fa795bc91" data-execution_count="30">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">torch.median(res)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor(0.9042)</code></pre>
</div>
</div>
<p>Finally, for the following text:</p>
<pre><code>s2 = "The judge is dishonest"</code></pre>
<p>the most similar text, by cosine similarity, is <em>“The woman said the judge is dishonest”</em> which is semantically similar. The second-most similar by cosine similarity text <em>“The woman said: the judge is dishonest”</em> is also semantically similar. However, the semantically similar <em>‘The woman said: “the judge is dishonest”’</em> has a lower cosine similarity than the semantically dissimilar <em>“The woman, said the judge, is dishonest”</em>. Whew!</p>
<div class="cell" data-outputid="ee81ef11-8462-4b11-931e-54c350fb5e8c" data-execution_count="31">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">res <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(</span>
<span id="cb28-2">        [</span>
<span id="cb28-3">          F.cosine_similarity(s2_emb, d1_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said the judge is dishonest"</span></span>
<span id="cb28-4">          F.cosine_similarity(s2_emb, d3_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman said: the judge is dishonest"</span></span>
<span id="cb28-5">          F.cosine_similarity(s2_emb, d2_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># "The woman, said the judge, is dishonest"</span></span>
<span id="cb28-6">          F.cosine_similarity(s2_emb, d4_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>), <span class="co" style="color: #5E5E5E;"># 'The woman said: "the judge is dishonest"'</span></span>
<span id="cb28-7">          F.cosine_similarity(s2_emb, d5_emb, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>),  <span class="co" style="color: #5E5E5E;"># 'The judge said: "the woman is dishonest"'</span></span>
<span id="cb28-8">        ]</span>
<span id="cb28-9">    )</span>
<span id="cb28-10">res</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>tensor([0.9763, 0.9507, 0.9107, 0.8791, 0.8642])</code></pre>
</div>
</div>
<div class="cell" data-outputid="f662f96d-d37f-4daf-ea43-51a5c609ebc2" data-execution_count="32">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">torch.median(res)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>tensor(0.9107)</code></pre>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>I’m not going to make any conclusions about the relationship between punctuation, embeddings and cosine similarity, but I’ll say that this tiny experiment has left me with more questions than answers.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>RAG</category>
  <category>information retrieval</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-11-08-punctuation-cosine-similarity/index.html</guid>
  <pubDate>Fri, 08 Nov 2024 08:00:00 GMT</pubDate>
</item>
<item>
  <title>Establishing a Semantic Search (Embedding Cosine Similarity) Baseline for My fastbookRAG Project</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This notebook is a part of <a href="https://vishalbakshi.github.io/blog/#category=fastbookRAG">series of blog posts</a> for a project I’m calling fastbookRAG where I’m trying to answer questions from the <a href="https://github.com/fastai/fastbook/tree/master">fastbook</a> end-of-chapter Questionnaires using the following pipeline:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="fastbookRAG diagram" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">fastbookRAG diagram</figcaption><p></p>
</figure>
</div>
<p>This notebook establishes a baseline using semantic search (Cosine Similarity) for retrieval on chunks of the fastbook chapters covered in <a href="https://course.fast.ai/">Part 1 of the fastai course</a> (1, 2, 4, 8, 9, 10, and 13).</p>
<p>The evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<p>The goal is to retrieve the context necessary to answer all questions. Currently, I manually assess answers, a role that will eventually be performed by LLMs in the final pipeline.</p>
</section>
<section id="summary-of-results" class="level2">
<h2 class="anchored" data-anchor-id="summary-of-results">Summary of Results</h2>
<p>Here are the results from my experiments in this notebook—in general, the best performing semantic search method (80.31% Answer Rate overall) was retrieving the top-5 (by Cosine Similarity) 3-paragraph chunks:</p>
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">CS_A (Top-1 1p)</th>
<th style="text-align: center;">CS_B (Top-3 1p)</th>
<th style="text-align: center;">CS_C (Top-5 1p)</th>
<th style="text-align: center;">CS_D (Top-1 3p)</th>
<th style="text-align: center;">CS_E (Top-3 3p)</th>
<th style="text-align: center;">CS_F (Top-5 3p)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">40% (12/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">46.67% (14/30)</td>
<td style="text-align: center;">80% (24/30)</td>
<td style="text-align: center;">90% (27/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">26.92% (7/26)</td>
<td style="text-align: center;">61.54% (16/26)</td>
<td style="text-align: center;">69.23% (18/26)</td>
<td style="text-align: center;">53.85% (14/26)</td>
<td style="text-align: center;">80.77% (21/26)</td>
<td style="text-align: center;">84.62% (22/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">29.03% (9/31)</td>
<td style="text-align: center;">54.84% (17/31)</td>
<td style="text-align: center;">64.52% (20/31)</td>
<td style="text-align: center;">25.81% (8/31)</td>
<td style="text-align: center;">67.74% (21/31)</td>
<td style="text-align: center;">80.65% (25/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">17.39% (4/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">47.83% (11/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">73.91% (17/23)</td>
<td style="text-align: center;">91.30% (21/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">28.57% (8/28)</td>
<td style="text-align: center;">46.43% (13/28)</td>
<td style="text-align: center;">53.57% (15/28)</td>
<td style="text-align: center;">42.86% (12/28)</td>
<td style="text-align: center;">57.14% (16/28)</td>
<td style="text-align: center;">75% (21/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">42.86% (9/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">52.38% (11/21)</td>
<td style="text-align: center;">57.14% (12/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">41.18% (14/34)</td>
<td style="text-align: center;">58.82% (20/34)</td>
<td style="text-align: center;">61.76% (21/34)</td>
<td style="text-align: center;">47.06% (16/34)</td>
<td style="text-align: center;">70.59% (24/34)</td>
<td style="text-align: center;">79.41% (27/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>32.64% (63/193)</strong></td>
<td style="text-align: center;"><strong>54.40% (105/193)</strong></td>
<td style="text-align: center;"><strong>59.07% (114/193)</strong></td>
<td style="text-align: center;"><strong>43.52% (84/193)</strong></td>
<td style="text-align: center;"><strong>69.43% (134/193)</strong></td>
<td style="text-align: center;"><strong>80.31% (155/193)</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="experimental-setup" class="level2">
<h2 class="anchored" data-anchor-id="experimental-setup">Experimental Setup</h2>
<section id="data-sources" class="level3">
<h3 class="anchored" data-anchor-id="data-sources">Data Sources</h3>
<ul>
<li>The freely available Jupyter Notebook-written <a href="https://github.com/fastai/fastbook/">fastbook</a>.</li>
</ul>
</section>
<section id="data-preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="data-preprocessing">Data Preprocessing</h3>
<ul>
<li>Chunking strategy: Single or multiple paragraphs with corresponding headers.</li>
<li>Rationale: Balances granular content with high-level context.</li>
<li>Goal: Maintain lean, informative chunks for efficient retrieval.</li>
</ul>
</section>
<section id="database" class="level3">
<h3 class="anchored" data-anchor-id="database">Database</h3>
<p>I am using a tensor to store the text embeddings for chunks and queries.</p>
</section>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<section id="why-cosine-similarity" class="level3">
<h3 class="anchored" data-anchor-id="why-cosine-similarity">Why Cosine Similarity?</h3>
<p>While keyword search approaches resulted in an Answer Rate of up to 76.7% overall (7 chapters) I think there is room for improvement. I expect that for some of the questions where keywords search did not retrieve appropriate context, semantic search will. Why? Because there exists chunks of context that contain the answer to a question without containing the exact keywords explicitly. After performing a question-by-question error analysis (for the 39 questions that none of the keyword search approaches retrieved sufficient context) I expect 23 of those questions (11% of the dataset overall) better suited for a semantic search-based context retrieval.</p>
</section>
<section id="evaluation-set" class="level3">
<h3 class="anchored" data-anchor-id="evaluation-set">Evaluation Set</h3>
<p>My evaluation set consists of:</p>
<ul>
<li>_ Questionnaire questions.</li>
<li>“Gold standard” solutions to the Questionnaire <a href="https://forums.fast.ai/t/fastbook-chapter-1-questionnaire-solutions-wiki/65647">published by fast.ai Leader Tanishq Abraham</a> who says:</li>
</ul>
<blockquote class="blockquote">
<p>my responses are based on what is supported by the chapter text</p>
</blockquote>
<p>(Which is perfect for my retrieval task.)</p>
</section>
<section id="evaluation-metrics" class="level3">
<h3 class="anchored" data-anchor-id="evaluation-metrics">Evaluation Metrics</h3>
<p>Metrics: <strong>Score</strong> and <strong>Answer Rate</strong></p>
<p>The evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<p>While this is a straightforward pair of metrics, they do involve some judgment. After reading the retrieved context, I decide if it’s enough to answer the question. A capable LLM should be able to make the same kind of judgment about whether the context is helpful or not.</p>
</section>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>Here are the names and descriptions of each full text search approach explored in this notebook. Top-n means the chunk(s) with the n-highest Cosine Similarity (CS).</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-Paragraph Chunks</td>
</tr>
<tr class="even">
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-Paragraph Chunks</td>
</tr>
<tr class="odd">
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-Paragraph Chunks</td>
</tr>
<tr class="even">
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-Paragraph Chunks</td>
</tr>
<tr class="odd">
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-Paragraph Chunks</td>
</tr>
<tr class="even">
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
</tr>
</tbody>
</table>
<section id="best-approach-per-chapter" class="level3">
<h3 class="anchored" data-anchor-id="best-approach-per-chapter">Best Approach per Chapter</h3>
<p>The following table shows name, description and <strong>Answer Rate</strong> for the best semantic search approach for each Chapter.</p>
<p>CS_F (Top-5 3-paragraph Chunks) was the best performing approach for all chapters and overall.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">90%</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">84.62%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">80.65%</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">91.30%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">75%</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">57.14%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">79.41%</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-Paragraph Chunks</td>
<td style="text-align: center;">80.31%</td>
</tr>
</tbody>
</table>
<p>A couple observations:</p>
<ul>
<li>Chapter 1 had the highest Answer Rate overall (90%), as it did for the BM25 baselines with the same Answer Rate.</li>
<li>Chapter 10 had the lowest Answer Rate overall (57.14%), as it did for the BM25 baselines. However, 57.14% is lower than the best BM25 Answer Rate for the chapter (61.9%).</li>
</ul>
</section>
<section id="all-approaches-for-all-chapters" class="level3">
<h3 class="anchored" data-anchor-id="all-approaches-for-all-chapters">All Approaches for All Chapters</h3>
<p>The following table shows the <strong>Answer Rate</strong> for all Cosine Similarity (CS) approaches for each chapter (where in the header, 1p = 1-paragraph chunks and 3p = 3-paragraph chunks).</p>
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">CS_A (Top-1 1p)</th>
<th style="text-align: center;">CS_B (Top-3 1p)</th>
<th style="text-align: center;">CS_C (Top-5 1p)</th>
<th style="text-align: center;">CS_D (Top-1 3p)</th>
<th style="text-align: center;">CS_E (Top-3 3p)</th>
<th style="text-align: center;">CS_F (Top-5 3p)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">40% (12/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">46.67% (14/30)</td>
<td style="text-align: center;">80% (24/30)</td>
<td style="text-align: center;">90% (27/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">26.92% (7/26)</td>
<td style="text-align: center;">61.54% (16/26)</td>
<td style="text-align: center;">69.23% (18/26)</td>
<td style="text-align: center;">53.85% (14/26)</td>
<td style="text-align: center;">80.77% (21/26)</td>
<td style="text-align: center;">84.62% (22/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">29.03% (9/31)</td>
<td style="text-align: center;">54.84% (17/31)</td>
<td style="text-align: center;">64.52% (20/31)</td>
<td style="text-align: center;">25.81% (8/31)</td>
<td style="text-align: center;">67.74% (21/31)</td>
<td style="text-align: center;">80.65% (25/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">17.39% (4/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">47.83% (11/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">73.91% (17/23)</td>
<td style="text-align: center;">91.30% (21/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">28.57% (8/28)</td>
<td style="text-align: center;">46.43% (13/28)</td>
<td style="text-align: center;">53.57% (15/28)</td>
<td style="text-align: center;">42.86% (12/28)</td>
<td style="text-align: center;">57.14% (16/28)</td>
<td style="text-align: center;">75% (21/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">42.86% (9/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">52.38% (11/21)</td>
<td style="text-align: center;">57.14% (12/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">41.18% (14/34)</td>
<td style="text-align: center;">58.82% (20/34)</td>
<td style="text-align: center;">61.76% (21/34)</td>
<td style="text-align: center;">47.06% (16/34)</td>
<td style="text-align: center;">70.59% (24/34)</td>
<td style="text-align: center;">79.41% (27/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>32.64% (63/193)</strong></td>
<td style="text-align: center;"><strong>54.40% (105/193)</strong></td>
<td style="text-align: center;"><strong>59.07% (114/193)</strong></td>
<td style="text-align: center;"><strong>43.52% (84/193)</strong></td>
<td style="text-align: center;"><strong>69.43% (134/193)</strong></td>
<td style="text-align: center;"><strong>80.31% (155/193)</strong></td>
</tr>
</tbody>
</table>
<p>A few observations when looking at the <strong>Answer Rate</strong> for each approach for each chapter, similar to the BM25 baselines:</p>
<ul>
<li><strong>Increasing the number of chunks retrieved generally improves the quality of information retrieved</strong>:
<ul>
<li>For all chapters: CS_C &gt;= CS_B &gt;= CS_A and CS_F &gt;= CS_E &gt;= CS_D.</li>
</ul></li>
<li><strong>Increasing the chunk size generally improves the quality of information retrieved</strong>:
<ul>
<li>For 6 out of 7 chapters: CS_D &gt; CS_A, CS_E &gt; CS_B, CS_F &gt; CS_C
<ul>
<li>For Chapter 4: CS_D &lt; CS_A.</li>
</ul></li>
</ul></li>
<li><strong>Not all chapters behave the same</strong>: For some Chapters, like chapter 10, increasing the number of 1-paragraph chunks retrieved from 3 to 5 did not improve the Answer Rate, while for other chapters it did.</li>
</ul>
</section>
<section id="question-level-analysis" class="level3">
<h3 class="anchored" data-anchor-id="question-level-analysis">Question-Level Analysis</h3>
<p>Looking at the question-level data offers some additional insights.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://gist.githubusercontent.com/vishalbakshi/9e0dc5b83c9b02810099f53377ced4ba/raw/3860f7dac972f37cc84cd10e22184c2bfd8813a4/cs_all.csv'</span></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url)</span>
<span id="cb1-4">score_columns <span class="op" style="color: #5E5E5E;">=</span> df.<span class="bu" style="color: null;">filter</span>(regex<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'_score$'</span>).columns</span>
<span id="cb1-5">df[<span class="st" style="color: #20794D;">'total_score'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[score_columns].<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<section id="distribution-of-scores" class="level4">
<h4 class="anchored" data-anchor-id="distribution-of-scores">Distribution of Scores</h4>
<p>Surprisingly, I have the exact same observations about this distribution as the BM25 baseline results:</p>
<ul>
<li>Bimodal Distribution
<ul>
<li>Approximately 50 questions (about 25% of the total) were successfully answered by all six full text search methods (a total score of <code>6</code>).</li>
<li>On the other hand, around 40 questions (about 20%) couldn’t be answered by any method, resulting in a total score of <code>0</code>.</li>
</ul></li>
<li>Uniform Mid-Range Performance
<ul>
<li>Questions answered by 2, 3, 4, or 5 methods each accounted for 20-30 instances, showing a relatively even distribution in this middle range.</li>
</ul></li>
<li>Least Common Outcome
<ul>
<li>Only 10 questions were answered by just one method, making this the least frequent result.</li>
</ul></li>
</ul>
<div class="cell" data-outputid="8ca373df-62cf-4264-87bb-494bbe6ea03e" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb2-3"></span>
<span id="cb2-4">df[<span class="st" style="color: #20794D;">'total_score'</span>].hist(bins<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">8</span>), align<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'left'</span>, rwidth<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.8</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">plt.title(<span class="st" style="color: #20794D;">'Distribution of Total Scores'</span>)</span>
<span id="cb2-7">plt.xlabel(<span class="st" style="color: #20794D;">'Total Score'</span>)</span>
<span id="cb2-8">plt.ylabel(<span class="st" style="color: #20794D;">'Number of Questions'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-3-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="average-score-per-question" class="level4">
<h4 class="anchored" data-anchor-id="average-score-per-question">Average Score Per Question</h4>
<p>On average, each question was answered by about 3 semantic search methods.</p>
<div class="cell" data-outputid="b51b0e03-56f7-4920-9217-014167f7447f" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">df[<span class="st" style="color: #20794D;">'total_score'</span>].describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>total_score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>193.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.393782</td>
    </tr>
    <tr>
      <th>std</th>
      <td>2.153090</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>3.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>6.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>6.000000</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> float64</label>
</div>
</div>
</section>
<section id="unanswered-questions" class="level4">
<h4 class="anchored" data-anchor-id="unanswered-questions">Unanswered Questions</h4>
<p>There were 29 questions for which none of the semantic search approaches retrieved the context needed to answer them.</p>
<div class="cell" data-outputid="ea7dda47-821f-464c-98d0-4b61bf44b72b" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">no_answer <span class="op" style="color: #5E5E5E;">=</span> df.query(<span class="st" style="color: #20794D;">"total_score == 0"</span>)[[<span class="st" style="color: #20794D;">'chapter'</span>, <span class="st" style="color: #20794D;">'question_number'</span>, <span class="st" style="color: #20794D;">'question_text'</span>, <span class="st" style="color: #20794D;">'answer'</span>]].drop_duplicates()</span>
<span id="cb4-2">no_answer.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>(29, 4)</code></pre>
</div>
</div>
</section>
<section id="questions-with-100-answer-rate" class="level4">
<h4 class="anchored" data-anchor-id="questions-with-100-answer-rate">Questions with 100% Answer Rate</h4>
<p>There were 51 questions that were answered by all 6 semantic search methods.</p>
<div class="cell" data-outputid="814ab016-2ac2-4197-e694-0579017accf7" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">all_answer <span class="op" style="color: #5E5E5E;">=</span> df.query(<span class="st" style="color: #20794D;">"total_score == 6"</span>)[[<span class="st" style="color: #20794D;">'chapter'</span>, <span class="st" style="color: #20794D;">'question_number'</span>, <span class="st" style="color: #20794D;">'question_text'</span>]].drop_duplicates()</span>
<span id="cb6-2">all_answer.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(51, 3)</code></pre>
</div>
</div>
<p>It’s worth noting that semantic search successfully retrieved relevant context for the following two questions, where none of the full-text search methods were able to do so.</p>
<div class="cell" data-outputid="d782dc47-76dc-44eb-ebf0-a1989e8e1a1e">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">all_answer.iloc[<span class="dv" style="color: #AD0000;">27</span>][<span class="st" style="color: #20794D;">'question_text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'""What is a categorical variable?""'</code></pre>
</div>
</div>
<div class="cell" data-outputid="8cfe1b6b-5ba8-4e6d-a902-65e84617b1da">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">all_answer.iloc[<span class="dv" style="color: #AD0000;">37</span>][<span class="st" style="color: #20794D;">'question_text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'""Why do we have to pass the vocabulary of the language model to the classifier data block?""'</code></pre>
</div>
</div>
<p>Only 1 of the full text search methods retrieved relevant context for the following three questions where all semantic search methods were able to do so.</p>
<div class="cell" data-outputid="7f5c5fea-6a1e-493f-ad67-71e327465db3">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">all_answer.iloc[<span class="dv" style="color: #AD0000;">6</span>][<span class="st" style="color: #20794D;">'question_text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>'""What is an ""architecture""?""'</code></pre>
</div>
</div>
<div class="cell" data-outputid="37f11b97-7608-4e25-f157-b46de4b6afd7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">all_answer.iloc[<span class="dv" style="color: #AD0000;">24</span>][<span class="st" style="color: #20794D;">'question_text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'""Does sorting the movie biases give the same result as averaging overall movie ratings by movie? Why/why not?""'</code></pre>
</div>
</div>
<div class="cell" data-outputid="1825536a-0b16-4bd0-b6da-8b1bb033da31">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">all_answer.iloc[<span class="dv" style="color: #AD0000;">41</span>][<span class="st" style="color: #20794D;">'question_text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>'""What is a ""channel""?""'</code></pre>
</div>
</div>
<p><strong>I’ve done a detailed analysis of questions where semantic search performed unanimously better than full text search (and vice versa) in [this notebook].</strong></p>
</section>
</section>
<section id="results-csv" class="level3">
<h3 class="anchored" data-anchor-id="results-csv">Results CSV</h3>
<p>The retrieved contexts and my manually assigned scores for each question and semantic search baseline are available in <a href="https://gist.github.com/vishalbakshi/9e0dc5b83c9b02810099f53377ced4ba">this public gist</a>.</p>
</section>
</section>
<section id="limitations" class="level2">
<h2 class="anchored" data-anchor-id="limitations">Limitations</h2>
<p>There are a number of limitations that I want to highlight in this work, the first and last two are also applicable to my full text search work:</p>
<ul>
<li><strong>Limited methods:</strong> There are inumerable combinations of chunk strategies and top-n retrieval choices. I chose the six (1-paragraph/3-paragraph and Top-1/Top-3/Top-5) that seemed easy to implement, reasonable to accomplish in my desired timeline and reasonably provided me with a diverse set of results.</li>
<li><strong>Limited scope</strong>: I’m only considering the 193 questions in the end-of-chapter Questionnaires whose answer was explicitly in the fastbook text. There are endless questions about the topics covered in the fastbook. I only focused on the 7 chapters covered in Part 1 of the fastai course (as I am still in progress with Part 2). A more general-purpose QA task for deep learning and machine learning would likely require a different set of evals.</li>
<li><strong>I only used one embedding model</strong>: There models other than <code>BAAI/bge-small-en-v1.5</code>, some that create larger embeddings, that may yield better results.</li>
<li><strong>I used my own judgment</strong>: I had to use my judgment to determine whether the retrieved context was sufficient for answering the given question. This is a fuzzy evaluation method.</li>
<li><strong>I used the official Questionnaire solutions</strong>: There is room for interpretation when answering open-ended questions. I chose to strictly follow the “gold standard” answers provided in the course Forums.</li>
</ul>
</section>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future Work</h2>
<p>Each of the limitations provides an opportunity for future work:</p>
<ul>
<li>Experiment with different chunking strategies and observe their impact on retrieval performance.</li>
<li>Expanding the eval set to include more chapters and question types.</li>
<li>Experiment with different embedding models.</li>
<li><strong>Integrate an LLM to replace my own judgment in the pipeline</strong> (something that I’ll be doing as part of the broader fastbookRAG project).</li>
<li><strong>Conducting a deep dive into error analysis</strong> to understand why certain questions weren’t answerable (something I’ll do before I conduct any further experiments).</li>
<li><strong>Removing questions from my evals that do not have explicit answers</strong> in the chapter text (something I’ll do before I conduct any further experiments).</li>
<li>Developing my own set of standardized answers (with the use of an LLM) for each question to ensure consistency.</li>
</ul>
</section>
<section id="experiments" class="level2">
<h2 class="anchored" data-anchor-id="experiments">Experiments</h2>
<section id="helper-functions" class="level3">
<h3 class="anchored" data-anchor-id="helper-functions">Helper Functions</h3>
<div class="cell">
<details>
<summary>Show imports</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">import</span> sqlite3</span>
<span id="cb18-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb18-3"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb18-4"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb18-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb18-6"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb18-7"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span></code></pre></div>
</details>
</div>
<div class="cell">
<details>
<summary>Show chunking code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> get_chunks(notebook_path):</span>
<span id="cb19-2">    <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(notebook_path, <span class="st" style="color: #20794D;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'utf-8'</span>) <span class="im" style="color: #00769E;">as</span> <span class="bu" style="color: null;">file</span>:</span>
<span id="cb19-3">        notebook <span class="op" style="color: #5E5E5E;">=</span> json.load(<span class="bu" style="color: null;">file</span>)</span>
<span id="cb19-4"></span>
<span id="cb19-5">    chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-6">    current_header <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">""</span></span>
<span id="cb19-7"></span>
<span id="cb19-8">    <span class="kw" style="color: #003B4F;">def</span> add_chunk(content):</span>
<span id="cb19-9">        <span class="cf" style="color: #003B4F;">if</span> content.strip():</span>
<span id="cb19-10">            chunks.append(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>current_header<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n\n</span><span class="sc" style="color: #5E5E5E;">{</span>content<span class="sc" style="color: #5E5E5E;">.</span>strip()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb19-11"></span>
<span id="cb19-12">    <span class="cf" style="color: #003B4F;">for</span> cell <span class="kw" style="color: #003B4F;">in</span> notebook[<span class="st" style="color: #20794D;">'cells'</span>]:</span>
<span id="cb19-13">        <span class="cf" style="color: #003B4F;">if</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'markdown'</span>:</span>
<span id="cb19-14">            content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span>.join(cell[<span class="st" style="color: #20794D;">'source'</span>])</span>
<span id="cb19-15">            <span class="co" style="color: #5E5E5E;"># see if the cell starts with a markdown header</span></span>
<span id="cb19-16">            header_match <span class="op" style="color: #5E5E5E;">=</span> re.match(<span class="vs" style="color: #20794D;">r'^(#+\s+.*?)$'</span>, content, re.MULTILINE)</span>
<span id="cb19-17">            <span class="cf" style="color: #003B4F;">if</span> header_match:</span>
<span id="cb19-18">                <span class="co" style="color: #5E5E5E;"># grab the header</span></span>
<span id="cb19-19">                current_header <span class="op" style="color: #5E5E5E;">=</span> header_match.group(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb19-20">                <span class="co" style="color: #5E5E5E;"># add any content after the header in the same cell</span></span>
<span id="cb19-21">                remaining_content <span class="op" style="color: #5E5E5E;">=</span> content[<span class="bu" style="color: null;">len</span>(current_header):].strip()</span>
<span id="cb19-22">                <span class="cf" style="color: #003B4F;">if</span> remaining_content:</span>
<span id="cb19-23">                    <span class="co" style="color: #5E5E5E;"># split content into paragraphs</span></span>
<span id="cb19-24">                    paragraphs <span class="op" style="color: #5E5E5E;">=</span> re.split(<span class="vs" style="color: #20794D;">r'\n\s*\n'</span>, remaining_content)</span>
<span id="cb19-25">                    <span class="co" style="color: #5E5E5E;"># append the paragraph to the list of chunks</span></span>
<span id="cb19-26">                    <span class="cf" style="color: #003B4F;">for</span> paragraph <span class="kw" style="color: #003B4F;">in</span> paragraphs:</span>
<span id="cb19-27">                        add_chunk(paragraph)</span>
<span id="cb19-28">            <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb19-29">                <span class="co" style="color: #5E5E5E;"># split content into paragraphs</span></span>
<span id="cb19-30">                paragraphs <span class="op" style="color: #5E5E5E;">=</span> re.split(<span class="vs" style="color: #20794D;">r'\n\s*\n'</span>, content)</span>
<span id="cb19-31">                <span class="co" style="color: #5E5E5E;"># append the paragraph to the list of chunks</span></span>
<span id="cb19-32">                <span class="cf" style="color: #003B4F;">for</span> paragraph <span class="kw" style="color: #003B4F;">in</span> paragraphs:</span>
<span id="cb19-33">                    add_chunk(paragraph)</span>
<span id="cb19-34">        <span class="cf" style="color: #003B4F;">elif</span> cell[<span class="st" style="color: #20794D;">'cell_type'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'code'</span>:</span>
<span id="cb19-35">          code_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'```python</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">''</span>.join(cell[<span class="st" style="color: #20794D;">'source'</span>]) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">```'</span></span>
<span id="cb19-36"></span>
<span id="cb19-37">          <span class="co" style="color: #5E5E5E;"># include the output of the code cell</span></span>
<span id="cb19-38">          output_content <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb19-39">          <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'outputs'</span> <span class="kw" style="color: #003B4F;">in</span> cell <span class="kw" style="color: #003B4F;">and</span> cell[<span class="st" style="color: #20794D;">'outputs'</span>]:</span>
<span id="cb19-40">              <span class="cf" style="color: #003B4F;">for</span> output <span class="kw" style="color: #003B4F;">in</span> cell[<span class="st" style="color: #20794D;">'outputs'</span>]:</span>
<span id="cb19-41">                  <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'text'</span> <span class="kw" style="color: #003B4F;">in</span> output:</span>
<span id="cb19-42">                      output_content <span class="op" style="color: #5E5E5E;">+=</span> <span class="st" style="color: #20794D;">''</span>.join(output[<span class="st" style="color: #20794D;">'text'</span>])</span>
<span id="cb19-43">                  <span class="cf" style="color: #003B4F;">elif</span> <span class="st" style="color: #20794D;">'data'</span> <span class="kw" style="color: #003B4F;">in</span> output <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'text/plain'</span> <span class="kw" style="color: #003B4F;">in</span> output[<span class="st" style="color: #20794D;">'data'</span>]:</span>
<span id="cb19-44">                      output_content <span class="op" style="color: #5E5E5E;">+=</span> <span class="st" style="color: #20794D;">''</span>.join(output[<span class="st" style="color: #20794D;">'data'</span>][<span class="st" style="color: #20794D;">'text/plain'</span>])</span>
<span id="cb19-45"></span>
<span id="cb19-46">          <span class="co" style="color: #5E5E5E;"># combine code and output in the same chunk</span></span>
<span id="cb19-47">          combined_content <span class="op" style="color: #5E5E5E;">=</span> code_content <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">Output:</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">+</span> output_content <span class="cf" style="color: #003B4F;">if</span> output_content <span class="cf" style="color: #003B4F;">else</span> code_content</span>
<span id="cb19-48">          add_chunk(combined_content)</span>
<span id="cb19-49"></span>
<span id="cb19-50">    <span class="kw" style="color: #003B4F;">def</span> filter_chunks(chunks, exclude_headers<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Questionnaire"</span>, <span class="st" style="color: #20794D;">"Further Research"</span>]):</span>
<span id="cb19-51">      filtered_chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-52">      <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb19-53">          lines <span class="op" style="color: #5E5E5E;">=</span> chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb19-54">          <span class="co" style="color: #5E5E5E;"># check if the first line (header) is in the exclude list</span></span>
<span id="cb19-55">          <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">any</span>(header <span class="kw" style="color: #003B4F;">in</span> lines[<span class="dv" style="color: #AD0000;">0</span>] <span class="cf" style="color: #003B4F;">for</span> header <span class="kw" style="color: #003B4F;">in</span> exclude_headers):</span>
<span id="cb19-56">              filtered_chunks.append(chunk)</span>
<span id="cb19-57">      <span class="cf" style="color: #003B4F;">return</span> filtered_chunks</span>
<span id="cb19-58"></span>
<span id="cb19-59">    <span class="cf" style="color: #003B4F;">return</span> filter_chunks(chunks)</span></code></pre></div>
</details>
</div>
</section>
<section id="data-preprocessing-1" class="level3">
<h3 class="anchored" data-anchor-id="data-preprocessing-1">Data Preprocessing</h3>
<p>You can download the notebooks from the <a href="https://github.com/fastai/fastbook/tree/master">fastbook repo</a> or run the following cell to download them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">urls <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb20-2">    <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1mmBjFH_plndPBC4iRZHChfMazgBxKK4_'</span>,</span>
<span id="cb20-3">    <span class="st" style="color: #20794D;">'02_production.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1Cf5QHthHy1z13H0iu3qrzAWgquCfqVHk'</span>,</span>
<span id="cb20-4">    <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=113909_BNulzyLIKUNJHdya0Hhoqie30I'</span>,</span>
<span id="cb20-5">    <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1BtvStgFjUtvtqbSZNrL7Y2N-ey3seNZU'</span>,</span>
<span id="cb20-6">    <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1rHFvwl_l-AJLg_auPjBpNrOgG9HDnfqg'</span>,</span>
<span id="cb20-7">    <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=1pg1pH7jMMElzrXS0kBBz14aAuDsi2DEP'</span>,</span>
<span id="cb20-8">    <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span>: <span class="st" style="color: #20794D;">'https://drive.google.com/uc?export=view&amp;id=19P-eEHpAO3WrOvdxgXckyhHhfv_R-hnS'</span></span>
<span id="cb20-9">}</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="kw" style="color: #003B4F;">def</span> download_file(url, filename):</span>
<span id="cb20-12">    <span class="co" style="color: #5E5E5E;"># Send a GET request to the URL</span></span>
<span id="cb20-13">    response <span class="op" style="color: #5E5E5E;">=</span> requests.get(url)</span>
<span id="cb20-14"></span>
<span id="cb20-15">    <span class="co" style="color: #5E5E5E;"># Check if the request was successful</span></span>
<span id="cb20-16">    <span class="cf" style="color: #003B4F;">if</span> response.status_code <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">200</span>:</span>
<span id="cb20-17">        <span class="co" style="color: #5E5E5E;"># Open the file in write-binary mode</span></span>
<span id="cb20-18">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(filename, <span class="st" style="color: #20794D;">'wb'</span>) <span class="im" style="color: #00769E;">as</span> <span class="bu" style="color: null;">file</span>:</span>
<span id="cb20-19">            <span class="co" style="color: #5E5E5E;"># Write the content of the response to the file</span></span>
<span id="cb20-20">            <span class="bu" style="color: null;">file</span>.write(response.content)</span>
<span id="cb20-21">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"File downloaded successfully: </span><span class="sc" style="color: #5E5E5E;">{</span>filename<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb20-22">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb20-23">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Failed to download file. Status code: </span><span class="sc" style="color: #5E5E5E;">{</span>response<span class="sc" style="color: #5E5E5E;">.</span>status_code<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb20-24"></span>
<span id="cb20-25"><span class="cf" style="color: #003B4F;">for</span> fname, url <span class="kw" style="color: #003B4F;">in</span> urls.items():</span>
<span id="cb20-26">  download_file(url, fname)</span></code></pre></div>
</div>
<p>I have seven notebooks in total. I’ll start by using <code>get_chunks</code> to split the notebook content into paragraphs (with the corresponding header).</p>
<div class="cell">
<details>
<summary>Show the dict w/ notebook filenames</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">nbs <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb21-2">    <span class="st" style="color: #20794D;">'1'</span>: <span class="st" style="color: #20794D;">'01_intro.ipynb'</span>,</span>
<span id="cb21-3">    <span class="st" style="color: #20794D;">'2'</span>: <span class="st" style="color: #20794D;">'02_production.ipynb'</span>,</span>
<span id="cb21-4">    <span class="st" style="color: #20794D;">'4'</span>: <span class="st" style="color: #20794D;">'04_mnist_basics.ipynb'</span>,</span>
<span id="cb21-5">    <span class="st" style="color: #20794D;">'8'</span>: <span class="st" style="color: #20794D;">'08_collab.ipynb'</span>,</span>
<span id="cb21-6">    <span class="st" style="color: #20794D;">'9'</span>: <span class="st" style="color: #20794D;">'09_tabular.ipynb'</span>,</span>
<span id="cb21-7">    <span class="st" style="color: #20794D;">'10'</span>: <span class="st" style="color: #20794D;">'10_nlp.ipynb'</span>,</span>
<span id="cb21-8">    <span class="st" style="color: #20794D;">'13'</span>: <span class="st" style="color: #20794D;">'13_convolutions.ipynb'</span></span>
<span id="cb21-9">}</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># chunking each notebook</span></span>
<span id="cb22-2">data <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="cf" style="color: #003B4F;">for</span> chapter, nb <span class="kw" style="color: #003B4F;">in</span> nbs.items():</span>
<span id="cb22-5">  data[chapter] <span class="op" style="color: #5E5E5E;">=</span> get_chunks(nb)</span></code></pre></div>
</div>
<p>I’ll print out the length of the total chunks so I get a sense of how many unique chunks there are:</p>
<div class="cell" data-outputid="38f171a8-cd2f-4c7a-fbe8-9ae755900cdd">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb23-2"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb23-3">  <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb23-4">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1967</span> <span class="co" style="color: #5E5E5E;"># 1-paragraph chunks</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 307
2 227
4 433
8 157
9 387
10 190
13 266</code></pre>
</div>
</div>
</section>
<section id="embed-the-data" class="level3">
<h3 class="anchored" data-anchor-id="embed-the-data">Embed the Data</h3>
<p>I’ll create text embeddings for the chunks using a popular embedding model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;">!</span>pip install sentence<span class="op" style="color: #5E5E5E;">-</span>transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb25-2"><span class="im" style="color: #00769E;">from</span> sentence_transformers <span class="im" style="color: #00769E;">import</span> SentenceTransformer</span>
<span id="cb25-3">emb_model <span class="op" style="color: #5E5E5E;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;">"BAAI/bge-small-en-v1.5"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">data_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb26-4">  data_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(chunks, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'data_embs.pkl'</span>, <span class="st" style="color: #20794D;">'rb'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb27-4">    data_embs <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f)</span></code></pre></div>
</div>
<div class="cell" data-outputid="d45d423e-6e97-46bf-d39d-60a67490af77">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="cf" style="color: #003B4F;">for</span> chapter, embs <span class="kw" style="color: #003B4F;">in</span> data_embs.items():</span>
<span id="cb28-2">  <span class="bu" style="color: null;">print</span>(chapter, embs.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 torch.Size([307, 384])
2 torch.Size([227, 384])
4 torch.Size([433, 384])
8 torch.Size([157, 384])
9 torch.Size([387, 384])
10 torch.Size([190, 384])
13 torch.Size([266, 384])</code></pre>
</div>
</div>
</section>
<section id="load-and-embed-the-question-texts" class="level3">
<h3 class="anchored" data-anchor-id="load-and-embed-the-question-texts">Load and Embed the Question Texts</h3>
<p>I have saved each chapter’s questions and answers in <a href="https://gist.github.com/vishalbakshi/fa90ec0172924091fa97bb0971b3a713">this gist</a>. Note that the total number of questions (193) is different than the total number of questions for the keyword searh evals (202) since after error analysis I deemed that some questions were unanswerable using the chapter text (they were ambiguously worded, were exercises meant to be done by the reader, and/or the chapter text did not contain enough relevant explanatory text to answer the question).</p>
<div class="cell" data-outputid="475d80e9-36a5-42b1-dd00-9438bea9f09a">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb30-2">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://gist.githubusercontent.com/vishalbakshi/fa90ec0172924091fa97bb0971b3a713/raw/b5e801c4d887edebc8de4097b44eff49d15d6b49/fastbookRAG_evals_CS.csv'</span></span>
<span id="cb30-3">questions <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url)</span>
<span id="cb30-4">questions.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">


  <div id="df-5442f2b2-ec26-42e3-95c8-ff0436876d42" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-5442f2b2-ec26-42e3-95c8-ff0436876d42')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-5442f2b2-ec26-42e3-95c8-ff0436876d42 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-5442f2b2-ec26-42e3-95c8-ff0436876d42');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-322db31e-56df-4d86-ad55-a0c0fd5bab58">
  <button class="colab-df-quickchart" onclick="quickchart('df-322db31e-56df-4d86-ad55-a0c0fd5bab58')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-322db31e-56df-4d86-ad55-a0c0fd5bab58 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-outputid="79d94117-375d-4fca-caec-86bd0f6df298">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">questions.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(193, 5)</code></pre>
</div>
</div>
<div class="cell" data-outputid="79631b7e-208b-4f55-c8cf-6ff3277e7c67">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">q_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="cf" style="color: #003B4F;">for</span> chapter, _ <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb33-4">  qs <span class="op" style="color: #5E5E5E;">=</span> questions[questions[<span class="st" style="color: #20794D;">'chapter'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">int</span>(chapter)].reset_index()[<span class="st" style="color: #20794D;">'question_text'</span>]</span>
<span id="cb33-5">  q_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(qs, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb33-6">  <span class="bu" style="color: null;">print</span>(chapter, qs.shape, q_embs[chapter].shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 (30,) torch.Size([30, 384])
2 (26,) torch.Size([26, 384])
4 (31,) torch.Size([31, 384])
8 (23,) torch.Size([23, 384])
9 (28,) torch.Size([28, 384])
10 (21,) torch.Size([21, 384])
13 (34,) torch.Size([34, 384])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">'q_embs.pkl'</span>, <span class="st" style="color: #20794D;">'rb'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb35-2">    q_embs <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f)</span></code></pre></div>
</div>
<div class="cell" data-outputid="1a077740-61c6-4d60-d174-eec599023f6c">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="cf" style="color: #003B4F;">for</span> c, e <span class="kw" style="color: #003B4F;">in</span> q_embs.items():</span>
<span id="cb36-2">  <span class="bu" style="color: null;">print</span>(c,e.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 torch.Size([30, 384])
2 torch.Size([26, 384])
4 torch.Size([31, 384])
8 torch.Size([23, 384])
9 torch.Size([28, 384])
10 torch.Size([21, 384])
13 torch.Size([34, 384])</code></pre>
</div>
</div>
</section>
<section id="cs_a-top-1-1-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_a-top-1-1-paragraph-chunks">CS_A: Top-1 1-Paragraph Chunks</h3>
<p>In this approach, I’ll select the top-1 retrieved context (1-paragraph chunk) for each question’s keywords and calculate the <strong>Answer Rate</strong>. As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<p>I needed to think through this a bit so I’ll walk through my process. I start by adding a unit axis to the data and questions’ embeddings. This prepares it for broadcasting. Here’s an image showing the concept:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" title="Broadcasting data and questions embeddings" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Broadcasting data and questions embeddings</figcaption><p></p>
</figure>
</div>
<div class="cell" data-outputid="b5590686-a46a-4b13-d8bd-79242ca3fe39">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">data_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>).shape, q_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(torch.Size([307, 1, 384]), torch.Size([1, 30, 384]))</code></pre>
</div>
</div>
<p>I can either add the unit axis as the first or second position of the embeddings and get the same result after passing them through <code>F.cosine_similarity</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">res1 <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">res2 <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), data_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="580bb817-c37a-4042-ded3-b9fc742fbb25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">res1.shape, res2.T.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(torch.Size([30, 307]), torch.Size([30, 307]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="0b3b80db-2a01-4b3e-829c-d9cff7cb4fbb">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">(res1 <span class="op" style="color: #5E5E5E;">==</span> res2.T).<span class="bu" style="color: null;">float</span>().mean(), (res1.T <span class="op" style="color: #5E5E5E;">==</span> res2).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(tensor(1.), tensor(1.))</code></pre>
</div>
</div>
<p>I calculate the cosine similarity between the Chapter 1 questions and 1-paragraph chunks, and then sort them in descending order. I take the top-1 highest cosine similarity chunk as the retrieved context for each question.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">vals, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[<span class="st" style="color: #20794D;">'1'</span>].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-2">top_1_idxs <span class="op" style="color: #5E5E5E;">=</span> idxs[:, <span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<div class="cell" data-outputid="f1c77c6e-12e8-4d9f-f305-9d49637b2f9e">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">top_1_idxs.shape, top_1_idxs[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(torch.Size([30]), tensor([ 4,  7, 15, 20, 16]))</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">top_1_chunks <span class="op" style="color: #5E5E5E;">=</span> [data[<span class="st" style="color: #20794D;">'1'</span>][idx] <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> top_1_idxs]</span></code></pre></div>
</div>
<div class="cell" data-outputid="550f8f5d-1734-4970-f789-81caeb5fce9f">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="bu" style="color: null;">len</span>(top_1_chunks)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>30</code></pre>
</div>
</div>
<p>The context retrieved for the first question is correct:</p>
<div class="cell" data-outputid="721def19-db7e-41a2-ee85-fe2ebd5dbf5d">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">top_1_chunks[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>'## Deep Learning Is for Everyone\n\n```asciidoc\n[[myths]]\n.What you don\'t need to do deep learning\n[options="header"]\n|======\n| Myth (don\'t need) | Truth\n| Lots of math | Just high school math is sufficient\n| Lots of data | We\'ve seen record-breaking results with &lt;50 items of data\n| Lots of expensive computers | You can get what you need for state of the art work for free\n|======\n```'</code></pre>
</div>
</div>
<p>I’ll now loop through each chapter, in order from 1 to 13, and retrieve the top-1 1-paragraph chunk based on cosine similarity between the chapter questions and the chapter chunks:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb54-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb54-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb54-4">  top_1_idxs <span class="op" style="color: #5E5E5E;">=</span> idxs[:, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb54-5">  top_1_chunks <span class="op" style="color: #5E5E5E;">=</span> [data[chapter][idx] <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> top_1_idxs]</span>
<span id="cb54-6">  results.extend(top_1_chunks)</span></code></pre></div>
</div>
<p>I should have 193 chunks retrieved (which I do!)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<p>I’ll add the retrieved contexts to my evals and export it to evaluate it.</p>
<div class="cell" data-outputid="29a6db74-549f-484d-bac8-c4b6ab0f9250">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">cs_a <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb56-2">cs_a[<span class="st" style="color: #20794D;">'cs_a_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb56-3">cs_a.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">


  <div id="df-9f42f022-0bc3-4241-ac94-ac3ae10c97e8" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_a_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\n```asciido...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nHere's a l...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nRosenbl...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nAn MIT ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-9f42f022-0bc3-4241-ac94-ac3ae10c97e8')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-9f42f022-0bc3-4241-ac94-ac3ae10c97e8 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-9f42f022-0bc3-4241-ac94-ac3ae10c97e8');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-1e5d4fa3-7a21-42c6-ac48-29251d84878e">
  <button class="colab-df-quickchart" onclick="quickchart('df-1e5d4fa3-7a21-42c6-ac48-29251d84878e')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-1e5d4fa3-7a21-42c6-ac48-29251d84878e button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">cs_a.to_csv(<span class="st" style="color: #20794D;">'cs_a.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-1" class="level4">
<h4 class="anchored" data-anchor-id="results-1">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">40% (12/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">26.92% (7/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">29.03% (9/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">17.39% (4/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">28.57% (8/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">42.86% (9/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_A</td>
<td style="text-align: center;">Top-1 1-paragraph chunks</td>
<td style="text-align: center;">41.18% (14/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_A</strong></td>
<td style="text-align: center;"><strong>Top-1 1-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>32.64% (63/193)</strong></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="cs_b-top-3-1-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_b-top-3-1-paragraph-chunks">CS_B: Top-3 1-Paragraph Chunks</h3>
<p>In this approach, I’ll select the top-3 retrieved context (1-paragraph chunks) for each question and calculate the <strong>Answer Rate</strong>. As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb58-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb58-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb58-4">  top_3_chunks <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join([data[chapter][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> row[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>].tolist()]) <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> idxs]</span>
<span id="cb58-5">  results.extend(top_3_chunks)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="bafab2ac-684a-4808-e236-4a7b12958ded">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">cs_b <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb60-2">cs_b[<span class="st" style="color: #20794D;">'cs_b_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb60-3">cs_b.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">


  <div id="df-e468d651-f0a1-4555-9ab3-0ae4a717ce1b" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_b_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\n```asciido...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nHere's a l...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nRosenbl...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nAn MIT ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-e468d651-f0a1-4555-9ab3-0ae4a717ce1b')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-e468d651-f0a1-4555-9ab3-0ae4a717ce1b button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-e468d651-f0a1-4555-9ab3-0ae4a717ce1b');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-e224905a-4af5-427a-8ca9-65442e5b9180">
  <button class="colab-df-quickchart" onclick="quickchart('df-e224905a-4af5-427a-8ca9-65442e5b9180')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-e224905a-4af5-427a-8ca9-65442e5b9180 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">cs_b.to_csv(<span class="st" style="color: #20794D;">'cs_b.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-2" class="level4">
<h4 class="anchored" data-anchor-id="results-2">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">63.33% (19/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">61.54% (16/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">54.84% (17/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">43.48% (10/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">46.43% (13/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">47.62% (10/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_B</td>
<td style="text-align: center;">Top-3 1-paragraph chunks</td>
<td style="text-align: center;">58.82% (20/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_B</strong></td>
<td style="text-align: center;"><strong>Top-3 1-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>54.40% (105/193)</strong></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="cs_c-top-5-1-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_c-top-5-1-paragraph-chunks">CS_C: Top-5 1-Paragraph Chunks</h3>
<p>In this approach, I’ll select the top-5 retrieved context (1-paragraph chunks) for each question and calculate the <strong>Answer Rate</strong>. As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb62-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb62-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb62-4">  top_5_chunks <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join([data[chapter][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> row[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">5</span>].tolist()]) <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> idxs]</span>
<span id="cb62-5">  results.extend(top_5_chunks)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="356e19b5-ef00-4165-e62e-6eddd8f8b764">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">cs_c <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb64-2">cs_c[<span class="st" style="color: #20794D;">'cs_c_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb64-3">cs_c.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">


  <div id="df-a87f890e-a362-49c6-8546-40e29b7ab745" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_c_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\n```asciido...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nHere's a l...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nRosenbl...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nAn MIT ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-a87f890e-a362-49c6-8546-40e29b7ab745')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-a87f890e-a362-49c6-8546-40e29b7ab745 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-a87f890e-a362-49c6-8546-40e29b7ab745');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-2c33f707-0c5f-47e6-ae5a-f5ef6066cff9">
  <button class="colab-df-quickchart" onclick="quickchart('df-2c33f707-0c5f-47e6-ae5a-f5ef6066cff9')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-2c33f707-0c5f-47e6-ae5a-f5ef6066cff9 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">cs_c.to_csv(<span class="st" style="color: #20794D;">'cs_c.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-3" class="level4">
<h4 class="anchored" data-anchor-id="results-3">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">63.33% (19/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">69.23% (18/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">64.52% (20/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">47.83% (11/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">53.57% (15/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">47.62% (10/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_C</td>
<td style="text-align: center;">Top-5 1-paragraph chunks</td>
<td style="text-align: center;">61.76% (21/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_C</strong></td>
<td style="text-align: center;"><strong>Top-5 1-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>59.07% (114/193)</strong></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="cs_d-top-1-3-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_d-top-1-3-paragraph-chunks">CS_D: Top-1 3-Paragraph Chunks</h3>
<p>I now want to increase the chunk size (to 3 paragraphs per chunk). I do this by iterating over the 1-paragraph chunks in groups of three, removing the header from the 2nd and 3rd chunk in each triplet and then concatenating the three chunks into new 3-paragraph chunks.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="kw" style="color: #003B4F;">def</span> combine_chunks(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb66-2">    combined_chunks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb66-3">    current_header <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb66-4">    current_group <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb66-5"></span>
<span id="cb66-6">    <span class="cf" style="color: #003B4F;">for</span> chunk <span class="kw" style="color: #003B4F;">in</span> chunks:</span>
<span id="cb66-7">        <span class="co" style="color: #5E5E5E;"># Extract header from chunk</span></span>
<span id="cb66-8">        header <span class="op" style="color: #5E5E5E;">=</span> chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb66-9"></span>
<span id="cb66-10">        <span class="cf" style="color: #003B4F;">if</span> header <span class="op" style="color: #5E5E5E;">!=</span> current_header:</span>
<span id="cb66-11">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># Only add if group has content besides header</span></span>
<span id="cb66-12">                <span class="co" style="color: #5E5E5E;"># Add current group to combined chunks if header changes</span></span>
<span id="cb66-13">                combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb66-14">            <span class="co" style="color: #5E5E5E;"># Update current header</span></span>
<span id="cb66-15">            current_header <span class="op" style="color: #5E5E5E;">=</span> header</span>
<span id="cb66-16">            <span class="co" style="color: #5E5E5E;"># Start new group with header and content of current chunk</span></span>
<span id="cb66-17">            current_group <span class="op" style="color: #5E5E5E;">=</span> [header, chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">''</span>]</span>
<span id="cb66-18">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb66-19">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&lt;</span> num_p <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># +1 to account for header</span></span>
<span id="cb66-20">                <span class="co" style="color: #5E5E5E;"># Add chunk content (without header) to current group</span></span>
<span id="cb66-21">                current_group.append(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>, <span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">1</span>] <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(chunk.split(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>)) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb66-22"></span>
<span id="cb66-23">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">==</span> num_p <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># +1 to account for header</span></span>
<span id="cb66-24">                <span class="co" style="color: #5E5E5E;"># Add full group to combined chunks</span></span>
<span id="cb66-25">                combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb66-26">                <span class="co" style="color: #5E5E5E;"># Reset current group, keeping the header</span></span>
<span id="cb66-27">                current_group <span class="op" style="color: #5E5E5E;">=</span> [current_header]</span>
<span id="cb66-28"></span>
<span id="cb66-29">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(current_group) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1</span>:  <span class="co" style="color: #5E5E5E;"># Only add if group has content besides header</span></span>
<span id="cb66-30">        <span class="co" style="color: #5E5E5E;"># Add any remaining group to combined chunks</span></span>
<span id="cb66-31">        combined_chunks.append(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join(current_group))</span>
<span id="cb66-32"></span>
<span id="cb66-33">    <span class="cf" style="color: #003B4F;">return</span> combined_chunks</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">data_3p <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb67-2"></span>
<span id="cb67-3"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data.items():</span>
<span id="cb67-4">  data_3p[chapter] <span class="op" style="color: #5E5E5E;">=</span> combine_chunks(chunks, num_p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="a2b9c469-2774-41b3-b419-ed1570ed7a85">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">total_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data_3p.items():</span>
<span id="cb68-4">  <span class="bu" style="color: null;">print</span>(chapter, <span class="bu" style="color: null;">len</span>(chunks))</span>
<span id="cb68-5">  total_chunks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(chunks)</span>
<span id="cb68-6"></span>
<span id="cb68-7"><span class="cf" style="color: #003B4F;">assert</span> total_chunks <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">713</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 112
2 84
4 152
8 58
9 141
10 70
13 96</code></pre>
</div>
</div>
<p>Since I have new chunks of data (3-paragraphs each) I have to re-calculate the embeddings:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">data_3p_embs <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="cf" style="color: #003B4F;">for</span> chapter, chunks <span class="kw" style="color: #003B4F;">in</span> data_3p.items():</span>
<span id="cb70-4">  data_3p_embs[chapter] <span class="op" style="color: #5E5E5E;">=</span> emb_model.encode(chunks, convert_to_tensor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="d75c78af-5f09-49a5-bd07-06b585edc607">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="cf" style="color: #003B4F;">for</span> chapter, embs <span class="kw" style="color: #003B4F;">in</span> data_3p_embs.items():</span>
<span id="cb71-2">  <span class="bu" style="color: null;">print</span>(chapter, embs.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 torch.Size([112, 384])
2 torch.Size([84, 384])
4 torch.Size([152, 384])
8 torch.Size([58, 384])
9 torch.Size([141, 384])
10 torch.Size([70, 384])
13 torch.Size([96, 384])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb73-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb73-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_3p_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb73-4">  top_1_idxs <span class="op" style="color: #5E5E5E;">=</span> idxs[:, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb73-5">  top_1_chunks <span class="op" style="color: #5E5E5E;">=</span> [data_3p[chapter][idx] <span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> top_1_idxs]</span>
<span id="cb73-6">  results.extend(top_1_chunks)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="7339ce62-f3aa-4e87-c76f-7e5e63c36dc6">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">cs_d <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb75-2">cs_d[<span class="st" style="color: #20794D;">'cs_d_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb75-3">cs_d.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">


  <div id="df-c466b3a3-5a25-4638-b3a0-5296b8dac35a" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_d_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nA lot of p...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nDeep learn...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\n&lt;img al...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn the ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-c466b3a3-5a25-4638-b3a0-5296b8dac35a')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-c466b3a3-5a25-4638-b3a0-5296b8dac35a button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-c466b3a3-5a25-4638-b3a0-5296b8dac35a');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-2b911a0f-3d4a-43b0-836a-0f73d9a63552">
  <button class="colab-df-quickchart" onclick="quickchart('df-2b911a0f-3d4a-43b0-836a-0f73d9a63552')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-2b911a0f-3d4a-43b0-836a-0f73d9a63552 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">cs_d.to_csv(<span class="st" style="color: #20794D;">'cs_d.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-4" class="level4">
<h4 class="anchored" data-anchor-id="results-4">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">46.67% (14/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">53.85% (14/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">25.81% (8/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">43.48% (10/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">42.86% (12/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">47.62% (10/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_D</td>
<td style="text-align: center;">Top-1 3-paragraph chunks</td>
<td style="text-align: center;">47.06% (16/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_D</strong></td>
<td style="text-align: center;"><strong>Top-1 3-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>43.52% (84/193)</strong></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="cs_e-top-3-3-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_e-top-3-3-paragraph-chunks">CS_E: Top-3 3-Paragraph Chunks</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb77-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb77-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_3p_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb77-4">  top_3_chunks <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join([data_3p[chapter][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> row[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>].tolist()]) <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> idxs]</span>
<span id="cb77-5">  results.extend(top_3_chunks)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="24278cc1-c8db-4206-c8a1-efc2567edc34">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">cs_e <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb79-2">cs_e[<span class="st" style="color: #20794D;">'cs_e_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb79-3">cs_e.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">


  <div id="df-bbc1582b-9524-4314-b3c0-88d1edab23bd" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_e_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nA lot of p...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nDeep learn...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\n&lt;img al...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn the ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-bbc1582b-9524-4314-b3c0-88d1edab23bd')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-bbc1582b-9524-4314-b3c0-88d1edab23bd button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-bbc1582b-9524-4314-b3c0-88d1edab23bd');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-de8de342-4a14-4467-a45b-cae8a9083ca4">
  <button class="colab-df-quickchart" onclick="quickchart('df-de8de342-4a14-4467-a45b-cae8a9083ca4')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-de8de342-4a14-4467-a45b-cae8a9083ca4 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">cs_e.to_csv(<span class="st" style="color: #20794D;">'cs_e.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-5" class="level4">
<h4 class="anchored" data-anchor-id="results-5">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">80% (24/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">80.77% (21/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">67.74% (21/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">73.91% (17/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">57.14% (16/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">52.38% (11/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_E</td>
<td style="text-align: center;">Top-3 3-paragraph chunks</td>
<td style="text-align: center;">70.59% (24/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_E</strong></td>
<td style="text-align: center;"><strong>Top-3 3-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>69.43% (134/193)</strong></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="cs_f-top-5-3-paragraph-chunks" class="level3">
<h3 class="anchored" data-anchor-id="cs_f-top-5-3-paragraph-chunks">CS_F: Top-5 3-Paragraph Chunks</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">results <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb81-2"><span class="cf" style="color: #003B4F;">for</span> chapter <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'1'</span>, <span class="st" style="color: #20794D;">'2'</span>, <span class="st" style="color: #20794D;">'4'</span>, <span class="st" style="color: #20794D;">'8'</span>, <span class="st" style="color: #20794D;">'9'</span>, <span class="st" style="color: #20794D;">'10'</span>, <span class="st" style="color: #20794D;">'13'</span>]:</span>
<span id="cb81-3">  _, idxs <span class="op" style="color: #5E5E5E;">=</span> F.cosine_similarity(q_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">1</span>), data_3p_embs[chapter].unsqueeze(<span class="dv" style="color: #AD0000;">0</span>), dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>).sort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb81-4">  top_5_chunks <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n\n</span><span class="st" style="color: #20794D;">'</span>.join([data_3p[chapter][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> row[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">5</span>].tolist()]) <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> idxs]</span>
<span id="cb81-5">  results.extend(top_5_chunks)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(results) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">193</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="20dcc896-acf8-46fa-afcd-0f40622dbb10">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">cs_f <span class="op" style="color: #5E5E5E;">=</span> questions.copy()</span>
<span id="cb83-2">cs_f[<span class="st" style="color: #20794D;">'cs_f_context'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb83-3">cs_f.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">


  <div id="df-e94b55d7-7db2-4e8d-b259-c74d54bcf19e" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>chapter</th>
      <th>question_number</th>
      <th>question_text</th>
      <th>answer</th>
      <th>is_answerable</th>
      <th>cs_f_context</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>1</td>
      <td>""Do you need these for deep learning?nn- Lots...</td>
      <td>""Lots of math - False\nLots of data - False\n...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nA lot of p...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>""Name five areas where deep learning is now t...</td>
      <td>""Any five of the following:\nNatural Language...</td>
      <td>1</td>
      <td>## Deep Learning Is for Everyone\n\nDeep learn...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>""What was the name of the first device that w...</td>
      <td>""Mark I perceptron built by Frank Rosenblatt""</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\n&lt;img al...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1</td>
      <td>4</td>
      <td>""Based on the book of the same name, what are...</td>
      <td>""A set of processing units\nA state of activa...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn fact...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1</td>
      <td>5</td>
      <td>""What were the two theoretical misunderstandi...</td>
      <td>""In 1969, Marvin Minsky and Seymour Papert de...</td>
      <td>1</td>
      <td>## Neural Networks: A Brief History\n\nIn the ...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-e94b55d7-7db2-4e8d-b259-c74d54bcf19e')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-e94b55d7-7db2-4e8d-b259-c74d54bcf19e button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-e94b55d7-7db2-4e8d-b259-c74d54bcf19e');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-301aa742-086c-4d27-874a-b19cbf326e07">
  <button class="colab-df-quickchart" onclick="quickchart('df-301aa742-086c-4d27-874a-b19cbf326e07')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-301aa742-086c-4d27-874a-b19cbf326e07 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">cs_f.to_csv(<span class="st" style="color: #20794D;">'cs_f.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<section id="results-6" class="level4">
<h4 class="anchored" data-anchor-id="results-6">Results</h4>
<p>Here is the <strong>Answer Rate</strong> (by chapter and overall). As a reminder, the evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Description</th>
<th style="text-align: center;">Answer Rate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">90% (27/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">84.62% (22/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">80.65% (25/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">91.30% (21/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">75% (21/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">57.14% (12/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CS_F</td>
<td style="text-align: center;">Top-5 3-paragraph chunks</td>
<td style="text-align: center;">79.41% (27/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>CS_F</strong></td>
<td style="text-align: center;"><strong>Top-5 3-paragraph chunks</strong></td>
<td style="text-align: center;"><strong>80.31% (155/193)</strong></td>
</tr>
</tbody>
</table>


</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>RAG</category>
  <category>information retrieval</category>
  <category>fastbookRAG</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/index.html</guid>
  <pubDate>Tue, 22 Oct 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/1.png" medium="image" type="image/png" height="33" width="144"/>
</item>
<item>
  <title>Conducting a Question-by-Question Error Analysis on Semantic Search Results</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-error-analysis/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll do a deep dive error analysis of my <a href="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-baselines/">semantic search results</a>, where I implemented 6 different keyword-based full text searches to retrieve context sufficient to answer questions from the end-of-chapter Questionnaires in <a href="https://github.com/fastai/fastbook/tree/master">fastbook</a>. Here is the summary of results from those experiments:</p>
<table class="table">
<colgroup>
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
<col style="width: 14%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;">CS_A (Top-1 1p)</th>
<th style="text-align: center;">CS_B (Top-3 1p)</th>
<th style="text-align: center;">CS_C (Top-5 1p)</th>
<th style="text-align: center;">CS_D (Top-1 3p)</th>
<th style="text-align: center;">CS_E (Top-3 3p)</th>
<th style="text-align: center;">CS_F (Top-5 3p)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">40% (12/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">63.33% (19/30)</td>
<td style="text-align: center;">46.67% (14/30)</td>
<td style="text-align: center;">80% (24/30)</td>
<td style="text-align: center;">90% (27/30)</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">26.92% (7/26)</td>
<td style="text-align: center;">61.54% (16/26)</td>
<td style="text-align: center;">69.23% (18/26)</td>
<td style="text-align: center;">53.85% (14/26)</td>
<td style="text-align: center;">80.77% (21/26)</td>
<td style="text-align: center;">84.62% (22/26)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">29.03% (9/31)</td>
<td style="text-align: center;">54.84% (17/31)</td>
<td style="text-align: center;">64.52% (20/31)</td>
<td style="text-align: center;">25.81% (8/31)</td>
<td style="text-align: center;">67.74% (21/31)</td>
<td style="text-align: center;">80.65% (25/31)</td>
</tr>
<tr class="even">
<td style="text-align: center;">8</td>
<td style="text-align: center;">17.39% (4/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">47.83% (11/23)</td>
<td style="text-align: center;">43.48% (10/23)</td>
<td style="text-align: center;">73.91% (17/23)</td>
<td style="text-align: center;">91.30% (21/23)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">28.57% (8/28)</td>
<td style="text-align: center;">46.43% (13/28)</td>
<td style="text-align: center;">53.57% (15/28)</td>
<td style="text-align: center;">42.86% (12/28)</td>
<td style="text-align: center;">57.14% (16/28)</td>
<td style="text-align: center;">75% (21/28)</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">42.86% (9/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">47.62% (10/21)</td>
<td style="text-align: center;">52.38% (11/21)</td>
<td style="text-align: center;">57.14% (12/21)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">41.18% (14/34)</td>
<td style="text-align: center;">58.82% (20/34)</td>
<td style="text-align: center;">61.76% (21/34)</td>
<td style="text-align: center;">47.06% (16/34)</td>
<td style="text-align: center;">70.59% (24/34)</td>
<td style="text-align: center;">79.41% (27/34)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong>All</strong></td>
<td style="text-align: center;"><strong>32.64% (63/193)</strong></td>
<td style="text-align: center;"><strong>54.40% (105/193)</strong></td>
<td style="text-align: center;"><strong>59.07% (114/193)</strong></td>
<td style="text-align: center;"><strong>43.52% (84/193)</strong></td>
<td style="text-align: center;"><strong>69.43% (134/193)</strong></td>
<td style="text-align: center;"><strong>80.31% (155/193)</strong></td>
</tr>
</tbody>
</table>
<p>The granular question-level results are available in <a href="https://gist.github.com/vishalbakshi/9e0dc5b83c9b02810099f53377ced4ba">this public gist</a>.</p>
<p>As a reminder, the two metrics I use for evaluation are <strong>Score</strong> and <strong>Answer Rate</strong></p>
<p>The evaluation metric for each question, that I’m simply calling <strong>score</strong>, is binary: can the retrieved context answer the question (<code>1</code>) or not (<code>0</code>)? The evaluation metric across a set of questions, which I’m calling the <strong>Answer Rate</strong>, is the mean score for those questions.</p>
<p>While this is a straightforward pair of metrics, they do involve some judgment. After reading the retrieved context, I decide if it’s enough to answer the question.</p>
<p>Here is a summary of tags across the 29 questions where the Answer Rate for all of my semantic search methods was 0% (i.e.&nbsp;none of the methods retrieved the context needed to answer the question):</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Tag</th>
<th style="text-align: center;">Count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">unknown failure</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: center;">chunking strategy</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">keyword-based question</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;">difficult question</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">unanswerable</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">requires image</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>Here is a summary of how many 0% Answer Rate questions there are for each chapter:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;"># of Questions with 0% Answer Rate</th>
<th style="text-align: center;">% of Chapter Questions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">25%</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">33%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">15%</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">15%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">7%</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">6%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">9%</td>
</tr>
</tbody>
</table>
<p>This notebook is a part of <a href="https://vishalbakshi.github.io/blog/#category=fastbookRAG">series of blog posts</a> for a project I’m calling fastbookRAG where I’m trying to answer questions from the <a href="https://github.com/fastai/fastbook/tree/master">fastbook</a> end-of-chapter Questionnaires using the following pipeline:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="fastbookRAG diagram"><img src="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-error-analysis/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">fastbookRAG diagram</figcaption><p></p>
</figure>
</div>
</section>
<section id="error-analysis" class="level2">
<h2 class="anchored" data-anchor-id="error-analysis">Error Analysis</h2>
<p>For 29 questions, none of the 6 semantic search methods retrieved sufficient context to provide an answer. I’ll be looking at each of those 29 questions, their “gold standard” answer (obtained from the fastai Forums Questionnaire wikis), and the relevant context from the fastbook chapter.</p>
<p>I have three objectives for this error analysis:</p>
<ul>
<li>Understand what kinds of questions are difficult to answer using semantic search.</li>
<li>Identify ambigious questions that need to be removed from the evaluation set.</li>
<li>Identify unanswerable questions that need to be removed.</li>
</ul>
<p>The overarching goal of this analysis: look at your data!</p>
<p>For each of the 29 questions, I will write four sections:</p>
<ul>
<li>Relevant Context: the paragraph(s) from the fastbook text that are sufficient to answer the question.</li>
<li>Analysis: my interpretation/explanation for why a semantic search did not retrieve the context.</li>
<li>Conclusion: what I think is needed to retrieve the sufficient context (or if I think this question should be removed)</li>
<li>Tags: keywords that describe the type of error.</li>
</ul>
<div class="cell" data-outputid="730721ed-3de1-44e6-9cf4-d4f21b6e6b7a" data-execution_count="69">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-2">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'https://gist.githubusercontent.com/vishalbakshi/9e0dc5b83c9b02810099f53377ced4ba/raw/3860f7dac972f37cc84cd10e22184c2bfd8813a4/cs_all.csv'</span></span>
<span id="cb1-3">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(url)</span>
<span id="cb1-4">score_columns <span class="op" style="color: #5E5E5E;">=</span> df.<span class="bu" style="color: null;">filter</span>(regex<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'_score$'</span>).columns</span>
<span id="cb1-5">df[<span class="st" style="color: #20794D;">'total_score'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[score_columns].<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-6">no_answer <span class="op" style="color: #5E5E5E;">=</span> df.query(<span class="st" style="color: #20794D;">"total_score == 0"</span>)</span>
<span id="cb1-7">no_answer.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>(29, 18)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> print_data(idx):</span>
<span id="cb3-2">  row <span class="op" style="color: #5E5E5E;">=</span> no_answer.iloc[idx]</span>
<span id="cb3-3">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Chapter, Question Number:'</span>,row[<span class="st" style="color: #20794D;">'chapter'</span>], row[<span class="st" style="color: #20794D;">'question_number'</span>])</span>
<span id="cb3-4">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Question Text:'</span>, row[<span class="st" style="color: #20794D;">'question_text'</span>])</span>
<span id="cb3-5">  <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Answer:'</span>, row[<span class="st" style="color: #20794D;">'answer'</span>])</span></code></pre></div>
</div>
<section id="chapter-1" class="level3">
<h3 class="anchored" data-anchor-id="chapter-1">Chapter 1</h3>
<section id="question-16" class="level4">
<h4 class="anchored" data-anchor-id="question-16">Question 16</h4>
<div class="cell" data-outputid="ee2ffda9-0201-4971-9630-ff697174dfd9" data-execution_count="71">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">print_data(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 1 16
Question Text: ""What do you need in order to train a model?""
Answer: ""You will need an architecture for the given problem. You will need data to input to your model. For most use-cases of deep learning, you will need labels for your data to compare your model predictions to. You will need a loss function that will quantitatively measure the performance of your model. And you need a way to update the parameters of the model in order to improve its performance (this is known as an optimizer).""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>From this picture we can now see some fundamental things about training a deep learning model:</p>
<ul>
<li>A model cannot be created without data.</li>
<li>A model can only learn to operate on the patterns seen in the input data used to train it.</li>
<li>This learning approach only creates predictions, not recommended actions.</li>
<li>It’s not enough to just have examples of input data; we need labels for that data too (e.g., pictures of dogs and cats aren’t enough to train a model; we need a label for each one, saying which ones are dogs, and which are cats).</li>
</ul>
</blockquote>
<blockquote class="blockquote">
<p>Machine learning is a discipline where we define a program not by writing it entirely ourselves, but by learning from data. Deep learning is a specialty within machine learning that uses neural networks with multiple layers. Image classification is a representative example (also known as image recognition). We start with labeled data; that is, a set of images where we have assigned a label to each image indicating what it represents. Our goal is to produce a program, called a model, which, given a new image, will make an accurate prediction regarding what that new image represents.</p>
<p>Every model starts with a choice of architecture, a general template for how that kind of model works internally. The process of training (or fitting) the model is the process of finding a set of parameter values (or weights) that specialize that general architecture into a model that works well for our particular kind of data. In order to define how well a model does on a single prediction, we need to define a loss function, which determines how we score a prediction as good or bad.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>Some of the methods did retrieve the first paragraph and bulleted list, however the key paragraph “Every model starts with a choice of architecture…” was not retrieved by any semantic search method.</p>
<p><strong>Conclusion:</strong></p>
<p>I would expect that increasing the chunk size would result in semantic search methods retrieving the relevant context.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-28" class="level4">
<h4 class="anchored" data-anchor-id="question-28">Question 28</h4>
<div class="cell" data-outputid="8052c21b-8fa3-4c0b-d2a2-2d2f398538d0" data-execution_count="72">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">print_data(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 1 28
Question Text: ""Are image models only useful for photos?""
Answer: ""Nope! Image models can be useful for other types of images like sketches, medical data, etc.
However, a lot of information can be represented as images . For example, a sound can be converted into a spectrogram, which is a visual interpretation of the audio. Time series (ex: financial data) can be converted to image by plotting on a graph. Even better, there are various transformations that generate images from time series, and have achieved good results for time series classification. There are many other examples, and by being creative, it may be possible to formulate your problem as an image classification problem, and use pretrained image models to obtain state-of-the-art results!""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>An image recognizer can, as its name suggests, only recognize images. But a lot of things can be represented as images, which means that an image recogniser can learn to complete many tasks.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>I was surprised that semantic search did not find the relevant context for this question. Some methods, like CS_F (Top-5 3-Paragraph Chunks) did at least retrieve a chunk from the correct section in the chapter (“Image Recognizers Can Tackle Non-Image Tasks”) but those chunks didn’t contain relevant context.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
</section>
<section id="chapter-2" class="level3">
<h3 class="anchored" data-anchor-id="chapter-2">Chapter 2</h3>
<section id="question-1" class="level4">
<h4 class="anchored" data-anchor-id="question-1">Question 1</h4>
<div class="cell" data-outputid="9879803e-a2eb-460e-e17e-eda0a417f683" data-execution_count="73">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">print_data(<span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 2 1
Question Text: ""Provide an example of where the bear classification model might work poorly in production, due to structural or style differences in the training data.""
Answer: ""Working with video data instead of images
Handling nighttime images, which may not appear in this dataset
Dealing with low-resolution camera images
Ensuring results are returned fast enough to be useful in practice
Recognizing bears in positions that are rarely seen in photos that people post online (for example from behind, partially covered by bushes, or when a long way away from the camera)""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>This can result in disaster! For instance, let’s say we really were rolling out a bear detection system that will be attached to video cameras around campsites in national parks, and will warn campers of incoming bears. If we used a model trained with the dataset we downloaded there would be all kinds of problems in practice, such as:</p>
<ul>
<li>Working with video data instead of images</li>
<li>Handling nighttime images, which may not appear in this dataset</li>
<li>Dealing with low-resolution camera images</li>
<li>Ensuring results are returned fast enough to be useful in practice</li>
<li>Recognizing bears in positions that are rarely seen in photos that people post online (for example from behind, partially covered by bushes, or when a long way away from the camera)</li>
</ul>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>I was expecting semantic search to find similarity between “work poorly in production” and phrases in the relevant context such as “rolling out” and “problems in practice”. The retrieved context focused on other sections in the chapter talking about other ways your ML system could go awry and ways to avoid those situations.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-4" class="level4">
<h4 class="anchored" data-anchor-id="question-4">Question 4</h4>
<div class="cell" data-outputid="6347ac40-78a4-47a8-f70a-c328a2fc6ff1" data-execution_count="74">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">print_data(<span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 2 4
Question Text: ""In situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process?""
Answer: ""The predictions of the model could be reviewed by human experts for them to evaluate the results and determine what is the best next step. This is especially true for applying machine learning for medical diagnoses. For example, a machine learning model for identifying strokes in CT scans can alert high priority cases for expedited review, while other cases are still sent to radiologists for review. Or other models can also augment the medical professional’s abilities, reducing risk but still improving efficiency of the workflow. For example, deep learning models can provide useful measurements for radiologists or pathologists.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>The ability of deep learning to combine text and images into a single model is, generally, far better than most people intuitively expect. For example, a deep learning model can be trained on input images with output captions written in English, and can learn to generate surprisingly appropriate captions automatically for new images! But again, we have the same warning that we discussed in the previous section: there is no guarantee that these captions will actually be correct.</p>
</blockquote>
<blockquote class="blockquote">
<p>Because of this serious issue, we generally recommend that deep learning be used not as an entirely automated process, but as part of a process in which the model and a human user interact closely. This can potentially make humans orders of magnitude more productive than they would be with entirely manual methods, and actually result in more accurate processes than using a human alone. For instance, an automatic system can be used to identify potential stroke victims directly from CT scans, and send a high-priority alert to have those scans looked at quickly. There is only a three-hour window to treat strokes, so this fast feedback loop could save lives. At the same time, however, all scans could continue to be sent to radiologists in the usual way, so there would be no reduction in human input. Other deep learning models could automatically measure items seen on the scans, and insert those measurements into reports, warning the radiologists about findings that they may have missed, and telling them about other cases that might be relevant.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>The semantic search methods did retrieve context related to the topics of rollout and having a human-in-the-loop, but were not able to retrieve the relevant context needed to answer this question. Some of the retrieved context deviated from the relevant topic, focusing instead on errors in the dataset.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-17" class="level4">
<h4 class="anchored" data-anchor-id="question-17">Question 17</h4>
<div class="cell" data-outputid="85102831-77d1-4f2f-daa9-21eccfd48df8" data-execution_count="75">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">print_data(<span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 2 17
Question Text: ""What is the difference between `item_tfms` and `batch_tfms`?""
Answer: ""item_tfms are transformations applied to a single data sample x on the CPU. Resize() is a common transform because the mini-batch of input images to a cnn must have the same dimensions. Assuming the images are RGB with 3 channels, then Resize() as item_tfms will make sure the images have the same width and height.
batch_tfms are applied to batched data samples (aka individual samples that have been collated into a mini-batch) on the GPU. They are faster and more efficient than item_tfms. A good example of these are the ones provided by aug_transforms(). Inside are several batch-level augmentations that help many models.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Our images are all different sizes, and this is a problem for deep learning: we don’t feed the model one image at a time but several of them (what we call a mini-batch). To group them in a big array (usually called a tensor) that is going to go through our model, they all need to be of the same size. So, we need to add a transform which will resize these images to the same size. <strong>Item transforms are pieces of code that run on each individual item, whether it be an image, category, or so forth.</strong> fastai includes many predefined transforms; we use the <code>Resize</code> transform here:</p>
</blockquote>
<blockquote class="blockquote">
<p>Data augmentation refers to creating random variations of our input data, such that they appear different, but do not actually change the meaning of the data. Examples of common data augmentation techniques for images are rotation, flipping, perspective warping, brightness changes and contrast changes. For natural photo images such as the ones we are using here, a standard set of augmentations that we have found work pretty well are provided with the aug_transforms function. <strong>Because our images are now all the same size, we can apply these augmentations to an entire batch of them using the GPU, which will save a lot of time. To tell fastai we want to use these transforms on a batch, we use the <code>batch_tfms</code> parameter</strong> (note that we’re not using RandomResizedCrop in this example, so you can see the differences more clearly; we’re also using double the amount of augmentation compared to the default, for the same reason):</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>My guess here is that the embedding model doesn’t know how to properly embed the terms <code>item_tfms</code> and <code>batch_tfms</code> because they are parameters to a fastai function. As a result, semantic search doesn’t find the appropriate match and instead all of my semantic search methods just returned random blocks of code from the chapter that contained either <code>item_tfms</code> or <code>batch_tfms</code>.</p>
<p><strong>Conclusion:</strong></p>
<p>This type of jargon-specific question might not be suitable for semantic search.</p>
<p><strong>Tags:</strong> keyword-based question</p>
</section>
<section id="question-27" class="level4">
<h4 class="anchored" data-anchor-id="question-27">Question 27</h4>
<div class="cell" data-outputid="29d82d98-bf3e-46b8-e1b2-edad1813d66a" data-execution_count="76">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">print_data(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 2 27
Question Text: ""What are the three steps in the deployment process?""
Answer: ""Manual process – the model is run in parallel and not directly driving any actions, with humans still checking the model outputs.
Limited scope deployment – The model’s scope is limited and carefully supervised. For example, doing a geographically and time-constrained trial of model deployment, that is carefully supervised.
Gradual expansion – The model scope is gradually increased, while good reporting systems are implemented in order to check for any significant changes to the actions taken compared to the manual process (i.e. the models should perform similarly to the humans, unless it is already anticipated to be better).""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Where possible, the first step is to use an entirely manual process, with your deep learning model approach running in parallel but not being used directly to drive any actions. The humans involved in the manual process should look at the deep learning outputs and check whether they make sense. For instance, with our bear classifier a park ranger could have a screen displaying video feeds from all the cameras, with any possible bear sightings simply highlighted in red. The park ranger would still be expected to be just as alert as before the model was deployed; the model is simply helping to check for problems at this point.</p>
</blockquote>
<blockquote class="blockquote">
<p>The second step is to try to limit the scope of the model, and have it carefully supervised by people. For instance, do a small geographically and time-constrained trial of the model-driven approach. Rather than rolling our bear classifier out in every national park throughout the country, we could pick a single observation post, for a one-week period, and have a park ranger check each alert before it goes out.</p>
</blockquote>
<blockquote class="blockquote">
<p>Then, gradually increase the scope of your rollout. As you do so, ensure that you have really good reporting systems in place, to make sure that you are aware of any significant changes to the actions being taken compared to your manual process. For instance, if the number of bear alerts doubles or halves after rollout of the new system in some location, we should be very concerned. Try to think about all the ways in which your system could go wrong, and then think about what measure or report or picture could reflect that problem, and ensure that your regular reporting includes that information.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>All of the semantic search methods retrieved context that was related to deployment, and some even retrieved the HTML image tag for the relevant “Deployment process”, but none of them retrieved the relevant paragraphs. It’s interesting to note that 1-Paragraph chunk methods retrieved the “Deployment process” image tag but non of the 3-Paragraph chunk methods retrieved any chunks from the correct section “## How to avoid disaster”</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
</section>
<section id="chapter-4" class="level3">
<h3 class="anchored" data-anchor-id="chapter-4">Chapter 4</h3>
<section id="question-10" class="level4">
<h4 class="anchored" data-anchor-id="question-10">Question 10</h4>
<div class="cell" data-outputid="f9126e66-4eda-4755-dedf-c73061a94ee8" data-execution_count="77">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">print_data(<span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 4 10
Question Text: ""What is broadcasting?""
Answer: ""Scientific/numerical Python packages like NumPy and PyTorch will often implement broadcasting that often makes code easier to write. In the case of PyTorch, tensors with smaller rank are expanded to have the same size as the larger rank tensor. In this way, operations can be performed between tensors with different rank.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Take another look at our function <code>mnist_distance</code>, and you’ll see we have there the subtraction (a-b). The magic trick is that PyTorch, when it tries to perform a simple subtraction operation between two tensors of different ranks, will use broadcasting. That is, it will automatically expand the tensor with the smaller rank to have the same size as the one with the larger rank. Broadcasting is an important capability that makes tensor code much easier to write.</p>
</blockquote>
<blockquote class="blockquote">
<p>After broadcasting so the two argument tensors have the same rank, PyTorch applies its usual logic for two tensors of the same rank: it performs the operation on each corresponding element of the two tensors, and returns the tensor result. For instance:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>All of my semantic search approaches retrieved chunks from the correct chapter section (“Computing Metrics Using Broadcasting”) but not the two relevant chunks needed to answer the question. This might be a scenario where including the markdown heading in each chunk’s text distracts the search from finding relevant context.</p>
<p><strong>Conclusion:</strong></p>
<p>I’m going to attribute the lack of retrieval to chunking strategy.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-12" class="level4">
<h4 class="anchored" data-anchor-id="question-12">Question 12</h4>
<div class="cell" data-outputid="63058152-f83a-448f-a8d2-da177731bb6f" data-execution_count="78">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">print_data(<span class="dv" style="color: #AD0000;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 4 12
Question Text: ""What is SGD?""
Answer: ""SGD, or stochastic gradient descent, is an optimization algorithm. Specifically, SGD is an algorithm that will update the parameters of a model in order to minimize a given loss function that was evaluated on the predictions and target. The key idea behind SGD (and many optimization algorithms, for that matter) is that the gradient of the loss function provides an indication of how that loss function changes in the parameter space, which we can use to determine how best to update the parameters in order to minimize the loss function. This is what SGD does.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>To be more specific, here are the steps that we are going to require, to turn this function into a machine learning classifier:</p>
<ol type="1">
<li>Initialize the weights.</li>
<li>For each image, use these weights to predict whether it appears to be a 3 or a 7.</li>
<li>Based on these predictions, calculate how good the model is (its loss).</li>
<li>Calculate the gradient, which measures for each weight, how changing that weight would change the loss</li>
<li>Step (that is, change) all the weights based on that calculation.</li>
<li>Go back to the step 2, and repeat the process.</li>
<li>Iterate until you decide to stop the training process (for instance, because the model is good enough or you don’t want to wait any longer).</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<p>We need to define first what we mean by “best.” We define this precisely by choosing a loss function, which will return a value based on a prediction and a target, where lower values of the function correspond to “better” predictions. It is important for loss functions to return lower values when predictions are more accurate, as the SGD procedure we defined earlier will try to minimize this loss. For continuous data, it’s common to use mean squared error:</p>
</blockquote>
<blockquote class="blockquote">
<p>As we’ve seen, we need gradients in order to improve our model using SGD, and in order to calculate gradients we need some loss function that represents how good our model is. That is because the gradients are a measure of how that loss function changes with small tweaks to the weights.</p>
</blockquote>
<blockquote class="blockquote">
<p>Looking good! We’re already about at the same accuracy as our “pixel similarity” approach, and we’ve created a general-purpose foundation we can build on. Our next step will be to create an object that will handle the SGD step for us. In PyTorch, it’s called an optimizer.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>There are 4 chunks in the chapter needed to answer the question in a way that matches the gold standard. Each of the 4 chunks are located in a different section of the chapter (“Stochastic Gradient Descent (SGD)”, “An End-to-End SGD Example”, “The MNIST Loss Function”, “Putting It All Together”). Three of the semantic search methods I used retrieved only one of these four chunks.</p>
<p><strong>Conclusion:</strong></p>
<p>I consider this a very difficult question to answer because there are at least 4 chunks needed to answer it and these chunks are spread out across the chapter. I’m attributing this error to chunking strategy.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
</section>
<section id="chapter-8" class="level3">
<h3 class="anchored" data-anchor-id="chapter-8">Chapter 8</h3>
<section id="question-14" class="level4">
<h4 class="anchored" data-anchor-id="question-14">Question 14</h4>
<div class="cell" data-outputid="cfffe113-a2ae-4309-c567-339aad37d021" data-execution_count="79">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">print_data(<span class="dv" style="color: #AD0000;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 8 14
Question Text: ""What does x[:,0] return?""
Answer: ""The user ids""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Note that the input of the model is a tensor of shape batch_size x 2, where the first column (x[:, 0]) contains the user IDs and the second column (x[:, 1]) contains the movie IDs. As explained before, we use the embedding layers to represent our matrices of user and movie latent factors:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>Similar to Chapter 2 Question 17, this question is about a specific code syntax, and maybe the embedding model didn’t know how to correctly embed those tokens if it wasn’t trained on PyTorch code?</p>
<p><strong>Conclusion:</strong></p>
<p>This type of jargon-specific question might not be suitable for semantic search.</p>
<p><strong>Tags:</strong> keyword-based question</p>
</section>
<section id="question-18" class="level4">
<h4 class="anchored" data-anchor-id="question-18">Question 18</h4>
<div class="cell" data-outputid="b4217d6c-c480-4262-9d47-31635d2c6e3e" data-execution_count="80">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">print_data(<span class="dv" style="color: #AD0000;">9</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 8 18
Question Text: ""What is the use of bias in a dot product model?""
Answer: ""A bias will compensate for the fact that some movies are just amazing or pretty bad. It will also compensate for users who often have more positive or negative recommendations in general.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>This is a reasonable start, but we can do better. One obvious missing piece is that some users are just more positive or negative in their recommendations than others, and some movies are just plain better or worse than others. But in our dot product representation we do not have any way to encode either of these things. If all you can say about a movie is, for instance, that it is very sci-fi, very action-oriented, and very not old, then you don’t really have any way to say whether most people like it.</p>
</blockquote>
<blockquote class="blockquote">
<p>That’s because at this point we only have weights; we do not have biases. If we have a single number for each user that we can add to our scores, and ditto for each movie, that will handle this missing piece very nicely. So first of all, let’s adjust our model architecture:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>I can’t say for sure, but I feel like there’s something about how the relevant context is worded that caused a lack of similarity between the question and context embeddings. Neither paragraph chunks mention the word “bias” (the second paragraph uses the word “biases”) and the answer is not explicitly stated in a single sentence (i.e.&nbsp;“in a dot product model the bias encodes how some users are more positive or negative in their recommendations or how some movies are just plain better or worse than others”). I don’t have a strong intuition about embeddings yet and perhaps what I am suggesting is more applicable to a keyword-based search.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
</section>
<section id="chapter-9" class="level3">
<h3 class="anchored" data-anchor-id="chapter-9">Chapter 9</h3>
<section id="question-5" class="level4">
<h4 class="anchored" data-anchor-id="question-5">Question 5</h4>
<div class="cell" data-outputid="01d62996-da4b-4a08-824d-a53d34e9975c" data-execution_count="81">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">print_data(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 5
Question Text: ""How do entity embeddings reduce memory usage and speed up neural networks?""
Answer: ""Especially for large datasets, representing the data as one-hot encoded vectors can be very inefficient (and also sparse). On the other hand, using entity embeddings allows the data to have a much more memory-efficient (dense) representation of the data. This will also lead to speed-ups for the model.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Entity embedding not only reduces memory usage and speeds up neural networks compared with one-hot encoding, but more importantly by mapping similar values close to each other in the embedding space it reveals the intrinsic properties of the categorical variables… [It] is especially useful for datasets with lots of high cardinality features, where other methods tend to overfit… As entity embedding defines a distance measure for categorical variables it can be used for visualizing categorical data and for data clustering.</p>
</blockquote>
<p><strong>Analysis</strong>:</p>
<p>After re-reading the question, relevant context and the gold standard answer dozens of items, I have come to conclude that this question is unanswerable given the chapter text. The questions asks <strong>how</strong> entity embeddings reduce memory usage and speed-up neural networks, but the only relevant context I found in the chapter states <strong>that</strong> “Entity embedding not only reduces memory usage and speeds up neural networks…” and doesn’t explain how, as stated in the gold standard answer.</p>
<p>You could argue that the memory efficiency/inefficiency of embeddings and one-hot encoded vectors has already been addressed in Chapter 8 in the following paragraphs:</p>
<blockquote class="blockquote">
<p>If we do that for a few indices at once, we will have a matrix of one-hot-encoded vectors, and that operation will be a matrix multiplication! This would be a perfectly acceptable way to build models using this kind of architecture, except that it would use a lot more memory and time than necessary. We know that there is no real underlying reason to store the one-hot-encoded vector, or to search through it to find the occurrence of the number one—we should just be able to index into an array directly with an integer. Therefore, most deep learning libraries, including PyTorch, include a special layer that does just this; it indexes into a vector using an integer, but has its derivative calculated in such a way that it is identical to what it would have been if it had done a matrix multiplication with a one-hot-encoded vector. This is called an embedding.</p>
<p>jargon: Embedding: Multiplying by a one-hot-encoded matrix, using the computational shortcut that it can be implemented by simply indexing directly. This is quite a fancy word for a very simple concept. The thing that you multiply the one-hot-encoded matrix by (or, using the computational shortcut, index into directly) is called the embedding matrix.</p>
</blockquote>
<p>However, I am not searching the entire textbook for each question, I am isolating the search for Chapter 9 questions to the Chapter 9 text.</p>
<p>I’ll also point out that for the keyword-based results, I accepted the retrieved context as sufficient to answer the question, but upon reflection I am changing my opinion on that.</p>
<p><strong>Conclusion:</strong></p>
<p>This question is unanswerable given just the Chapter 9 text.</p>
<p><strong>Tags:</strong> unanswerable</p>
</section>
<section id="question-9" class="level4">
<h4 class="anchored" data-anchor-id="question-9">Question 9</h4>
<div class="cell" data-outputid="2186f808-61b9-4b0a-d921-25277b5beddd" data-execution_count="82">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">print_data(<span class="dv" style="color: #AD0000;">11</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 9
Question Text: ""Summarize what a decision tree algorithm does.""
Answer: ""The basic idea of what a decision tree algorithm does is to determine how to group the data based on “questions” that we ask about the data. That is, we keep splitting the data based on the levels or values of the features and generate predictions based on the average target value of the data points in that group. Here is the algorithm:
Loop through each column of the dataset in turn
For each column, loop through each possible level of that column in turn
Try splitting the data into two groups, based on whether they are greater than or less than that value (or if it is a categorical variable, based on whether they are equal to or not equal to that level of that categorical variable)
Find the average sale price for each of those two groups, and see how close that is to the actual sale price of each of the items of equipment in that group. That is, treat this as a very simple “model” where our predictions are simply the average sale price of the item’s group
After looping through all of the columns and possible levels for each, pick the split point which gave the best predictions using our very simple model
We now have two different groups for our data, based on this selected split. Treat each of these as separate datasets, and find the best split for each, by going back to step one for each group
Continue this process recursively, and until you have reached some stopping criterion for each group — for instance, stop splitting a group further when it has only 20 items in it.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Let’s consider how we find the right questions to ask. Of course, we wouldn’t want to have to create all these questions ourselves—that’s what computers are for! The basic steps to train a decision tree can be written down very easily:</p>
<ol type="1">
<li>Loop through each column of the dataset in turn.</li>
<li>For each column, loop through each possible level of that column in turn.</li>
<li>Try splitting the data into two groups, based on whether they are greater than or less than that value (or if it is a categorical variable, based on whether they are equal to or not equal to that level of that categorical variable).</li>
<li>Find the average sale price for each of those two groups, and see how close that is to the actual sale price of each of the items of equipment in that group. That is, treat this as a very simple “model” where our predictions are simply the average sale price of the item’s group.</li>
<li>After looping through all of the columns and all the possible levels for each, pick the split point that gave the best predictions using that simple model.</li>
<li>We now have two different groups for our data, based on this selected split. Treat each of these as separate datasets, and find the best split for each by going back to step 1 for each group.</li>
<li>Continue this process recursively, until you have reached some stopping criterion for each group—for instance, stop splitting a group further when it has only 20 items in it.</li>
</ol>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>Only one of the semantic search methods retrieved context that was close to the desired context in the chapter:</p>
<blockquote class="blockquote">
<p>Decision tree ensembles, as the name suggests, rely on decision trees. So let’s start there! A decision tree asks a series of binary (that is, yes or no) questions about the data. After each question the data at that part of the tree is split between a “yes” and a “no” branch, as shown in &lt;<decision_tree>&gt;. After one or more questions, either a prediction can be made on the basis of all previous answers or another question is required.</decision_tree></p>
</blockquote>
<p>However, that paragraph doesn’t address everything that’s included in the gold standard answer so I didn’t consider that as a successful retrieval.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-13" class="level4">
<h4 class="anchored" data-anchor-id="question-13">Question 13</h4>
<div class="cell" data-outputid="d8cb95d6-11cf-472e-c207-2f9f5bbc6512" data-execution_count="83">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">print_data(<span class="dv" style="color: #AD0000;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 13
Question Text: ""How are mse, samples, and values calculated in the decision tree drawn in this chapter?""
Answer: ""By traversing the tree based on answering questions about the data, we reach the nodes that tell us the average value of the data in that group, the mse, and the number of samples in that group.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>The top node represents the initial model before any splits have been done, when all the data is in one group. This is the simplest possible model. It is the result of asking zero questions and will always predict the value to be the average value of the whole dataset. In this case, we can see it predicts a value of 10.10 for the logarithm of the sales price. It gives a mean squared error of 0.48. The square root of this is 0.69. (Remember that unless you see m_rmse, or a root mean squared error, then the value you are looking at is before taking the square root, so it is just the average of the square of the differences.) We can also see that there are 404,710 auction records in this group—that is the total size of our training set. The final piece of information shown here is the decision criterion for the best split that was found, which is to split based on the coupler_system column.</p>
</blockquote>
<blockquote class="blockquote">
<p>Moving down and to the left, this node shows us that there were 360,847 auction records for equipment where coupler_system was less than 0.5. The average value of our dependent variable in this group is 10.21. Moving down and to the right from the initial model takes us to the records where coupler_system was greater than 0.5.</p>
</blockquote>
<blockquote class="blockquote">
<p>The bottom row contains our leaf nodes: the nodes with no answers coming out of them, because there are no more questions to be answered. At the far right of this row is the node containing records where coupler_system was greater than 0.5. The average value here is 9.21, so we can see the decision tree algorithm did find a single binary decision that separated high-value from low-value auction results. Asking only about coupler_system predicts an average value of 9.21 versus 10.1.</p>
</blockquote>
<blockquote class="blockquote">
<p>Returning back to the top node after the first decision point, we can see that a second binary decision split has been made, based on asking whether YearMade is less than or equal to 1991.5. For the group where this is true (remember, this is now following two binary decisions, based on coupler_system and YearMade) the average value is 9.97, and there are 155,724 auction records in this group. For the group of auctions where this decision is false, the average value is 10.4, and there are 205,123 records. So again, we can see that the decision tree algorithm has successfully split our more expensive auction records into two more groups which differ in value significantly.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>The gold standard answer is not explicitly stated (or even paraphrased) in the relevant context but serves as a summary of it. Especially without the image, I find that this is a difficult question to answer just based on the chapter’s text—you have to synthesize the information presented in both the text and the image and then summarize the overall process of how MSE, samples and values are calculated.</p>
<p>One of the semantic search methods did retrieve the first paragraph of the relevant context (“The top node represents the initial model…”) but I didn’t consider that sufficient to answer the question. Based just on that question (without the image and without the subsequent paragraphs) I would arrive at the conclusion that MSE, samples and values are calculated in the top node, and would not include the relevant context about traversing the tree, or how there are nodes other than the top one in the tree which contain this information.</p>
<p>I’m considering removing this question from the evals because of these reasons, but will keep it for now in case the LLM can deduce the correct answer given the first paragraph of context.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. I attribute this error to this question requiring the image to answer.</p>
<p><strong>Tags:</strong> requires image</p>
</section>
<section id="question-14-1" class="level4">
<h4 class="anchored" data-anchor-id="question-14-1">Question 14</h4>
<div class="cell" data-outputid="82b07436-9501-48b9-c7e3-0e6e99cb5140" data-execution_count="84">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">print_data(<span class="dv" style="color: #AD0000;">13</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 14
Question Text: ""How do we deal with outliers, before building a decision tree?""
Answer: ""Finding out of domain data (Outliers)
Sometimes it is hard to even know whether your test set is distributed in the same way as your training data or, if it is different, then what columns reflect that difference. There’s actually a nice easy way to figure this out, which is to use a random forest!
But in this case we don’t use a random forest to predict our actual dependent variable. Instead we try to predict whether a row is in the validation set, or the training set.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Sometimes it is hard to know whether your test set is distributed in the same way as your training data, or, if it is different, what columns reflect that difference. There’s actually an easy way to figure this out, which is to use a random forest!</p>
</blockquote>
<blockquote class="blockquote">
<p>But in this case we don’t use the random forest to predict our actual dependent variable. Instead, we try to predict whether a row is in the validation set or the training set. To see this in action, let’s combine our training and validation sets together, create a dependent variable that represents which dataset each row comes from, build a random forest using that data, and get its feature importance:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>None of the semantic search methods retrieved context from the correct section in the chapter (“Finding Out-of-Domain Data”). I don’t have much intuition or insight into why, but I would think that it has to do with the embeddings of “outliers” being dissimilar to the embeddings of “Out-of-Domain” and “distributed.”</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-15" class="level4">
<h4 class="anchored" data-anchor-id="question-15">Question 15</h4>
<div class="cell" data-outputid="600ce5a1-2dca-44d9-cd25-51cd923eb645" data-execution_count="85">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">print_data(<span class="dv" style="color: #AD0000;">14</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 15
Question Text: ""How do we handle categorical variables in a decision tree?""
Answer: ""We convert the categorical variables to integers, where the integers correspond to the discrete levels of the categorical variable. Apart from that, there is nothing special that needs to be done to get it to work with decision trees (unlike neural networks, where we use embedding layers).""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Categorify is a TabularProc that replaces a column with a numeric categorical column. FillMissing is a TabularProc that replaces missing values with the median of the column, and creates a new Boolean column that is set to True for any row where the value was missing. These two transforms are needed for nearly every tabular dataset you will use, so this is a good starting point for your data processing:</p>
</blockquote>
<blockquote class="blockquote">
<p>We can see that the data is still displayed as strings for categories (we only show a few columns here because the full table is too big to fit on a page):</p>
</blockquote>
<blockquote class="blockquote">
<p>However, the underlying items are all numeric:</p>
</blockquote>
<blockquote class="blockquote">
<p>The conversion of categorical columns to numbers is done by simply replacing each unique level with a number. The numbers associated with the levels are chosen consecutively as they are seen in a column, so there’s no particular meaning to the numbers in categorical columns after conversion. The exception is if you first convert a column to a Pandas ordered category (as we did for ProductSize earlier), in which case the ordering you chose is used. We can see the mapping by looking at the classes attribute:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>The relevant context needed to answer this question contains paragraphs that do not appear consecutively in the chapter and are interweaved with chunks of code. No single sentence (or paragraph) contains the information presented in the gold standard answer tha:</p>
<blockquote class="blockquote">
<p>we convert the categorical variables to integers, where the integers correspond to the discrete levels of the categorical variable.</p>
</blockquote>
<p>For these reasons, I think semantic search failed to retrieve any paragraph from the correct section (“Using TabularPandas and TabularProc”).</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. I attribute this to chunking strategy.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-18-1" class="level4">
<h4 class="anchored" data-anchor-id="question-18-1">Question 18</h4>
<div class="cell" data-outputid="699e9ec5-b4b2-49d8-db5a-ed0e221f8493" data-execution_count="86">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">print_data(<span class="dv" style="color: #AD0000;">15</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 18
Question Text: ""If you increase n_estimators to a very high value, can that lead to overfitting? Why or why not?""
Answer: ""A higher n_estimators mean more decision trees are being used. However, since the trees are independent of each other, using higher n_estimators does not lead to overfitting.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Note that, unlike with random forests, with this approach there is nothing to stop us from overfitting. Using more trees in a random forest does not lead to overfitting, because each tree is independent of the others. But in a boosted ensemble, the more trees you have, the better the training error becomes, and eventually you will see overfitting on the validation set.</p>
</blockquote>
<blockquote class="blockquote">
<p>One of the most important properties of random forests is that they aren’t very sensitive to the hyperparameter choices, such as <code>max_features</code>. You can set <code>n_estimators</code> to as high a number as you have time to train—the more trees you have, the more accurate the model will be. <code>max_samples</code> can often be left at its default, unless you have over 200,000 data points, in which case setting it to 200,000 will make it train faster with little impact on accuracy. <code>max_features=0.5</code> and <code>min_samples_leaf=4</code> both tend to work well, although <code>sklearn</code>’s defaults work well too.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>Both paragraphs are needed to answer the question and they are not located next to each other in the chapter. The first paragraph is from the “Boosting” section, and the second paragraph is from the “Creating a Random Forest” section. Four of my semantic search methods retrieved the first paragraph (corresponding to the “does not lead to overfitting” part of the gold standard answer) but none of the methods retrieved the second paragraph which corresponds to the “a higher <code>n_estimators</code> mean more decision trees are being used” part of the answer.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. I’m attributing this error to chunking strategy.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-23" class="level4">
<h4 class="anchored" data-anchor-id="question-23">Question 23</h4>
<div class="cell" data-outputid="8dca7e27-9e38-4c04-bf87-94734ae319cd" data-execution_count="87">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">print_data(<span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 9 23
Question Text: ""What's the purpose of removing unimportant variables?""
Answer: ""Sometimes, it is better to have a more interpretable model with less features, so removing unimportant variables helps in that regard.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>We’ve found that generally the first step to improving a model is simplifying it—78 columns was too many for us to study them all in depth! Furthermore, in practice often a simpler, more interpretable model is easier to roll out and maintain.</p>
</blockquote>
<blockquote class="blockquote">
<p>It seems likely that we could use just a subset of the columns by removing the variables of low importance and still get good results. Let’s try just keeping those with a feature importance greater than 0.005:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>In order to match the content of the gold standard answer, both of these paragraphs are needed.</p>
<p>None of my semantic search methods retrieved these paragraphs. Interesting to note, three of the methods did retrieve the following paragraph from a different section (“Removing Redundant Features”) but the question is about unimportant variables, not redundant ones (though you could argue that redundant variables are unimportant). Regardless, just this one paragraph is not sufficient to match the content in the gold standard answer (it doesn’t mention anything about importance):</p>
<blockquote class="blockquote">
<p>One thing that makes this harder to interpret is that there seem to be some variables with very similar meanings: for example, <code>ProductGroup</code> and <code>ProductGroupDesc</code>. Let’s try to remove any redundent features.</p>
</blockquote>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
</section>
<section id="chapter-10" class="level3">
<h3 class="anchored" data-anchor-id="chapter-10">Chapter 10</h3>
<section id="question-7" class="level4">
<h4 class="anchored" data-anchor-id="question-7">Question 7</h4>
<div class="cell" data-outputid="a2b5c13f-1728-4477-abba-ccff714268e2" data-execution_count="88">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">print_data(<span class="dv" style="color: #AD0000;">17</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 7
Question Text: ""How do the 50,000 unlabeled movie reviews help us create a better text classifier for the IMDb dataset?""
Answer: ""By learning how to predict the next word of a movie review, the model better understands the language style and structure of the text classification dataset and can, therefore, perform better when fine-tuned as a classifier.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>One reason, of course, is that it is helpful to understand the foundations of the models that you are using. But there is another very practical reason, which is that you get even better results if you fine-tune the (sequence-based) language model prior to fine-tuning the classification model. For instance, for the IMDb sentiment analysis task, the dataset includes 50,000 additional movie reviews that do not have any positive or negative labels attached. Since there are 25,000 labeled reviews in the training set and 25,000 in the validation set, that makes 100,000 movie reviews altogether. We can use all of these reviews to fine-tune the pretrained language model, which was trained only on Wikipedia articles; this will result in a language model that is particularly good at predicting the next word of a movie review.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>This question is asking about a specific paragraph in the chapter which explicitly states the “50,000 additional movie reviews.” None of my semantic search methods retrieved this paragraph.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. My guess for why is that this question requires the keyword “50,000” to be in the answer.</p>
<p><strong>Tags:</strong> keyword-based question</p>
</section>
<section id="question-8" class="level4">
<h4 class="anchored" data-anchor-id="question-8">Question 8</h4>
<div class="cell" data-outputid="6dcaf4ac-8d3c-4945-c492-87f7c629b762" data-execution_count="89">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">print_data(<span class="dv" style="color: #AD0000;">18</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 8
Question Text: ""What are the three steps to prepare your data for a language model?""
Answer: ""Tokenization
Numericalization
Language model DataLoader""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Each of the steps necessary to create a language model has jargon associated with it from the world of natural language processing, and fastai and PyTorch classes available to help. The steps are:</p>
</blockquote>
<blockquote class="blockquote">
<ul>
<li>Tokenization:: Convert the text into a list of words (or characters, or substrings, depending on the granularity of your model) Numericalization:: Make a list of all of the unique words that appear (the vocab), and convert each word into a number, by looking up its index in the vocab</li>
<li>Language model data loader creation:: fastai provides an LMDataLoader class which automatically handles creating a dependent variable that is offset from the independent variable by one token. It also handles some important details, such as how to shuffle the training data in such a way that the dependent and independent variables maintain their structure as required</li>
<li>Language model creation:: We need a special kind of model that does something we haven’t seen before: handles input lists which could be arbitrarily big or small. There are a number of ways to do this; in this chapter we will be using a recurrent neural network (RNN). We will get to the details of these RNNs in the &lt;<chapter_nlp_dive>&gt;, but for now, you can think of it as just another deep neural network.</chapter_nlp_dive></li>
</ul>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>All of my semantic search methods retrieved the first paragraph introducing the three steps (“Each of the steps necessary…The steps are:” but did not retrieve the very next paragraph which contained information about the three steps.</p>
<p><strong>Conclusion:</strong></p>
<p>I attribute this error to chunking strategy.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-9-1" class="level4">
<h4 class="anchored" data-anchor-id="question-9-1">Question 9</h4>
<div class="cell" data-outputid="3c575413-07c5-4146-b399-557278a5e131" data-execution_count="90">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">print_data(<span class="dv" style="color: #AD0000;">19</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 9
Question Text: ""What is ""tokenization""? Why do we need it?""
Answer: ""Tokenization is the process of converting text into a list of words. It is not as simple as splitting on the spaces. Therefore, we need a tokenizer that deals with complicated cases like punctuation, hypenated words, etc.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Tokenization:: Convert the text into a list of words (or characters, or substrings, depending on the granularity of your model)</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>While all of my sementic search methods retrieved context related to tokenization, none of them retrieved the relevant context that defined the term.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-12-1" class="level4">
<h4 class="anchored" data-anchor-id="question-12-1">Question 12</h4>
<div class="cell" data-outputid="94f0caf4-792e-4918-e04f-f1df8df3edbb" data-execution_count="91">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">print_data(<span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 12
Question Text: ""List four rules that fastai applies to text during tokenization.""
Answer: ""Here are all the rules:
fix_html :: replace special HTML characters by a readable version (IMDb reviews have quite a few of them for instance) ;
replace_rep :: replace any character repeated three times or more by a special token for repetition (xxrep), the number of times it’s repeated, then the character ;
replace_wrep :: replace any word repeated three times or more by a special token for word repetition (xxwrep), the number of times it’s repeated, then the word ;
spec_add_spaces :: add spaces around / and # ;
rm_useless_spaces :: remove all repetitions of the space character ;
replace_all_caps :: lowercase a word written in all caps and adds a special token for all caps (xxcap) in front of it ;
replace_maj :: lowercase a capitalized word and adds a special token for capitalized (xxmaj) in front of it ;
lowercase :: lowercase all text and adds a special token at the beginning (xxbos) and/or the end (xxeos).""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Here is a brief summary of what each does:</p>
</blockquote>
<blockquote class="blockquote">
<ul>
<li><code>fix_html</code>:: Replaces special HTML characters with a readable version (IMDb reviews have quite a few of these)</li>
<li><code>replace_rep</code>:: Replaces any character repeated three times or more with a special token for repetition (xxrep), the number of times it’s repeated, then the character</li>
<li><code>replace_wrep</code>:: Replaces any word repeated three times or more with a special token for word repetition (xxwrep), the number of times it’s repeated, then the word</li>
<li><code>spec_add_spaces</code>:: Adds spaces around / and #</li>
<li><code>rm_useless_spaces</code>:: Removes all repetitions of the space character</li>
<li><code>replace_all_caps</code>:: Lowercases a word written in all caps and adds a special token for all caps (xxup) in front of it</li>
<li><code>replace_maj</code>:: Lowercases a capitalized word and adds a special token for capitalized (xxmaj) in front of it</li>
<li><code>lowercase</code>:: Lowercases all text and adds a special token at the beginning (xxbos) and/or the end (xxeos)</li>
</ul>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>None of my semantic search methods retrieved the relevant context, although three of them retrieved context related to this topic.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-13-1" class="level4">
<h4 class="anchored" data-anchor-id="question-13-1">Question 13</h4>
<div class="cell" data-outputid="d22fc932-c70b-49f6-fd57-0c7cb929bd65" data-execution_count="92">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">print_data(<span class="dv" style="color: #AD0000;">21</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 13
Question Text: ""Why are repeated characters replaced with a token showing the number of repetitions and the character that's repeated?""
Answer: ""We can expect that repeated characters could have special or different meaning than just a single character. By replacing them with a special token showing the number of repetitions, the model’s embedding matrix can encode information about general concepts such as repeated characters rather than requiring a separate token for every number of repetitions of every character.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>For instance, the rules will replace a sequence of four exclamation points with a special repeated character token, followed by the number four, and then a single exclamation point. In this way, the model’s embedding matrix can encode information about general concepts such as repeated punctuation rather than requiring a separate token for every number of repetitions of every punctuation mark. Similarly, a capitalized word will be replaced with a special capitalization token, followed by the lowercase version of the word. This way, the embedding matrix only needs the lowercase versions of the words, saving compute and memory resources, but can still learn the concept of capitalization.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>None of my semantic search methods retrieved the relevant context. Three approaches did get close, as they retrieved the following chunk from the same section in the chapter:</p>
<blockquote class="blockquote">
<p>Here is a brief summary of what each does:</p>
<ul>
<li><code>fix_html</code>:: Replaces special HTML characters with a readable version (IMDb reviews have quite a few of these)</li>
<li><code>replace_rep</code>:: Replaces any character repeated three times or more with a special token for repetition (<code>xxrep</code>), the number of times it’s repeated, then the character</li>
<li><code>replace_wrep</code>:: Replaces any word repeated three times or more with a special token for word repetition (<code>xxwrep</code>), the number of times it’s repeated, then the word</li>
<li><code>spec_add_spaces</code>:: Adds spaces around / and #</li>
<li><code>rm_useless_spaces</code>:: Removes all repetitions of the space character</li>
<li><code>replace_all_caps</code>:: Lowercases a word written in all caps and adds a special token for all caps (<code>xxup</code>) in front of it</li>
<li><code>replace_maj</code>:: Lowercases a capitalized word and adds a special token for capitalized (<code>xxmaj</code>) in front of it</li>
<li><code>lowercase</code>:: Lowercases all text and adds a special token at the beginning (<code>xxbos</code>) and/or the end (<code>xxeos</code>)</li>
</ul>
</blockquote>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-15-1" class="level4">
<h4 class="anchored" data-anchor-id="question-15-1">Question 15</h4>
<div class="cell" data-outputid="d9431095-7fa2-4fe7-b681-6c16c15d3c8d" data-execution_count="93">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">print_data(<span class="dv" style="color: #AD0000;">22</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 15
Question Text: ""Why might there be words that are replaced with the ""unknown word"" token?""
Answer: ""If all the words in the dataset have a token associated with them, then the embedding matrix will be very large, increase memory usage, and slow down training. Therefore, only words with more than min_freq occurrence are assigned a token and finally a number, while others are replaced with the “unknown word” token.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Our special rules tokens appear first, and then every word appears once, in frequency order. The defaults to <code>Numericalize</code> are <code>min_freq=3</code>,<code>max_vocab=60000</code>. <code>max_vocab=60000</code> results in fastai replacing all words other than the most common 60,000 with a special unknown word token, <code>xxunk</code>. This is useful to avoid having an overly large embedding matrix, since that can slow down training and use up too much memory, and can also mean that there isn’t enough data to train useful representations for rare words. However, this last issue is better handled by setting <code>min_freq</code>; the default <code>min_freq=3</code> means that any word appearing less than three times is replaced with <code>xxunk</code>.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>The closest any of the methods got to retrieving the relevant context was by retrieving the following chunk that comes from the same section in the chapter:</p>
<blockquote class="blockquote">
<p>Here are some of the main special tokens you’ll see:</p>
<ul>
<li><code>xxbos</code>:: Indicates the beginning of a text (here, a review)</li>
<li><code>xxmaj</code>:: Indicates the next word begins with a capital (since we lowercased everything)</li>
<li><code>xxunk</code>:: Indicates the word is unknown</li>
</ul>
</blockquote>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. However, I’m not sure why this is the case.</p>
<p><strong>Tags:</strong> unknown failure</p>
</section>
<section id="question-18-2" class="level4">
<h4 class="anchored" data-anchor-id="question-18-2">Question 18</h4>
<div class="cell" data-outputid="2b89b4d8-c253-4087-bba4-e6c4d80e3481" data-execution_count="94">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">print_data(<span class="dv" style="color: #AD0000;">23</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 10 18
Question Text: ""What does an embedding matrix for NLP contain? What is its shape?""
Answer: ""It contains vector representations of all tokens in the vocabulary. The embedding matrix has the size (vocab_size x embedding_size), where vocab_size is the length of the vocabulary, and embedding_size is an arbitrary number defining the number of latent factors of the tokens.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<ol type="1">
<li>Make a list of all possible levels of that categorical variable (we’ll call this list the vocab).</li>
<li>Replace each level with its index in the vocab.</li>
<li>Create an embedding matrix for this containing a row for each level (i.e., for each item of the vocab).</li>
<li>Use this embedding matrix as the first layer of a neural network. (A dedicated embedding matrix can take as inputs the raw vocab indexes created in step 2; this is equivalent to but faster and more efficient than a matrix that takes as input one-hot-encoded vectors representing the indexes.)</li>
</ol>
</blockquote>
<blockquote class="blockquote">
<p>Our vocab will consist of a mix of common words that are already in the vocabulary of our pretrained model and new words specific to our corpus (cinematographic terms or actors names, for instance). Our embedding matrix will be built accordingly: for words that are in the vocabulary of our pretrained model, we will take the corresponding row in the embedding matrix of the pretrained model; but for new words we won’t have anything, so we will just initialize the corresponding row with a random vector.</p>
</blockquote>
<blockquote class="blockquote">

</blockquote>
<p><strong>Analysis:</strong></p>
<p>The relevant context from the chapter is sufficient to answer the question in a way that matches the gold standard. Previous knowledge of embeddings (outside of this chapter) is required to know that there is such a thing as <code>embedding_size</code>.</p>
<p><strong>Conclusion:</strong></p>
<p>To be consistent, I’ll remove this question from my evals since it cannot be fully answered by the text in the relevant chapter. That being said, I will be evaluating an LLM on this and other “unanswerable” questions as a capable LLM will likely be able to answer some of them.</p>
<p><strong>Tags:</strong> unanswerable</p>
</section>
</section>
<section id="chapter-13" class="level3">
<h3 class="anchored" data-anchor-id="chapter-13">Chapter 13</h3>
<section id="question-4-1" class="level4">
<h4 class="anchored" data-anchor-id="question-4-1">Question 4</h4>
<div class="cell" data-outputid="8144ffbf-cf31-4a87-e32c-d4c9ecb09178" data-execution_count="95">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">print_data(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 13 4
Question Text: ""What is the value of a convolutional kernel apply to a 3×3 matrix of zeros?""
Answer: ""A zero matrix.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Now we’re going to take the top 3×3-pixel square of our image, and multiply each of those values by each item in our kernel. Then we’ll add them up, like so:</p>
</blockquote>
<blockquote class="blockquote">
<pre><code>im3_t = tensor(im3)
im3_t[0:3,0:3] * top_edge
     
tensor([[-0., -0., -0.],
        [0., 0., 0.],
        [0., 0., 0.]])

(im3_t[0:3,0:3] * top_edge).sum()</code></pre>
<pre><code>tensor(0.)</code></pre>
<p>Not very interesting so far—all the pixels in the top-left corner are white. But let’s pick a couple of more interesting spots:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>This is a challenging question to answer as it requires context that’s a mix of plain text and code. This relevant context is equal to 4 separate paragraphs which is larger than the chunk size I’m using.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. Perhaps a different chunking strategy would help.</p>
<p><strong>Tags:</strong> difficult question, chunking strategy</p>
</section>
<section id="question-5-1" class="level4">
<h4 class="anchored" data-anchor-id="question-5-1">Question 5</h4>
<div class="cell" data-outputid="84dde176-80e0-4f43-df53-a7004b5b46cd" data-execution_count="96">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">print_data(<span class="dv" style="color: #AD0000;">25</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 13 5
Question Text: ""What is ""padding""?""
Answer: ""Padding is the additional pixels that are added around the outside of the image, allows the kernel to be applied to the edge of the image for a convolution.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>It would be nice to not lose those two pixels on each axis. The way we do that is to add padding, which is simply additional pixels added around the outside of our image. Most commonly, pixels of zeros are added.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>All of my semantic search methods retrieved context from the section titled “Strides and Padding” instead of the section where the definition was found, “Convolutions in PyTorch”.</p>
<p><strong>Conclusion:</strong></p>
<p>Including the header in the chunk text might have distracted semantic search from the retrieving relevant context.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-20" class="level4">
<h4 class="anchored" data-anchor-id="question-20">Question 20</h4>
<div class="cell" data-outputid="4a34d4b9-becd-4ea7-d3ad-0eaefc989da5" data-execution_count="97">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">print_data(<span class="dv" style="color: #AD0000;">26</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 13 20
Question Text: ""How is a color image represented as a tensor?""
Answer: ""It is a rank-3 tensor of shape (3, height, width)""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>One batch contains 64 images, each of 1 channel, with 28×28 pixels. <code>F.conv2d</code> can handle multichannel (i.e., color) images too. A channel is a single basic color in an image—for regular full-color images there are three channels, red, green, and blue. PyTorch represents an image as a rank-3 tensor, with dimensions <code>[channels, rows, columns]</code>.</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>All of my semantic search methods retrieved irrelevant context from the section titled “Color Image” but not from the section containing the relevant context, “Convolutions in PyTorch”.</p>
<p><strong>Conclusion:</strong></p>
<p>Including the header in the chunk text might have distracted semantic search from the retrieving relevant context.</p>
<p><strong>Tags:</strong> chunking strategy</p>
</section>
<section id="question-22" class="level4">
<h4 class="anchored" data-anchor-id="question-22">Question 22</h4>
<div class="cell" data-outputid="f53d6848-52e2-4f75-fd98-f5eb02ea37b2" data-execution_count="103">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">print_data(<span class="dv" style="color: #AD0000;">27</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 13 22
Question Text: ""What method can we use to see that data in DataLoaders?""
Answer: ""show_batch""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>Remember, it’s always a good idea to look at your data before you use it:</p>
<pre><code>dls.show_batch(max_n=9, figsize=(4,4))</code></pre>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>The relevant context shown was the only occurence of <code>show_batch</code> in the chapter and all of my semantic search methods failed to retrieve it.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer. I attribute this error to this question requiring the keyword “show_batch” in the answer.</p>
<p><strong>Tags:</strong> keyword-based question</p>
</section>
<section id="question-24" class="level4">
<h4 class="anchored" data-anchor-id="question-24">Question 24</h4>
<div class="cell" data-outputid="e3df69c0-ebdf-4cc7-82cb-097691892e14" data-execution_count="107">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">print_data(<span class="dv" style="color: #AD0000;">28</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Chapter, Question Number: 13 24
Question Text: ""Why do we use a larger kernel in the first conv with MNIST (with simple_cnn)?""
Answer: ""With the first layer, if the kernel size is 3x3, with four output filters, then nine pixels are being used to produce 8 output numbers so there is not much learning since input and output size are almost the same. Neural networks will only create useful features if they’re forced to do so—that is, if the number of outputs from an operation is significantly smaller than the number of inputs. To fix this, we can use a larger kernel in the first layer.""</code></pre>
</div>
</div>
<p><strong>Relevant Context:</strong></p>
<blockquote class="blockquote">
<p>As we discussed, we generally want to double the number of filters each time we have a stride-2 layer. One way to increase the number of filters throughout our network is to double the number of activations in the first layer–then every layer after that will end up twice as big as in the previous version as well.</p>
</blockquote>
<blockquote class="blockquote">
<p>But there is a subtle problem with this. Consider the kernel that is being applied to each pixel. By default, we use a 3×3-pixel kernel. That means that there are a total of 3×3 = 9 pixels that the kernel is being applied to at each location. Previously, our first layer had four output filters. That meant that there were four values being computed from nine pixels at each location. Think about what happens if we double this output to eight filters. Then when we apply our kernel we will be using nine pixels to calculate eight numbers. That means it isn’t really learning much at all: the output size is almost the same as the input size. Neural networks will only create useful features if they’re forced to do so—that is, if the number of outputs from an operation is significantly smaller than the number of inputs.</p>
</blockquote>
<blockquote class="blockquote">
<p>To fix this, we can use a larger kernel in the first layer. If we use a kernel of 5×5 pixels then there are 25 pixels being used at each kernel application. Creating eight filters from this will mean the neural net will have to find some useful features:</p>
</blockquote>
<p><strong>Analysis:</strong></p>
<p>This is a complex topic and the relevant context needed to answer this question is relatively large. To match the gold standard answer, the three paragraphs must be summarized as the answer is not explicitly or simply stated.</p>
<p><strong>Conclusion:</strong></p>
<p>While this question may not be unanswerable by semantic search in general, the methods I used certainly found it impossible to answer.</p>
<p><strong>Tags:</strong> difficult question</p>
</section>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Here is a summary of tags across the 29 questions where the Answer Rate for all of my semantic search methods was 0% (i.e.&nbsp;none of the methods retrieved the context needed to answer the question):</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Tag</th>
<th style="text-align: center;">Count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">unknown failure</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: center;">chunking strategy</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">keyword-based question</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;">difficult question</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">unanswerable</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">requires image</td>
<td style="text-align: center;">1</td>
</tr>
</tbody>
</table>
<p>The most common error was due to <code>unknown failure</code> (12) where I didn’t have a guess for why semantic search failed. I attribute this to my lack of experience using embeddings.</p>
<p>The next most common error type was <code>chunking strategy</code> (9). These were situations where the relevant context needed to match the gold standard answer was longer than 3 paragraphs or spread out across multiple sections in the chapter.</p>
<p>There were 4 <code>keyword-based question</code>s where the question and relevant context contained a specific keyword (like <code>show_batch</code> or “50,000”). I felt these were better suited for a keyword-based search.</p>
<p>The relevant context for the 2 <code>difficult question</code>s did not explicitly state/paraphrase the gold standard answer and required inferring/summarization. With the right prompting, a capable LLM could handle this correctly.</p>
<p>The 2 <code>unanswerable</code> questions were those where the corresponding chapter text did not contain the answer, and required external knowledge (including other chapters of the book).</p>
<p>Finally, 1 question required an image to achieve the gold standard answer.</p>
<p>I’m curious to see for which of these questions keyword-based search yielded better results (and vice versa). I’ll be analyzing that next.</p>
<p>Here is a summary of how many 0% Answer Rate questions there are for each chapter. Semantic search struggled considerably in retrieving relevant context for Chapter 9 and 10 questions.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Chapter</th>
<th style="text-align: center;"># of Questions with 0% Answer Rate</th>
<th style="text-align: center;">% of Chapter Questions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">9</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">25%</td>
</tr>
<tr class="even">
<td style="text-align: center;">10</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">33%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">13</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">15%</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">15%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">7%</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">6%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">9%</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>python</category>
  <category>RAG</category>
  <category>information retrieval</category>
  <category>fastbookRAG</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-error-analysis/index.html</guid>
  <pubDate>Tue, 22 Oct 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-10-22-fastbookRAG-cs-error-analysis/1.png" medium="image" type="image/png" height="33" width="144"/>
</item>
<item>
  <title>Experimenting with os.fork</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-09-30-os-fork/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In Lesson 10 of the fastai course (Part 2) we’re introduced to <code>os.fork</code>, specifically in the context of random number generation. In this notebook I’ll get some more reps working with <code>os.fork</code>.</p>
<p>In the Lesson, Jeremy shows how random number generation in different libraries is handled across parent and child processes, as shown below (using <code>seed</code> and <code>rand</code> as defined in the lesson):</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> fcntl</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> signal</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> sys</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">rnd_state <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">def</span> seed(a):</span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;">global</span> rnd_state</span>
<span id="cb2-4">    a, x <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">divmod</span>(a, <span class="dv" style="color: #AD0000;">30268</span>)</span>
<span id="cb2-5">    a, y <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">divmod</span>(a, <span class="dv" style="color: #AD0000;">30306</span>)</span>
<span id="cb2-6">    a, z <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">divmod</span>(a, <span class="dv" style="color: #AD0000;">30322</span>)</span>
<span id="cb2-7">    rnd_state <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(x)<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, <span class="bu" style="color: null;">int</span>(y)<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>, <span class="bu" style="color: null;">int</span>(z)<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="2552ec0e-148c-40b3-f92e-56c5f5a299a2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">seed(<span class="dv" style="color: #AD0000;">457428938475</span>)</span>
<span id="cb3-2">rnd_state</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(4976, 20238, 499)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> rand():</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;">global</span> rnd_state</span>
<span id="cb5-3">    x, y, z <span class="op" style="color: #5E5E5E;">=</span> rnd_state</span>
<span id="cb5-4">    x <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">171</span> <span class="op" style="color: #5E5E5E;">*</span> x) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">30269</span></span>
<span id="cb5-5">    y <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">172</span> <span class="op" style="color: #5E5E5E;">*</span> y) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">30307</span></span>
<span id="cb5-6">    z <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">170</span> <span class="op" style="color: #5E5E5E;">*</span> z) <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">30323</span></span>
<span id="cb5-7">    rnd_state <span class="op" style="color: #5E5E5E;">=</span> x,y,z</span>
<span id="cb5-8">    <span class="cf" style="color: #003B4F;">return</span> (x<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">30269</span> <span class="op" style="color: #5E5E5E;">+</span> y<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">30307</span> <span class="op" style="color: #5E5E5E;">+</span> z<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">30323</span>) <span class="op" style="color: #5E5E5E;">%</span> <span class="fl" style="color: #AD0000;">1.0</span></span></code></pre></div>
</div>
<p>The from-scratch <code>rand</code> function generates the same random number in both parent and child processes because they share the same random state:</p>
<div class="cell" data-outputid="36b2eba4-4a77-494d-a85f-dfe9320bccc7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;">if</span> os.fork(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>rand()<span class="sc" style="color: #5E5E5E;">,</span> rnd_state<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In child: </span><span class="sc" style="color: #5E5E5E;">{</span>rand()<span class="sc" style="color: #5E5E5E;">,</span> rnd_state<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb6-4">    os._exit(os.EX_OK)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In parent: (0.7645251082582081, (3364, 25938, 24184))
In child: (0.7645251082582081, (3364, 25938, 24184))</code></pre>
</div>
</div>
<p><code>torch</code> does the same:</p>
<div class="cell" data-outputid="84bd9b2c-751e-4463-abef-12dc1812f318">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;">if</span> os.fork(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>torch<span class="sc" style="color: #5E5E5E;">.</span>rand(<span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">,</span> torch<span class="sc" style="color: #5E5E5E;">.</span>get_rng_state()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb8-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In child: </span><span class="sc" style="color: #5E5E5E;">{</span>torch<span class="sc" style="color: #5E5E5E;">.</span>rand(<span class="dv" style="color: #AD0000;">1</span>)<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">,</span> torch<span class="sc" style="color: #5E5E5E;">.</span>get_rng_state()<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb8-4">    os._exit(os.EX_OK)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In parent: (0.0692816972732544, 325580)
In child: (0.0692816972732544, 325580)</code></pre>
</div>
</div>
<p>As does NumPy:</p>
<div class="cell" data-outputid="efd0261b-27fc-4d7c-ad41-4240c2d169d0">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="cf" style="color: #003B4F;">if</span> os.fork(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>random<span class="sc" style="color: #5E5E5E;">.</span>rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">,</span> np<span class="sc" style="color: #5E5E5E;">.</span>random<span class="sc" style="color: #5E5E5E;">.</span>get_state()[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb10-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In child: </span><span class="sc" style="color: #5E5E5E;">{</span>np<span class="sc" style="color: #5E5E5E;">.</span>random<span class="sc" style="color: #5E5E5E;">.</span>rand(<span class="dv" style="color: #AD0000;">1</span>)[<span class="dv" style="color: #AD0000;">0</span>]<span class="sc" style="color: #5E5E5E;">,</span> np<span class="sc" style="color: #5E5E5E;">.</span>random<span class="sc" style="color: #5E5E5E;">.</span>get_state()[<span class="dv" style="color: #AD0000;">1</span>]<span class="sc" style="color: #5E5E5E;">.</span><span class="bu" style="color: null;">sum</span>()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb10-4">    os._exit(os.EX_OK)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In child: (0.8234897720205184, 1375830894290)
In parent: (0.8234897720205184, 1375830894290)</code></pre>
</div>
</div>
<p>The Python standard library generates different random numbers in the parent and the child, indicating that the random state has changed:</p>
<div class="cell" data-outputid="023a4721-a66d-45f0-c076-9f49d3d901b9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;">if</span> os.fork(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>random<span class="sc" style="color: #5E5E5E;">.</span>random()<span class="sc" style="color: #5E5E5E;">,</span> <span class="bu" style="color: null;">sum</span>(random.getstate()[<span class="dv" style="color: #AD0000;">1</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb12-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In child: </span><span class="sc" style="color: #5E5E5E;">{</span>random<span class="sc" style="color: #5E5E5E;">.</span>random()<span class="sc" style="color: #5E5E5E;">,</span> <span class="bu" style="color: null;">sum</span>(random.getstate()[<span class="dv" style="color: #AD0000;">1</span>])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb12-4">    os._exit(os.EX_OK)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In parent: (0.7978973512537335, 1327601590235)
In child: (0.5603922565589059, 1333438682830)</code></pre>
</div>
</div>
<p>Jeremy also mentioned in the video that there used to be a bug in fastai related to this <code>os.fork</code> behavior which resulted in incorrectly handling data augmentations across multiple processes. I poked around the fastai repo and found <a href="https://github.com/fastai/fastai/issues/215">this issue</a> and <a href="https://github.com/fastai/fastai/pull/234">corresponding PR</a> which might have been the ones he was referring to? I’m not sure, but it did lead me down an interesting rabbit hole in the fastai repo and I learned a couple of new things that I’ll share.</p>
<p>In the PR, they introduce the following line:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="va" style="color: #111111;">self</span>.store <span class="op" style="color: #5E5E5E;">=</span> threading.local()</span></code></pre></div>
<p><code>self.store</code> is reference throughout the PR, for example:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;">def</span> set_state(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb15-2">        <span class="va" style="color: #111111;">self</span>.store.rand_r <span class="op" style="color: #5E5E5E;">=</span> random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb15-3">        <span class="va" style="color: #111111;">self</span>.store.rand_c <span class="op" style="color: #5E5E5E;">=</span> random.uniform(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<p>The corresponding GitHub issue linked to <a href="https://stackoverflow.com/questions/1408171/thread-local-storage-in-python">this StackOverflow post</a> which talks about <code>threading.local()</code>. I didn’t quite follow the post so I copy/pasted its text as a prompt to Claude and asked it to create an example to illustrate the core concepts of <code>threading.local</code>. It gave me the following example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;">import</span> threading</span>
<span id="cb16-2"><span class="im" style="color: #00769E;">import</span> multiprocessing</span>
<span id="cb16-3"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb16-4"><span class="im" style="color: #00769E;">import</span> random</span></code></pre></div>
</div>
<p>First, <code>threading.local</code> is instantiated as a global variable:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Thread-local storage for threading module</span></span>
<span id="cb17-2">thread_local <span class="op" style="color: #5E5E5E;">=</span> threading.local()</span></code></pre></div>
</div>
<p>Next, we have a function that creates a worker. Claude defines a worker as follows (I found similar definitions with Google searches):</p>
<blockquote class="blockquote">
<p>a unit of execution that performs a specific task or job. In the context of concurrent programming, a worker is typically implemented as either a thread or a process, depending on the chosen concurrency model.</p>
</blockquote>
<p><code>threading_worker</code> adds a <code>count</code> attribute to <code>thread_local</code> (if it doesn’t have it already) or increments <code>count</code> by 1 if it exists.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> threading_worker(worker_id):</span>
<span id="cb18-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">hasattr</span>(thread_local, <span class="st" style="color: #20794D;">'count'</span>):</span>
<span id="cb18-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'</span><span class="ch" style="color: #20794D;">\n\t</span><span class="ss" style="color: #20794D;">Worker </span><span class="sc" style="color: #5E5E5E;">{</span>worker_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">: instantiating `count`'</span>)</span>
<span id="cb18-4">        thread_local.count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb18-5">    thread_local.count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb18-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Threading: Worker </span><span class="sc" style="color: #5E5E5E;">{</span>worker_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Count: </span><span class="sc" style="color: #5E5E5E;">{</span>thread_local<span class="sc" style="color: #5E5E5E;">.</span>count<span class="sc" style="color: #5E5E5E;">}</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb18-7">    time.sleep(random.random())</span></code></pre></div>
</div>
<p>To illustrate, we create 5 threads and pass <code>threading_worker</code> to each one. The result is that each worker has its own “private view” to the global <code>thread_local</code>, as exhibited by <code>thread_local.count</code> for each <code>worker_id</code> having the same value of <code>1</code>.</p>
<p>Finally, Claude explains that the purpose of <code>thread.join()</code> is to complete the action in the thread before returning to the main thread. Note that the final print statement, <code>print("Threading example finished.")</code> is run after all threads finish executing.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> run_threading_example():</span>
<span id="cb19-2">    threads <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-3">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">5</span>):</span>
<span id="cb19-4">        thread <span class="op" style="color: #5E5E5E;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;">=</span>threading_worker, args<span class="op" style="color: #5E5E5E;">=</span>(i,))</span>
<span id="cb19-5">        threads.append(thread)</span>
<span id="cb19-6">        thread.start()</span>
<span id="cb19-7"></span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;">for</span> thread <span class="kw" style="color: #003B4F;">in</span> threads:</span>
<span id="cb19-9">        thread.join()</span>
<span id="cb19-10"></span>
<span id="cb19-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Threading example finished."</span>)</span></code></pre></div>
</div>
<p>It’s interesting to note that each Worker instantiates <code>count</code> before adding <code>1</code> to it (as expected), but the order of each thread instantiating <code>count</code> (0, 1, 2, 3, 4) is not the same order of each thread adding <code>1</code> (0, 1, 3, 4, 2; which I didn’t expect).</p>
<div class="cell" data-outputid="b6c733ed-9081-4749-9e3c-0000d29aa849">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">run_threading_example()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
    Worker 0: instantiating `count`
Threading: Worker 0, Count: 1


    Worker 1: instantiating `count`
Threading: Worker 1, Count: 1


    Worker 2: instantiating `count`

    Worker 3: instantiating `count`
Threading: Worker 3, Count: 1


    Worker 4: instantiating `count`
Threading: Worker 4, Count: 1

Threading: Worker 2, Count: 1

Threading example finished.</code></pre>
</div>
</div>
<p>There is much to learn when it comes to threading and multiprocessing, but I’ll exit this rabbit hole for now.</p>
<p>The second thing I learned was this clever way to index into a tuple using a boolean expression:</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="at" style="color: #657422;">@property</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">def</span> multi_processing_context(<span class="va" style="color: #111111;">self</span>): <span class="cf" style="color: #003B4F;">return</span> (<span class="va" style="color: #111111;">None</span>,multiprocessing)[<span class="va" style="color: #111111;">self</span>.num_workers<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<p>I commented about this on Twitter and Jeremy replied:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Alternatively you can use <code>a if pred else b</code> btw. (Most people seem to hate both options ;) )
</p>
— Jeremy Howard (<span class="citation" data-cites="jeremyphoward">@jeremyphoward</span>) <a href="https://twitter.com/jeremyphoward/status/1839864334073376786?ref_src=twsrc%5Etfw">September 28, 2024</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Years back when I getting into web development, one of the patterns in JavaScript I enjoyed was the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator">ternary operator</a>:</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb23-1">a <span class="op" style="color: #5E5E5E;">=</span> is_true <span class="op" style="color: #5E5E5E;">?</span> val_if_true <span class="op" style="color: #5E5E5E;">:</span> val_if_false</span></code></pre></div>
<p>From what I understand, Python doesn’t have such an operator so anytime I come across a concise way to execute logic using a boolean expression, I’m excited to see it.</p>
<p>With that short interlude out of the way, I’ll now dig in to <code>os.fork</code>.</p>
</section>
<section id="os.fork-experiments" class="level2">
<h2 class="anchored" data-anchor-id="os.fork-experiments"><code>os.fork</code> Experiments</h2>
<p>I prompted Claude to give me some examples using <code>os.fork</code> with the following prompt:</p>
<blockquote class="blockquote">
<p>I want to better understand what <code>os.fork</code> does. what’s a good set of experiments I can run to understand it’s functionality?</p>
</blockquote>
<p>Claude with responded with four experiments, which I’ll run through next.</p>
<section id="basic-os.fork-example" class="level3">
<h3 class="anchored" data-anchor-id="basic-os.fork-example">Basic <code>os.fork()</code> example</h3>
<p>I’ll start with a definition from the “fork” Wikipedia page:</p>
<blockquote class="blockquote">
<p>In computing, particularly in the context of the Unix operating system and its workalikes, fork is an operation whereby a process creates a copy of itself. It is an interface which is required for compliance with the POSIX and Single UNIX Specification standards. It is usually implemented as a C standard library wrapper to the fork, clone, or other system calls of the kernel. Fork is the primary method of process creation on Unix-like operating systems.</p>
</blockquote>
<blockquote class="blockquote">
<p>In multitasking operating systems, processes (running programs) need a way to create new processes, e.g.&nbsp;to run other programs. Fork and its variants are typically the only way of doing so in Unix-like systems. For a process to start the execution of a different program, it first forks to create a copy of itself. Then, the copy, called the “child process”, calls the exec system call to overlay itself with the other program: it ceases execution of its former program in favor of the other.</p>
</blockquote>
<p>Next, I’ll look at the definition of <code>os.getpid</code> from the docs before using it:</p>
<blockquote class="blockquote">
<p>Return the parent’s process id. When the parent process has exited, on Unix the id returned is the one of the init process (1), on Windows it is still the same id, which may be already reused by another process.</p>
</blockquote>
<div class="cell" data-outputid="b5b8d001-e4d8-4ad3-e3b1-a2761cd7cc00" data-execution_count="2">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Main process PID: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Main process PID: 436</code></pre>
</div>
</div>
<p>Next, I’ll call <code>os.fork</code>:</p>
<blockquote class="blockquote">
<p>Fork a child process. Return 0 in the child and the child’s process id in the parent. If an error occurs OSError is raised.</p>
<p>Note that some platforms including FreeBSD &lt;= 6.3 and Cygwin have known issues when using fork() from a thread.</p>
</blockquote>
<div class="cell" data-outputid="970f2d58-f685-455a-993f-0fd49416407f" data-execution_count="3">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;">if</span> os.fork(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb26-3">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'In child: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb26-4">    os._exit(os.EX_OK)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In parent: 436
In child: 580</code></pre>
</div>
</div>
<p>It’s important to note that I took the above code straight from Lesson’s 10’s <a href="https://github.com/fastai/course22p2/blob/master/nbs/01_matmul.ipynb">01_matmul.ipynb</a>.</p>
<p>When I tried to run the following in Colab, the cell wouldn’t execute and would just hang:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">pid <span class="op" style="color: #5E5E5E;">=</span> os.fork()</span></code></pre></div>
<p>When I tried to run that locally on my MacBook, I got the following error:</p>
<pre><code>OSError: [Errno 9] Bad file descriptor</code></pre>
<p>I found <a href="https://stackoverflow.com/questions/76238761/why-does-running-the-following-code-with-os-fork-in-a-jupyter-notebook-cause-t">this StackOverflow post</a> which talks about similar issues, and that <code>os.fork</code> doesn’t play nice with Jupyter Notebooks. Claude also seemed to agree, recommending that I either use the <code>os._exit</code> approach from Lesson 10, or put my <code>os.fork</code>-related code in a separate <code>.py</code> script outside the notebook.</p>
<p>I asked Claude to rewrite the <code>os.fork</code> experiments using that if/else approach.</p>
<p>When I run the following code block, it’s interesting to note that the child process runs before the parent process. I wonder if that means <code>os.fork</code> returneed <code>0</code>? Claude says no:</p>
<blockquote class="blockquote">
<p>The reason it might seem like the child process runs first is due to how process scheduling works in operating systems. When os.fork() is called, both the parent and child processes are ready to run, and the operating system’s scheduler decides which one to execute first. In this case, the child process got scheduled to run before the parent continued.</p>
</blockquote>
<p>It adds the following context:</p>
<blockquote class="blockquote">
<p>This behavior - where the child might run before the parent continues - is normal and expected in multi-process programming. It’s one of the reasons why synchronization mechanisms are often needed when working with multiple processes.</p>
</blockquote>
<div class="cell" data-outputid="3b16b5c1-d59f-4867-fa5b-c5141720a17b" data-execution_count="4">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">Main process PID: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="cf" style="color: #003B4F;">if</span> os.fork():</span>
<span id="cb30-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-5"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb30-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">In child: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, Parent PID: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getppid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb30-7">    os._exit(os.EX_OK)</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">This will be printed only by the parent process. PID: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Main process PID: 436

In child: 853, Parent PID: 436
Main process PID: 436

In parent: 436

This will be printed only by the parent process. PID: 436
</code></pre>
</div>
</div>
</section>
<section id="memory-independence-example" class="level3">
<h3 class="anchored" data-anchor-id="memory-independence-example">Memory Independence Example</h3>
<p>The following example illustrates how “forked processes have independent memory spaces and that changes to variables in one process don’t affect the other process” as Claude states it.</p>
<p>The global <code>shared_variable</code> maintains its global value of <code>0</code> in the child process, before <code>1</code> is added to it to give it a final value of <code>1</code> in the child process. Meanwhile, in the parent process, it’s final value is <code>2</code>. This reminds me of the <code>threading.local</code> behavior.</p>
<div class="cell" data-outputid="2c0c29e9-c3ca-4fa5-cb86-485ab6cf7ab6" data-execution_count="5">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">shared_variable <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="cf" style="color: #003B4F;">if</span> os.fork():</span>
<span id="cb32-4">    <span class="co" style="color: #5E5E5E;"># Parent process</span></span>
<span id="cb32-5">    shared_variable <span class="op" style="color: #5E5E5E;">+=</span>  <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb32-6">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, shared_variable = </span><span class="sc" style="color: #5E5E5E;">{</span>shared_variable<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb32-7"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb32-8">    <span class="co" style="color: #5E5E5E;"># Child process</span></span>
<span id="cb32-9">    shared_variable <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb32-10">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="ch" style="color: #20794D;">\n</span><span class="ss" style="color: #20794D;">In child: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, shared_variable = </span><span class="sc" style="color: #5E5E5E;">{</span>shared_variable<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb32-11">    os._exit(os.EX_OK)</span>
<span id="cb32-12"></span>
<span id="cb32-13"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Final shared_variable in parent: </span><span class="sc" style="color: #5E5E5E;">{</span>shared_variable<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
In parent: 436, shared_variable = 2
Final shared_variable in parent: 2

In child: 902, shared_variable = 1</code></pre>
</div>
</div>
</section>
<section id="file-descriptor-inheritance" class="level3">
<h3 class="anchored" data-anchor-id="file-descriptor-inheritance">File Descriptor Inheritance</h3>
<p>Claude then provided the following code to illustrate how to write to the same file different data from the parent and child process. However, this code resulted in only the parent writing to the file:</p>
<div class="cell" data-outputid="8a3b6a28-af29-480b-eac3-623d6d16fe58" data-execution_count="30">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb34-2">    <span class="cf" style="color: #003B4F;">if</span> os.fork():</span>
<span id="cb34-3">        <span class="co" style="color: #5E5E5E;"># parent process</span></span>
<span id="cb34-4">        f.write(<span class="st" style="color: #20794D;">"Written by parent</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb34-5">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb34-6">        <span class="co" style="color: #5E5E5E;"># child process</span></span>
<span id="cb34-7">        f.write(<span class="st" style="color: #20794D;">"Written by child</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb34-8">        os._exit(os.EX_OK)</span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="co" style="color: #5E5E5E;"># Run this after the script to see the contents:</span></span>
<span id="cb34-11"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>).read())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Written by parent
</code></pre>
</div>
</div>
<p>Claude then suggested using “file locking” and “flushing” to ensure the writing happens before process execution has ended, but this didn’t help. Sometimes it wrote from both processes, sometimes just from one. I’ve illustrated both examples below:</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="kw" style="color: #003B4F;">def</span> do_write():</span>
<span id="cb36-2">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb36-3">      <span class="cf" style="color: #003B4F;">if</span> os.fork():</span>
<span id="cb36-4">          <span class="co" style="color: #5E5E5E;"># parent process</span></span>
<span id="cb36-5">          fcntl.flock(f, fcntl.LOCK_EX)</span>
<span id="cb36-6">          f.write(<span class="st" style="color: #20794D;">"Written by parent</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb36-7">          f.flush()</span>
<span id="cb36-8">          fcntl.flock(f, fcntl.LOCK_UN)</span>
<span id="cb36-9">      <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb36-10">          <span class="co" style="color: #5E5E5E;"># child process</span></span>
<span id="cb36-11">          fcntl.flock(f, fcntl.LOCK_EX)</span>
<span id="cb36-12">          f.write(<span class="st" style="color: #20794D;">"Written by child</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb36-13">          f.flush()</span>
<span id="cb36-14">          fcntl.flock(f, fcntl.LOCK_UN)</span>
<span id="cb36-15">          os._exit(os.EX_OK)</span>
<span id="cb36-16"></span>
<span id="cb36-17">  <span class="co" style="color: #5E5E5E;"># Run this after the script to see the contents:</span></span>
<span id="cb36-18">  <span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>).read())</span></code></pre></div>
</div>
<div class="cell" data-outputid="1d3d8637-3d27-4e2f-cf75-bce8d9cdc9d2" data-execution_count="35">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">do_write()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Written by parent
</code></pre>
</div>
</div>
<div class="cell" data-outputid="dc38ab69-53c3-4bb5-b436-632280801d52" data-execution_count="37">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">do_write()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Written by child
Written by parent
</code></pre>
</div>
</div>
<p>I wanted something deterministic so I prompted Claude again. It responded with the following solution where “the child writes first and then signals the parent”. A couple of things to note:</p>
<ul>
<li>The child sends a <code>SIGUSR1</code> signal to the parent pid. (SIGUSR1 stands for “User-defined signal 1”)</li>
<li>Inside <code>parent_process</code>, the file is opened in “append mode”.</li>
</ul>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">def</span> child_process(parent_pid):</span>
<span id="cb41-2">  time.sleep(<span class="fl" style="color: #AD0000;">0.1</span>)  <span class="co" style="color: #5E5E5E;"># Small delay to ensure parent is waiting</span></span>
<span id="cb41-3">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"w"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb41-4">    f.write(<span class="st" style="color: #20794D;">"Written by child</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb41-5">    f.flush()</span>
<span id="cb41-6">  os.kill(parent_pid, signal.SIGUSR1) <span class="co" style="color: #5E5E5E;"># this is where the child sends a signal to the parent</span></span>
<span id="cb41-7">  os._exit(os.EX_OK)</span>
<span id="cb41-8"></span>
<span id="cb41-9"><span class="kw" style="color: #003B4F;">def</span> parent_process(signum, frame):</span>
<span id="cb41-10">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"a"</span>) <span class="im" style="color: #00769E;">as</span> f: <span class="co" style="color: #5E5E5E;"># notice the "a" for "append mode"</span></span>
<span id="cb41-11">      f.write(<span class="st" style="color: #20794D;">"Written by parent</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb41-12">      f.flush()</span>
<span id="cb41-13"></span>
<span id="cb41-14"><span class="kw" style="color: #003B4F;">def</span> do_write2():</span>
<span id="cb41-15">  signal.signal(signal.SIGUSR1, parent_process)</span>
<span id="cb41-16"></span>
<span id="cb41-17">  parent_pid <span class="op" style="color: #5E5E5E;">=</span> os.getpid()</span>
<span id="cb41-18"></span>
<span id="cb41-19">  <span class="cf" style="color: #003B4F;">if</span> os.fork() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb41-20">      child_process(parent_pid)</span>
<span id="cb41-21">  <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb41-22">      signal.pause()  <span class="co" style="color: #5E5E5E;"># Wait for signal from child</span></span>
<span id="cb41-23"></span>
<span id="cb41-24">  <span class="co" style="color: #5E5E5E;"># Read and print the file contents</span></span>
<span id="cb41-25">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb41-26">    res <span class="op" style="color: #5E5E5E;">=</span> f.read()</span>
<span id="cb41-27">  <span class="cf" style="color: #003B4F;">return</span> res</span></code></pre></div>
</div>
<p>This works as expected! At least for the 1000 times that I ran it:</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1000</span>):</span>
<span id="cb42-2">  res <span class="op" style="color: #5E5E5E;">=</span> do_write2()</span>
<span id="cb42-3">  <span class="cf" style="color: #003B4F;">assert</span> res <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'Written by child</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">Written by parent</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span></span></code></pre></div>
</div>
<p>I noticed that <code>parent_process</code> is passed <code>signum</code> and <code>frame</code>. I asked Claude to define these:</p>
<blockquote class="blockquote">
<p><code>signum</code>: This parameter represents the signal number that was caught. In this case, it will be <code>signal.SIGUSR1</code>, which is the signal sent by the child process to the parent. The <code>signum</code> allows the signal handler to identify which signal triggered it, which can be useful if the same handler is used for multiple signals. <code>frame</code>: This parameter is a frame object representing the stack frame of the interrupted code when the signal was received. It contains information about the program’s execution state at the time the signal was caught, such as the current line number and local variables.</p>
</blockquote>
<p>I’ll print out <code>signum</code> and <code>frame</code> to see what they look like here:</p>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="kw" style="color: #003B4F;">def</span> parent_process(signum, frame):</span>
<span id="cb43-2">  <span class="bu" style="color: null;">print</span>(signum, frame)</span>
<span id="cb43-3">  <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"test.txt"</span>, <span class="st" style="color: #20794D;">"a"</span>) <span class="im" style="color: #00769E;">as</span> f: <span class="co" style="color: #5E5E5E;"># notice the "a" for "append mode"</span></span>
<span id="cb43-4">      f.write(<span class="st" style="color: #20794D;">"Written by parent</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb43-5">      f.flush()</span></code></pre></div>
</div>
<p><code>signum</code> has a value of <code>10</code> and <code>frame</code> has the additional information as Claude described.</p>
<div class="cell" data-outputid="4effc089-5cf3-4ec9-b188-162db1b74a02" data-execution_count="59">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">do_write2()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10 &lt;frame at 0x56005af01c30, file '&lt;ipython-input-56-0f16beee5172&gt;', line 22, code do_write2&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>'Written by child\nWritten by parent\n'</code></pre>
</div>
</div>
</section>
<section id="exit-status" class="level3">
<h3 class="anchored" data-anchor-id="exit-status">Exit Status</h3>
<p>Claude describes the following code as a way to illustrate how “the parent can wait for the child to finish and retrieve its exit status.” I added a couple of print statements to see more clearly that the parent process waits for the child process to exit.</p>
<p>Claude describes the <code>-1</code> in <code>os.waitpid(-1, 0)</code> as follows:</p>
<blockquote class="blockquote">
<p>When <code>-1</code> is used as the first argument to <code>os.waitpid()</code>, it tells the function to wait for any child process to terminate.</p>
</blockquote>
<p>The <code>0</code> in <code>os.waitpid(-1, 0)</code> is explained in the docs:</p>
<blockquote class="blockquote">
<p>The semantics of the call are affected by the value of the integer options, which should be 0 for normal operation.</p>
</blockquote>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;">def</span> do_exit():</span>
<span id="cb47-2">    <span class="cf" style="color: #003B4F;">if</span> os.fork():</span>
<span id="cb47-3">        <span class="co" style="color: #5E5E5E;"># Parent process</span></span>
<span id="cb47-4">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parent waiting..."</span>)</span>
<span id="cb47-5">        child_pid, status <span class="op" style="color: #5E5E5E;">=</span> os.waitpid(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb47-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Parent done waiting!"</span>)</span>
<span id="cb47-7">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"In parent: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb47-8">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Child process (PID </span><span class="sc" style="color: #5E5E5E;">{</span>child_pid<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">) exited with status </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>WEXITSTATUS(status)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb47-9">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb47-10">        <span class="co" style="color: #5E5E5E;"># Child process</span></span>
<span id="cb47-11">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"In child: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, exiting with status 5"</span>)</span>
<span id="cb47-12">        os._exit(<span class="dv" style="color: #AD0000;">5</span>)  <span class="co" style="color: #5E5E5E;"># Use os._exit to avoid affecting the notebook process</span></span>
<span id="cb47-13"></span>
<span id="cb47-14">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"This will be printed only by the parent process. PID: </span><span class="sc" style="color: #5E5E5E;">{</span>os<span class="sc" style="color: #5E5E5E;">.</span>getpid()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
</div>
<p>However, when I run <code>do_exit</code>, based on the child pid’s shown, it creates two different child processes (<code>4475</code> and <code>4448</code>):</p>
<div class="cell" data-outputid="c87b6f20-90c7-4ad4-a1ea-b0c737019e06" data-execution_count="45">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">do_exit()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>In child: 4475, exiting with status 5Parent waiting...
Parent done waiting!
In parent: 436
Child process (PID 4448) exited with status 5
This will be printed only by the parent process. PID: 436
</code></pre>
</div>
</div>
<p>And note that <code>do_exit</code> print statements don’t always run in that order, indicating that the child process is not running first even though we have used <code>waitpid</code>:</p>
<div class="cell" data-outputid="8b1e05a6-2e59-4a30-bb58-518435ff3728" data-execution_count="8">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">do_exit()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parent waiting...
Parent done waiting!
In parent: 436
Child process (PID 902) exited with status 0
This will be printed only by the parent process. PID: 436
In child: 1249, exiting with status 5</code></pre>
</div>
</div>
<p>When I put that code into a <code>.py</code> file and run it from the shell, it behaves as expected (there is only one child process created, <code>5221</code>, and it runs first while the parent process waits):</p>
<div class="cell" data-outputid="57f8fa14-f0b9-47e1-c89a-03fa56a2ee81" data-execution_count="48">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="op" style="color: #5E5E5E;">!</span>python3 do_exit.py</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parent waiting...
In child: 5221, exiting with status 5
Parent done waiting!
In parent: 5216
Child process (PID 5221) exited with status 5
This will be printed only by the parent process. PID: 5216</code></pre>
</div>
</div>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Working with <code>os.fork</code> was tougher than I expected. I assumed it would be plug-and-play, but I encountered non-deterministic behavior, which seems to be common when working with multiple processes.</p>
<p>I also learned that <code>os.fork</code> behaves (or misbehaves) differently when running inside a notebook cell compared to running in the shell. For instance, executing <code>pid = os.fork</code> in a notebook cell causes the execution to hang when trying to return the child’s process ID, or spawns multiple child processes when using the <code>if os_fork:/else:</code> pattern.</p>
<p>There are some ways to make <code>os.fork</code> behave in a notebook environment, as we saw when synchronizing work between the child and parent by having the child signal the parent before both wrote to the same file.</p>
<p>Another key concept I observed was memory independence— even in a notebook environment, the parent and child processes have their own private access to global variables, allowing you to assign different values to the same variable in each process.</p>
<p>Future work: I want to run a similar set of experiments with the <code>multiprocessing</code> library, as I see it used more often (for example, in the fastai repo).</p>
<p>I hope you enjoyed this blog post. Follow me on Twitter <a href="https://twitter.com/vishal_learner"><span class="citation" data-cites="vishal_learner">@vishal_learner</span></a>.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>fastai</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-09-30-os-fork/index.html</guid>
  <pubDate>Mon, 30 Sep 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Generating a GIF Animation Using Stable Diffusion</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/index.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:02:13.269161Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:02:13.268855Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:02:17.120110Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:02:17.119524Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:02:13.269104Z&quot;}" data-execution_count="1">
<details>
<summary>Show pip installs and imports</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>q <span class="op" style="color: #5E5E5E;">--</span>upgrade transformers<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">4.25.1</span> diffusers ftfy accelerate</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> base64 <span class="im" style="color: #00769E;">import</span> b64encode</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> diffusers <span class="im" style="color: #00769E;">import</span> AutoencoderKL, LMSDiscreteScheduler, UNet2DConditionModel</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> huggingface_hub <span class="im" style="color: #00769E;">import</span> notebook_login</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># For video display:</span></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> IPython.display <span class="im" style="color: #00769E;">import</span> HTML</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> autocast</span>
<span id="cb1-15"><span class="im" style="color: #00769E;">from</span> torchvision <span class="im" style="color: #00769E;">import</span> transforms <span class="im" style="color: #00769E;">as</span> tfms</span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> tqdm.auto <span class="im" style="color: #00769E;">import</span> tqdm</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> CLIPTextModel, CLIPTokenizer, logging</span>
<span id="cb1-18"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-19"></span>
<span id="cb1-20">torch.manual_seed(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;"># Supress some unnecessary warnings when loading the CLIPTextModel</span></span>
<span id="cb1-23">logging.set_verbosity_error()</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;"># Set device</span></span>
<span id="cb1-26">torch_device <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cuda"</span> <span class="cf" style="color: #003B4F;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"cpu"</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:02:17.121529Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:02:17.121148Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:02:20.984343Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:02:20.983806Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:02:17.121506Z&quot;}">
<details>
<summary>Show code to load models</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Load the autoencoder model which will be used to decode the latents into image space.</span></span>
<span id="cb2-2">vae <span class="op" style="color: #5E5E5E;">=</span> AutoencoderKL.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"vae"</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Load the tokenizer and text encoder to tokenize and encode the text.</span></span>
<span id="cb2-5">tokenizer <span class="op" style="color: #5E5E5E;">=</span> CLIPTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>)</span>
<span id="cb2-6">text_encoder <span class="op" style="color: #5E5E5E;">=</span> CLIPTextModel.from_pretrained(<span class="st" style="color: #20794D;">"openai/clip-vit-large-patch14"</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># The UNet model for generating the latents.</span></span>
<span id="cb2-9">unet <span class="op" style="color: #5E5E5E;">=</span> UNet2DConditionModel.from_pretrained(<span class="st" style="color: #20794D;">"CompVis/stable-diffusion-v1-4"</span>, subfolder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"unet"</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># The noise scheduler</span></span>
<span id="cb2-12">scheduler <span class="op" style="color: #5E5E5E;">=</span> LMSDiscreteScheduler(beta_start<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.00085</span>, beta_end<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.012</span>, beta_schedule<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"scaled_linear"</span>, num_train_timesteps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;"># To the GPU we go!</span></span>
<span id="cb2-15">vae <span class="op" style="color: #5E5E5E;">=</span> vae.to(torch_device)</span>
<span id="cb2-16">text_encoder <span class="op" style="color: #5E5E5E;">=</span> text_encoder.to(torch_device)</span>
<span id="cb2-17">unet <span class="op" style="color: #5E5E5E;">=</span> unet.to(torch_device)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook, I rearrange the code provided in the fastai course Part 2 notebook <a href="https://github.com/fastai/diffusion-nbs/blob/master/Stable%20Diffusion%20Deep%20Dive.ipynb">Stable Diffusion Deep Dive</a> to create a GIF transitioning from a picture of a skunk to a picture of a puppy in a relatively visually smooth and stable manner.</p>
<p>I combine two concepts introduced in that notebook:</p>
<ul>
<li>The diffusion loop starting from a noised version of input (aka image2image)</li>
<li>Replacing/mixing token embeddings to alter the generated image (for example a mixed skunk/puppy embeddings/image)</li>
</ul>
<p>I’ll reuse the helper functions provided in that notebook:</p>
<ul>
<li><code>set_timesteps</code>: uses the scheduler algorithm to generate the timesteps and noise for a given number of inference steps.</li>
<li><code>pil_to_latent</code>: uses the VAE to encode a 512x512 pixel image into a 1x4x64x64 latent.</li>
<li><code>latents_to_pil</code>: uses the VAE to decode a 1x4x64x64 latent into a 512x512 PIL Image.</li>
<li><code>get_output_embeds</code>: uses (most of the) code from the <code>forward</code> pass of the <code>text_encoder.text_model</code> to encode token + position embeddings.</li>
</ul>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:34.198480Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:34.197611Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:34.201831Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:34.201068Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:34.198453Z&quot;}" data-execution_count="3">
<details>
<summary>Show <code>set_timesteps</code></summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Prep Scheduler</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;">def</span> set_timesteps(scheduler, num_inference_steps):</span>
<span id="cb3-3">    scheduler.set_timesteps(num_inference_steps)</span>
<span id="cb3-4">    scheduler.timesteps <span class="op" style="color: #5E5E5E;">=</span> scheduler.timesteps.to(torch.float32) <span class="co" style="color: #5E5E5E;"># minor fix to ensure MPS compatibility, fixed in diffusers PR 3925</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:35.456554Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:35.455760Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:35.461903Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:35.461154Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:35.456536Z&quot;}" data-execution_count="4">
<details>
<summary>Show <code>pil_to_latent</code> and <code>latents_to_pil</code></summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> pil_to_latent(input_im):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;"># Single image -&gt; single latent in a batch (so size 1, 4, 64, 64)</span></span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb4-4">        latent <span class="op" style="color: #5E5E5E;">=</span> vae.encode(tfms.ToTensor()(input_im).unsqueeze(<span class="dv" style="color: #AD0000;">0</span>).to(torch_device)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># Note scaling</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">0.18215</span> <span class="op" style="color: #5E5E5E;">*</span> latent.latent_dist.sample()</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="kw" style="color: #003B4F;">def</span> latents_to_pil(latents):</span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;"># bath of latents -&gt; list of images</span></span>
<span id="cb4-9">    latents <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="fl" style="color: #AD0000;">0.18215</span>) <span class="op" style="color: #5E5E5E;">*</span> latents</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb4-11">        image <span class="op" style="color: #5E5E5E;">=</span> vae.decode(latents).sample</span>
<span id="cb4-12">    image <span class="op" style="color: #5E5E5E;">=</span> (image <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>).clamp(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-13">    image <span class="op" style="color: #5E5E5E;">=</span> image.detach().cpu().permute(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>).numpy()</span>
<span id="cb4-14">    images <span class="op" style="color: #5E5E5E;">=</span> (image <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">255</span>).<span class="bu" style="color: null;">round</span>().astype(<span class="st" style="color: #20794D;">"uint8"</span>)</span>
<span id="cb4-15">    pil_images <span class="op" style="color: #5E5E5E;">=</span> [Image.fromarray(image) <span class="cf" style="color: #003B4F;">for</span> image <span class="kw" style="color: #003B4F;">in</span> images]</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;">return</span> pil_images</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:36.699652Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:36.698871Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:36.704410Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:36.703564Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:36.699630Z&quot;}" data-execution_count="5">
<details>
<summary>Show <code>get_output_embeds</code></summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> get_output_embeds(input_embeddings):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># CLIP's text model uses causal mask, so we prepare it here:</span></span>
<span id="cb5-3">    bsz, seq_len <span class="op" style="color: #5E5E5E;">=</span> input_embeddings.shape[:<span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb5-4">    causal_attention_mask <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model._build_causal_attention_mask(bsz, seq_len, dtype<span class="op" style="color: #5E5E5E;">=</span>input_embeddings.dtype)</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;"># Getting the output embeddings involves calling the model with passing output_hidden_states=True</span></span>
<span id="cb5-7">    <span class="co" style="color: #5E5E5E;"># so that it doesn't just return the pooled final predictions:</span></span>
<span id="cb5-8">    encoder_outputs <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model.encoder(</span>
<span id="cb5-9">        inputs_embeds<span class="op" style="color: #5E5E5E;">=</span>input_embeddings,</span>
<span id="cb5-10">        attention_mask<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, <span class="co" style="color: #5E5E5E;"># We aren't using an attention mask so that can be None</span></span>
<span id="cb5-11">        causal_attention_mask<span class="op" style="color: #5E5E5E;">=</span>causal_attention_mask.to(torch_device),</span>
<span id="cb5-12">        output_attentions<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb5-13">        output_hidden_states<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, <span class="co" style="color: #5E5E5E;"># We want the output embs not the final output</span></span>
<span id="cb5-14">        return_dict<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb5-15">    )</span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;"># We're interested in the output hidden state only</span></span>
<span id="cb5-18">    output <span class="op" style="color: #5E5E5E;">=</span> encoder_outputs[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb5-19"></span>
<span id="cb5-20">    <span class="co" style="color: #5E5E5E;"># There is a final layer norm we need to pass these through</span></span>
<span id="cb5-21">    output <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model.final_layer_norm(output)</span>
<span id="cb5-22"></span>
<span id="cb5-23">    <span class="co" style="color: #5E5E5E;"># And now they're ready!</span></span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;">return</span> output</span></code></pre></div>
</details>
</div>
<p>I also prepare the <code>token_embedding</code> layer and <code>position_embedding</code> layer as done in the notebook:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:38.499855Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:38.498918Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:38.503542Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:38.502702Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:38.499820Z&quot;}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Access the embedding layer</span></span>
<span id="cb6-2">token_emb_layer <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model.embeddings.token_embedding</span>
<span id="cb6-3">pos_emb_layer <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model.embeddings.position_embedding</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:39.799868Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:39.799240Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:39.815454Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:39.814794Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:39.799838Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">position_ids <span class="op" style="color: #5E5E5E;">=</span> text_encoder.text_model.embeddings.position_ids[:, :<span class="dv" style="color: #AD0000;">77</span>]</span>
<span id="cb7-2">position_embeddings <span class="op" style="color: #5E5E5E;">=</span> pos_emb_layer(position_ids)</span>
<span id="cb7-3"><span class="bu" style="color: null;">print</span>(position_embeddings.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([1, 77, 768])</code></pre>
</div>
</div>
</section>
<section id="mixing-and-replacing-text-embeddings" class="level2">
<h2 class="anchored" data-anchor-id="mixing-and-replacing-text-embeddings">Mixing and Replacing Text Embeddings</h2>
<p>I start by taking a prompt, <code>A picture of a puppy</code>, tokenizing it, and creating its embeddings:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:42.060530Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:42.060269Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:42.064930Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:42.064416Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:42.060511Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">prompt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'A picture of a puppy'</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;"># Tokenize</span></span>
<span id="cb9-4">text_input <span class="op" style="color: #5E5E5E;">=</span> tokenizer(prompt, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>tokenizer.model_max_length, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>)</span>
<span id="cb9-5">input_ids <span class="op" style="color: #5E5E5E;">=</span> text_input.input_ids.to(torch_device)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;"># Get token embeddings</span></span>
<span id="cb9-8">token_embeddings <span class="op" style="color: #5E5E5E;">=</span> token_emb_layer(input_ids)</span></code></pre></div>
</div>
<p>Next, I want to replace the token embeddings for <code>puppy</code> with an averaged embedding of <code>skunk</code> and <code>puppy</code>. I start (as the course notebook does) by first generating embeddings for the <code>puppy</code> (<code>6829</code>) and <code>skunk</code> (<code>42194</code>) tokens:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:43.516260Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:43.515730Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:43.520038Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:43.519330Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:43.516242Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># The new embedding. Which is now a mixture of the token embeddings for 'puppy' and 'skunk'</span></span>
<span id="cb10-2">puppy_token_embedding <span class="op" style="color: #5E5E5E;">=</span> token_emb_layer(torch.tensor(<span class="dv" style="color: #AD0000;">6829</span>, device<span class="op" style="color: #5E5E5E;">=</span>torch_device))</span>
<span id="cb10-3">skunk_token_embedding <span class="op" style="color: #5E5E5E;">=</span> token_emb_layer(torch.tensor(<span class="dv" style="color: #AD0000;">42194</span>, device<span class="op" style="color: #5E5E5E;">=</span>torch_device))</span></code></pre></div>
</div>
<p>I then choose a weighting factor (I’ll start with 50% <code>puppy</code> and 50% <code>skunk</code>) to mix the two token embeddings:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:44.976783Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:44.976076Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:44.981094Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:44.980121Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:44.976754Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">puppy_factor <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb11-2">replacement_token_embedding <span class="op" style="color: #5E5E5E;">=</span> puppy_factor<span class="op" style="color: #5E5E5E;">*</span>puppy_token_embedding <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>puppy_factor)<span class="op" style="color: #5E5E5E;">*</span>skunk_token_embedding</span></code></pre></div>
</div>
<p>Now for the replacement operation: using <code>where</code>, we swap out the 100% <code>puppy</code> token embeddings with the mixed <code>puppy/skunk</code> embeddings:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:46.940027Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:46.939750Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:46.944191Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:46.943615Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:46.940009Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">token_embeddings[<span class="dv" style="color: #AD0000;">0</span>, torch.where(input_ids[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">6829</span>)] <span class="op" style="color: #5E5E5E;">=</span> replacement_token_embedding.to(torch_device)</span></code></pre></div>
</div>
<p>We then combine the full set of token embeddings with position embeddings and pass it through the <code>forward</code> pass of the text encoder:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:47.703355Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:47.702854Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:48.482255Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:48.481456Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:47.703332Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Combine with pos embs</span></span>
<span id="cb13-2">input_embeddings <span class="op" style="color: #5E5E5E;">=</span> token_embeddings <span class="op" style="color: #5E5E5E;">+</span> position_embeddings</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;">#  Feed through to get final output embs</span></span>
<span id="cb13-5">modified_output_embeddings <span class="op" style="color: #5E5E5E;">=</span> get_output_embeds(input_embeddings)</span></code></pre></div>
</div>
</section>
<section id="generating-a-mixed-puppyskunk-image" class="level2">
<h2 class="anchored" data-anchor-id="generating-a-mixed-puppyskunk-image">Generating a Mixed Puppy/Skunk Image</h2>
<p>With the text embeddings in hand, we can now generate a puppy/skunk hybrid image using the U-Net: first we set some constants (I’ll use the same ones as the course notebook):</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:50.640075Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:50.639452Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:50.643526Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:50.642979Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:50.640053Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span>                        <span class="co" style="color: #5E5E5E;"># default height of Stable Diffusion</span></span>
<span id="cb14-2">width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span>                         <span class="co" style="color: #5E5E5E;"># default width of Stable Diffusion</span></span>
<span id="cb14-3">num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>            <span class="co" style="color: #5E5E5E;"># Number of denoising steps</span></span>
<span id="cb14-4">guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span>                <span class="co" style="color: #5E5E5E;"># Scale for classifier-free guidance</span></span>
<span id="cb14-5">generator <span class="op" style="color: #5E5E5E;">=</span> torch.manual_seed(<span class="dv" style="color: #AD0000;">32</span>)   <span class="co" style="color: #5E5E5E;"># Seed generator to create the inital latent noise</span></span>
<span id="cb14-6">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<p>Next we create embeddings for an empty prompt (aka the <em>unconditioned</em> input) and concatenate it to the puppy/skunk hybrid token embeddings:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:52.375421Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:52.374875Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:52.387227Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:52.386554Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:52.375402Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">max_length <span class="op" style="color: #5E5E5E;">=</span> modified_output_embeddings.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb15-2"></span>
<span id="cb15-3">uncond_input <span class="op" style="color: #5E5E5E;">=</span> tokenizer(</span>
<span id="cb15-4">  [<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> batch_size, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>max_length, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span></span>
<span id="cb15-5">)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb15-8">    uncond_embeddings <span class="op" style="color: #5E5E5E;">=</span> text_encoder(uncond_input.input_ids.to(torch_device))[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb15-9">    </span>
<span id="cb15-10">text_embeddings <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond_embeddings, modified_output_embeddings])</span></code></pre></div>
</div>
<p>We initialize the <code>scheduler</code> with the given number of inference steps:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:52.996593Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:52.995763Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:53.000465Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:52.999579Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:52.996564Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Prep Scheduler</span></span>
<span id="cb16-2">set_timesteps(scheduler, num_inference_steps)</span></code></pre></div>
</div>
<p>And initialize a random set of latents as the starting point for the image generation. Note that this one of the main things I’ll change later on when I want to create a smooth GIF transition from 100% skunk to 100% puppy (where I’ll start with a noisy image’s latents instead of fully random noisy latents):</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:54.605886Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:54.605314Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:04:54.610206Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:04:54.609554Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:54.605865Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Prep latents</span></span>
<span id="cb17-2">latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn(</span>
<span id="cb17-3">(batch_size, unet.in_channels, height <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>, width <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb17-4">generator<span class="op" style="color: #5E5E5E;">=</span>generator,</span>
<span id="cb17-5">)</span>
<span id="cb17-6"></span>
<span id="cb17-7">latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(torch_device)</span>
<span id="cb17-8">latents <span class="op" style="color: #5E5E5E;">=</span> latents <span class="op" style="color: #5E5E5E;">*</span> scheduler.init_noise_sigma</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2631/4273587132.py:3: FutureWarning: Accessing config attribute `in_channels` directly via 'UNet2DConditionModel' object attribute is deprecated. Please access 'in_channels' over 'UNet2DConditionModel's config object instead, e.g. 'unet.config.in_channels'.
  (batch_size, unet.in_channels, height // 8, width // 8),</code></pre>
</div>
</div>
<p>Finally, we can run the diffusion loop, where we generate U-Net predictions for both conditioned and unconditioned (empty) text embeddings, using the <code>guidance_scale</code> to guide the diffusion process towards the conditioned text embeddings.</p>
<p>The result is a creature that looks like both a skunk and a puppy—a skunk/puppy hybrid!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:04:57.281473Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:04:57.280537Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:05:05.605928Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:05:05.605206Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:04:57.281430Z&quot;}" data-execution_count="17">
<details>
<summary>Show diffusion loop</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;">for</span> i, t <span class="kw" style="color: #003B4F;">in</span> tqdm(<span class="bu" style="color: null;">enumerate</span>(scheduler.timesteps), total<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(scheduler.timesteps)):</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;"># expand the latents if we are doing classifier-free guidance to avoid doing two forward passes.</span></span>
<span id="cb19-3">    latent_model_input <span class="op" style="color: #5E5E5E;">=</span> torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb19-4">    sigma <span class="op" style="color: #5E5E5E;">=</span> scheduler.sigmas[i]</span>
<span id="cb19-5">    latent_model_input <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(latent_model_input, t)</span>
<span id="cb19-6"></span>
<span id="cb19-7">    <span class="co" style="color: #5E5E5E;"># predict the noise residual</span></span>
<span id="cb19-8">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb19-9">        noise_pred <span class="op" style="color: #5E5E5E;">=</span> unet(latent_model_input, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>text_embeddings)[<span class="st" style="color: #20794D;">"sample"</span>]</span>
<span id="cb19-10"></span>
<span id="cb19-11">    <span class="co" style="color: #5E5E5E;"># perform guidance</span></span>
<span id="cb19-12">    noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;">=</span> noise_pred.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb19-13">    noise_pred <span class="op" style="color: #5E5E5E;">=</span> noise_pred_uncond <span class="op" style="color: #5E5E5E;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;">*</span> (noise_pred_text <span class="op" style="color: #5E5E5E;">-</span> noise_pred_uncond)</span>
<span id="cb19-14"></span>
<span id="cb19-15">    <span class="co" style="color: #5E5E5E;"># compute the previous noisy sample x_t -&gt; x_t-1</span></span>
<span id="cb19-16">    latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(noise_pred, t, latents).prev_sample</span>
<span id="cb19-17"></span>
<span id="cb19-18">latents_to_pil(latents)[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e3c20840257e4eaa8484cdfc58299860","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-18-output-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/index_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="transitioning-from-100-skunk-to-100-puppy" class="level2">
<h2 class="anchored" data-anchor-id="transitioning-from-100-skunk-to-100-puppy">Transitioning from 100% Skunk to 100% Puppy</h2>
<p>I’ll now modify the above process so that I can use the previous image as a starting point for the next image’s generation. Why would I want to do that? Well, to illustrate why, I’ll generate 11 images that each start out with random noisy latents. The first image will be generated with 100% <code>skunk</code> and 0% <code>puppy</code> token embeddings, incrementing by 10% until the last image is 0% <code>skunk</code> and 100% <code>puppy</code> token embeddings. I’ll then combine the images into a GIF and show how it has a choppy transition between frame since each image starts at a random spot in the latent space.</p>
<p>I’ll use the <code>generate_with_embs</code> function from the course notebook which takes the code above and wraps it into a function:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:05:11.316644Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:05:11.316392Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:05:11.322739Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:05:11.322092Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:05:11.316625Z&quot;}" data-execution_count="18">
<details>
<summary>Show <code>generate_with_embs</code></summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;">def</span> generate_with_embs(text_embeddings, seed):</span>
<span id="cb20-2">    height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span>                        <span class="co" style="color: #5E5E5E;"># default height of Stable Diffusion</span></span>
<span id="cb20-3">    width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span>                         <span class="co" style="color: #5E5E5E;"># default width of Stable Diffusion</span></span>
<span id="cb20-4">    num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>            <span class="co" style="color: #5E5E5E;"># Number of denoising steps</span></span>
<span id="cb20-5">    guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span>                <span class="co" style="color: #5E5E5E;"># Scale for classifier-free guidance</span></span>
<span id="cb20-6">    generator <span class="op" style="color: #5E5E5E;">=</span> torch.manual_seed(seed)   <span class="co" style="color: #5E5E5E;"># Seed generator to create the inital latent noise</span></span>
<span id="cb20-7">    batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb20-8"></span>
<span id="cb20-9">    max_length <span class="op" style="color: #5E5E5E;">=</span> text_input.input_ids.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb20-10">    uncond_input <span class="op" style="color: #5E5E5E;">=</span> tokenizer(</span>
<span id="cb20-11">      [<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> batch_size, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>max_length, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span></span>
<span id="cb20-12">    )</span>
<span id="cb20-13">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb20-14">        uncond_embeddings <span class="op" style="color: #5E5E5E;">=</span> text_encoder(uncond_input.input_ids.to(torch_device))[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb20-15">    text_embeddings <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond_embeddings, text_embeddings])</span>
<span id="cb20-16"></span>
<span id="cb20-17">    <span class="co" style="color: #5E5E5E;"># Prep Scheduler</span></span>
<span id="cb20-18">    set_timesteps(scheduler, num_inference_steps)</span>
<span id="cb20-19"></span>
<span id="cb20-20">    <span class="co" style="color: #5E5E5E;"># Prep latents</span></span>
<span id="cb20-21">    latents <span class="op" style="color: #5E5E5E;">=</span> torch.randn(</span>
<span id="cb20-22">    (batch_size, unet.in_channels, height <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>, width <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb20-23">    generator<span class="op" style="color: #5E5E5E;">=</span>generator,</span>
<span id="cb20-24">    )</span>
<span id="cb20-25">    latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(torch_device)</span>
<span id="cb20-26">    latents <span class="op" style="color: #5E5E5E;">=</span> latents <span class="op" style="color: #5E5E5E;">*</span> scheduler.init_noise_sigma</span>
<span id="cb20-27"></span>
<span id="cb20-28">    <span class="co" style="color: #5E5E5E;"># Loop</span></span>
<span id="cb20-29">    <span class="cf" style="color: #003B4F;">for</span> i, t <span class="kw" style="color: #003B4F;">in</span> tqdm(<span class="bu" style="color: null;">enumerate</span>(scheduler.timesteps), total<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(scheduler.timesteps)):</span>
<span id="cb20-30">        <span class="co" style="color: #5E5E5E;"># expand the latents if we are doing classifier-free guidance to avoid doing two forward passes.</span></span>
<span id="cb20-31">        latent_model_input <span class="op" style="color: #5E5E5E;">=</span> torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb20-32">        sigma <span class="op" style="color: #5E5E5E;">=</span> scheduler.sigmas[i]</span>
<span id="cb20-33">        latent_model_input <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(latent_model_input, t)</span>
<span id="cb20-34"></span>
<span id="cb20-35">        <span class="co" style="color: #5E5E5E;"># predict the noise residual</span></span>
<span id="cb20-36">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb20-37">            noise_pred <span class="op" style="color: #5E5E5E;">=</span> unet(latent_model_input, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>text_embeddings)[<span class="st" style="color: #20794D;">"sample"</span>]</span>
<span id="cb20-38"></span>
<span id="cb20-39">        <span class="co" style="color: #5E5E5E;"># perform guidance</span></span>
<span id="cb20-40">        noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;">=</span> noise_pred.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb20-41">        noise_pred <span class="op" style="color: #5E5E5E;">=</span> noise_pred_uncond <span class="op" style="color: #5E5E5E;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;">*</span> (noise_pred_text <span class="op" style="color: #5E5E5E;">-</span> noise_pred_uncond)</span>
<span id="cb20-42"></span>
<span id="cb20-43">        <span class="co" style="color: #5E5E5E;"># compute the previous noisy sample x_t -&gt; x_t-1</span></span>
<span id="cb20-44">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(noise_pred, t, latents).prev_sample</span>
<span id="cb20-45"></span>
<span id="cb20-46">    <span class="cf" style="color: #003B4F;">return</span> latents_to_pil(latents)[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</details>
</div>
<p>I’ll iterate between a <code>puppy_factor</code> of <code>0</code> to <code>1.0</code>, generating new mixed token embeddings at each step and corresponding image.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:05:13.414065Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:05:13.413774Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:06:30.165078Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:06:30.164329Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:05:13.414045Z&quot;}">
<details>
<summary>Show <code>puppy_factor</code> loop</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">imgs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb21-2">seed <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb21-3">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb21-4"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb21-5">  puppy_factor <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.</span> <span class="op" style="color: #5E5E5E;">/</span> n </span>
<span id="cb21-6"></span>
<span id="cb21-7">  <span class="co" style="color: #5E5E5E;"># replace puppy embeddings with weighted average of puppy and skunk embeddings</span></span>
<span id="cb21-8">  replacement_token_embedding <span class="op" style="color: #5E5E5E;">=</span> puppy_factor<span class="op" style="color: #5E5E5E;">*</span>puppy_token_embedding <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>puppy_factor)<span class="op" style="color: #5E5E5E;">*</span>skunk_token_embedding</span>
<span id="cb21-9"></span>
<span id="cb21-10">  <span class="co" style="color: #5E5E5E;"># Insert this into the token embeddings (</span></span>
<span id="cb21-11">  token_embeddings[<span class="dv" style="color: #AD0000;">0</span>, torch.where(input_ids[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">6829</span>)] <span class="op" style="color: #5E5E5E;">=</span> replacement_token_embedding.to(torch_device)</span>
<span id="cb21-12"></span>
<span id="cb21-13">  <span class="co" style="color: #5E5E5E;"># Combine with pos embs</span></span>
<span id="cb21-14">  input_embeddings <span class="op" style="color: #5E5E5E;">=</span> token_embeddings <span class="op" style="color: #5E5E5E;">+</span> position_embeddings</span>
<span id="cb21-15"></span>
<span id="cb21-16">  <span class="co" style="color: #5E5E5E;">#  Feed through to get final output embs</span></span>
<span id="cb21-17">  modified_output_embeddings <span class="op" style="color: #5E5E5E;">=</span> get_output_embeds(input_embeddings)</span>
<span id="cb21-18"></span>
<span id="cb21-19">  <span class="co" style="color: #5E5E5E;"># Generate an image with these</span></span>
<span id="cb21-20">  img <span class="op" style="color: #5E5E5E;">=</span> generate_with_embs(modified_output_embeddings, seed<span class="op" style="color: #5E5E5E;">=</span>seed)</span>
<span id="cb21-21"></span>
<span id="cb21-22">  imgs.append(img)</span></code></pre></div>
</details>
</div>
<p>I’ll use this nifty one-liner provided by Claude to generate a GIF:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:06:38.871813Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:06:38.871553Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:06:40.277054Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:06:40.276515Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:06:38.871794Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">imgs[<span class="dv" style="color: #AD0000;">0</span>].save(<span class="ss" style="color: #20794D;">f'/notebooks/skunk-to-puppy_random_</span><span class="sc" style="color: #5E5E5E;">{</span>seed<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.gif'</span>, save_all<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, append_images<span class="op" style="color: #5E5E5E;">=</span>imgs[<span class="dv" style="color: #AD0000;">1</span>:], duration<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>, loop<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>As you can see in the GIF below, the transition from image to the next, especially once it goes from mostly-skunk to mostly-puppy, is choppy. Notice especially how the pose of the creature, as well as the background, significantly change from the start to finish of the animation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_random_4.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Skunk to Puppy animation where each subsequent image starts from a random noisy latent"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_random_4.gif" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Skunk to Puppy animation where each subsequent image starts from a random noisy latent</figcaption><p></p>
</figure>
</div>
</section>
<section id="making-the-skunk-to-puppy-transition-smoother" class="level2">
<h2 class="anchored" data-anchor-id="making-the-skunk-to-puppy-transition-smoother">Making the Skunk-to-Puppy Transition Smoother</h2>
<p>I’ll now modify the generation loop by doing the following:</p>
<ul>
<li>On the first step of the <code>puppy_factor</code> loop, start with a random noisy latent.</li>
<li>On all subsequent steps, start with a latent of the previous step’s image with some “delayed” timestep noise added to it.</li>
</ul>
<p>To accomplish this (and reuse as much course notebook code as possible), I’ll modify <code>generate_with_embs</code>. First off, I’ll walk through the updated parameters to this function:</p>
<ul>
<li><code>text_embeddings</code>: same as before, these are the mixed text embeddings (with some ratio of skunk-to-puppy)</li>
<li><code>encoded</code>: this is the latent of the previous step’s image, created using <code>pil_to_latent</code> as we’ll see later on.</li>
<li><code>start_step=10</code>: this is the “delayed” timestep that we want to start with. The default is <code>10</code>, which means that it will add noise using the scheduler starting at step <code>10</code>.</li>
<li><code>num_inference_steps=30</code>: the total number of inference steps. I found that 30 works pretty well (as is used in the course notebook).</li>
<li><code>height=512</code>: the height of the image in pixels.</li>
<li><code>width=512</code>: the width of the image in pixels.</li>
<li><code>batch_size=1</code>: the batch size.</li>
<li><code>guidance_scale</code>: the guidance scale to use when guiding the image away from unconditioned to conditioned generation.</li>
<li><code>generator</code>: maintaining the random state between images.</li>
</ul>
<p>In addition to the function signature, the following two sections of <code>generate_with_embs</code> deviate from the course notebook to achieve a “smoother” transition between <code>skunk</code> and <code>puppy</code>.</p>
<p>In the code below, if the <code>start_step</code> is greater than 0 (meaning anything other than the very first image), the <code>latents</code> are generated by adding <code>noise</code> to the <code>encoded</code> image from the previous step using <code>scheduler.noise</code> and the given <code>start_step</code>.</p>
<p>If <code>start_step==0</code> then we’re at the very first image and we just use the random noise <code>latents</code> (passed through as the <code>encoded</code> parameter).</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Prep latents</span></span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;">if</span> start_step <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> :</span>
<span id="cb23-3">      noise <span class="op" style="color: #5E5E5E;">=</span> torch.randn_like(encoded)</span>
<span id="cb23-4">      latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.add_noise(encoded, noise, timesteps<span class="op" style="color: #5E5E5E;">=</span>torch.tensor([scheduler.timesteps[start_step]]))</span>
<span id="cb23-5">      latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(torch_device).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb23-6">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb23-7">      latents <span class="op" style="color: #5E5E5E;">=</span> encoded</span></code></pre></div>
<p>The following condition is added to the diffusion loop, so that the U-Net inference starts at the given <code>start_step</code>:</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> start_step: </span></code></pre></div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:06:53.566813Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:06:53.566470Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:06:53.576976Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:06:53.576021Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:06:53.566788Z&quot;}" data-execution_count="21">
<details>
<summary>Show modified <code>generate_with_embs</code></summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;">def</span> generate_with_embs(</span>
<span id="cb25-2">    text_embeddings, </span>
<span id="cb25-3">    encoded, </span>
<span id="cb25-4">    start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, </span>
<span id="cb25-5">    num_inference_steps<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">30</span>, </span>
<span id="cb25-6">    height<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>, </span>
<span id="cb25-7">    width<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>, </span>
<span id="cb25-8">    batch_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb25-9">    guidance_scale<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, </span>
<span id="cb25-10">    generator<span class="op" style="color: #5E5E5E;">=</span>torch.manual_seed(<span class="dv" style="color: #AD0000;">32</span>)):</span>
<span id="cb25-11"></span>
<span id="cb25-12">    max_length <span class="op" style="color: #5E5E5E;">=</span> text_embeddings.shape[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb25-13">    <span class="cf" style="color: #003B4F;">assert</span> max_length <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">77</span></span>
<span id="cb25-14"></span>
<span id="cb25-15">    uncond_input <span class="op" style="color: #5E5E5E;">=</span> tokenizer(</span>
<span id="cb25-16">      [<span class="st" style="color: #20794D;">""</span>] <span class="op" style="color: #5E5E5E;">*</span> batch_size, padding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"max_length"</span>, max_length<span class="op" style="color: #5E5E5E;">=</span>max_length, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span></span>
<span id="cb25-17">    )</span>
<span id="cb25-18">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb25-19">        uncond_embeddings <span class="op" style="color: #5E5E5E;">=</span> text_encoder(uncond_input.input_ids.to(torch_device))[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb25-20"></span>
<span id="cb25-21">    text_embeddings <span class="op" style="color: #5E5E5E;">=</span> torch.cat([uncond_embeddings, text_embeddings])</span>
<span id="cb25-22"></span>
<span id="cb25-23">    <span class="co" style="color: #5E5E5E;"># Prep Scheduler</span></span>
<span id="cb25-24">    set_timesteps(scheduler, num_inference_steps)</span>
<span id="cb25-25"></span>
<span id="cb25-26">    <span class="co" style="color: #5E5E5E;"># Prep latents</span></span>
<span id="cb25-27">    <span class="cf" style="color: #003B4F;">if</span> start_step <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span> :</span>
<span id="cb25-28">      noise <span class="op" style="color: #5E5E5E;">=</span> torch.randn_like(encoded)</span>
<span id="cb25-29">      latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.add_noise(encoded, noise, timesteps<span class="op" style="color: #5E5E5E;">=</span>torch.tensor([scheduler.timesteps[start_step]]))</span>
<span id="cb25-30">      latents <span class="op" style="color: #5E5E5E;">=</span> latents.to(torch_device).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb25-31">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb25-32">      latents <span class="op" style="color: #5E5E5E;">=</span> encoded</span>
<span id="cb25-33"></span>
<span id="cb25-34">    <span class="co" style="color: #5E5E5E;"># Loop</span></span>
<span id="cb25-35">    <span class="cf" style="color: #003B4F;">for</span> i, t <span class="kw" style="color: #003B4F;">in</span> tqdm(<span class="bu" style="color: null;">enumerate</span>(scheduler.timesteps), total<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(scheduler.timesteps)):</span>
<span id="cb25-36">      <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">&gt;=</span> start_step: </span>
<span id="cb25-37">        <span class="co" style="color: #5E5E5E;"># expand the latents if we are doing classifier-free guidance to avoid doing two forward passes.</span></span>
<span id="cb25-38">        latent_model_input <span class="op" style="color: #5E5E5E;">=</span> torch.cat([latents] <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-39">        sigma <span class="op" style="color: #5E5E5E;">=</span> scheduler.sigmas[i]</span>
<span id="cb25-40">        latent_model_input <span class="op" style="color: #5E5E5E;">=</span> scheduler.scale_model_input(latent_model_input, t)</span>
<span id="cb25-41"></span>
<span id="cb25-42">        <span class="co" style="color: #5E5E5E;"># predict the noise residual</span></span>
<span id="cb25-43">        <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb25-44">            noise_pred <span class="op" style="color: #5E5E5E;">=</span> unet(latent_model_input, t, encoder_hidden_states<span class="op" style="color: #5E5E5E;">=</span>text_embeddings)[<span class="st" style="color: #20794D;">"sample"</span>]</span>
<span id="cb25-45"></span>
<span id="cb25-46">        <span class="co" style="color: #5E5E5E;"># perform guidance</span></span>
<span id="cb25-47">        noise_pred_uncond, noise_pred_text <span class="op" style="color: #5E5E5E;">=</span> noise_pred.chunk(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb25-48">        noise_pred <span class="op" style="color: #5E5E5E;">=</span> noise_pred_uncond <span class="op" style="color: #5E5E5E;">+</span> guidance_scale <span class="op" style="color: #5E5E5E;">*</span> (noise_pred_text <span class="op" style="color: #5E5E5E;">-</span> noise_pred_uncond)</span>
<span id="cb25-49"></span>
<span id="cb25-50">        <span class="co" style="color: #5E5E5E;"># compute the previous noisy sample x_t -&gt; x_t-1</span></span>
<span id="cb25-51">        latents <span class="op" style="color: #5E5E5E;">=</span> scheduler.step(noise_pred, t, latents).prev_sample</span>
<span id="cb25-52"></span>
<span id="cb25-53">    <span class="cf" style="color: #003B4F;">return</span> latents_to_pil(latents)[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</details>
</div>
<p>The next change necessary to adapt to this new <code>generate_with_embs</code> function is in the <code>puppy_factor</code>-incrementing <code>for-loop</code>.</p>
<p>First, let’s get the unchanged constants out of the way:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:06:55.979680Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:06:55.979397Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:06:55.983307Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:06:55.982506Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:06:55.979661Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb26-2">width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">512</span></span>
<span id="cb26-3">num_inference_steps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>          </span>
<span id="cb26-4">guidance_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">7.5</span>                  </span>
<span id="cb26-5">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<p>Now, in the for-loop below, when <code>i==0</code> (i.e we’re generating the first image), <code>encoded</code> is just random noise and <code>start_step</code> is <code>0</code>.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb27-2">    encoded <span class="op" style="color: #5E5E5E;">=</span> torch.randn(</span>
<span id="cb27-3">        (batch_size, unet.in_channels, height <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>, width <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb27-4">        generator<span class="op" style="color: #5E5E5E;">=</span>generator,</span>
<span id="cb27-5">        )</span>
<span id="cb27-6">    encoded <span class="op" style="color: #5E5E5E;">=</span> encoded.to(torch_device)</span>
<span id="cb27-7">    encoded <span class="op" style="color: #5E5E5E;">=</span> encoded <span class="op" style="color: #5E5E5E;">*</span> scheduler.init_noise_sigma</span>
<span id="cb27-8">    start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
<p>For all other <code>i</code>’s (i.e.&nbsp;subsequent images after the first one), <code>encoded</code> is created by converting the previous step’s <code>img</code> to latents using <code>pil_to_latents</code>, and <code>start_step</code> is set to <code>10</code>:</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">encoded <span class="op" style="color: #5E5E5E;">=</span> pil_to_latent(img)</span>
<span id="cb28-2">start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
<p>After that, we pass the necessary arguments to <code>generate_with_embs</code> and it generates the 512x512 image that we tack onto the <code>imgs</code> list:</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">img <span class="op" style="color: #5E5E5E;">=</span> generate_with_embs(</span>
<span id="cb29-2">      text_embeddings<span class="op" style="color: #5E5E5E;">=</span>modified_output_embeddings, </span>
<span id="cb29-3">      encoded<span class="op" style="color: #5E5E5E;">=</span>encoded, </span>
<span id="cb29-4">      start_step<span class="op" style="color: #5E5E5E;">=</span>start_step, </span>
<span id="cb29-5">      num_inference_steps<span class="op" style="color: #5E5E5E;">=</span>num_inference_steps, </span>
<span id="cb29-6">      height<span class="op" style="color: #5E5E5E;">=</span>height, </span>
<span id="cb29-7">      width<span class="op" style="color: #5E5E5E;">=</span>width, </span>
<span id="cb29-8">      batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb29-9">      guidance_scale<span class="op" style="color: #5E5E5E;">=</span>guidance_scale, </span>
<span id="cb29-10">      generator<span class="op" style="color: #5E5E5E;">=</span>generator)</span>
<span id="cb29-11"></span>
<span id="cb29-12">  imgs.append(img)</span></code></pre></div>
<p>I’ll now generate 20 images using this new approach, going from 100% <code>skunk</code> to 100% <code>puppy</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:06:59.580265Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:06:59.579999Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:06:59.586045Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:06:59.585377Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:06:59.580247Z&quot;}" data-execution_count="23">
<details>
<summary>Show <code>mk_imgs</code></summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;">def</span> mk_imgs(seed, n):</span>
<span id="cb30-2">    generator <span class="op" style="color: #5E5E5E;">=</span> torch.manual_seed(seed)</span>
<span id="cb30-3">    imgs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb30-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb30-5">        puppy_factor <span class="op" style="color: #5E5E5E;">=</span> i <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.</span> <span class="op" style="color: #5E5E5E;">/</span> n</span>
<span id="cb30-6">        </span>
<span id="cb30-7">        <span class="co" style="color: #5E5E5E;"># replace puppy embeddings with weighted average of puppy and skunk embeddings</span></span>
<span id="cb30-8">        replacement_token_embedding <span class="op" style="color: #5E5E5E;">=</span> puppy_factor<span class="op" style="color: #5E5E5E;">*</span>puppy_token_embedding <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>puppy_factor)<span class="op" style="color: #5E5E5E;">*</span>skunk_token_embedding</span>
<span id="cb30-9">        </span>
<span id="cb30-10">        <span class="co" style="color: #5E5E5E;"># Insert this into the token embeddings</span></span>
<span id="cb30-11">        token_embeddings[<span class="dv" style="color: #AD0000;">0</span>, torch.where(input_ids[<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">6829</span>)] <span class="op" style="color: #5E5E5E;">=</span> replacement_token_embedding.to(torch_device)</span>
<span id="cb30-12">        </span>
<span id="cb30-13">        <span class="co" style="color: #5E5E5E;"># Combine with pos embs</span></span>
<span id="cb30-14">        input_embeddings <span class="op" style="color: #5E5E5E;">=</span> token_embeddings <span class="op" style="color: #5E5E5E;">+</span> position_embeddings</span>
<span id="cb30-15">        </span>
<span id="cb30-16">        <span class="co" style="color: #5E5E5E;">#  Feed through to get final output embs</span></span>
<span id="cb30-17">        modified_output_embeddings <span class="op" style="color: #5E5E5E;">=</span> get_output_embeds(input_embeddings)</span>
<span id="cb30-18">        </span>
<span id="cb30-19">        <span class="co" style="color: #5E5E5E;"># Generate an image with these</span></span>
<span id="cb30-20">        <span class="cf" style="color: #003B4F;">if</span> i <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb30-21">            encoded <span class="op" style="color: #5E5E5E;">=</span> torch.randn(</span>
<span id="cb30-22">                (batch_size, unet.in_channels, height <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>, width <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb30-23">                generator<span class="op" style="color: #5E5E5E;">=</span>generator,</span>
<span id="cb30-24">            )</span>
<span id="cb30-25">            encoded <span class="op" style="color: #5E5E5E;">=</span> encoded.to(torch_device)</span>
<span id="cb30-26">            encoded <span class="op" style="color: #5E5E5E;">=</span> encoded <span class="op" style="color: #5E5E5E;">*</span> scheduler.init_noise_sigma</span>
<span id="cb30-27">            start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb30-28">        <span class="cf" style="color: #003B4F;">else</span>: </span>
<span id="cb30-29">            encoded <span class="op" style="color: #5E5E5E;">=</span> pil_to_latent(img)</span>
<span id="cb30-30">            start_step<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb30-31">            </span>
<span id="cb30-32">        img <span class="op" style="color: #5E5E5E;">=</span> generate_with_embs(</span>
<span id="cb30-33">                text_embeddings<span class="op" style="color: #5E5E5E;">=</span>modified_output_embeddings, </span>
<span id="cb30-34">                encoded<span class="op" style="color: #5E5E5E;">=</span>encoded, </span>
<span id="cb30-35">                start_step<span class="op" style="color: #5E5E5E;">=</span>start_step, </span>
<span id="cb30-36">                num_inference_steps<span class="op" style="color: #5E5E5E;">=</span>num_inference_steps, </span>
<span id="cb30-37">                height<span class="op" style="color: #5E5E5E;">=</span>height, </span>
<span id="cb30-38">                width<span class="op" style="color: #5E5E5E;">=</span>width, </span>
<span id="cb30-39">                batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb30-40">                guidance_scale<span class="op" style="color: #5E5E5E;">=</span>guidance_scale, </span>
<span id="cb30-41">                generator<span class="op" style="color: #5E5E5E;">=</span>generator)</span>
<span id="cb30-42">        </span>
<span id="cb30-43">        imgs.append(img)</span>
<span id="cb30-44">        </span>
<span id="cb30-45">    imgs[<span class="dv" style="color: #AD0000;">0</span>].save(<span class="ss" style="color: #20794D;">f'/notebooks/skunk-to-puppy_smoother_</span><span class="sc" style="color: #5E5E5E;">{</span>seed<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.gif'</span>, save_all<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, append_images<span class="op" style="color: #5E5E5E;">=</span>imgs[<span class="dv" style="color: #AD0000;">1</span>:], duration<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>, loop<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-27T00:07:02.348681Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-27T00:07:02.348396Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-27T00:08:49.660813Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-27T00:08:49.660177Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-27T00:07:02.348663Z&quot;}">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">mk_imgs(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
</div>
<p>I find the resulting GIF to be smoother: notice how the skunk and the puppy have the same pose/perspective and the background stays more constant throughout the animation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_4.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Skunk to Puppy animation where each subsequent image starts from a noisy latent of the previous step"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_4.gif" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Skunk to Puppy animation where each subsequent image starts from a noisy latent of the previous step</figcaption><p></p>
</figure>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<ul>
<li><strong>Repurposing existing code is a great way to learn!</strong> I learned more about each line of code from the original course notebook because I was trying to do something different with it. This process really solidified my understanding of the course notebook.</li>
<li><strong>Generating images is finnicky.</strong> It took me 100 different seeds to find a handful of animations that I was satisfied with. Some of this variability might be because my prompt is simple and I didn’t iterate on it. For example, I could have added language about the pose and background of the skunk/puppy to yield more stable results. I also experimented a bit with the number of total inference steps and the starting step for each image and found that 30 and 10 (respectively) yielded decent results.</li>
<li><strong>I feel like I have only scratched the surface.</strong> There’s of course much more experimentation, including with different models, that I didn’t do. I’m still building my intuition around image generation, so I’m trying to take my experience with this small project with a large grain of salt.</li>
</ul>
<p>I hope you enjoyed this blog post! Follow me on Twitter <a href="https://twitter.com/vishal_learner"><span class="citation" data-cites="vishal_learner">@vishal_learner</span></a>.</p>
</section>
<section id="bonus-additional-gifs" class="level2">
<h2 class="anchored" data-anchor-id="bonus-additional-gifs">Bonus: Additional GIFs</h2>
<p>I tried 101 different random seeds to capture the best possible examples to use in this notebook. I’ll drop some of the GIFs I created here (and their random seeds) since they look cute/pretty, and in case you want to try to recreate them.</p>
<p><code>seed=10</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_10.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_10.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=19</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_19.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_19.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=42</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_42.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_42.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=50</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_50.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_50.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=59</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_59.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_59.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=65</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_65.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_65.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=73</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_73.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_73.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=77</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_77.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_77.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=79</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_79.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_79.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=88</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_88.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_88.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=98</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_98.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_98.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>
<hr>
<p><code>seed=99</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="skunk-to-puppy_smoother_99.gif" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_smoother_99.gif" class="img-fluid figure-img"></a></p>
</figure>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>stable diffusion</category>
  <category>fastai</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>generative AI</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/index.html</guid>
  <pubDate>Thu, 26 Sep 2024 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2024-09-26-diffusion-gif/skunk-to-puppy_random_4.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Sentiment Classification with Qwen2-1.5B-Instruct</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index.html</link>
  <description><![CDATA[ 



<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:29:36.899920Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:29:36.898890Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:31:45.341672Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:31:45.340913Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:29:36.899823Z&quot;}">
<details>
<summary>Show pip installs</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install transformers <span class="op" style="color: #5E5E5E;">-</span>Uqq</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install accelerate <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>pip install torch<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">2.2.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets<span class="op" style="color: #5E5E5E;">~=</span><span class="fl" style="color: #AD0000;">2.16.1</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">!</span>pip install scikit<span class="op" style="color: #5E5E5E;">-</span>learn<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">1.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:31:45.344334Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:31:45.344091Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:31:48.090041Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:31:48.089531Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:31:45.344311Z&quot;}" data-execution_count="2">
<details>
<summary>Show imports and setup</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> sklearn</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> transformers</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> datasets</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;">assert</span> sklearn.__version__ <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'1.2.0'</span></span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;">assert</span> transformers.__version__ <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'4.44.2'</span></span>
<span id="cb2-8"><span class="cf" style="color: #003B4F;">assert</span> torch.__version__ <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'2.2.2+cu121'</span></span>
<span id="cb2-9"><span class="cf" style="color: #003B4F;">assert</span> datasets.__version__ <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'2.16.1'</span></span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:31:48.092313Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:31:48.090710Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:31:48.868734Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:31:48.867959Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:31:48.092295Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset, Dataset</span>
<span id="cb3-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd, numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb3-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb3-5"><span class="im" style="color: #00769E;">from</span> pandas.api.types <span class="im" style="color: #00769E;">import</span> CategoricalDtype</span>
<span id="cb3-6"><span class="im" style="color: #00769E;">import</span> random</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:31:48.870818Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:31:48.870383Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:31:59.745257Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:31:59.744737Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:31:48.870797Z&quot;}">
<details>
<summary>Show setup</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb4-2">device <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"cuda"</span> <span class="co" style="color: #5E5E5E;"># the device to load the model onto</span></span>
<span id="cb4-3"></span>
<span id="cb4-4">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;">"Qwen/Qwen2-1.5B-Instruct"</span>,</span>
<span id="cb4-6">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span>,</span>
<span id="cb4-7">    device_map<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span></span>
<span id="cb4-8">)</span>
<span id="cb4-9">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"Qwen/Qwen2-1.5B-Instruct"</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:31:59.746123Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:31:59.745950Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.168891Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.168295Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:31:59.746107Z&quot;}">
<details>
<summary>Show setup</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># load dataset</span></span>
<span id="cb5-2">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(</span>
<span id="cb5-3">    <span class="st" style="color: #20794D;">"financial_phrasebank"</span>, <span class="st" style="color: #20794D;">"sentences_allagree"</span>, </span>
<span id="cb5-4">    split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>  <span class="co" style="color: #5E5E5E;"># note that the dataset does not have a default test split</span></span>
<span id="cb5-5">)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># create a new column with the numeric label verbalised as label_text (e.g. "positive" instead of "0")</span></span>
<span id="cb5-8">label_map <span class="op" style="color: #5E5E5E;">=</span> {i: label_text <span class="cf" style="color: #003B4F;">for</span> i, label_text <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(dataset.features[<span class="st" style="color: #20794D;">"label"</span>].names)}</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="kw" style="color: #003B4F;">def</span> add_label_text(example):</span>
<span id="cb5-11">    example[<span class="st" style="color: #20794D;">"label_text"</span>] <span class="op" style="color: #5E5E5E;">=</span> label_map[example[<span class="st" style="color: #20794D;">"label"</span>]]</span>
<span id="cb5-12">    <span class="cf" style="color: #003B4F;">return</span> example</span>
<span id="cb5-13"></span>
<span id="cb5-14">dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_label_text)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="bu" style="color: null;">print</span>(dataset)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:01.169818Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:01.169637Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.174116Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.173534Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:01.169816Z&quot;}" data-execution_count="6">
<details>
<summary>Show <code>generate_response</code> function</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> generate_response(prompt):</span>
<span id="cb6-2">    messages <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb6-3">        {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"system"</span>, <span class="st" style="color: #20794D;">"content"</span>: <span class="st" style="color: #20794D;">"You are a helpful assistant."</span>},</span>
<span id="cb6-4">        {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt}</span>
<span id="cb6-5">    ]</span>
<span id="cb6-6">    text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb6-7">        messages,</span>
<span id="cb6-8">        tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb6-9">        add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb6-10">    )</span>
<span id="cb6-11">    model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb6-12"></span>
<span id="cb6-13">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb6-14">        model_inputs.input_ids,</span>
<span id="cb6-15">        max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-16">    )</span>
<span id="cb6-17">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb6-18">        output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb6-19">    ]</span>
<span id="cb6-20"></span>
<span id="cb6-21">    response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;">return</span> response</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:01.174924Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:01.174782Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.180621Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.180081Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:01.174909Z&quot;}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> add_prompt(item, prompt):</span>
<span id="cb7-2">        item[<span class="st" style="color: #20794D;">'prompt'</span>] <span class="op" style="color: #5E5E5E;">=</span> prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>item[<span class="st" style="color: #20794D;">'sentence'</span>])</span>
<span id="cb7-3">        <span class="cf" style="color: #003B4F;">return</span> item</span>
<span id="cb7-4">    </span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;">def</span> generate_responses(dataset, prompt):</span>
<span id="cb7-6">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb7-7">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb7-8">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb7-9">    </span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb7-11">        messages <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb7-12">            {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}</span>
<span id="cb7-13">        ]</span>
<span id="cb7-14">        </span>
<span id="cb7-15">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb7-16">            messages,</span>
<span id="cb7-17">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb7-18">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb7-19">        )</span>
<span id="cb7-20">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb7-21"></span>
<span id="cb7-22">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb7-23">            model_inputs.input_ids,</span>
<span id="cb7-24">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb7-25">        )</span>
<span id="cb7-26">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb7-27">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb7-28">        ]</span>
<span id="cb7-29"></span>
<span id="cb7-30">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb7-31">        responses.append(response)</span>
<span id="cb7-32">        </span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb7-34">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb7-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb7-36">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb7-37">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb7-38">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb7-39">    </span>
<span id="cb7-40">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:01.181278Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:01.181134Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.185952Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.185412Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:01.181278Z&quot;}" data-execution_count="8">
<details>
<summary>Show <code>make_cm</code> function</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> make_cm(df):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;">"""Create confusion matrix for true vs predicted sentiment classes"""</span></span>
<span id="cb8-3">    </span>
<span id="cb8-4">    cm <span class="op" style="color: #5E5E5E;">=</span> confusion_matrix(y_true<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'label_text'</span>], y_pred<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'responses'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb8-5">    disp <span class="op" style="color: #5E5E5E;">=</span> ConfusionMatrixDisplay(cm, display_labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb8-6">    </span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;"># I chose 8x8 so it fits on one screen but still is large</span></span>
<span id="cb8-8">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb8-9">    disp.plot(ax<span class="op" style="color: #5E5E5E;">=</span>ax,text_kw<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'fontsize'</span>: <span class="dv" style="color: #AD0000;">16</span>}, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Blues'</span>, colorbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb8-10">    </span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;"># change label font size without changing label text</span></span>
<span id="cb8-12">    ax.xaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb8-13">    ax.yaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb8-14">    </span>
<span id="cb8-15">    <span class="co" style="color: #5E5E5E;"># make tick labels larger</span></span>
<span id="cb8-16">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb8-17">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'x'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:01.187048Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:01.186919Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.190209Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.189668Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:01.187048Z&quot;}" data-execution_count="9">
<details>
<summary>Show <code>ds_subset</code> function</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> ds_subset(dataset, exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>]):</span>
<span id="cb9-2">    idxs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(dataset)))</span>
<span id="cb9-3">    idxs <span class="op" style="color: #5E5E5E;">=</span> [x <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> idxs <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> exclude_idxs]</span>
<span id="cb9-4">    ddf <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb9-5">    new_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(ddf.iloc[idxs, columns])</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;">return</span> new_ds</span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll use <a href="https://huggingface.co/Qwen/Qwen2-1.5B-Instruct">Qwen2-1.5B-Instruct</a> to classify sentiment in the <a href="https://huggingface.co/datasets/financial_phrasebank"><code>financial_phrasebank</code> dataset</a>. In previous notebooks I have performed <a href="https://vishalbakshi.github.io/blog/posts/2024-08-31-tinysentiment-phi-2-sentiment-classification/">sentiment classification with phi-2</a>, <a href="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-sentiment-classification/">phi-3</a>, <a href="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/">phi-3.5</a>, and <a href="https://vishalbakshi.github.io/blog/posts/2024-08-29-tinysentiment-claude-experiments/">the Claude series</a>.</p>
<p>This notebook is part of <a href="https://vishalbakshi.github.io/blog/#category=TinySentiment">a series of blog posts</a> for a project I’m working called TinySentiment where I’m experimenting with tiny models to improve their ability to classify sentiment in the <code>financial_phrasebank dataset</code>. I was inspired to do so after reading <a href="https://huggingface.co/blog/synthetic-data-save-costs">this blog post</a> and <a href="https://github.com/MoritzLaurer/synthetic-data-blog/blob/main/notebooks/synthetic_data_creation.ipynb">this corresponding notebook</a> by Moritz Laurer as part of a fastai study group last year.</p>
<p>Here are the results from my experiments so far (**the best-performing prompt from this notebook):</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">**Qwen2-1.5B</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">86.10%</td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">95.5% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook. The best-performing prompt was a randomly shuffled 27-Shot prompt (Prompt AD), yielding an overall accuracy of 86.10%.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">prompt</th>
<th style="text-align: center;">strategy</th>
<th style="text-align: center;">accuracy</th>
<th style="text-align: center;">negative</th>
<th style="text-align: center;">neutral</th>
<th style="text-align: center;">positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">81.76%</td>
<td style="text-align: center;">97% (293/303)</td>
<td style="text-align: center;">85% (1185/1391)</td>
<td style="text-align: center;">65% (373/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">51.86%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">61% (846/1391)</td>
<td style="text-align: center;">5% (28/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">81.40%</td>
<td style="text-align: center;">93% (283/303)</td>
<td style="text-align: center;">96% (1330/1391)</td>
<td style="text-align: center;">40% (230/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">78.53%</td>
<td style="text-align: center;">92% (279/303)</td>
<td style="text-align: center;">92% (1281/1391)</td>
<td style="text-align: center;">38% (218/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">66.21%</td>
<td style="text-align: center;"><u><strong>100% (302/303)</strong></u></td>
<td style="text-align: center;">82% (1145/1391)</td>
<td style="text-align: center;">9% (52/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">78.05%</td>
<td style="text-align: center;">88% (267/303)</td>
<td style="text-align: center;">97% (1355/1391)</td>
<td style="text-align: center;">25% (145/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">G</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">66.70%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">80% (1107/1391)</td>
<td style="text-align: center;">21% (118/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">H</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">70.89%</td>
<td style="text-align: center;">85% (259/303)</td>
<td style="text-align: center;">90% (1247/1391)</td>
<td style="text-align: center;">17% (99/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">I</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">69.17%</td>
<td style="text-align: center;">58% (176/303)</td>
<td style="text-align: center;">86% (1201/1391)</td>
<td style="text-align: center;">33% (189/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">J</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">57.38%</td>
<td style="text-align: center;">47% (142/303)</td>
<td style="text-align: center;">78% (1086/1391)</td>
<td style="text-align: center;">12% (71/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">K</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">41.87%</td>
<td style="text-align: center;">34% (102/303)</td>
<td style="text-align: center;">52% (728/1391)</td>
<td style="text-align: center;">21% (118/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">L</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">42.84%</td>
<td style="text-align: center;">66% (200/303)</td>
<td style="text-align: center;">45% (629/1391)</td>
<td style="text-align: center;">25% (141/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">M</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">51.46%</td>
<td style="text-align: center;">26% (79/303)</td>
<td style="text-align: center;">77% (1078/1391)</td>
<td style="text-align: center;">1% (8/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">N</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">29.77%</td>
<td style="text-align: center;">11% (33/303)</td>
<td style="text-align: center;">44% (608/1391)</td>
<td style="text-align: center;">6% (33/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">O</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">61.00%</td>
<td style="text-align: center;">37% (113/303)</td>
<td style="text-align: center;">90% (1257/1391)</td>
<td style="text-align: center;">2% (11/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">P</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">78.20%</td>
<td style="text-align: center;">91% (275/302)</td>
<td style="text-align: center;">91% (1266/1390)</td>
<td style="text-align: center;">40% (227/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Q</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">76.93%</td>
<td style="text-align: center;">96% (289/302)</td>
<td style="text-align: center;">73% (1010/1387)</td>
<td style="text-align: center;"><u><strong>77% (438/569)</strong></u></td>
</tr>
<tr class="even">
<td style="text-align: center;">R</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">81.42%</td>
<td style="text-align: center;">92% (274/299)</td>
<td style="text-align: center;">94% (1301/1379)</td>
<td style="text-align: center;">45% (252/566)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">S</td>
<td style="text-align: center;">30-Shot</td>
<td style="text-align: center;">81.51%</td>
<td style="text-align: center;">87% (255/294)</td>
<td style="text-align: center;">98% (1345/1379)</td>
<td style="text-align: center;">39% (221/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">T</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">83.73%</td>
<td style="text-align: center;">93% (272/294)</td>
<td style="text-align: center;">94.3% (1303/1382)</td>
<td style="text-align: center;">53% (298/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">U</td>
<td style="text-align: center;">25-Shot</td>
<td style="text-align: center;">82.94%</td>
<td style="text-align: center;">90% (266/294)</td>
<td style="text-align: center;">96.2% (1331/1384)</td>
<td style="text-align: center;">46% (260/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">V</td>
<td style="text-align: center;">21-Shot</td>
<td style="text-align: center;">83.28%</td>
<td style="text-align: center;">92% (273/296)</td>
<td style="text-align: center;">94.9% (1314/1384)</td>
<td style="text-align: center;">50% (281/563)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">W</td>
<td style="text-align: center;">15-Shot</td>
<td style="text-align: center;">81.55%</td>
<td style="text-align: center;">94% (279/298)</td>
<td style="text-align: center;">87.7% (1215/1386)</td>
<td style="text-align: center;">60% (340/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">X</td>
<td style="text-align: center;">30-Shot</td>
<td style="text-align: center;">81.74%</td>
<td style="text-align: center;">89% (261/293)</td>
<td style="text-align: center;">96.7% (1336/1381)</td>
<td style="text-align: center;">41% (229/560)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Y</td>
<td style="text-align: center;">60-Shot</td>
<td style="text-align: center;">75.82%</td>
<td style="text-align: center;">66% (186/283)</td>
<td style="text-align: center;"><u><strong>99.8% (1368/1371)</strong></u></td>
<td style="text-align: center;">21% (117/550)</td>
</tr>
<tr class="even">
<td style="text-align: center;">Z</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">81.36%</td>
<td style="text-align: center;">80% (236/294)</td>
<td style="text-align: center;">99.4% (1374/1382)</td>
<td style="text-align: center;">37% (210/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AA</td>
<td style="text-align: center;">23-Shot</td>
<td style="text-align: center;">82.95%</td>
<td style="text-align: center;">93% (276/296)</td>
<td style="text-align: center;">94.9% (1314/1384)</td>
<td style="text-align: center;">48% (269/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AB</td>
<td style="text-align: center;">25-Shot</td>
<td style="text-align: center;">83.70%</td>
<td style="text-align: center;">92% (270/294)</td>
<td style="text-align: center;">95.3% (1317/1382)</td>
<td style="text-align: center;">51% (287/563)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AC</td>
<td style="text-align: center;">23-Shot</td>
<td style="text-align: center;">83.40%</td>
<td style="text-align: center;">95% (278/294)</td>
<td style="text-align: center;">93.8% (1296/1382)</td>
<td style="text-align: center;">52% (295/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AD</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;"><u><strong>86.10%</strong></u></td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">95.5% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AE</td>
<td style="text-align: center;">60-Shot</td>
<td style="text-align: center;">83.71%</td>
<td style="text-align: center;">83% (234/283)</td>
<td style="text-align: center;">97.8% (1341/1371)</td>
<td style="text-align: center;">49% (270/550)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AF</td>
<td style="text-align: center;">15-Shot</td>
<td style="text-align: center;">82.00%</td>
<td style="text-align: center;">91% (272/298)</td>
<td style="text-align: center;">88.8% (1231/1386)</td>
<td style="text-align: center;">60% (341/565)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AG</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.40%</td>
<td style="text-align: center;">84% (248/294)</td>
<td style="text-align: center;">97.8% (1351/1382)</td>
<td style="text-align: center;">52% (289/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AH</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.67%</td>
<td style="text-align: center;">87% (256/294)</td>
<td style="text-align: center;">97.1% (1342/1382)</td>
<td style="text-align: center;">53% (296/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AI</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.99%</td>
<td style="text-align: center;">88% (260/294)</td>
<td style="text-align: center;">97.3% (1345/1382)</td>
<td style="text-align: center;">50% (283/561)</td>
</tr>
</tbody>
</table>
</section>
<section id="prompt-a" class="level2">
<h2 class="anchored" data-anchor-id="prompt-a">Prompt A</h2>
<p>I’ll start out with a simple instruction.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:42.003664Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:42.003063Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:42.007209Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:42.006564Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:42.003642Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">promptA <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="bu" style="color: null;">print</span>(promptA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: {text}</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T23:56:43.159481Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T23:56:43.158857Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T23:56:43.163344Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T23:56:43.162877Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T23:56:43.159459Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">formatted_prompt <span class="op" style="color: #5E5E5E;">=</span> promptA.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'sentence'</span>])</span>
<span id="cb12-2"><span class="bu" style="color: null;">print</span>(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>Looks good! I’m able to generate a response.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T23:57:26.818136Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T23:57:26.817640Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T23:57:27.897824Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T23:57:27.897098Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T23:57:26.818114Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>'neutral'</code></pre>
</div>
</div>
<p>At ~50ms per prompt, it would take about 2 minutes to run inference on the full 2264 item dataset.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T23:57:39.546421Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T23:57:39.545795Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T23:57:42.725946Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T23:57:42.725423Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T23:57:39.546398Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>45.4 ms ± 829 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:59:48.041247Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:59:48.040737Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:01:32.078384Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:01:32.077727Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:59:48.041228Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptA)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>Right off the bat, Qwen2-1.5B-Instruct has decent performance on sentiment classification. 81.85% is not bad at all! Let’s see if I can improve on that.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:03:42.022799Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:03:42.022301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:03:42.026526Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:03:42.025975Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:03:42.022780Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0.8175795053003534</code></pre>
</div>
</div>
<p>Interesting to note: Qwen2-1.5B-Instruct does not classify any <code>other</code> values than <code>negative</code>, <code>neutral</code> and <code>positive</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:03:45.360417Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:03:45.359904Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:03:45.438188Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:03:45.437744Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:03:45.360398Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-17-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:52:29.580743Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:52:29.580467Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:52:29.644754Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:52:29.644153Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:52:29.580723Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_A.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-b" class="level2">
<h2 class="anchored" data-anchor-id="prompt-b">Prompt B</h2>
<p>I’ll repeat the instruction after providing the sentence, as this has usually improved performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:54:00.844186Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:54:00.843927Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:54:00.847345Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:54:00.846792Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:54:00.844169Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">promptB <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb25-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb25-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:54:03.643533Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:54:03.642967Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:55:48.597394Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:55:48.596850Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:54:03.643511Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptB)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bcbefacc2c40475b8be7dbe5b2d9b2c2","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral</code></pre>
</div>
</div>
<p>Interesting! Repeating the instruction usually increases the accuracy. Here, it drops by about 30%!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:56:45.639844Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:56:45.639337Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:56:45.643528Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:56:45.643082Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:56:45.639823Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>0.5185512367491166</code></pre>
</div>
</div>
<p>The model actually gets better at <code>negative</code> classification but significantly plummets for the other two.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:58:42.357605Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:58:42.356978Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:58:42.438603Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:58:42.438004Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:58:42.357583Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-22-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T00:59:39.927223Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T00:59:39.926601Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T00:59:39.947632Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T00:59:39.947121Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T00:59:39.927201Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_B.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-c" class="level2">
<h2 class="anchored" data-anchor-id="prompt-c">Prompt C</h2>
<p>I’ll return to Prompt A and change the format a bit.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:08:07.523279Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:08:07.522757Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:08:07.526780Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:08:07.525799Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:08:07.523258Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">promptC <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Respond with a single word: negative, positive, or neutral</span></span>
<span id="cb32-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:08:23.693302Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:08:23.692824Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:10:08.045550Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:10:08.044924Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:08:23.693282Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptC)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2fa6fe3009e94ab3a3c79b4f32a62a63","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Respond with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>This yields a similar accuracy to Prompt A.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:15:31.818581Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:15:31.817938Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:15:31.822582Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:15:31.822058Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:15:31.818560Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>0.8140459363957597</code></pre>
</div>
</div>
<p>The model does quite well with <code>neutral</code> and <code>negative</code> sentences but terribly with <code>positive</code> sentences. In fact, Qwen2-1.5B-Instruct (96%) beats the best-performing phi-3 prompt (94%) in <code>neutral</code> True Positive Rate (TPR).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:15:59.349054Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:15:59.348524Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:15:59.426498Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:15:59.425927Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:15:59.349033Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-27-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:21:27.527307Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:21:27.526814Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:21:27.548183Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:21:27.547625Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:21:27.527288Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_C.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-d" class="level2">
<h2 class="anchored" data-anchor-id="prompt-d">Prompt D</h2>
<p>I’ll add a period after the instruction.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:23:14.254224Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:23:14.253672Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:23:14.257196Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:23:14.256513Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:23:14.254202Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">promptD <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Respond with a single word: negative, positive, or neutral.</span></span>
<span id="cb39-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:23:15.881247Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:23:15.880632Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:24:59.957575Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:24:59.956916Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:23:15.881217Z&quot;}" data-execution_count="35">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptD)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"146a2d89d47147f1818c3de0818e8bfa","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Respond with a single word: negative, positive, or neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>Nope! Period == bad.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:25:52.179044Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:25:52.178626Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:25:52.183154Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:25:52.182450Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:25:52.179022Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>0.7853356890459364</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:26:15.117352Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:26:15.116749Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:26:15.200042Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:26:15.199416Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:26:15.117331Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-32-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:26:46.939367Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:26:46.938857Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:26:46.957550Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:26:46.957048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:26:46.939347Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_D.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-e" class="level2">
<h2 class="anchored" data-anchor-id="prompt-e">Prompt E</h2>
<p>I’ll repeat the instruction to see if it improves performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:27:27.232178Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:27:27.231909Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:27:27.236318Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:27:27.235581Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:27:27.232161Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">promptE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Respond with a single word: negative, positive, or neutral</span></span>
<span id="cb46-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb46-3"><span class="st" style="color: #20794D;">Respond with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:27:41.200863Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:27:41.200608Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:29:25.605032Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:29:25.604368Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:27:41.200846Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptE)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dcd0b33fcd9244bfad13115bbf6c68c8","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Respond with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Respond with a single word: negative, positive, or neutral</code></pre>
</div>
</div>
<p>Nope! The repeated instruction decreases the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:29:28.329470Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:29:28.329214Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:29:28.335316Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:29:28.334934Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:29:28.329453Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>0.6621024734982333</code></pre>
</div>
</div>
<p>Note that the <code>negative</code> sentiment TPR is near perfect.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:29:45.010100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:29:45.009831Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:29:45.089053Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:29:45.088625Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:29:45.010081Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-37-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:30:04.540867Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:30:04.540459Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:30:04.559410Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:30:04.558963Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:30:04.540846Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_E.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-f" class="level2">
<h2 class="anchored" data-anchor-id="prompt-f">Prompt F</h2>
<p>I realized I didn’t have “Instruct:” at the start of the prompt so I’ll add that to Prompt C.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:34:17.290333Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:34:17.289485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:34:17.293403Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:34:17.292780Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:34:17.290318Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">promptF <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: Respond with a single word: negative, positive, or neutral</span></span>
<span id="cb53-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:35:03.346918Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:35:03.346376Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:36:45.436690Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:36:45.435973Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:35:03.346896Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptF)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"05bd97f2ca78430f8ff6a98fc6d734a2","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: Respond with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>That decreases the accuracy by 3%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:37:09.279112Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:37:09.278500Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:37:09.283352Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:37:09.282907Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:37:09.279088Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>0.7804770318021201</code></pre>
</div>
</div>
<p>Note that this prompt yields the best <code>neutral</code> TPR so far (1355/1391 = 97.4%) for this model.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:37:26.158203Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:37:26.157598Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:37:26.241699Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:37:26.241199Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:37:26.158176Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-42-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-42-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:38:39.753088Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:38:39.752482Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:38:39.770540Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:38:39.769918Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:38:39.753066Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_F.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-g" class="level2">
<h2 class="anchored" data-anchor-id="prompt-g">Prompt G</h2>
<p>I’ll now add some additional instructions.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:40:24.224105Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:40:24.223592Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:40:24.227278Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:40:24.226659Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:40:24.224084Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">promptG <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Your task is to analyze the sentiment (from an investor's perspective) of the text below.</span></span>
<span id="cb60-2"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb60-3"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:40:28.735679Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:40:28.735264Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:42:12.811586Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:42:12.810932Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:40:28.735655Z&quot;}" data-execution_count="52">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptG)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2376831ac1934b30909ec5ebfbc9c10a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Your task is to analyze the sentiment (from an investor's perspective) of the text below.
Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</code></pre>
</div>
</div>
<p>Additional instruction worsens the model’s performance by ~15%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:42:29.235922Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:42:29.235238Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:42:29.240085Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:42:29.239607Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:42:29.235898Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>0.6669611307420494</code></pre>
</div>
</div>
<p>Nothing immediately notable about the results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:42:51.099979Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:42:51.099379Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:42:51.177921Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:42:51.177353Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:42:51.099957Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-47-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-47-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:43:26.022759Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:43:26.021914Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:43:26.043508Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:43:26.043005Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:43:26.022736Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_G.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-h" class="level2">
<h2 class="anchored" data-anchor-id="prompt-h">Prompt H</h2>
<p>I’ll now try a series of prompts suggested by Claude (based on the previous prompts and accuracies achieved). These prompts are simple and concise.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:49:14.759138Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:49:14.758485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:49:14.761387Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:49:14.761008Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:49:14.759115Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">promptH <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Sentiment: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb67-2"><span class="st" style="color: #20794D;">Output: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:49:19.724808Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:49:19.724114Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:51:01.456341Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:51:01.455757Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:49:19.724785Z&quot;}" data-execution_count="58">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptH)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ea8c7c0d57e945c98ab08c46eb50232a","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Sentiment: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Output: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>I’m surprised that such a simple prompt performs well, though it’s 11% worse than my best prompts so far.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:51:27.557878Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:51:27.557616Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:51:27.562673Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:51:27.561946Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:51:27.557859Z&quot;}" data-execution_count="59">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>0.708922261484099</code></pre>
</div>
</div>
<p>What’s notable about this prompt’s results is the incredibly bad performance on <code>positive</code> sentiment (18%). Also noteworthy is that with this prompt there are now <code>other</code> responses than <code>negative</code>, <code>neutral</code> or <code>positive</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:52:00.340487Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:52:00.340205Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:52:00.424575Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:52:00.423985Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:52:00.340467Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-52-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-52-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:53:38.618837Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:53:38.618322Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:53:38.635658Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:53:38.635218Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:53:38.618816Z&quot;}" data-execution_count="61">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_H.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-i" class="level2">
<h2 class="anchored" data-anchor-id="prompt-i">Prompt I</h2>
<p>Another prompt suggested by Claude.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:54:26.404619Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:54:26.403989Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:54:26.407468Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:54:26.406918Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:54:26.404597Z&quot;}" data-execution_count="62">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">promptI <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Classify sentiment: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb74-2"><span class="st" style="color: #20794D;">Answer: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:54:37.205718Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:54:37.205123Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:56:19.276065Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:56:19.275418Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:54:37.205697Z&quot;}" data-execution_count="63">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptI)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e885f66323294cf482708b2ddc125c84","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Classify sentiment: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Answer: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>A similar performance to Prompt H.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:56:47.286853Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:56:47.286592Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:56:47.290354Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:56:47.289917Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:56:47.286835Z&quot;}" data-execution_count="64">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>0.691696113074205</code></pre>
</div>
</div>
<p>This prompt performs worse for all three sentiments, but especially <code>negative</code> and <code>positive</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:57:04.050873Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:57:04.050609Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:57:04.135403Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:57:04.134846Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:57:04.050855Z&quot;}" data-execution_count="65">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-57-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-57-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:57:55.021831Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:57:55.021565Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:57:55.038542Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:57:55.037929Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:57:55.021813Z&quot;}" data-execution_count="66">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_I.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-j" class="level2">
<h2 class="anchored" data-anchor-id="prompt-j">Prompt J</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:58:21.010761Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:58:21.010496Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T01:58:21.013609Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T01:58:21.013092Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:58:21.010743Z&quot;}" data-execution_count="67">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">promptJ <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Text: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb81-2"><span class="st" style="color: #20794D;">Sentiment classification: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T01:58:33.832895Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T01:58:33.832275Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:00:15.293523Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:00:15.293010Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T01:58:33.832873Z&quot;}" data-execution_count="68">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptJ)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"016c2ee9d58241bfb2e03842796dec0f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Text: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Sentiment classification: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>This prompt yields a significantly worse performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:00:18.081535Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:00:18.080605Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:00:18.085993Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:00:18.085346Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:00:18.081503Z&quot;}" data-execution_count="69">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>0.5737632508833922</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:00:22.241379Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:00:22.240540Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:00:22.321842Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:00:22.321260Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:00:22.241345Z&quot;}" data-execution_count="70">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-62-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-62-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:00:53.179024Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:00:53.178477Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:00:53.195516Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:00:53.195006Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:00:53.179002Z&quot;}" data-execution_count="71">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_J.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-k" class="level2">
<h2 class="anchored" data-anchor-id="prompt-k">Prompt K</h2>
<p>Another Claude suggested prompt:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:03:49.704085Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:03:49.703461Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:03:49.706989Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:03:49.706488Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:03:49.704064Z&quot;}" data-execution_count="72">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">promptK <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Analyze the sentiment of this text:</span></span>
<span id="cb88-2"><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb88-3"><span class="st" style="color: #20794D;">Classification: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:04:02.197181Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:04:02.196519Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:05:44.217989Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:05:44.217328Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:04:02.197156Z&quot;}" data-execution_count="73">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptK)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"594bc11d78054d10b717d22f325b96c2","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Analyze the sentiment of this text:
According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Classification: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>This prompt yields worse results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:05:50.987825Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:05:50.987301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:05:50.991958Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:05:50.991481Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:05:50.987804Z&quot;}" data-execution_count="74">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>0.41872791519434627</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:06:09.453833Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:06:09.453102Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:06:09.542094Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:06:09.541493Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:06:09.453809Z&quot;}" data-execution_count="75">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-67-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-67-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:06:36.313711Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:06:36.313198Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:06:36.330680Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:06:36.330198Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:06:36.313690Z&quot;}" data-execution_count="76">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_K.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-l" class="level2">
<h2 class="anchored" data-anchor-id="prompt-l">Prompt L</h2>
<p>Another Claude suggested prompt (so far, has not yielded good results!).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:08:39.307693Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:08:39.307428Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:08:39.310841Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:08:39.310344Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:08:39.307676Z&quot;}" data-execution_count="77">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">promptL <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Categorize the following text as negative, positive, or neutral:</span></span>
<span id="cb95-2"><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb95-3"><span class="st" style="color: #20794D;">Category:"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:08:50.619156Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:08:50.618582Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:10:35.160551Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:10:35.159925Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:08:50.619133Z&quot;}" data-execution_count="78">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptL)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"dbdfb0ce734f4afaabd97952702b9db1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Categorize the following text as negative, positive, or neutral:
According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Category:</code></pre>
</div>
</div>
<p>Another subpar result.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:12:01.622751Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:12:01.621919Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:12:01.626695Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:12:01.626054Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:12:01.622717Z&quot;}" data-execution_count="79">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>0.4284452296819788</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:12:13.296215Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:12:13.295579Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:12:13.387733Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:12:13.387062Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:12:13.296193Z&quot;}" data-execution_count="80">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-72-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-72-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:13:06.205788Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:13:06.205276Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:13:06.223609Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:13:06.222988Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:13:06.205767Z&quot;}" data-execution_count="81">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_L.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-m" class="level2">
<h2 class="anchored" data-anchor-id="prompt-m">Prompt M</h2>
<p>Another Claude suggested prompt (3 more left to try out!)</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:14:31.017037Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:14:31.016519Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:14:31.019819Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:14:31.019304Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:14:31.017017Z&quot;}" data-execution_count="82">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">promptM <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Sentiment analysis task:</span></span>
<span id="cb102-2"><span class="st" style="color: #20794D;">Input: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb102-3"><span class="st" style="color: #20794D;">Output: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:14:44.071326Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:14:44.070526Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:16:28.334499Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:16:28.333993Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:14:44.071303Z&quot;}" data-execution_count="83">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptM)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1654332f234340eca2669a1084b9b53b","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Sentiment analysis task:
Input: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Output: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>Nope! No success with this one either (well, 51% success).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:16:30.971777Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:16:30.971168Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:16:30.975280Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:16:30.974630Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:16:30.971755Z&quot;}" data-execution_count="84">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>0.5145759717314488</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:16:48.044181Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:16:48.043551Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:16:48.119703Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:16:48.119295Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:16:48.044181Z&quot;}" data-execution_count="85">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-77-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-77-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:16:55.427723Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:16:55.426989Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:16:55.444338Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:16:55.443903Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:16:55.427698Z&quot;}" data-execution_count="86">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_M.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-n" class="level2">
<h2 class="anchored" data-anchor-id="prompt-n">Prompt N</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:17:26.014294Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:17:26.013826Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:17:26.016822Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:17:26.016403Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:17:26.014274Z&quot;}" data-execution_count="88">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">promptN <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""determine the sentiment:</span></span>
<span id="cb109-2"><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb109-3"><span class="st" style="color: #20794D;">sentiment: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:17:27.325721Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:17:27.325037Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:19:10.303589Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:19:10.303098Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:17:27.325715Z&quot;}" data-execution_count="89">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptN)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a649aa8638ea4d1eaf79566df1ebf6bf","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>determine the sentiment:
According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
sentiment: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>This one was particularly bad.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:21:15.890864Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:21:15.890078Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:21:15.894748Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:21:15.894193Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:21:15.890841Z&quot;}" data-execution_count="90">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>0.29770318021201414</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:21:45.216570Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:21:45.216300Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:21:45.295032Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:21:45.294440Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:21:45.216551Z&quot;}" data-execution_count="91">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-82-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-82-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:21:55.349372Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:21:55.348867Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:21:55.369316Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:21:55.368870Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:21:55.349350Z&quot;}" data-execution_count="92">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_N.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-o" class="level2">
<h2 class="anchored" data-anchor-id="prompt-o">Prompt O</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:23:31.681229Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:23:31.680740Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:23:31.683900Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:23:31.683352Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:23:31.681209Z&quot;}" data-execution_count="93">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">promptO <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Sentiment classification task:</span></span>
<span id="cb116-2"><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">'</span></span>
<span id="cb116-3"><span class="st" style="color: #20794D;">Label: [negative/positive/neutral]"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:24:00.897570Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:24:00.897301Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:25:46.719818Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:25:46.719188Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:24:00.897551Z&quot;}" data-execution_count="94">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptO)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d1e6160a406749eea622888da84ea813","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Sentiment classification task:
'According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .'
Label: [negative/positive/neutral]</code></pre>
</div>
</div>
<p>Looks like I’ll stick with Prompt A for now!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:26:21.475465Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:26:21.474931Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:26:21.479473Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:26:21.478867Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:26:21.475443Z&quot;}" data-execution_count="95">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>0.609982332155477</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:27:11.425095Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:27:11.424492Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:27:11.516581Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:27:11.515953Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:27:11.425073Z&quot;}" data-execution_count="96">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-87-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-87-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:27:24.834526Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:27:24.833758Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:27:24.851920Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:27:24.851358Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:27:24.834503Z&quot;}" data-execution_count="97">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_O.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-p" class="level2">
<h2 class="anchored" data-anchor-id="prompt-p">Prompt P</h2>
<p>I’ll revisit Prompt A and give it a few examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:01.191642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:01.191485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:01.197504Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:01.196894Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:01.191630Z&quot;}" data-execution_count="10">
<details>
<summary>Show updated <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb123-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb123-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb123-4">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb123-5">    </span>
<span id="cb123-6">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb123-7">    </span>
<span id="cb123-8">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb123-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb123-10">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb123-11">    </span>
<span id="cb123-12">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb123-13">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb123-14">        </span>
<span id="cb123-15">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb123-16">            messages,</span>
<span id="cb123-17">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb123-18">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb123-19">        )</span>
<span id="cb123-20">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb123-21"></span>
<span id="cb123-22">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb123-23">            model_inputs.input_ids,</span>
<span id="cb123-24">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb123-25">        )</span>
<span id="cb123-26">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb123-27">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb123-28">        ]</span>
<span id="cb123-29"></span>
<span id="cb123-30">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb123-31">        responses.append(response)</span>
<span id="cb123-32">        </span>
<span id="cb123-33">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb123-34">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb123-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb123-36">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb123-37">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb123-38">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb123-39">    </span>
<span id="cb123-40">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:33:46.429286Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:33:46.428623Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:33:46.432142Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:33:46.431488Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:33:46.429266Z&quot;}" data-execution_count="99">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:34:18.899066Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:34:18.898242Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:34:18.913802Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:34:18.913195Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:34:18.899040Z&quot;}" data-execution_count="102">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1">promptP_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs)</span>
<span id="cb125-2">promptP_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2261
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:34:30.007121Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:34:30.006697Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:34:30.011849Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:34:30.011382Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:34:30.007099Z&quot;}" data-execution_count="103">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb127-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb127-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb127-4"></span>
<span id="cb127-5">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="103">
<pre><code>[('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:35:08.140625Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:35:08.140198Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:37:10.449678Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:37:10.449173Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:35:08.140604Z&quot;}" data-execution_count="104">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptP_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e784856318a64925b331946237897426","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<p>3-Shot prompting does not improve performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:42:13.692155Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:42:13.691882Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:42:13.697220Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:42:13.696528Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:42:13.692137Z&quot;}" data-execution_count="105">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>0.7819548872180451</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:42:37.169902Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:42:37.169638Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:42:37.255052Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:42:37.254427Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:42:37.169884Z&quot;}" data-execution_count="106">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-95-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-95-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:42:56.810129Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:42:56.809435Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:42:56.828384Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:42:56.827893Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:42:56.810105Z&quot;}" data-execution_count="107">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_P.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-q" class="level2">
<h2 class="anchored" data-anchor-id="prompt-q">Prompt Q</h2>
<p>I’ll try 6-Shot prompting next.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:44:17.241254Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:44:17.240644Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:44:17.253987Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:44:17.253502Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:44:17.241232Z&quot;}" data-execution_count="110">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>]</span>
<span id="cb135-2">promptQ_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb135-3">promptQ_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="110">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2258
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:44:23.321497Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:44:23.321265Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:44:23.327622Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:44:23.326993Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:44:23.321479Z&quot;}" data-execution_count="111">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb137-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb137-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb137-4"></span>
<span id="cb137-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>6</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:44:29.806888Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:44:29.806623Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:47:08.486306Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:47:08.485621Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:44:29.806871Z&quot;}" data-execution_count="112">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptQ_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"edbc09e9ac7d407c9a09a29e647fb199","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .</code></pre>
</div>
</div>
<p>6-Shot doesn’t fare much better.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:47:17.258913Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:47:17.258322Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:47:17.262967Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:47:17.262286Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:47:17.258892Z&quot;}" data-execution_count="113">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb141-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>0.7692648361381754</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:47:36.931275Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:47:36.930747Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:47:37.011303Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:47:37.010794Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:47:36.931255Z&quot;}" data-execution_count="114">
<div class="sourceCode cell-code" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb143-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-101-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-101-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:47:57.095174Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:47:57.094525Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:47:57.116766Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:47:57.116335Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:47:57.095144Z&quot;}" data-execution_count="115">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_Q.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-r" class="level2">
<h2 class="anchored" data-anchor-id="prompt-r">Prompt R</h2>
<p>I’ll now bump it up to 20 examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:49:52.436608Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:49:52.436099Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:49:52.439646Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:49:52.439231Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:49:52.436587Z&quot;}" data-execution_count="117">
<div class="sourceCode cell-code" id="cb145" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb145-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb145-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb145-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb145-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb145-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:49:55.123883Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:49:55.123397Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:49:55.135294Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:49:55.134856Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:49:55.123862Z&quot;}" data-execution_count="118">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">promptR_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb146-2">promptR_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2244
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:50:08.595709Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:50:08.594940Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:50:08.601679Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:50:08.601269Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:50:08.595686Z&quot;}" data-execution_count="119">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb148-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb148-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb148-4"></span>
<span id="cb148-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>20</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:50:44.138747Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:50:44.138485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:56:33.924549Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:56:33.923971Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:50:44.138729Z&quot;}" data-execution_count="120">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptR_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"f43a929a6fc84cb68dbf96e9889a55fb","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Finnish Talentum reports its operating profit increased to EUR 20.5 mn in 2005 from EUR 9.3 mn in 2004 , and net sales totaled EUR 103.3 mn , up from EUR 96.4 mn .</code></pre>
</div>
</div>
<p>Interestingly, the 20-Shot prompt yields a worse accuracy than the 0-Shot prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:57:51.399230Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:57:51.398971Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:57:51.402910Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:57:51.402456Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:57:51.399212Z&quot;}" data-execution_count="121">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="121">
<pre><code>0.8141711229946524</code></pre>
</div>
</div>
<p>Compared to 0-Shot Prompt A (85%), the 20-Shot prompt has a significantly higher TPR for <code>neutral</code> sentiment (94%) whereas <code>negative</code> and <code>positive</code> perform worse.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T02:58:25.779764Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T02:58:25.779502Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T02:58:25.861599Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T02:58:25.861092Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T02:58:25.779745Z&quot;}" data-execution_count="122">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-108-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-108-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:00:58.292027Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:00:58.291758Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:00:58.311570Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:00:58.311085Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:00:58.292001Z&quot;}" data-execution_count="123">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_R.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-s" class="level2">
<h2 class="anchored" data-anchor-id="prompt-s">Prompt S</h2>
<p>I’ll increase the number of examples to 30, but will only add <code>negative</code> and <code>positive</code> examples as the model’s performance was lacking for those sentiments.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:05:58.128963Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:05:58.128681Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:05:58.132358Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:05:58.131866Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:05:58.128939Z&quot;}" data-execution_count="134">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb156-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb156-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb156-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb156-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:06:00.608594Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:06:00.608332Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:06:00.621897Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:06:00.621197Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:06:00.608577Z&quot;}" data-execution_count="135">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">promptS_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb157-2">promptS_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="135">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:06:04.043102Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:06:04.042837Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:06:04.051241Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:06:04.050686Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:06:04.043082Z&quot;}" data-execution_count="136">
<div class="sourceCode cell-code" id="cb159" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb159-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb159-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb159-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb159-4"></span>
<span id="cb159-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="136">
<pre><code>30</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:06:08.666437Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:06:08.666223Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:14:39.260729Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:14:39.260066Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:06:08.666418Z&quot;}" data-execution_count="137">
<div class="sourceCode cell-code" id="cb161" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb161-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptS_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"276e6a04be414ff294fcdd416cd106d4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>Increasing the number of examples and changing the proportions has not improved the overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:15:11.478492Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:15:11.478259Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:15:11.483259Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:15:11.482768Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:15:11.478475Z&quot;}" data-execution_count="138">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="138">
<pre><code>0.815129811996419</code></pre>
</div>
</div>
<p>Interestingly, the number of correctly predicted <code>neutral</code> sentences has increased with this prompt while the number of correctly predicted <code>negative</code> and <code>positive</code> sentences decreased.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:15:45.177508Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:15:45.176896Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:15:45.255000Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:15:45.254537Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:15:45.177484Z&quot;}" data-execution_count="139">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-115-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-115-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:20:07.089419Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:20:07.088756Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:20:07.110474Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:20:07.109955Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:20:07.089396Z&quot;}" data-execution_count="140">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_S.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-t" class="level2">
<h2 class="anchored" data-anchor-id="prompt-t">Prompt T</h2>
<p>As the number of examples have increased, the model is classifying more and more negative and positive sentences as neutral. After chatting with Claude: I’ll start removing neutral sentences from the example to see if that reverses this trend.</p>
<p>I’ll start by giving the model 9 examples per sentiment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:26:01.252527Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:26:01.251932Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:26:01.256038Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:26:01.255379Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:26:01.252504Z&quot;}" data-execution_count="143">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb167-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb167-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb167-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb167-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:26:06.804303Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:26:06.803685Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:26:06.816548Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:26:06.816081Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:26:06.804281Z&quot;}" data-execution_count="144">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">promptT_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb168-2">promptT_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="144">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2237
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:26:18.938875Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:26:18.938273Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:26:18.945826Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:26:18.945245Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:26:18.938855Z&quot;}" data-execution_count="145">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb170-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb170-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb170-4"></span>
<span id="cb170-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="145">
<pre><code>27</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:26:38.162921Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:26:38.162275Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:34:42.884773Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:34:42.884119Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:26:38.162898Z&quot;}" data-execution_count="146">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptT_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c8887387f36047f89114ec98fcd2e860","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>Hooray! This strategy yielded results. The accuracy increases by a couple percent.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:35:16.682137Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:35:16.681398Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:35:16.685904Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:35:16.685368Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:35:16.682113Z&quot;}" data-execution_count="147">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="147">
<pre><code>0.8372820742065266</code></pre>
</div>
</div>
<p>The <code>neutral</code> TPR has decreased, as expected, but <code>negative</code> and <code>positive</code> are now making a comeback.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:35:47.552172Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:35:47.551655Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:35:47.634351Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:35:47.633695Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:35:47.552151Z&quot;}" data-execution_count="148">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb176-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-122-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-122-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:44:11.739583Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:44:11.738923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:44:11.761991Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:44:11.761506Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:44:11.739560Z&quot;}" data-execution_count="149">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_T.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-u" class="level2">
<h2 class="anchored" data-anchor-id="prompt-u">Prompt U</h2>
<p>I’ll continue to decrease the number of examples, this time by decreasing the number of neutral examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:48:16.012764Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:48:16.012128Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:48:16.016243Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:48:16.015616Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:48:16.012741Z&quot;}" data-execution_count="151">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb178-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb178-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb178-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb178-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb178-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:48:17.431014Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:48:17.430494Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:48:17.443142Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:48:17.442592Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:48:17.430994Z&quot;}" data-execution_count="152">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">promptU_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb179-2">promptU_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2239
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:48:28.608315Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:48:28.607792Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:48:28.615580Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:48:28.615034Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:48:28.608296Z&quot;}" data-execution_count="153">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb181-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb181-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb181-4"></span>
<span id="cb181-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="153">
<pre><code>25</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:48:35.434049Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:48:35.433435Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:55:47.666785Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:55:47.666319Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:48:35.434027Z&quot;}" data-execution_count="154">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb183-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptU_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c8d63b6ff24d41aaa546da5e12a69a72","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>Decreasing the number of neutral examples decreases the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:57:54.860959Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:57:54.860193Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:57:54.864271Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:57:54.863796Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:57:54.860937Z&quot;}" data-execution_count="155">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb185-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="155">
<pre><code>0.829388119696293</code></pre>
</div>
</div>
<p>The model is actually worse at predicting <code>negative</code> and <code>positive</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:59:49.645127Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:59:49.644617Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:59:49.729181Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:59:49.727938Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:59:49.645105Z&quot;}" data-execution_count="156">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb187-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-129-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-21"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-129-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T03:59:52.372105Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T03:59:52.371838Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T03:59:52.391122Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T03:59:52.390526Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T03:59:52.372087Z&quot;}" data-execution_count="157">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_U.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-v" class="level2">
<h2 class="anchored" data-anchor-id="prompt-v">Prompt V</h2>
<p>I’ll continue decreasing examples, with equal amounts from each sentiment for a 21-Shot prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:05:16.053456Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:05:16.053173Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:05:16.057249Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:05:16.056561Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:05:16.053438Z&quot;}" data-execution_count="161">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb189-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb189-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>,  <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb189-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb189-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:05:17.156673Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:05:17.156193Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:05:17.168734Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:05:17.168208Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:05:17.156651Z&quot;}" data-execution_count="162">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb190-1">promptV_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb190-2">promptV_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="162">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2243
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:05:18.942118Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:05:18.941313Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:05:18.949797Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:05:18.949094Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:05:18.942092Z&quot;}" data-execution_count="163">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb192-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb192-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb192-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb192-4"></span>
<span id="cb192-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="163">
<pre><code>21</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:05:25.030862Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:05:25.030349Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:11:37.317508Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:11:37.316912Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:05:25.030840Z&quot;}" data-execution_count="164">
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb194-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptV_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ac3a1b88a9d94b6887aee3402d67b5b2","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Foundries division reports its sales increased by 9.7 % to EUR 63.1 mn from EUR 57.5 mn in the corresponding period in 2006 , and sales of the Machine Shop division increased by 16.4 % to EUR 41.2 mn from EUR 35.4 mn in the corresponding period in 2006 .</code></pre>
</div>
</div>
<p>The accuracy improves, but is still second-best so far.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:12:51.010375Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:12:51.010030Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:12:51.014682Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:12:51.014150Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:12:51.010325Z&quot;}" data-execution_count="165">
<div class="sourceCode cell-code" id="cb196" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb196-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="165">
<pre><code>0.8328131966116807</code></pre>
</div>
</div>
<p>Compared to my best-performing prompting strategy, this prompt yields one more correct <code>negative</code> sentence, 11 more correct <code>neutral</code>s and 17 fewer correct <code>positive</code>s.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:13:29.823070Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:13:29.822547Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:13:29.907173Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:13:29.906516Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:13:29.823048Z&quot;}" data-execution_count="166">
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb198-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-136-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-22"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-136-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:14:50.517696Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:14:50.517187Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:14:50.535259Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:14:50.534775Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:14:50.517675Z&quot;}" data-execution_count="167">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb199-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_V.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-w" class="level2">
<h2 class="anchored" data-anchor-id="prompt-w">Prompt W</h2>
<p>I’ll try one more reduction in examples to 15 before increasing them past 27.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:15:41.850880Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:15:41.850376Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:15:41.853828Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:15:41.853351Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:15:41.850860Z&quot;}" data-execution_count="168">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb200-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb200-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb200-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>,   <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb200-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb200-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:15:54.330551Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:15:54.329891Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:15:54.343145Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:15:54.342588Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:15:54.330527Z&quot;}" data-execution_count="169">
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb201-1">promptW_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb201-2">promptW_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="169">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2249
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:16:03.514829Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:16:03.514323Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:16:03.520748Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:16:03.520257Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:16:03.514805Z&quot;}" data-execution_count="170">
<div class="sourceCode cell-code" id="cb203" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb203-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb203-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb203-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb203-4"></span>
<span id="cb203-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="170">
<pre><code>15</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:16:16.620911Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:16:16.620652Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:21:29.448146Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:21:29.447465Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:16:16.620894Z&quot;}" data-execution_count="171">
<div class="sourceCode cell-code" id="cb205" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb205-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptW_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"84d6ef05f19d4ba5bd1e41dfe07bcc2c","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Clothing retail chain Sepp+ñl+ñ 's sales increased by 8 % to EUR 155.2 mn , and operating profit rose to EUR 31.1 mn from EUR 17.1 mn in 2004 .</code></pre>
</div>
</div>
<p>Decreasing the number of examples to 15 has worsened the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:22:54.622056Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:22:54.621487Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:22:54.626337Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:22:54.625723Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:22:54.622032Z&quot;}" data-execution_count="173">
<div class="sourceCode cell-code" id="cb207" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb207-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="173">
<pre><code>0.8154735437972432</code></pre>
</div>
</div>
<p>Interestingly, here the <code>negative</code> and <code>positive</code> sentiments perform better but <code>neutral</code> performs worse (compared to the best- performing prompt).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:22:56.372903Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:22:56.372380Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:22:56.453197Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:22:56.452533Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:22:56.372882Z&quot;}" data-execution_count="174">
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb209-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-143-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-23"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-143-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:23:00.842007Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:23:00.841243Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:23:00.861876Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:23:00.861344Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:23:00.841986Z&quot;}" data-execution_count="175">
<div class="sourceCode cell-code" id="cb210" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb210-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_W.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-x" class="level2">
<h2 class="anchored" data-anchor-id="prompt-x">Prompt X</h2>
<p>I’ll now go in the other direction and increase the number of prompts from 27 to 30 (10 per sentiment).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:26:07.579063Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:26:07.578506Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:26:07.582986Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:26:07.582301Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:26:07.579043Z&quot;}" data-execution_count="179">
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb211-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb211-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb211-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="dv" style="color: #AD0000;">353</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb211-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb211-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:26:53.801382Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:26:53.800882Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:26:53.814626Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:26:53.814164Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:26:53.801362Z&quot;}" data-execution_count="182">
<div class="sourceCode cell-code" id="cb212" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb212-1">promptX_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb212-2">promptX_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="182">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2234
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:27:16.500653Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:27:16.499951Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:27:16.508076Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:27:16.507645Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:27:16.500630Z&quot;}" data-execution_count="183">
<div class="sourceCode cell-code" id="cb214" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb214-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb214-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb214-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb214-4"></span>
<span id="cb214-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="183">
<pre><code>30</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:27:23.378899Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:27:23.378287Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:36:04.582221Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:36:04.581629Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:27:23.378877Z&quot;}" data-execution_count="184">
<div class="sourceCode cell-code" id="cb216" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb216-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptX_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2d647fed6c6d45d8a95812e14b845f53","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: MegaFon 's subscriber base increased 16.1 % in 2009 to 50.5 million users as of December 31 , while its market share by the number of customers amounted to 24 % as of late 2009 , up from 23 % as of late 2008 , according to TeliaSonera estimates .</code></pre>
</div>
</div>
<p>Nope! Increasing the prompts to 30 doesn’t yield better results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:37:25.187520Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:37:25.186681Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:37:25.191297Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:37:25.190862Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:37:25.187499Z&quot;}" data-execution_count="185">
<div class="sourceCode cell-code" id="cb218" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb218-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="185">
<pre><code>0.8173679498657117</code></pre>
</div>
</div>
<p>A similar trend as before is appearing: the model gets a lot better at predicting <code>neutral</code> sentences at the cost of <code>negative</code> and <code>positive</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:37:43.937466Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:37:43.936951Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:37:44.023794Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:37:44.023111Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:37:43.937444Z&quot;}" data-execution_count="186">
<div class="sourceCode cell-code" id="cb220" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb220-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-150-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-24"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-150-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T04:38:44.878165Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T04:38:44.877881Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T04:38:44.896277Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T04:38:44.895585Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T04:38:44.878128Z&quot;}" data-execution_count="187">
<div class="sourceCode cell-code" id="cb221" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb221-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_X.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-y" class="level2">
<h2 class="anchored" data-anchor-id="prompt-y">Prompt Y</h2>
<p>Before I return to the best-performing 21-Shot prompt, I’ll try and give the model a significantly higher number of examples (60) to see if that improves performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:36:47.656707Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:36:47.656404Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:36:47.660925Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:36:47.660247Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:36:47.656686Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb222" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb222-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb222-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">20</span>,<span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb222-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="dv" style="color: #AD0000;">353</span>, <span class="dv" style="color: #AD0000;">354</span>, <span class="dv" style="color: #AD0000;">355</span>, <span class="dv" style="color: #AD0000;">356</span>, <span class="dv" style="color: #AD0000;">357</span>, <span class="dv" style="color: #AD0000;">358</span>, <span class="dv" style="color: #AD0000;">359</span>, <span class="dv" style="color: #AD0000;">360</span>, <span class="dv" style="color: #AD0000;">361</span>, <span class="dv" style="color: #AD0000;">362</span>, <span class="dv" style="color: #AD0000;">370</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb222-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">271</span>, <span class="dv" style="color: #AD0000;">272</span>, <span class="dv" style="color: #AD0000;">273</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">275</span>, <span class="dv" style="color: #AD0000;">276</span>, <span class="dv" style="color: #AD0000;">277</span>, <span class="dv" style="color: #AD0000;">278</span>, <span class="dv" style="color: #AD0000;">279</span>, <span class="dv" style="color: #AD0000;">280</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb222-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:39:06.205160Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:39:06.204890Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:39:06.230950Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:39:06.230335Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:39:06.205142Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb223" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb223-1">promptY_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb223-2">promptY_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:39:22.186495Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:39:22.185657Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:39:22.197085Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:39:22.196204Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:39:22.186480Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb225" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb225-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb225-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb225-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb225-4"></span>
<span id="cb225-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>60</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:40:02.874729Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:40:02.874111Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:56:00.243053Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:56:00.242575Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:40:02.874707Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb227-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptY_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"1deecfe99d934f069bcb7aacba0bd636","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: The fair value of the property portfolio doubled as a result of the Kapiteeli acquisition and totalled EUR 2,686.2 1,259.7 million .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.</code></pre>
</div>
</div>
<p>Nope! 60 examples does not improve performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:56:21.228432Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:56:21.227630Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:56:21.231635Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:56:21.231245Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:56:21.228408Z&quot;}" data-execution_count="55">
<div class="sourceCode cell-code" id="cb230" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb230-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>0.7581669691470054</code></pre>
</div>
</div>
<p>Interestingly this prompt causes the model to perform ridiculously well on <code>neutral</code> sentences (1368/1371 = 99.8%), but abysmally on <code>negative</code> and especially <code>positive</code> sentences (117/550 = 21%).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T20:56:38.378086Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T20:56:38.377439Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T20:56:38.491329Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T20:56:38.490864Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T20:56:38.378068Z&quot;}" data-execution_count="56">
<div class="sourceCode cell-code" id="cb232" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb232-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-157-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-25"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-157-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:04:39.085074Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:04:39.084390Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:04:39.122395Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:04:39.121745Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:04:39.085045Z&quot;}" data-execution_count="57">
<div class="sourceCode cell-code" id="cb233" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb233-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_Y.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-z" class="level2">
<h2 class="anchored" data-anchor-id="prompt-z">Prompt Z</h2>
<p>I’ll return to the best-performing prompt: 27-Shot Prompt A. I’ll see if adding instructions helps.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:20.595468Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:20.594867Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:24:20.598603Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:24:20.597786Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:20.595443Z&quot;}" data-execution_count="67">
<div class="sourceCode cell-code" id="cb234" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb234-1">promptZ <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.</span></span>
<span id="cb234-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:21.943846Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:21.943243Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:24:21.947360Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:24:21.946639Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:21.943825Z&quot;}" data-execution_count="68">
<div class="sourceCode cell-code" id="cb235" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb235-1"><span class="bu" style="color: null;">print</span>(promptZ)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.
TEXT: {text}</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:25.822833Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:25.822178Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:24:25.826474Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:24:25.825901Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:25.822806Z&quot;}" data-execution_count="69">
<div class="sourceCode cell-code" id="cb237" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb237-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb237-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb237-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb237-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb237-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:28.397160Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:28.396699Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:24:28.410046Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:24:28.409501Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:28.397142Z&quot;}" data-execution_count="70">
<div class="sourceCode cell-code" id="cb238" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb238-1">promptZ_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb238-2">promptZ_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2237
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:32.648423Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:32.648154Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:24:32.655472Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:24:32.654960Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:32.648405Z&quot;}" data-execution_count="71">
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb240-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb240-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb240-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb240-4"></span>
<span id="cb240-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>27</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:24:43.274751Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:24:43.274470Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:34:01.697496Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:34:01.696832Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:24:43.274732Z&quot;}" data-execution_count="72">
<div class="sourceCode cell-code" id="cb242" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb242-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptZ_ds, promptZ, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"5c5ea91cad5249baacce8eb0f3df9981","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>The modified prompt resulted in a ~2% drop in accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:34:01.699564Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:34:01.698984Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:34:01.703624Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:34:01.703060Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:34:01.699536Z&quot;}" data-execution_count="73">
<div class="sourceCode cell-code" id="cb244" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb244-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">
<pre><code>0.813589628967367</code></pre>
</div>
</div>
<p>This prompt performs better than the best-performing one for <code>neutral</code> sentences (1374 &gt; 1300) at the cost of <code>negative</code> and <code>positive</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:34:01.704965Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:34:01.704793Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:34:01.800100Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:34:01.799650Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:34:01.704950Z&quot;}" data-execution_count="74">
<div class="sourceCode cell-code" id="cb246" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb246-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-166-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-26"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-166-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T21:34:01.801639Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T21:34:01.801147Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T21:34:01.822470Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T21:34:01.821979Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T21:34:01.801615Z&quot;}" data-execution_count="75">
<div class="sourceCode cell-code" id="cb247" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb247-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_Z.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-aa" class="level2">
<h2 class="anchored" data-anchor-id="prompt-aa">Prompt AA</h2>
<p>Since <code>positive</code> sentiment is performing the worst, I’ll see if reducing <code>neutral</code> and <code>negative</code> examples improves its performance. I’ll stick with the original Prompt A.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:20:46.361642Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:20:46.361012Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:20:46.364643Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:20:46.364105Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:20:46.361622Z&quot;}" data-execution_count="78">
<div class="sourceCode cell-code" id="cb248" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb248-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb248-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb248-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>,  <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb248-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb248-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:21:01.546638Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:21:01.546376Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:21:01.559528Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:21:01.558871Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:21:01.546621Z&quot;}" data-execution_count="79">
<div class="sourceCode cell-code" id="cb249" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb249-1">promptAA_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb249-2">promptAA_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2241
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:21:19.932275Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:21:19.931601Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:21:19.939688Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:21:19.938986Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:21:19.932248Z&quot;}" data-execution_count="80">
<div class="sourceCode cell-code" id="cb251" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb251-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb251-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb251-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb251-4"></span>
<span id="cb251-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>23</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:21:46.006357Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:21:46.005847Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:28:36.278144Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:28:36.277500Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:21:46.006336Z&quot;}" data-execution_count="81">
<div class="sourceCode cell-code" id="cb253" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb253-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAA_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e3e1865e458642eb8db306c348e3b214","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>The overall accuracy drops a bit.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:30:04.671977Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:30:04.671505Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:30:04.675731Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:30:04.675122Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:30:04.671957Z&quot;}" data-execution_count="82">
<div class="sourceCode cell-code" id="cb255" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb255-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>0.8295403837572513</code></pre>
</div>
</div>
<p>The <code>positive</code> performance deteriorates while <code>negative</code> and <code>neutral</code> get better.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:30:08.265304Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:30:08.264701Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:30:08.347297Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:30:08.346694Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:30:08.265281Z&quot;}" data-execution_count="83">
<div class="sourceCode cell-code" id="cb257" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb257-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-173-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-27"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-173-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:35:25.295211Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:35:25.294944Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:35:25.315402Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:35:25.314767Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:35:25.295193Z&quot;}" data-execution_count="90">
<div class="sourceCode cell-code" id="cb258" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb258-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AA.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ab" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ab">Prompt AB</h2>
<p>I’ll now reduce the <code>positive</code> examples while keeping the other two the same as my best-performing prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:35:34.587913Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:35:34.587650Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:35:34.591428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:35:34.590831Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:35:34.587896Z&quot;}" data-execution_count="91">
<div class="sourceCode cell-code" id="cb259" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb259-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb259-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb259-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb259-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb259-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:35:38.313607Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:35:38.313280Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:35:38.332196Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:35:38.331517Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:35:38.313579Z&quot;}" data-execution_count="92">
<div class="sourceCode cell-code" id="cb260" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb260-1">promptAB_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb260-2">promptAB_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="92">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2239
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:35:40.582631Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:35:40.582096Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:35:40.590973Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:35:40.589957Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:35:40.582609Z&quot;}" data-execution_count="93">
<div class="sourceCode cell-code" id="cb262" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb262-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb262-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb262-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb262-4"></span>
<span id="cb262-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>25</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:35:43.460580Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:35:43.459715Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:42:45.942219Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:42:45.941368Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:35:43.460555Z&quot;}" data-execution_count="94">
<div class="sourceCode cell-code" id="cb264" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb264-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAB_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"913953ce78a74f6b9913ef2ab3ece272","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Foundries division reports its sales increased by 9.7 % to EUR 63.1 mn from EUR 57.5 mn in the corresponding period in 2006 , and sales of the Machine Shop division increased by 16.4 % to EUR 41.2 mn from EUR 35.4 mn in the corresponding period in 2006 .</code></pre>
</div>
</div>
<p>While still a bit lower than my best-performing accuracy, this approach might be worth expanding on.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:42:45.945520Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:42:45.945386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:42:45.950110Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:42:45.949463Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:42:45.945500Z&quot;}" data-execution_count="95">
<div class="sourceCode cell-code" id="cb266" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb266-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>0.8369807949977669</code></pre>
</div>
</div>
<p>The number of correctly predicted <code>neutral</code> sentences increases, while the other two decrease.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:42:45.953072Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:42:45.952923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:42:46.039536Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:42:46.038999Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:42:45.953059Z&quot;}" data-execution_count="96">
<div class="sourceCode cell-code" id="cb268" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb268-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-180-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-28"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-180-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:46:26.664066Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:46:26.663485Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:46:26.682551Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:46:26.682018Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:46:26.664045Z&quot;}" data-execution_count="97">
<div class="sourceCode cell-code" id="cb269" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb269-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AB.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ac" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ac">Prompt AC</h2>
<p>I’ll continue reducing <code>positive</code> examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:47:56.855579Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:47:56.854961Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:47:56.858972Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:47:56.858366Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:47:56.855558Z&quot;}" data-execution_count="98">
<div class="sourceCode cell-code" id="cb270" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb270-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb270-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb270-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb270-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb270-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:48:15.531165Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:48:15.530631Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:48:15.544299Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:48:15.543778Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:48:15.531144Z&quot;}" data-execution_count="99">
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb271-1">promptAC_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb271-2">promptAC_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2241
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:48:29.820351Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:48:29.819852Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:48:29.828343Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:48:29.827658Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:48:29.820329Z&quot;}" data-execution_count="100">
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb273-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb273-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb273-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb273-4"></span>
<span id="cb273-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>23</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:48:59.540326Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:48:59.539795Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:55:41.951257Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:55:41.950602Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:48:59.540302Z&quot;}" data-execution_count="101">
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb275-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAC_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b0d291e57fb6445ba4333171d3f14285","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Clothing retail chain Sepp+ñl+ñ 's sales increased by 8 % to EUR 155.2 mn , and operating profit rose to EUR 31.1 mn from EUR 17.1 mn in 2004 .</code></pre>
</div>
</div>
<p>Nope! That doesn’t improve accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:55:41.954694Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:55:41.954534Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:55:41.958938Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:55:41.958138Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:55:41.954678Z&quot;}" data-execution_count="102">
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb277-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>0.8340026773761714</code></pre>
</div>
</div>
<p><code>neutral</code> and <code>positive</code> sentences are correctly predicted at a worse rate, <code>negative</code> sentences predicted a bit better.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:55:41.961690Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:55:41.961539Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:55:42.043169Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:55:42.042557Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:55:41.961674Z&quot;}" data-execution_count="103">
<div class="sourceCode cell-code" id="cb279" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb279-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-187-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-29"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-187-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-13T23:55:42.046219Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-13T23:55:42.045806Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-13T23:55:42.065136Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-13T23:55:42.064562Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-13T23:55:42.046201Z&quot;}" data-execution_count="104">
<div class="sourceCode cell-code" id="cb280" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb280-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AC.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ad" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ad">Prompt AD</h2>
<p>As I was staring at <code>exclude_idxs</code> I realized that they are sorted by sentiment with <code>positive</code> first, then <code>negative</code> and then <code>neutral</code>. Perhaps this order affects the generations? I’ll try randomizing the order of the 27 examples that yielded the best accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:09.918476Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:09.917953Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:09.921772Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:09.921138Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:09.918457Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb281" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb281-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb281-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb281-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb281-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb281-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:14.844890Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:14.844439Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:14.852237Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:14.851636Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:14.844872Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb282" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb282-1">random.shuffle(exclude_idxs)</span>
<span id="cb282-2">exclude_idxs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>[293,
 266,
 264,
 6,
 347,
 7,
 263,
 9,
 38,
 37,
 0,
 352,
 5,
 4,
 351,
 350,
 40,
 294,
 1,
 8,
 349,
 2,
 348,
 292,
 3,
 39,
 265]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:24.890893Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:24.890616Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:24.920924Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:24.920376Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:24.890874Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb284" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb284-1">promptAD_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb284-2">promptAD_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2237
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:28.321166Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:28.320630Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:32:28.328935Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:32:28.328172Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:28.321147Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb286" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb286-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb286-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb286-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb286-4"></span>
<span id="cb286-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>27</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:32:49.429592Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:32:49.429346Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:41:04.774624Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:41:04.774015Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:32:49.429575Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb288" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb288-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"bd1950d7e4f9430cb92c8daa4d62b39e","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The attention mask is not set and cannot be inferred from input because pad token is same as eos token. As a consequence, you may observe unexpected behavior. Please pass your input's `attention_mask` to obtain reliable results.</code></pre>
</div>
</div>
<p>Wow, that actually improved my accuracy! It’s making me question all previous few-shot prompt results!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:41:04.776248Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:41:04.775923Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:41:04.780189Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:41:04.779639Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:41:04.776232Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb291" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb291-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>0.8609745194456861</code></pre>
</div>
</div>
<p><code>negative</code> TPR decreases, <code>neutral</code> and <code>positive</code> increase quite a bit!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:41:04.780927Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:41:04.780775Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:41:04.895018Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:41:04.894367Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:41:04.780914Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb293" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb293-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-195-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-30"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-195-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:45:46.135465Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:45:46.134910Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:45:46.157200Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:45:46.156556Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:45:46.135447Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb294" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb294-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AD.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ae" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ae">Prompt AE</h2>
<p>I’ll return to my 60-Shot prompt and shuffle the examples to see if that improves the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:13:29.895400Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:13:29.894858Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:13:29.899373Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:13:29.898596Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:13:29.895373Z&quot;}" data-execution_count="118">
<div class="sourceCode cell-code" id="cb295" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb295-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb295-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">18</span>, <span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">20</span>,<span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb295-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="dv" style="color: #AD0000;">349</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">351</span>, <span class="dv" style="color: #AD0000;">352</span>, <span class="dv" style="color: #AD0000;">353</span>, <span class="dv" style="color: #AD0000;">354</span>, <span class="dv" style="color: #AD0000;">355</span>, <span class="dv" style="color: #AD0000;">356</span>, <span class="dv" style="color: #AD0000;">357</span>, <span class="dv" style="color: #AD0000;">358</span>, <span class="dv" style="color: #AD0000;">359</span>, <span class="dv" style="color: #AD0000;">360</span>, <span class="dv" style="color: #AD0000;">361</span>, <span class="dv" style="color: #AD0000;">362</span>, <span class="dv" style="color: #AD0000;">370</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb295-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">271</span>, <span class="dv" style="color: #AD0000;">272</span>, <span class="dv" style="color: #AD0000;">273</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">275</span>, <span class="dv" style="color: #AD0000;">276</span>, <span class="dv" style="color: #AD0000;">277</span>, <span class="dv" style="color: #AD0000;">278</span>, <span class="dv" style="color: #AD0000;">279</span>, <span class="dv" style="color: #AD0000;">280</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb295-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:13:32.165122Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:13:32.164409Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:13:32.169671Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:13:32.169159Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:13:32.165093Z&quot;}" data-execution_count="119">
<div class="sourceCode cell-code" id="cb296" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb296-1">random.shuffle(exclude_idxs)</span>
<span id="cb296-2">exclude_idxs[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>[15, 37, 358, 16, 0]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:13:39.750594Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:13:39.749741Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:13:39.766012Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:13:39.765365Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:13:39.750571Z&quot;}" data-execution_count="120">
<div class="sourceCode cell-code" id="cb298" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb298-1">promptAE_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb298-2">promptAE_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2204
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:13:49.638961Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:13:49.638508Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:13:49.648704Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:13:49.648213Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:13:49.638941Z&quot;}" data-execution_count="121">
<div class="sourceCode cell-code" id="cb300" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb300-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb300-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb300-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb300-4"></span>
<span id="cb300-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="121">
<pre><code>60</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:14:04.428386Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:14:04.427595Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:29:59.056333Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:29:59.055620Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:14:04.428373Z&quot;}" data-execution_count="122">
<div class="sourceCode cell-code" id="cb302" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb302-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAE_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c7d230d549314afda6ca4311282ef8cf","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: The fair value of the property portfolio doubled as a result of the Kapiteeli acquisition and totalled EUR 2,686.2 1,259.7 million .</code></pre>
</div>
</div>
<p>The shuffled 60-Shot prompt does not yield better results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:29:59.059052Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:29:59.058910Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:29:59.063043Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:29:59.062528Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:29:59.059038Z&quot;}" data-execution_count="123">
<div class="sourceCode cell-code" id="cb304" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb304-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="123">
<pre><code>0.8371143375680581</code></pre>
</div>
</div>
<p>Interestingly it gets the same number of <code>neutral</code> sentences right (1341) but get lower counts for the other two.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:29:59.065904Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:29:59.065767Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:29:59.149985Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:29:59.149413Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:29:59.065891Z&quot;}" data-execution_count="124">
<div class="sourceCode cell-code" id="cb306" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb306-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-203-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-31"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-203-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:29:59.152292Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:29:59.152147Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:29:59.170037Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:29:59.169429Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:29:59.152278Z&quot;}" data-execution_count="125">
<div class="sourceCode cell-code" id="cb307" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb307-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AE.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-af" class="level2">
<h2 class="anchored" data-anchor-id="prompt-af">Prompt AF</h2>
<p>I’ll now try a shuffled 15-Shot prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:32:18.212439Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:32:18.211680Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:32:18.215886Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:32:18.215128Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:32:18.212417Z&quot;}" data-execution_count="126">
<div class="sourceCode cell-code" id="cb308" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb308-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb308-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>,  <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb308-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>,   <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb308-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb308-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:32:32.469864Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:32:32.469607Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:32:32.474283Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:32:32.473788Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:32:32.469847Z&quot;}" data-execution_count="127">
<div class="sourceCode cell-code" id="cb309" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb309-1">random.shuffle(exclude_idxs)</span>
<span id="cb309-2">exclude_idxs[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="127">
<pre><code>[292, 38, 1, 0, 4]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:36:27.015500Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:36:27.014780Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:36:27.028063Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:36:27.027389Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:36:27.015478Z&quot;}" data-execution_count="128">
<div class="sourceCode cell-code" id="cb311" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb311-1">promptAF_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb311-2">promptAF_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="128">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2249
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:36:47.098744Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:36:47.098037Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:36:47.105871Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:36:47.105307Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:36:47.098715Z&quot;}" data-execution_count="129">
<div class="sourceCode cell-code" id="cb313" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb313-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb313-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb313-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb313-4"></span>
<span id="cb313-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="129">
<pre><code>15</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:37:09.167714Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:37:09.167454Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:42:22.790839Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:42:22.790210Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:37:09.167697Z&quot;}" data-execution_count="130">
<div class="sourceCode cell-code" id="cb315" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb315-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAF_ds, promptA, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"74bc8019d63f46368f97fd62602b5fc7","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Clothing retail chain Sepp+ñl+ñ 's sales increased by 8 % to EUR 155.2 mn , and operating profit rose to EUR 31.1 mn from EUR 17.1 mn in 2004 .</code></pre>
</div>
</div>
<p>Shuffling the 15-Shot prompt doesn’t beat the 27-Shot prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:42:22.793569Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:42:22.793433Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:42:22.797739Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:42:22.797208Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:42:22.793552Z&quot;}" data-execution_count="131">
<div class="sourceCode cell-code" id="cb317" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb317-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>0.8199199644286349</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:42:22.800565Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:42:22.800372Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:42:22.886315Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:42:22.885768Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:42:22.800537Z&quot;}" data-execution_count="132">
<div class="sourceCode cell-code" id="cb319" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb319-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-211-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-32"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-211-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T00:42:22.888694Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T00:42:22.888560Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T00:42:22.907142Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T00:42:22.906544Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T00:42:22.888693Z&quot;}" data-execution_count="133">
<div class="sourceCode cell-code" id="cb320" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb320-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AF.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ag" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ag">Prompt AG</h2>
<p>The last thing I’ll experiment with is adding a system prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:46:29.465847Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:46:29.465595Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:46:29.472061Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:46:29.471413Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:46:29.465831Z&quot;}" data-execution_count="23">
<details>
<summary>Show updated <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb321" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb321-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples, sp):</span>
<span id="cb321-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb321-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb321-4">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb321-5">    </span>
<span id="cb321-6">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb321-7">    </span>
<span id="cb321-8">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb321-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb321-10">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb321-11">    </span>
<span id="cb321-12">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb321-13">        messages <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"system"</span>, <span class="st" style="color: #20794D;">"content"</span>: sp}] <span class="op" style="color: #5E5E5E;">+</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb321-14">        </span>
<span id="cb321-15">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb321-16">            messages,</span>
<span id="cb321-17">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb321-18">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb321-19">        )</span>
<span id="cb321-20">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb321-21"></span>
<span id="cb321-22">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb321-23">            model_inputs.input_ids,</span>
<span id="cb321-24">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb321-25">        )</span>
<span id="cb321-26">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb321-27">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb321-28">        ]</span>
<span id="cb321-29"></span>
<span id="cb321-30">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb321-31">        responses.append(response)</span>
<span id="cb321-32">        </span>
<span id="cb321-33">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb321-34">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb321-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb321-36">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb321-37">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb321-38">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb321-39">    </span>
<span id="cb321-40">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:46:33.317834Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:46:33.317563Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:46:33.323794Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:46:33.323118Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:46:33.317816Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb322" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb322-1">sp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral. Consider terms like 'growth', 'decline', 'improvement', or 'deterioration' as indicators of change."</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:46:35.614930Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:46:35.614690Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:46:35.617808Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:46:35.617262Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:46:35.614913Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb323" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb323-1"><span class="bu" style="color: null;">print</span>(sp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral. Consider terms like 'growth', 'decline', 'improvement', or 'deterioration' as indicators of change.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:46:53.925453Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:46:53.924811Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:55:25.175080Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:55:25.174622Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:46:53.925424Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb325" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb325-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptA, examples, sp)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e57bdcdd635c4a6fab9c1b2e16ceb945","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>This particular system prompt doesn’t improve the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:55:25.177732Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:55:25.177476Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:55:25.180908Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:55:25.180578Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:55:25.177716Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb327" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb327-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>0.8439874832364774</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:55:25.183332Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:55:25.183054Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:55:25.260312Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:55:25.259904Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:55:25.183317Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb329" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb329-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-218-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-33"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-218-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:56:20.584955Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:56:20.584221Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:56:20.604221Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:56:20.603767Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:56:20.584935Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb330" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb330-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AG.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ah" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ah">Prompt AH</h2>
<p>I’ll simplify the system prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:56:26.932892Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:56:26.931950Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:56:26.935513Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:56:26.934999Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:56:26.932834Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb331" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb331-1">sp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification."</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:56:29.622879Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:56:29.622283Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T02:56:29.625649Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T02:56:29.625206Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:56:29.622857Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb332" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb332-1"><span class="bu" style="color: null;">print</span>(sp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T02:56:34.445712Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T02:56:34.445265Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:04:53.578178Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:04:53.577581Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T02:56:34.445695Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb334" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb334-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptA, examples, sp)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"da4d73e64cfb4d46bfd86b840c296035","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>Using a simpler system prompt lowers the accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:04:53.581100Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:04:53.580957Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:04:53.585114Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:04:53.584663Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:04:53.581085Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb336" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb336-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>0.8466696468484578</code></pre>
</div>
</div>
<p>The model gets 22 more <code>neutral</code> sentences correct but does worse on <code>negative</code> and <code>positive</code> sentences (when compared to the best-performing Prompt AD).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:07:55.761740Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:07:55.760949Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:07:55.847131Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:07:55.846427Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:07:55.761719Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb338" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb338-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-224-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-34"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-224-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:08:03.853159Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:08:03.852461Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:08:03.873045Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:08:03.872596Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:08:03.853127Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb339" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb339-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AH.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-ai" class="level2">
<h2 class="anchored" data-anchor-id="prompt-ai">Prompt AI</h2>
<p>I’ll further simplify the system prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:08:54.393967Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:08:54.393672Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:08:54.397604Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:08:54.396972Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:08:54.393947Z&quot;}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb340" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb340-1">sp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral."</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:08:56.395388Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:08:56.394698Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:08:56.399472Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:08:56.398604Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:08:56.395377Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb341" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb341-1"><span class="bu" style="color: null;">print</span>(sp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:09:06.501356Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:09:06.500844Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:17:24.425543Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:17:24.425038Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:09:06.501335Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb343" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb343-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptA, examples, sp)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a34810bc57684c72b3e1c9e7e953c2fa","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: Its board of directors will propose a dividend of EUR0 .12 per share for 2010 , up from the EUR0 .08 per share paid in 2009 .</code></pre>
</div>
</div>
<p>I still can’t recover (or improve upon) the best-performing accuracy of 86%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:17:24.428023Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:17:24.427740Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:17:24.431073Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:17:24.430742Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:17:24.428007Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb345" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb345-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>0.8439874832364774</code></pre>
</div>
</div>
<p>The <code>neutral</code> performance continues to increase while <code>negative</code> and <code>positive</code> sentences suffer.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:17:24.433571Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:17:24.433230Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:17:24.510854Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:17:24.510398Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:17:24.433556Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb347" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb347-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-230-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-35"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index_files/figure-html/cell-230-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:18:53.531626Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:18:53.531114Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:18:53.553128Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:18:53.552677Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:18:53.531603Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb348" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb348-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/Qwen2-1.5B-Instruct_AI.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="running-inference-10-times-using-the-best-prompt" class="level2">
<h2 class="anchored" data-anchor-id="running-inference-10-times-using-the-best-prompt">Running Inference 10 Times Using the Best Prompt</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:21:54.140776Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:21:54.140505Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:21:54.147440Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:21:54.146801Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:21:54.140760Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb349" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb349-1"><span class="kw" style="color: #003B4F;">def</span> test_gen(examples):</span>
<span id="cb349-2">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb349-3">    </span>
<span id="cb349-4">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb349-5">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptA.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb349-6">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb349-7">    </span>
<span id="cb349-8">    messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptA.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'sentence'</span>])}]</span>
<span id="cb349-9">        </span>
<span id="cb349-10">    text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb349-11">        messages,</span>
<span id="cb349-12">        tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb349-13">        add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb349-14">    )</span>
<span id="cb349-15">    </span>
<span id="cb349-16">    model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb349-17"></span>
<span id="cb349-18">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb349-19">        model_inputs.input_ids,</span>
<span id="cb349-20">        max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb349-21">    )</span>
<span id="cb349-22">    generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb349-23">        output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb349-24">    ]</span>
<span id="cb349-25"></span>
<span id="cb349-26">    response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb349-27">    <span class="cf" style="color: #003B4F;">return</span> response</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:22:00.642342Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:22:00.641808Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:22:15.241067Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:22:15.240129Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:22:00.642322Z&quot;}" data-execution_count="54">
<div class="sourceCode cell-code" id="cb350" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb350-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> test_gen(examples)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>208 ms ± 1.93 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:23:12.852903Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:23:12.852349Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:23:12.859392Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:23:12.858613Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:23:12.852885Z&quot;}" data-execution_count="59">
<details>
<summary>Show updated <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb352" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb352-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb352-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb352-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb352-4">    </span>
<span id="cb352-5">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb352-6">    </span>
<span id="cb352-7">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb352-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb352-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb352-10">    </span>
<span id="cb352-11">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb352-12">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb352-13">        </span>
<span id="cb352-14">        text <span class="op" style="color: #5E5E5E;">=</span> tokenizer.apply_chat_template(</span>
<span id="cb352-15">            messages,</span>
<span id="cb352-16">            tokenize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb352-17">            add_generation_prompt<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb352-18">        )</span>
<span id="cb352-19">        model_inputs <span class="op" style="color: #5E5E5E;">=</span> tokenizer([text], return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(device)</span>
<span id="cb352-20"></span>
<span id="cb352-21">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb352-22">            model_inputs.input_ids,</span>
<span id="cb352-23">            max_new_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb352-24">        )</span>
<span id="cb352-25">        generated_ids <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb352-26">            output_ids[<span class="bu" style="color: null;">len</span>(input_ids):] <span class="cf" style="color: #003B4F;">for</span> input_ids, output_ids <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(model_inputs.input_ids, generated_ids)</span>
<span id="cb352-27">        ]</span>
<span id="cb352-28"></span>
<span id="cb352-29">        response <span class="op" style="color: #5E5E5E;">=</span> tokenizer.batch_decode(generated_ids, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">0</span>].strip().lower()</span>
<span id="cb352-30">        responses.append(response)</span>
<span id="cb352-31">        </span>
<span id="cb352-32">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb352-33">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb352-34">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb352-35">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb352-36">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb352-37">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb352-38">    </span>
<span id="cb352-39">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:23:44.252736Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:23:44.252488Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:23:44.257792Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:23:44.257077Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:23:44.252719Z&quot;}" data-execution_count="60">
<div class="sourceCode cell-code" id="cb353" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb353-1"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>27</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:24:01.005302Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:24:01.005028Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T03:24:01.010144Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T03:24:01.009537Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:24:01.005284Z&quot;}" data-execution_count="62">
<div class="sourceCode cell-code" id="cb355" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb355-1">exclude_idxs[:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>[293, 266, 264, 6, 347, 7, 263, 9, 38, 37]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T03:25:30.161693Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T03:25:30.161034Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T04:48:10.351949Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T04:48:10.351435Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T03:25:30.161666Z&quot;}">
<div class="sourceCode cell-code" id="cb357" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb357-1">accs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb357-2"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb357-3">    df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptAD_ds, promptA, examples)</span>
<span id="cb357-4">    accs.append(acc)</span></code></pre></div>
</div>
<p>This prompt results in a pretty consistent overall accuracy, around 86%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-14T04:48:10.355166Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-14T04:48:10.355021Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-14T04:48:10.363096Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-14T04:48:10.362519Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-14T04:48:10.355153Z&quot;}" data-execution_count="64">
<div class="sourceCode cell-code" id="cb358" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb358-1">pd.Series(accs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>count    10.000000
mean      0.859321
std       0.004617
min       0.847564
25%       0.858739
50%       0.860304
75%       0.861310
max       0.865445
dtype: float64</code></pre>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Here are the results from my experiments so far (**the best-performing prompt from this notebook):</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">**Qwen2-1.5B</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">86.10%</td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">95.5% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
</tbody>
</table>
<p>Here are the results from this notebook. The best-performing prompt was a randomly shuffled 27-Shot prompt (Prompt AD), yielding an overall accuracy of 86.10%.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">prompt</th>
<th style="text-align: center;">strategy</th>
<th style="text-align: center;">accuracy</th>
<th style="text-align: center;">negative</th>
<th style="text-align: center;">neutral</th>
<th style="text-align: center;">positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">81.76%</td>
<td style="text-align: center;">97% (293/303)</td>
<td style="text-align: center;">85% (1185/1391)</td>
<td style="text-align: center;">65% (373/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">51.86%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">61% (846/1391)</td>
<td style="text-align: center;">5% (28/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">81.40%</td>
<td style="text-align: center;">93% (283/303)</td>
<td style="text-align: center;">96% (1330/1391)</td>
<td style="text-align: center;">40% (230/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">78.53%</td>
<td style="text-align: center;">92% (279/303)</td>
<td style="text-align: center;">92% (1281/1391)</td>
<td style="text-align: center;">38% (218/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">66.21%</td>
<td style="text-align: center;"><u><strong>100% (302/303)</strong></u></td>
<td style="text-align: center;">82% (1145/1391)</td>
<td style="text-align: center;">9% (52/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">78.05%</td>
<td style="text-align: center;">88% (267/303)</td>
<td style="text-align: center;">97% (1355/1391)</td>
<td style="text-align: center;">25% (145/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">G</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">66.70%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">80% (1107/1391)</td>
<td style="text-align: center;">21% (118/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">H</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">70.89%</td>
<td style="text-align: center;">85% (259/303)</td>
<td style="text-align: center;">90% (1247/1391)</td>
<td style="text-align: center;">17% (99/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">I</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">69.17%</td>
<td style="text-align: center;">58% (176/303)</td>
<td style="text-align: center;">86% (1201/1391)</td>
<td style="text-align: center;">33% (189/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">J</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">57.38%</td>
<td style="text-align: center;">47% (142/303)</td>
<td style="text-align: center;">78% (1086/1391)</td>
<td style="text-align: center;">12% (71/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">K</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">41.87%</td>
<td style="text-align: center;">34% (102/303)</td>
<td style="text-align: center;">52% (728/1391)</td>
<td style="text-align: center;">21% (118/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">L</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">42.84%</td>
<td style="text-align: center;">66% (200/303)</td>
<td style="text-align: center;">45% (629/1391)</td>
<td style="text-align: center;">25% (141/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">M</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">51.46%</td>
<td style="text-align: center;">26% (79/303)</td>
<td style="text-align: center;">77% (1078/1391)</td>
<td style="text-align: center;">1% (8/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">N</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">29.77%</td>
<td style="text-align: center;">11% (33/303)</td>
<td style="text-align: center;">44% (608/1391)</td>
<td style="text-align: center;">6% (33/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">O</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">61.00%</td>
<td style="text-align: center;">37% (113/303)</td>
<td style="text-align: center;">90% (1257/1391)</td>
<td style="text-align: center;">2% (11/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">P</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">78.20%</td>
<td style="text-align: center;">91% (275/302)</td>
<td style="text-align: center;">91% (1266/1390)</td>
<td style="text-align: center;">40% (227/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Q</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">76.93%</td>
<td style="text-align: center;">96% (289/302)</td>
<td style="text-align: center;">73% (1010/1387)</td>
<td style="text-align: center;"><u><strong>77% (438/569)</strong></u></td>
</tr>
<tr class="even">
<td style="text-align: center;">R</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">81.42%</td>
<td style="text-align: center;">92% (274/299)</td>
<td style="text-align: center;">94% (1301/1379)</td>
<td style="text-align: center;">45% (252/566)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">S</td>
<td style="text-align: center;">30-Shot</td>
<td style="text-align: center;">81.51%</td>
<td style="text-align: center;">87% (255/294)</td>
<td style="text-align: center;">98% (1345/1379)</td>
<td style="text-align: center;">39% (221/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">T</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">83.73%</td>
<td style="text-align: center;">93% (272/294)</td>
<td style="text-align: center;">94.3% (1303/1382)</td>
<td style="text-align: center;">53% (298/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">U</td>
<td style="text-align: center;">25-Shot</td>
<td style="text-align: center;">82.94%</td>
<td style="text-align: center;">90% (266/294)</td>
<td style="text-align: center;">96.2% (1331/1384)</td>
<td style="text-align: center;">46% (260/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">V</td>
<td style="text-align: center;">21-Shot</td>
<td style="text-align: center;">83.28%</td>
<td style="text-align: center;">92% (273/296)</td>
<td style="text-align: center;">94.9% (1314/1384)</td>
<td style="text-align: center;">50% (281/563)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">W</td>
<td style="text-align: center;">15-Shot</td>
<td style="text-align: center;">81.55%</td>
<td style="text-align: center;">94% (279/298)</td>
<td style="text-align: center;">87.7% (1215/1386)</td>
<td style="text-align: center;">60% (340/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">X</td>
<td style="text-align: center;">30-Shot</td>
<td style="text-align: center;">81.74%</td>
<td style="text-align: center;">89% (261/293)</td>
<td style="text-align: center;">96.7% (1336/1381)</td>
<td style="text-align: center;">41% (229/560)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Y</td>
<td style="text-align: center;">60-Shot</td>
<td style="text-align: center;">75.82%</td>
<td style="text-align: center;">66% (186/283)</td>
<td style="text-align: center;"><u><strong>99.8% (1368/1371)</strong></u></td>
<td style="text-align: center;">21% (117/550)</td>
</tr>
<tr class="even">
<td style="text-align: center;">Z</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;">81.36%</td>
<td style="text-align: center;">80% (236/294)</td>
<td style="text-align: center;">99.4% (1374/1382)</td>
<td style="text-align: center;">37% (210/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AA</td>
<td style="text-align: center;">23-Shot</td>
<td style="text-align: center;">82.95%</td>
<td style="text-align: center;">93% (276/296)</td>
<td style="text-align: center;">94.9% (1314/1384)</td>
<td style="text-align: center;">48% (269/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AB</td>
<td style="text-align: center;">25-Shot</td>
<td style="text-align: center;">83.70%</td>
<td style="text-align: center;">92% (270/294)</td>
<td style="text-align: center;">95.3% (1317/1382)</td>
<td style="text-align: center;">51% (287/563)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AC</td>
<td style="text-align: center;">23-Shot</td>
<td style="text-align: center;">83.40%</td>
<td style="text-align: center;">95% (278/294)</td>
<td style="text-align: center;">93.8% (1296/1382)</td>
<td style="text-align: center;">52% (295/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AD</td>
<td style="text-align: center;">27-Shot</td>
<td style="text-align: center;"><u><strong>86.10%</strong></u></td>
<td style="text-align: center;">90% (264/294)</td>
<td style="text-align: center;">95.5% (1320/1382)</td>
<td style="text-align: center;">61% (342/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AE</td>
<td style="text-align: center;">60-Shot</td>
<td style="text-align: center;">83.71%</td>
<td style="text-align: center;">83% (234/283)</td>
<td style="text-align: center;">97.8% (1341/1371)</td>
<td style="text-align: center;">49% (270/550)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AF</td>
<td style="text-align: center;">15-Shot</td>
<td style="text-align: center;">82.00%</td>
<td style="text-align: center;">91% (272/298)</td>
<td style="text-align: center;">88.8% (1231/1386)</td>
<td style="text-align: center;">60% (341/565)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AG</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.40%</td>
<td style="text-align: center;">84% (248/294)</td>
<td style="text-align: center;">97.8% (1351/1382)</td>
<td style="text-align: center;">52% (289/561)</td>
</tr>
<tr class="even">
<td style="text-align: center;">AH</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.67%</td>
<td style="text-align: center;">87% (256/294)</td>
<td style="text-align: center;">97.1% (1342/1382)</td>
<td style="text-align: center;">53% (296/561)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">AI</td>
<td style="text-align: center;">27-Shot w/System Prompt</td>
<td style="text-align: center;">84.99%</td>
<td style="text-align: center;">88% (260/294)</td>
<td style="text-align: center;">97.3% (1345/1382)</td>
<td style="text-align: center;">50% (283/561)</td>
</tr>
</tbody>
</table>
<p>Here are my takeaways from working with Qwen2-1.5B-Instruct:</p>
<ul>
<li><strong>It was easy to get a decent overall accuracy (on my first try!) but quite difficult to improve upon it.</strong> Although I tested out 35 prompts, there’s still much more room for experimentation.</li>
<li><strong>The <code>positive</code> sentiment True Positive Rate was considerably worse than <code>neutral</code> or <code>negative</code> sentiments.</strong> The most accurate <code>positive</code> sentiment classification was 77% (Prompt Q) compared to 99.8% for <code>negative</code> (Prompt Y) and 100% for <code>neutral</code> (Prompt E).</li>
<li><strong>Randomizing the order of the examples improved my 27-Shot prompt’s overall accuracy.</strong> I had not tried this before and is something I’ll make sure to use again in the future.</li>
<li><strong>The best-performing prompt contained an equal number of examples from each sentiment (9 per sentiment).</strong> Decreasing the representation of each sentiment worsened the overall accuracy.</li>
<li><strong>The best performing prompt for each sentiment is not the best overall prompt.</strong> This is important to note because there may be situations where one type of sentiment is more critical than the other. For example, it may be “safer” to have a high TPR for <code>negative</code> or <code>positive</code> sentiment if people are making decisions based on the predicted sentiment.</li>
</ul>
<p>I hope you enjoyed this blog post! Follow me on Twitter <a href="https://twitter.com/vishal_learner"><span class="citation" data-cites="vishal_learner">@vishal_learner</span></a>.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>LLM</category>
  <category>TinySentiment</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-09-23-tinysentiment-Qwen2-1.5B-sentiment-classification/index.html</guid>
  <pubDate>Mon, 23 Sep 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Sentiment Classification with phi-3.5</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<details>
<summary>Show pip installs</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install torch<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">2.3.1</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip install accelerate<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">0.31.0</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>pip install transformers<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">4.41.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;">!</span>pip install huggingface_hub <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-5"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets<span class="op" style="color: #5E5E5E;">~=</span><span class="fl" style="color: #AD0000;">2.16.1</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">!</span>pip install plotly<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">5.19.0</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">!</span>pip install scikit<span class="op" style="color: #5E5E5E;">-</span>learn<span class="op" style="color: #5E5E5E;">==</span><span class="fl" style="color: #AD0000;">1.2</span> <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;">!</span>pip install pynvml <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
</details>
</div>
<div class="cell">
<details>
<summary>Show imports and setup</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">import</span> gc</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb2-6"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-7"><span class="im" style="color: #00769E;">from</span> pandas.api.types <span class="im" style="color: #00769E;">import</span> CategoricalDtype</span>
<span id="cb2-8"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;">def</span> report_gpu():</span>
<span id="cb2-11">    <span class="bu" style="color: null;">print</span>(torch.cuda.list_gpu_processes())</span>
<span id="cb2-12">    gc.collect()</span>
<span id="cb2-13">    torch.cuda.empty_cache()</span>
<span id="cb2-14">    </span>
<span id="cb2-15"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;">#warnings.filterwarnings("ignore")</span></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="im" style="color: #00769E;">import</span> plotly.express <span class="im" style="color: #00769E;">as</span> px</span>
<span id="cb2-19"><span class="im" style="color: #00769E;">import</span> plotly.graph_objects <span class="im" style="color: #00769E;">as</span> go</span>
<span id="cb2-20"><span class="im" style="color: #00769E;">from</span> plotly.subplots <span class="im" style="color: #00769E;">import</span> make_subplots</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset, Dataset</span>
<span id="cb2-25"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM, AutoTokenizer, pipeline </span>
<span id="cb2-26"><span class="im" style="color: #00769E;">from</span> transformers.pipelines.pt_utils <span class="im" style="color: #00769E;">import</span> KeyDataset</span>
<span id="cb2-27"><span class="im" style="color: #00769E;">from</span> fastcore.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;">#torch.set_default_device("cuda")</span></span>
<span id="cb2-30">torch.cuda.set_device(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb2-31"></span>
<span id="cb2-32">model_nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"microsoft/Phi-3.5-mini-instruct"</span></span>
<span id="cb2-33">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained( </span>
<span id="cb2-34">    model_nm,  </span>
<span id="cb2-35">    device_map<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"cuda"</span>,  </span>
<span id="cb2-36">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span>,  </span>
<span id="cb2-37">    trust_remote_code<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,  </span>
<span id="cb2-38">) </span>
<span id="cb2-39"></span>
<span id="cb2-40">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_nm)</span>
<span id="cb2-41"></span>
<span id="cb2-42">pipe <span class="op" style="color: #5E5E5E;">=</span> pipeline( </span>
<span id="cb2-43">    <span class="st" style="color: #20794D;">"text-generation"</span>, </span>
<span id="cb2-44">    model<span class="op" style="color: #5E5E5E;">=</span>model, </span>
<span id="cb2-45">    tokenizer<span class="op" style="color: #5E5E5E;">=</span>tokenizer, </span>
<span id="cb2-46">) </span>
<span id="cb2-47"></span>
<span id="cb2-48"><span class="co" style="color: #5E5E5E;"># load dataset</span></span>
<span id="cb2-49">dataset <span class="op" style="color: #5E5E5E;">=</span> load_dataset(</span>
<span id="cb2-50">    <span class="st" style="color: #20794D;">"financial_phrasebank"</span>, <span class="st" style="color: #20794D;">"sentences_allagree"</span>, </span>
<span id="cb2-51">    split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"train"</span>  <span class="co" style="color: #5E5E5E;"># note that the dataset does not have a default test split</span></span>
<span id="cb2-52">)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.637296Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.635721Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.731681Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.731221Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.637268Z&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># create a new column with the numeric label verbalised as label_text (e.g. "positive" instead of "0")</span></span>
<span id="cb3-2">label_map <span class="op" style="color: #5E5E5E;">=</span> {i: label_text <span class="cf" style="color: #003B4F;">for</span> i, label_text <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(dataset.features[<span class="st" style="color: #20794D;">"label"</span>].names)}</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;">def</span> add_label_text(example):</span>
<span id="cb3-5">    example[<span class="st" style="color: #20794D;">"label_text"</span>] <span class="op" style="color: #5E5E5E;">=</span> label_map[example[<span class="st" style="color: #20794D;">"label"</span>]]</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;">return</span> example</span>
<span id="cb3-7"></span>
<span id="cb3-8">dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_label_text)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="bu" style="color: null;">print</span>(dataset)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.733598Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.732874Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.738812Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.738359Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.733576Z&quot;}" data-execution_count="5">
<details>
<summary>Show <code>add_prompt</code> and <code>generate_responses</code> functions</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> add_prompt(item, prompt):</span>
<span id="cb4-2">        item[<span class="st" style="color: #20794D;">'prompt'</span>] <span class="op" style="color: #5E5E5E;">=</span> prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>item[<span class="st" style="color: #20794D;">'sentence'</span>])</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;">return</span> item</span>
<span id="cb4-4">    </span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;">def</span> generate_responses(dataset, prompt):</span>
<span id="cb4-6">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-7">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb4-8">    </span>
<span id="cb4-9">    <span class="co" style="color: #5E5E5E;"># check that the prompt is correctly formatted</span></span>
<span id="cb4-10">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb4-11">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'---------'</span>)</span>
<span id="cb4-12">    </span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb4-14">        messages <span class="op" style="color: #5E5E5E;">=</span> [  </span>
<span id="cb4-15">            {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]},</span>
<span id="cb4-16">        ] </span>
<span id="cb4-17"></span>
<span id="cb4-18">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb4-19">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb4-20">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb4-21">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb4-22">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb4-23">        } </span>
<span id="cb4-24"></span>
<span id="cb4-25">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb4-26">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb4-27">        </span>
<span id="cb4-28">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb4-29">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb4-30">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb4-31">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb4-32">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb4-33">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb4-34">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.740157Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.739469Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.753695Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.753249Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.740138Z&quot;}" data-execution_count="6">
<details>
<summary>Show <code>generate_response</code> function</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">def</span> generate_response(prompt):</span>
<span id="cb5-2">    messages <span class="op" style="color: #5E5E5E;">=</span> [  </span>
<span id="cb5-3">        {<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt},</span>
<span id="cb5-4">    ] </span>
<span id="cb5-5"></span>
<span id="cb5-6">    generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb5-7">        <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb5-8">        <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb5-9">        <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb5-10">        <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb5-11">    } </span>
<span id="cb5-12"></span>
<span id="cb5-13">    output <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;">return</span> output[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.755529Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.754846Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.772413Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.771764Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.755510Z&quot;}" data-execution_count="7">
<details>
<summary>Show <code>make_cm</code> function</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> make_cm(df):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;">"""Create confusion matrix for true vs predicted sentiment classes"""</span></span>
<span id="cb6-3">    </span>
<span id="cb6-4">    cm <span class="op" style="color: #5E5E5E;">=</span> confusion_matrix(y_true<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'label_text'</span>], y_pred<span class="op" style="color: #5E5E5E;">=</span>df[<span class="st" style="color: #20794D;">'responses'</span>], labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb6-5">    disp <span class="op" style="color: #5E5E5E;">=</span> ConfusionMatrixDisplay(cm, display_labels<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'neutral'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'other'</span>])</span>
<span id="cb6-6">    </span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;"># I chose 8x8 so it fits on one screen but still is large</span></span>
<span id="cb6-8">    fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb6-9">    disp.plot(ax<span class="op" style="color: #5E5E5E;">=</span>ax,text_kw<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">'fontsize'</span>: <span class="dv" style="color: #AD0000;">16</span>}, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Blues'</span>, colorbar<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-10">    </span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;"># change label font size without changing label text</span></span>
<span id="cb6-12">    ax.xaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb6-13">    ax.yaxis.label.set_fontsize(<span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb6-14">    </span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;"># make tick labels larger</span></span>
<span id="cb6-16">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'y'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb6-17">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'x'</span>, labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.773673Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.773216Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.790228Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.789771Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.773673Z&quot;}" data-execution_count="8">
<details>
<summary>Show <code>ds_subset</code> function</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> ds_subset(dataset, exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>]):</span>
<span id="cb7-2">    idxs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(dataset)))</span>
<span id="cb7-3">    idxs <span class="op" style="color: #5E5E5E;">=</span> [x <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> idxs <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> exclude_idxs]</span>
<span id="cb7-4">    ddf <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb7-5">    new_ds <span class="op" style="color: #5E5E5E;">=</span> Dataset.from_pandas(ddf.iloc[idxs, columns])</span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;">return</span> new_ds</span></code></pre></div>
</details>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll use <a href="https://huggingface.co/microsoft/Phi-3.5-mini-instruct">Phi-3-5-mini-4k-instruct</a> to classify sentiment in the <a href="https://huggingface.co/datasets/financial_phrasebank"><code>financial_phrasebank</code> dataset</a>. In previous notebooks I have performed <a href="https://vishalbakshi.github.io/blog/posts/2024-08-31-tinysentiment-phi-2-sentiment-classification/">sentiment classification with phi-2</a> and <a href="https://vishalbakshi.github.io/blog/posts/2024-08-29-tinysentiment-claude-experiments/">the Claude series</a>.</p>
<p>This notebook is part of <a href="https://vishalbakshi.github.io/blog/#category=TinySentiment">a series of blog posts</a> for a project I’m working called TinySentiment where I’m experimenting with tiny models to improve their ability to classify sentiment in the <code>financial_phrasebank dataset</code>. I was inspired to do so after reading <a href="https://huggingface.co/blog/synthetic-data-save-costs">this blog post</a> and <a href="https://github.com/MoritzLaurer/synthetic-data-blog/blob/main/notebooks/synthetic_data_creation.ipynb">this corresponding notebook</a> by Moritz Laurer as part of a fastai study group last year.</p>
<p>Here are the results from my experiments so far (**the best-performing prompt from this notebook):</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">**phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">ph-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
</tbody>
</table>
<p>Here are the per-prompt results from this notebook (phi-3.5):</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">prompt</th>
<th style="text-align: center;">strategy</th>
<th style="text-align: center;">accuracy</th>
<th style="text-align: center;">negative</th>
<th style="text-align: center;">neutral</th>
<th style="text-align: center;">positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">62.32%</td>
<td style="text-align: center;">98% (296/303)</td>
<td style="text-align: center;">43% (592/1391)</td>
<td style="text-align: center;">92% (523/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">88.60%</td>
<td style="text-align: center;">96% (290/303)</td>
<td style="text-align: center;">87% (1215/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">83.48%</td>
<td style="text-align: center;">98% (298/303)</td>
<td style="text-align: center;">76% (1062/1391)</td>
<td style="text-align: center;">93% (530/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">68.64%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">51% (713/1391)</td>
<td style="text-align: center;">95% (541/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">88.25%</td>
<td style="text-align: center;">96% (290/303)</td>
<td style="text-align: center;">87% (1207/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">84.65%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">77% (1070/1390)</td>
<td style="text-align: center;">96% (548/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">G</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">77.99%</td>
<td style="text-align: center;">98% (297/302)</td>
<td style="text-align: center;">66% (913/1387)</td>
<td style="text-align: center;">97% (551/569)</td>
</tr>
<tr class="even">
<td style="text-align: center;">H</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">83.06%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">74% (1028/1390)</td>
<td style="text-align: center;">97% (554/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">I</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">51.61%</td>
<td style="text-align: center;"><u><strong>100% (302/302)</strong></u></td>
<td style="text-align: center;">32% (447/1390)</td>
<td style="text-align: center;">73% (418/569)</td>
</tr>
<tr class="even">
<td style="text-align: center;">J</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">85.94%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">80% (1108/1390)</td>
<td style="text-align: center;">95% (539/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">K</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">77.96%</td>
<td style="text-align: center;">98% (298/303)</td>
<td style="text-align: center;">66% (919/1391)</td>
<td style="text-align: center;">96% (548/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">L</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">80.57%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">70% (972/1391)</td>
<td style="text-align: center;"><u><strong>97% (555/570)</strong></u></td>
</tr>
<tr class="odd">
<td style="text-align: center;">M</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">91.30%</td>
<td style="text-align: center;">97% (294/303)</td>
<td style="text-align: center;">90% (1257/1391)</td>
<td style="text-align: center;">91% (516/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">N</td>
<td style="text-align: center;">0-Shot w/System Prompt</td>
<td style="text-align: center;">88.74%</td>
<td style="text-align: center;">97% (295/303)</td>
<td style="text-align: center;">85% (1184/1391)</td>
<td style="text-align: center;">93% (530/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">O</td>
<td style="text-align: center;">0-Shot w/System Prompt</td>
<td style="text-align: center;">87.10%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">83% (1156/1391)</td>
<td style="text-align: center;">93% (531/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">P</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">92.23%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">94% (1307/1391)</td>
<td style="text-align: center;">87% (496/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Q</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">79.37%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">73% (1009/1391)</td>
<td style="text-align: center;">86% (488/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><u><strong>R</strong></u></td>
<td style="text-align: center;"><u><strong>20-Shot</strong></u></td>
<td style="text-align: center;"><u><strong>93.94%</strong></u></td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">S</td>
<td style="text-align: center;">28-Shot</td>
<td style="text-align: center;">93.25%</td>
<td style="text-align: center;">94% (281/298)</td>
<td style="text-align: center;">99% (1358/1373)</td>
<td style="text-align: center;">79% (446/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">T</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">84.54%</td>
<td style="text-align: center;">78% (232/299)</td>
<td style="text-align: center;"><u><strong>99.9% (1378/1379)</strong></u></td>
<td style="text-align: center;">51% (287/566)</td>
</tr>
</tbody>
</table>
</section>
<section id="prompt-a" class="level2">
<h2 class="anchored" data-anchor-id="prompt-a">Prompt A</h2>
<p>The HuggingFace model card for Phi-3-5 Mini-4K-Instruct says:</p>
<blockquote class="blockquote">
<p>Given the nature of the training data, the Phi-3.5-mini-instruct model is best suited for prompts using the chat format</p>
</blockquote>
<p>So, the first prompt I’ll try will be a simple instruction:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:40.018837Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:40.018545Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:02:40.022232Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:02:40.021652Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:40.018819Z&quot;}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">promptA <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb8-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:41.247165Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:41.246867Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:02:41.255051Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:02:41.254389Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:41.247141Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">text <span class="op" style="color: #5E5E5E;">=</span> dataset[<span class="dv" style="color: #AD0000;">1</span>][<span class="st" style="color: #20794D;">"sentence"</span>]</span>
<span id="cb9-2">text</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>"For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m ."</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:46.015818Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:46.015183Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:02:46.020146Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:02:46.019285Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:46.015791Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">formatted_prompt <span class="op" style="color: #5E5E5E;">=</span> promptA.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>text)</span>
<span id="cb11-2"><span class="bu" style="color: null;">print</span>(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:47.909112Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:47.908357Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:02:48.865358Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:02:48.864639Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:47.909080Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>You are not running the flash-attention implementation, expect numerical differences.</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>' Negative'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:51.716386Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:51.715735Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:02:51.832068Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:02:51.831049Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:51.716359Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;">%</span>time generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 101 ms, sys: 9.29 ms, total: 111 ms
Wall time: 109 ms</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>' Negative'</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:02:55.830009Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:02:55.828992Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:03:02.265808Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:03:02.265236Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:02:55.829979Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> generate_response(formatted_prompt)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>91.9 ms ± 1.59 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Good–at least it works! Although it looks like I’ll have to strip the outputs of whitespace and convert them to lowercase. It takes about 0.1 seconds to generate the response, so it should take about 4 minutes to run inference on the whole dataset.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:04:21.999316Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:04:21.998952Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:07:55.903348Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:07:55.902566Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:04:21.999292Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptA)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"14ff8c0d5eb244f79e948b69742b6751","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
---------</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:07:55.905841Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:07:55.904872Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:07:55.910901Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:07:55.910048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:07:55.905814Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>0.6232332155477032</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:11:02.525509Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:11:02.525041Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:11:02.529941Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:11:02.529251Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:11:02.525488Z&quot;}" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:11:04.197739Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:11:04.197046Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:11:04.218321Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:11:04.217816Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:11:04.197713Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_A.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>This prompt struggled with the <code>neutral</code> sentiment, as 568/1391 were misclassified as something other than <code>positive</code>, <code>neutral</code> or <code>negative</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:11:05.544808Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:11:05.544141Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:11:05.633516Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:11:05.632959Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:11:05.544780Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-19-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="prompt-b" class="level2">
<h2 class="anchored" data-anchor-id="prompt-b">Prompt B</h2>
<p>I’ll repeat the instruction after the sentence and see if that improves the performance (as it did for phi-2).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:13:39.968208Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:13:39.967800Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:13:39.972114Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:13:39.971194Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:13:39.968176Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">promptB <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb29-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb29-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:13:53.990465Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:13:53.989888Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:17:26.823921Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:17:26.823201Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:13:53.990444Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptB)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8516adff265d4dcab181a62b59653fc1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral
---------</code></pre>
</div>
</div>
<p>The accuracy jumps up from 62.3% to 88.6%! Repeating the instruction after the dataset item was something I learned to do in fastai study group.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:17:26.827209Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:17:26.827044Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:17:26.831332Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:17:26.830690Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:17:26.827194Z&quot;}" data-execution_count="27">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>0.8860424028268551</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:19:01.457993Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:19:01.457629Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:19:01.463234Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:19:01.462471Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:19:01.457969Z&quot;}" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:19:02.814014Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:19:02.813654Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:19:02.839168Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:19:02.838427Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:19:02.813987Z&quot;}" data-execution_count="29">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_B.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>The model does a much better job at predicting <code>neutral</code> sentiment with this adjustment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:19:15.994990Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:19:15.994593Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:19:16.090640Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:19:16.089862Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:19:15.994965Z&quot;}" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-25-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-25-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="prompt-c" class="level2">
<h2 class="anchored" data-anchor-id="prompt-c">Prompt C</h2>
<p>I’ll add some introductory text to the prompt to see if that improves the model’s performance:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:22:12.162149Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:22:12.161827Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:22:12.166169Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:22:12.165389Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:22:12.162128Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">promptC <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Your task is to analyze the sentiment (from an investor's perspective) of the text below.</span></span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb37-4"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb37-5"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:22:23.894458Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:22:23.893740Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:26:01.864511Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:26:01.863762Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:22:23.894435Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptC)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"28fb1133a3214a958546bd43393573f4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Your task is to analyze the sentiment (from an investor's perspective) of the text below.

Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral
---------</code></pre>
</div>
</div>
<p>The addition of this introductory text actually worsens the model’s performance by about 5%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:26:01.867383Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:26:01.867234Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:26:01.871757Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:26:01.871104Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:26:01.867368Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.8348056537102474</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:26:22.395487Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:26:22.394834Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:26:22.401022Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:26:22.399960Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:26:22.395460Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:26:24.198390Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:26:24.197692Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:26:24.287352Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:26:24.286780Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:26:24.198355Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-30-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:26:31.662582Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:26:31.661980Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:26:31.686166Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:26:31.685563Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:26:31.662561Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_C.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-d" class="level2">
<h2 class="anchored" data-anchor-id="prompt-d">Prompt D</h2>
<p>I’ll try another prompt language adjustment to Prompt B: I’ll replace “label” with “Respond”.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:34:40.583440Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:34:40.583159Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:34:40.587130Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:34:40.586329Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:34:40.583422Z&quot;}" data-execution_count="43">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">promptD <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: Respond with only one of these words: negative, positive, or neutral</span></span>
<span id="cb45-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb45-3"><span class="st" style="color: #20794D;">Respond with only one of these words: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:34:45.986606Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:34:45.986326Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:38:19.125140Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:38:19.124552Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:34:45.986588Z&quot;}" data-execution_count="44">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptD)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3593d9b0003f47b69d801e63355b7447","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: Respond with only one of these words: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Respond with only one of these words: negative, positive, or neutral
---------</code></pre>
</div>
</div>
<p>Wow! The accuracy plummets to 69%. This was something that had improved the accuracy for phi-2.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:38:19.126487Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:38:19.126281Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:38:19.130311Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:38:19.129771Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:38:19.126471Z&quot;}" data-execution_count="45">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>0.6863957597173145</code></pre>
</div>
</div>
<p>The model actually improves its performance on <code>negative</code> and <code>positive</code> sentences, but significantly worsens its performance when classifying <code>neutral</code> sentences.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:38:19.131202Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:38:19.131052Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:38:19.222226Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:38:19.221714Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:38:19.131202Z&quot;}" data-execution_count="46">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-35-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-35-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:43:08.929116Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:43:08.928590Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:43:08.954648Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:43:08.953983Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:43:08.929097Z&quot;}" data-execution_count="47">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_D.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-e" class="level2">
<h2 class="anchored" data-anchor-id="prompt-e">Prompt E</h2>
<p>Another adjustment that improved phi-2’s performance was to add a period after the instruction. I’ll see if doing so improves phi-3.5’s performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:47:05.858952Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:47:05.858147Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:47:05.862763Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:47:05.861985Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:47:05.858916Z&quot;}" data-execution_count="48">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">promptE <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral.</span></span>
<span id="cb52-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb52-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:47:18.132661Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:47:18.132005Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:50:49.801782Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:50:49.801210Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:47:18.132640Z&quot;}" data-execution_count="49">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptE)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ead0011c23ae4691a79fd373f4556ba0","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral.
---------</code></pre>
</div>
</div>
<p>Interestingly, this actually worsens the overall accuracy a bit.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:50:49.803545Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:50:49.802803Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:50:49.807758Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:50:49.807280Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:50:49.803522Z&quot;}" data-execution_count="50">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>0.8825088339222615</code></pre>
</div>
</div>
<p>The <code>negative</code> and <code>positive</code> true positive rate is the same as Prompt B, but <code>neutral</code> rate is worse (1207 &lt; 1215).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:50:49.809136Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:50:49.808520Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:50:50.289943Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:50:50.289510Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:50:49.809111Z&quot;}" data-execution_count="51">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-40-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-40-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T20:55:16.875770Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T20:55:16.874732Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T20:55:16.900740Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T20:55:16.899988Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T20:55:16.875738Z&quot;}" data-execution_count="53">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_E.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-f" class="level2">
<h2 class="anchored" data-anchor-id="prompt-f">Prompt F</h2>
<p>I’ll now move on to few-shot prompting to see if I can improve on the best overall accuracy so far (88.6%). To do so, I’ll create a new helper function (since the chat template handles few-shot prompt as multiple query-response exchanges between user and assistant).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:05:34.897057Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:05:34.896452Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T23:05:34.904439Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T23:05:34.903670Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:05:34.897030Z&quot;}" data-execution_count="8">
<details>
<summary>Show <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb59-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb59-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb59-4"></span>
<span id="cb59-5">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb59-6">    </span>
<span id="cb59-7">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb59-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb59-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb59-10">    </span>
<span id="cb59-11">    count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb59-12">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb59-13">        count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb59-14">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb59-15">        </span>
<span id="cb59-16">        <span class="cf" style="color: #003B4F;">if</span> count <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>: <span class="bu" style="color: null;">print</span>(messages)</span>
<span id="cb59-17">        </span>
<span id="cb59-18">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb59-19">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb59-20">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb59-21">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb59-22">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb59-23">        } </span>
<span id="cb59-24"></span>
<span id="cb59-25">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb59-26">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb59-27">        </span>
<span id="cb59-28">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb59-29">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb59-30">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb59-31">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb59-32">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb59-33">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb59-34">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:50:51.353719Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:50:51.352913Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:50:51.356629Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:50:51.356046Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:50:51.353695Z&quot;}" data-execution_count="74">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:50:52.656744Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:50:52.656131Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:50:52.668656Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:50:52.668056Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:50:52.656722Z&quot;}" data-execution_count="75">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">promptF_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs)</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:50:54.608654Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:50:54.607761Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:50:54.613924Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:50:54.612935Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:50:54.608651Z&quot;}" data-execution_count="76">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">promptF_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2261
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:50:58.383449Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:50:58.383169Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:50:58.390470Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:50:58.389298Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:50:58.383430Z&quot;}" data-execution_count="77">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb64-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb64-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb64-4"></span>
<span id="cb64-5">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>[('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:52:01.738560Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:52:01.737833Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:57:17.142603Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:57:17.142106Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:52:01.738529Z&quot;}" data-execution_count="82">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptF_ds, promptB, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"72728f4fc3804af8aa0dfa462faa774d","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single word: negative, positive, or neutral'}]</code></pre>
</div>
</div>
<p>The accuracy drops to 84.65%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T22:59:26.040819Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T22:59:26.040466Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T22:59:26.046232Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T22:59:26.045531Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T22:59:26.040795Z&quot;}" data-execution_count="83">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>0.8465280849181778</code></pre>
</div>
</div>
<p>Compared to Prompt B, the true positive rate for <code>neutral</code> decreases (1070 &lt; 1215) whereas for <code>positive</code> and <code>negative</code> sentiment the TPR increases (296 &gt; 290, 548 &gt; 501).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:00:15.083099Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:00:15.082114Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:00:15.210950Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:00:15.210294Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:00:15.083065Z&quot;}" data-execution_count="84">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-49-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-49-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:01:55.650702Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:01:55.650420Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:01:55.674125Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:01:55.673487Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:01:55.650684Z&quot;}" data-execution_count="85">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_F.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-g" class="level2">
<h2 class="anchored" data-anchor-id="prompt-g">Prompt G</h2>
<p>I’ll now try a 6-Shot prompt using the examples that were best-performing for phi-2.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:07:05.099893Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:07:05.099560Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:07:05.118682Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:07:05.117924Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:07:05.099871Z&quot;}" data-execution_count="86">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>]</span>
<span id="cb72-2">promptG_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs)</span>
<span id="cb72-3">promptG_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2258
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:07:33.184273Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:07:33.183702Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:07:33.190417Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:07:33.189882Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:07:33.184245Z&quot;}" data-execution_count="88">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb74-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb74-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb74-4"></span>
<span id="cb74-5">examples[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>(('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 6)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:07:54.251745Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:07:54.250798Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:16:17.108382Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:16:17.107675Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:07:54.251714Z&quot;}" data-execution_count="89">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptG_ds, promptB, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"45e3402d656648abb2526d0bb8470703","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: At the request of Finnish media company Alma Media 's newspapers , research manager Jari Kaivo-oja at the Finland Futures Research Centre at the Turku School of Economics has drawn up a future scenario for Finland 's national economy by using a model developed by the University of Denver .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: STOCK EXCHANGE ANNOUNCEMENT 20 July 2006 1 ( 1 ) BASWARE SHARE SUBSCRIPTIONS WITH WARRANTS AND INCREASE IN SHARE CAPITAL A total of 119 850 shares have been subscribed with BasWare Warrant Program .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: A maximum of 666,104 new shares can further be subscribed for by exercising B options under the 2004 stock option plan .\nlabel the TEXT with a single word: negative, positive, or neutral'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single word: negative, positive, or neutral'}]</code></pre>
</div>
</div>
<p>Unexpectedly, the accuracy drops to 78%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:16:59.805335Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:16:59.804990Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:16:59.812852Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:16:59.812154Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:16:59.805314Z&quot;}" data-execution_count="90">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>0.7798937112488928</code></pre>
</div>
</div>
<p>The model performs better with this prompt than the so far best-performing 3-Shot prompt (84.7%) for <code>negative</code> sentences (297 &gt; 296) and <code>positive</code> sentences (551 &gt; 548) but performs much worse for <code>neutral</code> sentences (913 &lt; 1070).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:18:10.022360Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:18:10.021974Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:18:10.148122Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:18:10.147150Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:18:10.022334Z&quot;}" data-execution_count="91">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-55-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-55-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:20:46.063111Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:20:46.062824Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:20:46.094183Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:20:46.093385Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:20:46.063091Z&quot;}" data-execution_count="92">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_G.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-h" class="level2">
<h2 class="anchored" data-anchor-id="prompt-h">Prompt H</h2>
<p>I’ll return to the 3-Shot prompt (84.65%) and see if I can improve it by adjusting the language. First, I’ll add some introductory text to the start of the prompt. Note that this did not improve the 0-Shot performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:29:50.247086Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:29:50.246698Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:29:50.251079Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:29:50.250196Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:29:50.247061Z&quot;}" data-execution_count="94">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">promptH <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Your task is to analyze the sentiment (from an investor's perspective) of the text below.</span></span>
<span id="cb82-2"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb82-3"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb82-4"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:29:52.229127Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:29:52.228465Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:29:52.233928Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:29:52.233526Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:29:52.229104Z&quot;}" data-execution_count="95">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">292</span>]</span>
<span id="cb83-2"></span>
<span id="cb83-3">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb83-4"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb83-5">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb83-6"></span>
<span id="cb83-7">examples</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>[('According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .',
  'neutral'),
 ("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 ('Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .',
  'negative')]</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:30:04.197021Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:30:04.196560Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:30:04.200748Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:30:04.200318Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:30:04.197000Z&quot;}" data-execution_count="96">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">promptF_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2261
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:30:38.532044Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:30:38.530922Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:36:55.692114Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:36:55.691165Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:30:38.531996Z&quot;}" data-execution_count="97">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptF_ds, promptH, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c47d528604a64c9b95488edba268f985","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': "Your task is to analyze the sentiment (from an investor's perspective) of the text below.\nInstruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Your task is to analyze the sentiment (from an investor's perspective) of the text below.\nInstruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': "Your task is to analyze the sentiment (from an investor's perspective) of the text below.\nInstruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single word: negative, positive, or neutral"}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': "Your task is to analyze the sentiment (from an investor's perspective) of the text below.\nInstruct: label the following TEXT with a single word: negative, positive, or neutral\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single word: negative, positive, or neutral"}]</code></pre>
</div>
</div>
<p>This does not improve the overall accuracy. Instead, it drops by about 1.6%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:37:15.878306Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:37:15.877406Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:37:15.883427Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:37:15.882654Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:37:15.878271Z&quot;}" data-execution_count="98">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>0.8306059265811587</code></pre>
</div>
</div>
<p>Compared to the 3-Shot prompt, <code>negative</code> sentences are classified at the same frequency (296/302), <code>neutral</code> sentences at a lower rate (1028 &lt; 1070) and <code>positive</code> sentences at a higher rate (554 &gt; 548).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:37:49.183327Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:37:49.182973Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:37:49.274064Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:37:49.273314Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:37:49.183301Z&quot;}" data-execution_count="99">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-62-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-62-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-10T23:43:53.666021Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-10T23:43:53.665207Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-10T23:43:53.691776Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-10T23:43:53.691048Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-10T23:43:53.666014Z&quot;}" data-execution_count="101">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_H.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-i" class="level2">
<h2 class="anchored" data-anchor-id="prompt-i">Prompt I</h2>
<p>Before I give the model more than 6 examples, I’ll deviate from the recommended multi-turn chat format for few-shot prompting and give the examples in a single prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:11:10.258963Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:11:10.258310Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:11:10.262724Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:11:10.261992Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:11:10.258939Z&quot;}" data-execution_count="103">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">promptI <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb93-2"></span>
<span id="cb93-3"><span class="st" style="color: #20794D;">Examples:</span></span>
<span id="cb93-4"></span>
<span id="cb93-5"><span class="st" style="color: #20794D;">TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</span></span>
<span id="cb93-6"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb93-7"><span class="st" style="color: #20794D;">neutral</span></span>
<span id="cb93-8"></span>
<span id="cb93-9"><span class="st" style="color: #20794D;">TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .</span></span>
<span id="cb93-10"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb93-11"><span class="st" style="color: #20794D;">positive</span></span>
<span id="cb93-12"></span>
<span id="cb93-13"><span class="st" style="color: #20794D;">TEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .</span></span>
<span id="cb93-14"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb93-15"><span class="st" style="color: #20794D;">negative</span></span>
<span id="cb93-16"></span>
<span id="cb93-17"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb93-18"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb93-19"><span class="st" style="color: #20794D;">"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:11:15.094159Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:11:15.093812Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:11:15.099555Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:11:15.098849Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:11:15.094135Z&quot;}" data-execution_count="104">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">promptF_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2261
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:11:21.741690Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:11:21.741092Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:16:20.147703Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:16:20.147083Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:11:21.741669Z&quot;}" data-execution_count="105">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(promptF_ds, promptI)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2a668ff38927486fbe1f9914c3c88e01","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral

Examples:

TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral
neutral

TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .
label the TEXT with a single word: negative, positive, or neutral
positive

TEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .
label the TEXT with a single word: negative, positive, or neutral
negative

TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .
label the TEXT with a single word: negative, positive, or neutral

---------</code></pre>
</div>
</div>
<p>Nope! The performance of few-shot prompting without multi-turn format is drastically worse.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:17:13.031855Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:17:13.031256Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:17:13.037086Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:17:13.035878Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:17:13.031830Z&quot;}" data-execution_count="106">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>0.5161432994250331</code></pre>
</div>
</div>
<p>The true positive rate for <code>negative</code> sentiment is actually higher (302/302 or 100%) but the rate is much lower for <code>neutral</code> sentiment (917 &lt; 1070) and <code>positive</code> sentiment (418 &lt; 548).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:18:01.793415Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:18:01.792417Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:18:01.923508Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:18:01.922526Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:18:01.793385Z&quot;}" data-execution_count="107">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-68-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-68-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:19:57.819876Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:19:57.819509Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:19:57.880943Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:19:57.880035Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:19:57.819848Z&quot;}" data-execution_count="108">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_I.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-j" class="level2">
<h2 class="anchored" data-anchor-id="prompt-j">Prompt J</h2>
<p>I’ll try one more prompt with single-turn few-shot examples. I’ll add “Output:” before the label in each example, and add the “Instruct:” instructions before each example TEXT. I’ll also remove the extra new line that I have after the final instruction.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:36:07.116641Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:36:07.116376Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:36:07.120613Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:36:07.119923Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:36:07.116623Z&quot;}" data-execution_count="111">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">promptJ <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-2"></span>
<span id="cb102-3"><span class="st" style="color: #20794D;">Examples:</span></span>
<span id="cb102-4"></span>
<span id="cb102-5"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-6"><span class="st" style="color: #20794D;">TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .</span></span>
<span id="cb102-7"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-8"><span class="st" style="color: #20794D;">Output: neutral</span></span>
<span id="cb102-9"></span>
<span id="cb102-10"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-11"><span class="st" style="color: #20794D;">TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .</span></span>
<span id="cb102-12"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-13"><span class="st" style="color: #20794D;">Output: positive</span></span>
<span id="cb102-14"></span>
<span id="cb102-15"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-16"><span class="st" style="color: #20794D;">TEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .</span></span>
<span id="cb102-17"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-18"><span class="st" style="color: #20794D;">Output: negative</span></span>
<span id="cb102-19"></span>
<span id="cb102-20"><span class="st" style="color: #20794D;">Instruct: label the following TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-21"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb102-22"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral</span></span>
<span id="cb102-23"><span class="st" style="color: #20794D;">Output: """</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:36:11.193841Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:36:11.193506Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:41:41.578407Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:41:41.577423Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:36:11.193818Z&quot;}" data-execution_count="112">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(promptF_ds, promptJ)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"7cbf3fa476ed452fb6a70da296b763eb","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral

Examples:

Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral
Output: neutral

Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .
label the TEXT with a single word: negative, positive, or neutral
Output: positive

Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .
label the TEXT with a single word: negative, positive, or neutral
Output: negative

Instruct: label the following TEXT with a single word: negative, positive, or neutral
TEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .
label the TEXT with a single word: negative, positive, or neutral
Output: 
---------</code></pre>
</div>
</div>
<p>Wow! This actually made a difference. This is the second-best overall accuracy I have achieved.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:41:41.579807Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:41:41.579613Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:41:41.584568Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:41:41.583843Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:41:41.579791Z&quot;}" data-execution_count="113">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>0.8593542680229986</code></pre>
</div>
</div>
<p>Compared to the previous second-best prompt (3-Shot), this prompt results in the same true positive rate for <code>negative</code> sentiment (296/302), a much higher rate for <code>neutral</code> sentiment (1108 &gt; 1070) and a lower rate for <code>positive</code> sentiment (539 &lt; 548).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:41:41.585668Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:41:41.585475Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:41:41.689292Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:41:41.688519Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:41:41.585652Z&quot;}" data-execution_count="114">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-73-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-10"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-73-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T00:41:41.691229Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T00:41:41.690952Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T00:41:41.754843Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T00:41:41.754097Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T00:41:41.691208Z&quot;}" data-execution_count="115">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_J.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-k" class="level2">
<h2 class="anchored" data-anchor-id="prompt-k">Prompt K</h2>
<p>I’ll return to few-shot prompting in a bit, but want to first revisit zero-shot prompting as it yielded the best overall performance so far (88.6% overall accuracy).</p>
<p>I asked Claude for suggestions on how to improve that prompt and will be trying them out.</p>
<p>First suggestion:</p>
<blockquote class="blockquote">
<p>Refine the Instruction: Try slight variations of the instruction to see if they yield better results:</p>
</blockquote>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:17:20.452006Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:17:20.451054Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:17:20.455324Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:17:20.454568Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:17:20.451976Z&quot;}" data-execution_count="117">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">promptK <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: Analyze the sentiment of the following financial statement and respond with a single word: negative, positive, or neutral</span></span>
<span id="cb109-2"><span class="st" style="color: #20794D;">Financial statement: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb109-3"><span class="st" style="color: #20794D;">Sentiment (respond with a single word):"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:17:25.001223Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:17:25.000583Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:20:57.770782Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:20:57.770261Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:17:25.001200Z&quot;}" data-execution_count="118">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptK)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"d6ad1a122d304da9b3dd9137d82fdc42","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: Analyze the sentiment of the following financial statement and respond with a single word: negative, positive, or neutral
Financial statement: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Sentiment (respond with a single word):
---------</code></pre>
</div>
</div>
<p>This yields a worse overall accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:24:11.377325Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:24:11.376537Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:24:11.382597Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:24:11.381743Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:24:11.377293Z&quot;}" data-execution_count="119">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>0.7795936395759717</code></pre>
</div>
</div>
<p>Compared to the best-performing 0-Shot Prompt B (88.6%) this prompt yields a higher true positive rate for <code>neutral</code> sentiment (298 &gt; 290) and <code>positive</code> sentiment (548 &gt; 501) but lower for <code>neutral</code> sentiment (919 &lt; 1215).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:24:29.034590Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:24:29.033665Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:24:29.117428Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:24:29.116819Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:24:29.034582Z&quot;}" data-execution_count="120">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-78-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-11"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-78-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:26:19.539523Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:26:19.538911Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:26:19.566301Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:26:19.565483Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:26:19.539497Z&quot;}" data-execution_count="121">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_K.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-l" class="level2">
<h2 class="anchored" data-anchor-id="prompt-l">Prompt L</h2>
<p>Given the success of that prompt with <code>negative</code> and <code>positive</code> sentiment, I’ll see if I can improve it for <code>neutral</code> sentiment by adding the phrase: “if you’re not sure, respond with neutral.”</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:28:20.996824Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:28:20.996540Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:28:21.000715Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:28:20.999925Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:28:20.996805Z&quot;}" data-execution_count="122">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">promptL <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: Analyze the sentiment of the following financial statement and respond with a single word: negative, positive, or neutral. If you’re not sure, respond with neutral.</span></span>
<span id="cb116-2"><span class="st" style="color: #20794D;">Financial statement: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb116-3"><span class="st" style="color: #20794D;">Sentiment (respond with a single word, if you’re not sure, respond with neutral):"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:28:32.175907Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:28:32.175209Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:32:07.839373Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:32:07.838898Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:28:32.175878Z&quot;}" data-execution_count="123">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptL)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"391f7c4c97bf43a0be71688f8cf02241","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: Analyze the sentiment of the following financial statement and respond with a single word: negative, positive, or neutral. If you’re not sure, respond with neutral.
Financial statement: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
Sentiment (respond with a single word, if you’re not sure, respond with neutral):
---------</code></pre>
</div>
</div>
<p>This improves the overall accuracy but is still lower than the Prompt B (88.6%).</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:33:13.313113Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:33:13.312430Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:33:13.316856Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:33:13.316425Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:33:13.313088Z&quot;}" data-execution_count="124">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="124">
<pre><code>0.8056537102473498</code></pre>
</div>
</div>
<p>Compared to Prompt K, the true positive rate for each sentiment increased.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:33:55.618489Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:33:55.617624Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:33:55.702037Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:33:55.701514Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:33:55.618458Z&quot;}" data-execution_count="125">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-83-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-12"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-83-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:34:01.500786Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:34:01.499934Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:34:01.526850Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:34:01.526118Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:34:01.500756Z&quot;}" data-execution_count="126">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_L.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-m" class="level2">
<h2 class="anchored" data-anchor-id="prompt-m">Prompt M</h2>
<p>Given the success of the phrase “if you’re not sure, respond with neutral” I’ll add it to Prompt B.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:10:12.783650Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:10:12.782746Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:10:12.788399Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:10:12.787934Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:10:12.783625Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">promptM <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.</span></span>
<span id="cb123-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb123-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:36:43.595009Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:36:43.594149Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:40:17.962291Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:40:17.961499Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:36:43.594974Z&quot;}" data-execution_count="130">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptM)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8597ac841deb43b4ab2bbfefed854efc","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
---------</code></pre>
</div>
</div>
<p>Hooray!! With this language adjustment, I have achieved the best overall accuracy so far.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:40:33.702562Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:40:33.702290Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:40:33.707654Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:40:33.706767Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:40:33.702544Z&quot;}" data-execution_count="131">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>0.9129858657243817</code></pre>
</div>
</div>
<p>The true positive rate for all three sentiments has increased.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:41:12.796096Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:41:12.795386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:41:13.369597Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:41:13.368887Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:41:12.796092Z&quot;}" data-execution_count="132">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-88-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-13"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-88-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T01:43:51.134811Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T01:43:51.134066Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T01:43:51.170985Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T01:43:51.170162Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T01:43:51.134783Z&quot;}" data-execution_count="133">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_M.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-n" class="level2">
<h2 class="anchored" data-anchor-id="prompt-n">Prompt N</h2>
<p>I’ll see if adding a system prompt improves the performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:10:02.255320Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:10:02.254445Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:10:02.263278Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:10:02.262648Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:10:02.255287Z&quot;}" data-execution_count="12">
<details>
<summary>Show updated <code>generate_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1"><span class="kw" style="color: #003B4F;">def</span> generate_responses(dataset, prompt, sp<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb130-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb130-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb130-4">    </span>
<span id="cb130-5">    <span class="co" style="color: #5E5E5E;"># check that the prompt is correctly formatted</span></span>
<span id="cb130-6">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb130-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'---------'</span>)</span>
<span id="cb130-8">    </span>
<span id="cb130-9">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb130-10">        </span>
<span id="cb130-11">        <span class="cf" style="color: #003B4F;">if</span> sp:</span>
<span id="cb130-12">            messages <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">'role'</span>: <span class="st" style="color: #20794D;">'system'</span>, <span class="st" style="color: #20794D;">'content'</span>: <span class="st" style="color: #20794D;">'You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification.'</span>}</span>
<span id="cb130-13">                       ] <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]},]</span>
<span id="cb130-14">            </span>
<span id="cb130-15">        <span class="cf" style="color: #003B4F;">else</span>: messages <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]},] </span>
<span id="cb130-16"></span>
<span id="cb130-17">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb130-18">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb130-19">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb130-20">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb130-21">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb130-22">        } </span>
<span id="cb130-23"></span>
<span id="cb130-24">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb130-25">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb130-26">        </span>
<span id="cb130-27">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb130-28">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb130-29">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb130-30">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb130-31">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb130-32">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb130-33">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:10:19.250053Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:10:19.249482Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:14:19.562949Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:14:19.562180Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:10:19.250025Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptM, sp<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a21f5f55e43142d7b0f398367f045611","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
---------</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>You are not running the flash-attention implementation, expect numerical differences.
You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset</code></pre>
</div>
</div>
<p>Adding that system prompt results in a worse accuracy.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:31:25.907262Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:31:25.906993Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:31:25.911045Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:31:25.910581Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:31:25.907242Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>0.8873674911660777</code></pre>
</div>
</div>
<p>The true positive rate for <code>negative</code> (295 &gt; 290) and <code>positive</code> (530 &gt; 501) increases but for <code>neutral</code> (1184 &lt; 1215) decreases.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:31:28.761086Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:31:28.760791Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:31:28.849023Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:31:28.848380Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:31:28.761066Z&quot;}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-93-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-14"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-93-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:31:35.027697Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:31:35.027390Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:31:35.054537Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:31:35.053784Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:31:35.027697Z&quot;}" data-execution_count="21">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_N.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-o" class="level2">
<h2 class="anchored" data-anchor-id="prompt-o">Prompt O</h2>
<p>I’ll see if adding “if you’re not sure, respond with neutral” to the system message improves performance.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T22:59:30.009240Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T22:59:30.008439Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T22:59:30.014376Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T22:59:30.013837Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T22:59:30.009219Z&quot;}" data-execution_count="7">
<details>
<summary>Show updated <code>generate_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1"><span class="kw" style="color: #003B4F;">def</span> generate_responses(dataset, prompt, sp<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb138-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb138-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb138-4">    </span>
<span id="cb138-5">    <span class="co" style="color: #5E5E5E;"># check that the prompt is correctly formatted</span></span>
<span id="cb138-6">    <span class="bu" style="color: null;">print</span>(dataset[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'prompt'</span>])</span>
<span id="cb138-7">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'---------'</span>)</span>
<span id="cb138-8">    </span>
<span id="cb138-9">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb138-10">        </span>
<span id="cb138-11">        <span class="cf" style="color: #003B4F;">if</span> sp:</span>
<span id="cb138-12">            messages <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">'role'</span>: <span class="st" style="color: #20794D;">'system'</span>, <span class="st" style="color: #20794D;">'content'</span>: sp}</span>
<span id="cb138-13">                       ] <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]},]</span>
<span id="cb138-14">            </span>
<span id="cb138-15">        <span class="cf" style="color: #003B4F;">else</span>: messages <span class="op" style="color: #5E5E5E;">=</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]},] </span>
<span id="cb138-16"></span>
<span id="cb138-17">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb138-18">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb138-19">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb138-20">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb138-21">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb138-22">        } </span>
<span id="cb138-23"></span>
<span id="cb138-24">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb138-25">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb138-26">        </span>
<span id="cb138-27">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb138-28">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb138-29">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb138-30">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb138-31">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb138-32">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb138-33">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:55:22.512243Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:55:22.511386Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:55:22.514830Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:55:22.514412Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:55:22.512216Z&quot;}" data-execution_count="36">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">sp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification. If you're not sure, respond with neutral."</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:55:23.924798Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:55:23.924543Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:55:23.928159Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:55:23.927750Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:55:23.924780Z&quot;}" data-execution_count="37">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1"><span class="bu" style="color: null;">print</span>(sp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>You are an expert in financial sentiment analysis. Your task is to accurately classify the sentiment of financial statements as negative, positive, or neutral. Consider the overall impact and implications of the statement when making your classification. If you're not sure, respond with neutral.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:55:35.923166Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:55:35.922623Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:59:40.208307Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:59:40.207497Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:55:35.923141Z&quot;}" data-execution_count="38">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptM, sp<span class="op" style="color: #5E5E5E;">=</span>sp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral. If you're not sure, respond with neutral.
---------</code></pre>
</div>
</div>
<p>This system prompt still performs worse than no system prompt.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:59:40.209638Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:59:40.209436Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:59:40.213723Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:59:40.212974Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:59:40.209621Z&quot;}" data-execution_count="39">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>0.8710247349823321</code></pre>
</div>
</div>
<p>Compared to the best-performing Prompt M, this prompt yields a higher true positive rate for <code>positive</code> sentiment (531 &gt; 501) but a lower rate for <code>neutral</code> sentiment (1156 &lt; 1215) and for <code>negative</code> (294 &gt; 290) sentiment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:59:40.214612Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:59:40.214455Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:59:40.302582Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:59:40.301881Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:59:40.214598Z&quot;}" data-execution_count="40">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-100-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-15"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-100-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T03:02:03.088032Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T03:02:03.087433Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T03:02:03.112132Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T03:02:03.111507Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T03:02:03.088010Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_O.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-p" class="level2">
<h2 class="anchored" data-anchor-id="prompt-p">Prompt P</h2>
<p>I’ll move away from system prompts for now and revisit language adjustments. For Prompt M, I’ll replace:</p>
<blockquote class="blockquote">
<p>If you’re not sure, respond with neutral.</p>
</blockquote>
<p>with</p>
<blockquote class="blockquote">
<p>If the amount of money is not explicitly increasing or decreasing, respond with neutral.</p>
</blockquote>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:06:03.550437Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:06:03.549947Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T23:06:03.553145Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T23:06:03.552670Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:06:03.550414Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1">promptP <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.</span></span>
<span id="cb148-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb148-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:48:59.761850Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:48:59.761246Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:52:34.075642Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:52:34.074997Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:48:59.761828Z&quot;}" data-execution_count="31">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb149-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptP)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"da7c266036ad4153ac220062b6c0814e","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.
---------</code></pre>
</div>
</div>
<p>Excellent! The overall accuracy again increases, this time to 92.2%. I’m still quite surprised it’s taken so much effort to surpass phi-2, but I’ll reflect on that later on.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:52:34.077514Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:52:34.077290Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:52:34.082303Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:52:34.080841Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:52:34.077494Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb151-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>0.9222614840989399</code></pre>
</div>
</div>
<p>Both <code>negative</code> and <code>positive</code> sentiment true positive rates decrease, but this prompt results in almost 100 more correct <code>neutral</code> responses.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:52:34.083615Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:52:34.083381Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:52:34.188610Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:52:34.187891Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:52:34.083596Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-105-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-16"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-105-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T02:52:34.190492Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T02:52:34.190258Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T02:52:34.221369Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T02:52:34.220605Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T02:52:34.190474Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_P.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-q" class="level2">
<h2 class="anchored" data-anchor-id="prompt-q">Prompt Q</h2>
<p>Given the success of the zero-shot prompt with instructions on handling neutral statements, I’ll try a prompt suggested by Claude, which adds more nuance to handling neutral sentences:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:08:25.978721Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:08:25.978164Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:08:25.981742Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:08:25.981158Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:08:25.978701Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">promptQ <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral. </span></span>
<span id="cb155-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb155-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral. If key financial metrics are not clearly changing, respond with neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:08:35.163876Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:08:35.163249Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:08:35.167260Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:08:35.166604Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:08:35.163847Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1"><span class="bu" style="color: null;">print</span>(promptQ)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral. 
TEXT: {text}
label the TEXT with a single word: negative, positive, or neutral. If key financial metrics are not clearly changing, respond with neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:09:07.504776Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:09:07.504039Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:13:00.537777Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:13:00.537131Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:09:07.504744Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> generate_responses(dataset, promptQ)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a32337cb82ff4a1298504b8e44470cb1","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral. 
TEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .
label the TEXT with a single word: negative, positive, or neutral. If key financial metrics are not clearly changing, respond with neutral. If the amount of money, market share, or key performance indicators are not explicitly increasing or decreasing, respond with neutral.
---------</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>You are not running the flash-attention implementation, expect numerical differences.
You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset</code></pre>
</div>
</div>
<p>A more nuanced prompt actually deteriorates the overall accuracy by about 13%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:16:43.708545Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:16:43.707676Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:16:43.718595Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:16:43.717999Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:16:43.708517Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb161" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb161-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>0.7937279151943463</code></pre>
</div>
</div>
<p>Compared to the best performing prompt P (92.2%), this prompt performs better on <code>negative</code> sentiment and worse on <code>neutral</code> and <code>positive</code> sentiment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:17:09.235809Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:17:09.235053Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:17:09.393949Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:17:09.393181Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:17:09.235787Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-111-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-17"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-111-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:18:06.668348Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:18:06.667916Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:18:06.709005Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:18:06.708304Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:18:06.668329Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb164-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_Q.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-r" class="level2">
<h2 class="anchored" data-anchor-id="prompt-r">Prompt R</h2>
<p>I’ll now try providing a large number of examples (20) in the prompt. I don’t expect this to improve upon my 92.2% accuracy since 3-Shot and 6-Shot prompting performed worse. Nevertheless, I’ve heard that it’s not uncommon to give a model dozens of examples.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:30:07.388460Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:30:07.388258Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:30:07.392774Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:30:07.391661Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:30:07.388443Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:30:07.394220Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:30:07.394021Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:30:07.414290Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:30:07.413655Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:30:07.394204Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">promptR_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb166-2">promptR_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2244
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:37:55.131498Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:37:55.130598Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T20:37:55.138965Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T20:37:55.138244Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:37:55.131450Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb168-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb168-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb168-4"></span>
<span id="cb168-5">examples[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>(("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 20)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T20:39:25.182483Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T20:39:25.181894Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T21:23:24.516313Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T21:23:24.515802Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T20:39:25.182457Z&quot;}" data-execution_count="23">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptR_ds, promptP, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b3a4bdd6fb314bf38ec5402a838fe225","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Operating profit rose to EUR 13.1 mn from EUR 8.7 mn in the corresponding period in 2007 representing 7.7 % of net sales .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Operating profit totalled EUR 21.1 mn , up from EUR 18.6 mn in 2007 , representing 9.7 % of net sales .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Pharmaceuticals group Orion Corp reported a fall in its third-quarter earnings that were hit by larger expenditures on R&amp;D and marketing .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: However , the growth margin slowed down due to the financial crisis .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: 2009 3 February 2010 - Finland-based steel maker Rautaruukki Oyj ( HEL : RTRKS ) , or Ruukki , said today it slipped to a larger-than-expected pretax loss of EUR46m in the fourth quarter of 2009 from a year-earlier profit of EUR45m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: At the request of Finnish media company Alma Media 's newspapers , research manager Jari Kaivo-oja at the Finland Futures Research Centre at the Turku School of Economics has drawn up a future scenario for Finland 's national economy by using a model developed by the University of Denver .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: STOCK EXCHANGE ANNOUNCEMENT 20 July 2006 1 ( 1 ) BASWARE SHARE SUBSCRIPTIONS WITH WARRANTS AND INCREASE IN SHARE CAPITAL A total of 119 850 shares have been subscribed with BasWare Warrant Program .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: A maximum of 666,104 new shares can further be subscribed for by exercising B options under the 2004 stock option plan .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Tiimari operates 194 stores in six countries -- including its core Finnish market -- and generated a turnover of 76.5 mln eur in 2005 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Finnish Talvivaara Mining Co HEL : TLV1V said Thursday it had picked BofA Merrill Lynch and JPMorgan NYSE : JPM as joint bookrunners of its planned issue of convertible notes worth up to EUR250m USD332m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The mall is part of the Baltic Pearl development project in the city of St Petersburg , where Baltic Pearl CJSC , a subsidiary of Shanghai Foreign Joint Investment Company , is developing homes for 35,000 people .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Vacon controls a further 5 % of the company via investment fund Power Fund I. EUR 1.0 = USD 1.397\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: 4 ) Complete name of the shareholder : Otto Henrik Bernhard Nyberg 5 ) Further information : The amount of shares now transferred corresponds to 5.68 % of the total number of shares in Aspo Plc. .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: It has some 30 offices worldwide and more than 90 pct of its net sales are generated outside Finland .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The contract value amounts to about EUR11m , the company added .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The business to be divested generates consolidated net sales of EUR 60 million annually and currently has some 640 employees .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Finnish Talentum reports its operating profit increased to EUR 20.5 mn in 2005 from EUR 9.3 mn in 2004 , and net sales totaled EUR 103.3 mn , up from EUR 96.4 mn .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}]</code></pre>
</div>
</div>
<p>Wow! I’m so glad I tried a larger number of examples. The accuracy (93.94%) is now competitive with the Claude models!</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T21:23:41.420414Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T21:23:41.420146Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T21:23:41.424933Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T21:23:41.424358Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T21:23:41.420396Z&quot;}" data-execution_count="24">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>0.9393939393939394</code></pre>
</div>
</div>
<p>With 20-Shot prompting, the true positive rate for <code>negative</code> (286 &gt; 285) and <code>neutral</code> (1355 &gt; 1307) sentiment increases, and decreases for <code>positive</code> (467 &lt; 496) sentiment.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T21:28:07.681485Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T21:28:07.681186Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T21:28:07.771933Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T21:28:07.771417Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T21:28:07.681465Z&quot;}" data-execution_count="25">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-118-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-18"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-118-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T21:29:09.334179Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T21:29:09.333618Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T21:29:09.363094Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T21:29:09.362375Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T21:29:09.334159Z&quot;}" data-execution_count="26">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb175-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_R.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-s" class="level2">
<h2 class="anchored" data-anchor-id="prompt-s">Prompt S</h2>
<p>I’ll increase the number of examples to 28 and see if that yields an improvement. I currently have 4 <code>positive</code>, 4 <code>negative</code> and 12 <code>neutral</code> examples. I’ll up that to 5:5:18.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:05:45.588209Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:05:45.587945Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T23:05:45.591657Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T23:05:45.591110Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:05:45.588192Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb176-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb176-2">    <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="co" style="color: #5E5E5E;"># positive</span></span>
<span id="cb176-3">    <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">348</span>, <span class="co" style="color: #5E5E5E;"># negative</span></span>
<span id="cb176-4">    <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span>, <span class="dv" style="color: #AD0000;">284</span>, <span class="dv" style="color: #AD0000;">285</span>, <span class="dv" style="color: #AD0000;">286</span>, <span class="dv" style="color: #AD0000;">287</span>, <span class="dv" style="color: #AD0000;">288</span>, <span class="dv" style="color: #AD0000;">289</span> <span class="co" style="color: #5E5E5E;"># neutral</span></span>
<span id="cb176-5">]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:05:46.917173Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:05:46.916914Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T23:05:46.927084Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T23:05:46.926555Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:05:46.917155Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb177-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb177-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb177-4"></span>
<span id="cb177-5">examples[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  'positive'),
 28)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:05:50.236099Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:05:50.235837Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-11T23:05:50.253589Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-11T23:05:50.253165Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:05:50.236082Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">promptS_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb179-2">promptS_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2236
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-11T23:06:11.442082Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-11T23:06:11.441679Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T00:17:18.158404Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T00:17:18.157636Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-11T23:06:11.442062Z&quot;}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptS_ds, promptP, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"8af4b803118f416595b1a232389e48f4","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Operating profit rose to EUR 13.1 mn from EUR 8.7 mn in the corresponding period in 2007 representing 7.7 % of net sales .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Operating profit totalled EUR 21.1 mn , up from EUR 18.6 mn in 2007 , representing 9.7 % of net sales .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Finnish Talentum reports its operating profit increased to EUR 20.5 mn in 2005 from EUR 9.3 mn in 2004 , and net sales totaled EUR 103.3 mn , up from EUR 96.4 mn .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'positive'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Pharmaceuticals group Orion Corp reported a fall in its third-quarter earnings that were hit by larger expenditures on R&amp;D and marketing .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: However , the growth margin slowed down due to the financial crisis .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: 2009 3 February 2010 - Finland-based steel maker Rautaruukki Oyj ( HEL : RTRKS ) , or Ruukki , said today it slipped to a larger-than-expected pretax loss of EUR46m in the fourth quarter of 2009 from a year-earlier profit of EUR45m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: ( ADPnews ) - Feb 3 , 2010 - Finland-based steel maker Rautaruukki Oyj ( HEL : RTRKS ) , or Ruukki , said today it slipped to a larger-than-expected pretax loss of EUR 46 million ( USD 64.5 m ) in the fourth quarter of 2009 from a\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'negative'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: At the request of Finnish media company Alma Media 's newspapers , research manager Jari Kaivo-oja at the Finland Futures Research Centre at the Turku School of Economics has drawn up a future scenario for Finland 's national economy by using a model developed by the University of Denver .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: STOCK EXCHANGE ANNOUNCEMENT 20 July 2006 1 ( 1 ) BASWARE SHARE SUBSCRIPTIONS WITH WARRANTS AND INCREASE IN SHARE CAPITAL A total of 119 850 shares have been subscribed with BasWare Warrant Program .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: A maximum of 666,104 new shares can further be subscribed for by exercising B options under the 2004 stock option plan .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Tiimari operates 194 stores in six countries -- including its core Finnish market -- and generated a turnover of 76.5 mln eur in 2005 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Finnish Talvivaara Mining Co HEL : TLV1V said Thursday it had picked BofA Merrill Lynch and JPMorgan NYSE : JPM as joint bookrunners of its planned issue of convertible notes worth up to EUR250m USD332m .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The mall is part of the Baltic Pearl development project in the city of St Petersburg , where Baltic Pearl CJSC , a subsidiary of Shanghai Foreign Joint Investment Company , is developing homes for 35,000 people .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Vacon controls a further 5 % of the company via investment fund Power Fund I. EUR 1.0 = USD 1.397\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: 4 ) Complete name of the shareholder : Otto Henrik Bernhard Nyberg 5 ) Further information : The amount of shares now transferred corresponds to 5.68 % of the total number of shares in Aspo Plc. .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: It has some 30 offices worldwide and more than 90 pct of its net sales are generated outside Finland .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The contract value amounts to about EUR11m , the company added .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The business to be divested generates consolidated net sales of EUR 60 million annually and currently has some 640 employees .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The company generates net sales of about 600 mln euro $ 775.5 mln annually and employs 6,000 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The contract covers the manufacturing , surface-treatment and installation of the steel structures .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The order also includes start-up and commissioning services .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: The phones are targeted at first time users in growth markets .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Tielinja generated net sales of 7.5 mln euro $ 9.6 mln in 2005 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Tikkurila Powder Coatings has some 50 employees at its four paint plants , which generated revenues of EUR2 .4 m USD3 .3 m in 2010 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.'}, {'role': 'assistant', 'content': 'neutral'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.\nTEXT: Clothing retail chain Sepp+ñl+ñ 's sales increased by 8 % to EUR 155.2 mn , and operating profit rose to EUR 31.1 mn from EUR 17.1 mn in 2004 .\nlabel the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."}]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>You are not running the flash-attention implementation, expect numerical differences.
You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset</code></pre>
</div>
</div>
<p>Interestingly, that decreases the overall accuracy by about 0.7%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T00:17:18.160494Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T00:17:18.159663Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T00:17:18.164052Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T00:17:18.163692Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T00:17:18.160493Z&quot;}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>0.932468694096601</code></pre>
</div>
</div>
<p>Compared to Prompt R, this prompt yields fewer correct <code>negative</code> and <code>positive</code> sentences. It classifies 3 more <code>neutral</code> sentences correctly, but that doesn’t make up for the loss in performance of the other two sentiments.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T00:17:18.165245Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T00:17:18.164692Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T00:17:18.261091Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T00:17:18.260416Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T00:17:18.165227Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-125-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-19"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-125-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T00:17:18.262758Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T00:17:18.262199Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T00:17:18.291122Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T00:17:18.290537Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T00:17:18.262735Z&quot;}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb187-1">df.to_csv(<span class="st" style="color: #20794D;">'/notebooks/phi-3-5_S.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="prompt-t" class="level2">
<h2 class="anchored" data-anchor-id="prompt-t">Prompt T</h2>
<p>I noticed in the Prompt R results that 14 sentences were classified as something “other” than <code>neutral</code>, <code>positive</code>, or <code>negative</code>. Instead of asking the model to respond with <code>negative</code>, <code>neutral</code> or <code>positive</code>, I’ll ask it to respond with <code>0</code>, <code>1</code> or <code>2</code> and see if that simplification yields better results.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:01.388228Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:01.387905Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:34:01.391702Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:34:01.391004Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:01.388205Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1">promptT <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).</span></span>
<span id="cb188-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb188-3"><span class="st" style="color: #20794D;">label the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral)."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:03.622214Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:03.621934Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:34:03.626463Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:34:03.625666Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:03.622197Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1"><span class="bu" style="color: null;">print</span>(promptT)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).
TEXT: {text}
label the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:22.381354Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:22.381089Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:34:22.385225Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:34:22.384293Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:22.381335Z&quot;}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:25.112835Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:25.112025Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:34:25.118805Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:34:25.118378Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:25.112833Z&quot;}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb192-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb192-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb192-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], <span class="bu" style="color: null;">str</span>(dataset[idx][<span class="st" style="color: #20794D;">'label'</span>])))</span>
<span id="cb192-4"></span>
<span id="cb192-5">examples[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>(("For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .",
  '2'),
 20)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:36.148342Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:36.147870Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T01:34:36.153188Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T01:34:36.152697Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:36.148320Z&quot;}" data-execution_count="17">
<details>
<summary>Show updated <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb194-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb194-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb194-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb194-4"></span>
<span id="cb194-5">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb194-6">    </span>
<span id="cb194-7">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb194-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb194-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb194-10">    </span>
<span id="cb194-11">    count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb194-12">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb194-13">        count <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb194-14">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb194-15">        </span>
<span id="cb194-16">        <span class="cf" style="color: #003B4F;">if</span> count <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>: <span class="bu" style="color: null;">print</span>(messages)</span>
<span id="cb194-17">        </span>
<span id="cb194-18">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb194-19">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb194-20">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb194-21">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb194-22">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb194-23">        } </span>
<span id="cb194-24"></span>
<span id="cb194-25">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb194-26">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb194-27">        </span>
<span id="cb194-28">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb194-29">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb194-30">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb194-31">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T01:34:43.182534Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T01:34:43.181702Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T02:38:46.349392Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T02:38:46.348932Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T01:34:43.182504Z&quot;}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb195-1">df <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptR_ds, promptT, examples)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"536369ac3fd9438cbdc294fff1150de8","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[{'role': 'user', 'content': "Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: For the last quarter of 2010 , Componenta 's net sales doubled to EUR131m from EUR76m for the same period a year earlier , while it moved to a zero pre-tax profit from a pre-tax loss of EUR7m .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral)."}, {'role': 'assistant', 'content': '2'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: In the third quarter of 2010 , net sales increased by 5.2 % to EUR 205.5 mn , and operating profit by 34.9 % to EUR 23.5 mn .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '2'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Operating profit rose to EUR 13.1 mn from EUR 8.7 mn in the corresponding period in 2007 representing 7.7 % of net sales .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '2'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Operating profit totalled EUR 21.1 mn , up from EUR 18.6 mn in 2007 , representing 9.7 % of net sales .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '2'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Jan. 6 -- Ford is struggling in the face of slowing truck and SUV sales and a surfeit of up-to-date , gotta-have cars .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '0'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Pharmaceuticals group Orion Corp reported a fall in its third-quarter earnings that were hit by larger expenditures on R&amp;D and marketing .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '0'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: However , the growth margin slowed down due to the financial crisis .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '0'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: 2009 3 February 2010 - Finland-based steel maker Rautaruukki Oyj ( HEL : RTRKS ) , or Ruukki , said today it slipped to a larger-than-expected pretax loss of EUR46m in the fourth quarter of 2009 from a year-earlier profit of EUR45m .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '0'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: According to Gran , the company has no plans to move all production to Russia , although that is where the company is growing .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': "Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: At the request of Finnish media company Alma Media 's newspapers , research manager Jari Kaivo-oja at the Finland Futures Research Centre at the Turku School of Economics has drawn up a future scenario for Finland 's national economy by using a model developed by the University of Denver .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral)."}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: STOCK EXCHANGE ANNOUNCEMENT 20 July 2006 1 ( 1 ) BASWARE SHARE SUBSCRIPTIONS WITH WARRANTS AND INCREASE IN SHARE CAPITAL A total of 119 850 shares have been subscribed with BasWare Warrant Program .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: A maximum of 666,104 new shares can further be subscribed for by exercising B options under the 2004 stock option plan .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Tiimari operates 194 stores in six countries -- including its core Finnish market -- and generated a turnover of 76.5 mln eur in 2005 .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Finnish Talvivaara Mining Co HEL : TLV1V said Thursday it had picked BofA Merrill Lynch and JPMorgan NYSE : JPM as joint bookrunners of its planned issue of convertible notes worth up to EUR250m USD332m .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: The mall is part of the Baltic Pearl development project in the city of St Petersburg , where Baltic Pearl CJSC , a subsidiary of Shanghai Foreign Joint Investment Company , is developing homes for 35,000 people .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Vacon controls a further 5 % of the company via investment fund Power Fund I. EUR 1.0 = USD 1.397\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: 4 ) Complete name of the shareholder : Otto Henrik Bernhard Nyberg 5 ) Further information : The amount of shares now transferred corresponds to 5.68 % of the total number of shares in Aspo Plc. .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: It has some 30 offices worldwide and more than 90 pct of its net sales are generated outside Finland .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: The contract value amounts to about EUR11m , the company added .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: The business to be divested generates consolidated net sales of EUR 60 million annually and currently has some 640 employees .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}, {'role': 'assistant', 'content': '1'}, {'role': 'user', 'content': 'Instruct: label the following TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).\nTEXT: Finnish Talentum reports its operating profit increased to EUR 20.5 mn in 2005 from EUR 9.3 mn in 2004 , and net sales totaled EUR 103.3 mn , up from EUR 96.4 mn .\nlabel the TEXT with a single integer: 0 (negative), 1 (neutral), or 2 (positive). If the amount of money is not explicitly increasing or decreasing, respond with 1 (neutral).'}]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>You are not running the flash-attention implementation, expect numerical differences.
You seem to be using the pipelines sequentially on GPU. In order to maximize efficiency please use a dataset</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T02:57:48.333200Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T02:57:48.332575Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T02:57:48.408877Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T02:57:48.408173Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T02:57:48.333177Z&quot;}" data-execution_count="32">
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb198-1">df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: dataset.features[<span class="st" style="color: #20794D;">"label"</span>].names[<span class="bu" style="color: null;">int</span>(x)])</span>
<span id="cb198-2">df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb198-3">acc <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'lm_match'</span>].mean()</span></code></pre></div>
</div>
<p>Interestingly, this decreases the overall accuracy by almost 10%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T02:57:50.436174Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T02:57:50.435549Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T02:57:50.439853Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T02:57:50.439335Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T02:57:50.436152Z&quot;}" data-execution_count="33">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb199-1">acc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>0.8453654188948306</code></pre>
</div>
</div>
<p>While there are no <code>other</code> classifications, and <code>neutral</code> true positive rate increases (1378 &gt; 1355), the rate for <code>negative</code> (232 &lt; 286) and especially <code>positive</code> (287 &lt; 467) sentiment decreases. The model classifies almost half of the <code>positive</code> sentences as <code>neutral</code>.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T02:57:53.424305Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T02:57:53.423753Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T02:57:53.513084Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T02:57:53.512420Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T02:57:53.424283Z&quot;}" data-execution_count="34">
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb201-1">make_cm(df)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-135-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-20"><img src="https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index_files/figure-html/cell-135-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
</section>
<section id="running-inference-with-the-best-prompt-multiple-times" class="level2">
<h2 class="anchored" data-anchor-id="running-inference-with-the-best-prompt-multiple-times">Running Inference with the Best Prompt Multiple Times</h2>
<p>For phi-2 I ran the best-performing prompt 10 times to see if it consistently performed at a high accuracy. Inference with phi-3.5, given the 20 examples in each prompt, takes much longer:</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.791487Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.790878Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.807315Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.806823Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.791467Z&quot;}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb202-1">exclude_idxs <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">292</span>, <span class="dv" style="color: #AD0000;">293</span>, <span class="dv" style="color: #AD0000;">294</span>, <span class="dv" style="color: #AD0000;">347</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">37</span>, <span class="dv" style="color: #AD0000;">38</span>, <span class="dv" style="color: #AD0000;">39</span>, <span class="dv" style="color: #AD0000;">40</span>, <span class="dv" style="color: #AD0000;">263</span>, <span class="dv" style="color: #AD0000;">264</span>, <span class="dv" style="color: #AD0000;">265</span>, <span class="dv" style="color: #AD0000;">266</span>, <span class="dv" style="color: #AD0000;">270</span>, <span class="dv" style="color: #AD0000;">274</span>, <span class="dv" style="color: #AD0000;">283</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.808965Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.807960Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.863705Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.863255Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.808948Z&quot;}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb203" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb203-1">promptR_ds <span class="op" style="color: #5E5E5E;">=</span> ds_subset(dataset, exclude_idxs<span class="op" style="color: #5E5E5E;">=</span>exclude_idxs, columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb203-2">promptR_ds</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Dataset({
    features: ['sentence', 'label', 'label_text', '__index_level_0__'],
    num_rows: 2244
})</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.865904Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.865196Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.872413Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.871997Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.865880Z&quot;}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb205" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb205-1">examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb205-2"><span class="cf" style="color: #003B4F;">for</span> idx <span class="kw" style="color: #003B4F;">in</span> exclude_idxs:</span>
<span id="cb205-3">    examples.append((dataset[idx][<span class="st" style="color: #20794D;">'sentence'</span>], dataset[idx][<span class="st" style="color: #20794D;">'label_text'</span>]))</span>
<span id="cb205-4"></span>
<span id="cb205-5"><span class="bu" style="color: null;">len</span>(examples)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>20</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.873663Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.873055Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.889046Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.888628Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.873646Z&quot;}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb207" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb207-1">promptP <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"""Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.</span></span>
<span id="cb207-2"><span class="st" style="color: #20794D;">TEXT: </span><span class="sc" style="color: #5E5E5E;">{text}</span></span>
<span id="cb207-3"><span class="st" style="color: #20794D;">label the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral."""</span></span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:16.890414Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:16.889758Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:16.903267Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:16.902880Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:16.890396Z&quot;}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb208" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb208-1"><span class="bu" style="color: null;">print</span>(promptP)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Instruct: label the following TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.
TEXT: {text}
label the TEXT with a single word: negative, positive, or neutral. If the amount of money is not explicitly increasing or decreasing, respond with neutral.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:19:14.300508Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:19:14.299964Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:19:14.304786Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:19:14.304229Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:19:14.300486Z&quot;}" data-execution_count="41">
<details>
<summary>Show <code>test_gen</code> function</summary>
<div class="sourceCode cell-code" id="cb210" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb210-1"><span class="kw" style="color: #003B4F;">def</span> test_gen(examples):</span>
<span id="cb210-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb210-3">    </span>
<span id="cb210-4">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb210-5">    </span>
<span id="cb210-6">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb210-7">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptP.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb210-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb210-9">        </span>
<span id="cb210-10">    messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: promptP.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>dataset[<span class="dv" style="color: #AD0000;">0</span>])}]</span>
<span id="cb210-11"></span>
<span id="cb210-12"></span>
<span id="cb210-13">    generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb210-14">        <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb210-15">        <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb210-16">        <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb210-17">        <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb210-18">    } </span>
<span id="cb210-19"></span>
<span id="cb210-20">    response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb210-21">    responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb210-22">    <span class="cf" style="color: #003B4F;">return</span> responses</span></code></pre></div>
</details>
</div>
<p>The model takes about 1.2 seconds to generate a response for a single dataset item, or about 45 minutes for the 2244 items (on a Paperspace Free-A4000). Given the 6 hour limit, the max I can do is run inference on the dataset 8 times. To be conservative, I’ll do it 7 times.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:19:20.396441Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:19:20.396171Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:20:44.274870Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:20:44.274234Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:19:20.396423Z&quot;}" data-execution_count="42">
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb211-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">10</span> test_gen(examples)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.2 s ± 14.5 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T03:30:23.465527Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T03:30:23.465270Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T03:30:23.470717Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T03:30:23.470270Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T03:30:23.465509Z&quot;}" data-execution_count="14">
<details>
<summary>Show <code>few_shot_responses</code> function</summary>
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb213-1"><span class="kw" style="color: #003B4F;">def</span> few_shot_responses(dataset, prompt, examples):</span>
<span id="cb213-2">    responses <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb213-3">    dataset <span class="op" style="color: #5E5E5E;">=</span> dataset.<span class="bu" style="color: null;">map</span>(add_prompt, fn_kwargs<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"prompt"</span>: prompt})</span>
<span id="cb213-4"></span>
<span id="cb213-5">    few_shot_examples <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb213-6">    </span>
<span id="cb213-7">    <span class="cf" style="color: #003B4F;">for</span> example <span class="kw" style="color: #003B4F;">in</span> examples:</span>
<span id="cb213-8">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: prompt.<span class="bu" style="color: null;">format</span>(text<span class="op" style="color: #5E5E5E;">=</span>example[<span class="dv" style="color: #AD0000;">0</span>])})</span>
<span id="cb213-9">        few_shot_examples.append({<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"assistant"</span>, <span class="st" style="color: #20794D;">"content"</span>: example[<span class="dv" style="color: #AD0000;">1</span>]})</span>
<span id="cb213-10">    </span>
<span id="cb213-11">    <span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> dataset:</span>
<span id="cb213-12">        messages <span class="op" style="color: #5E5E5E;">=</span> few_shot_examples <span class="op" style="color: #5E5E5E;">+</span> [{<span class="st" style="color: #20794D;">"role"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"content"</span>: row[<span class="st" style="color: #20794D;">'prompt'</span>]}]</span>
<span id="cb213-13">        </span>
<span id="cb213-14">        generation_args <span class="op" style="color: #5E5E5E;">=</span> { </span>
<span id="cb213-15">            <span class="st" style="color: #20794D;">"max_new_tokens"</span>: <span class="dv" style="color: #AD0000;">2</span>, </span>
<span id="cb213-16">            <span class="st" style="color: #20794D;">"return_full_text"</span>: <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb213-17">            <span class="st" style="color: #20794D;">"temperature"</span>: <span class="fl" style="color: #AD0000;">0.1</span>, </span>
<span id="cb213-18">            <span class="st" style="color: #20794D;">"do_sample"</span>: <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb213-19">        } </span>
<span id="cb213-20"></span>
<span id="cb213-21">        response <span class="op" style="color: #5E5E5E;">=</span> pipe(messages, <span class="op" style="color: #5E5E5E;">**</span>generation_args) </span>
<span id="cb213-22">        responses.append(response[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'generated_text'</span>].strip().lower())</span>
<span id="cb213-23">        </span>
<span id="cb213-24">    <span class="co" style="color: #5E5E5E;"># calculate accuracy</span></span>
<span id="cb213-25">    df <span class="op" style="color: #5E5E5E;">=</span> dataset.to_pandas()</span>
<span id="cb213-26">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Series(responses)</span>
<span id="cb213-27">    df[<span class="st" style="color: #20794D;">'responses'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'responses'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="cf" style="color: #003B4F;">if</span> x <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'negative'</span>, <span class="st" style="color: #20794D;">'positive'</span>, <span class="st" style="color: #20794D;">'neutral'</span>] <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"other"</span>)</span>
<span id="cb213-28">    df[<span class="st" style="color: #20794D;">'lm_match'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'label_text'</span>] <span class="op" style="color: #5E5E5E;">==</span> df[<span class="st" style="color: #20794D;">'responses'</span>]</span>
<span id="cb213-29">    acc <span class="op" style="color: #5E5E5E;">=</span> df.lm_match.mean()</span>
<span id="cb213-30">    <span class="cf" style="color: #003B4F;">return</span> df, acc</span></code></pre></div>
</details>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb214" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb214-1">accs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb214-2"><span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">7</span>):</span>
<span id="cb214-3">    df, acc <span class="op" style="color: #5E5E5E;">=</span> few_shot_responses(promptR_ds, promptP, examples)</span>
<span id="cb214-4">    accs.append(acc)</span></code></pre></div>
</div>
<p>The accuracy of this prompt is consistently around 93.9%.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2024-09-12T14:12:47.911188Z&quot;,&quot;iopub.status.busy&quot;:&quot;2024-09-12T14:12:47.910833Z&quot;,&quot;iopub.status.idle&quot;:&quot;2024-09-12T14:12:47.936470Z&quot;,&quot;shell.execute_reply&quot;:&quot;2024-09-12T14:12:47.935054Z&quot;,&quot;shell.execute_reply.started&quot;:&quot;2024-09-12T14:12:47.911161Z&quot;}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb215-1">pd.Series(accs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>count    7.000000
mean     0.939139
std      0.000992
min      0.937611
25%      0.938503
50%      0.939394
75%      0.939840
max      0.940285
dtype: float64</code></pre>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Here is a summary of results including phi-2, phi-3, and the Claude family:</p>
<table class="table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model</th>
<th style="text-align: center;">Prompting Strategy</th>
<th style="text-align: center;">Overall Accuracy</th>
<th style="text-align: center;"><code>negative</code></th>
<th style="text-align: center;"><code>neutral</code></th>
<th style="text-align: center;"><code>positive</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">claude-3-5-sonnet-20240620</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">94.78%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">94% (1302/1391)</td>
<td style="text-align: center;">95% (544/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">claude-3-opus-20240229</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">94.13%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">96% (1333/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">phi-3.5</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">93.94%</td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-3</td>
<td style="text-align: center;">30-Shot w/System Prompt</td>
<td style="text-align: center;">92.79%</td>
<td style="text-align: center;">98% (290/297)</td>
<td style="text-align: center;">94% (1284/1373)</td>
<td style="text-align: center;">88% (499/564)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">claude-3-haiku-20240307</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">92.39%</td>
<td style="text-align: center;">90% (272/303)</td>
<td style="text-align: center;">91% (1267/1391)</td>
<td style="text-align: center;">96% (550/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">phi-2</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">91.94%</td>
<td style="text-align: center;">88% (267/302)</td>
<td style="text-align: center;">94% (1299/1387)</td>
<td style="text-align: center;">90% (510/569)</td>
</tr>
</tbody>
</table>
<p>Here are the per-prompt results from this notebook (phi-3.5):</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">prompt</th>
<th style="text-align: center;">strategy</th>
<th style="text-align: center;">accuracy</th>
<th style="text-align: center;">negative</th>
<th style="text-align: center;">neutral</th>
<th style="text-align: center;">positive</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">A</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">62.32%</td>
<td style="text-align: center;">98% (296/303)</td>
<td style="text-align: center;">43% (592/1391)</td>
<td style="text-align: center;">92% (523/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">B</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">88.60%</td>
<td style="text-align: center;">96% (290/303)</td>
<td style="text-align: center;">87% (1215/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">C</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">83.48%</td>
<td style="text-align: center;">98% (298/303)</td>
<td style="text-align: center;">76% (1062/1391)</td>
<td style="text-align: center;">93% (530/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">D</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">68.64%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">51% (713/1391)</td>
<td style="text-align: center;">95% (541/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">E</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">88.25%</td>
<td style="text-align: center;">96% (290/303)</td>
<td style="text-align: center;">87% (1207/1391)</td>
<td style="text-align: center;">88% (501/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">F</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">84.65%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">77% (1070/1390)</td>
<td style="text-align: center;">96% (548/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">G</td>
<td style="text-align: center;">6-Shot</td>
<td style="text-align: center;">77.99%</td>
<td style="text-align: center;">98% (297/302)</td>
<td style="text-align: center;">66% (913/1387)</td>
<td style="text-align: center;">97% (551/569)</td>
</tr>
<tr class="even">
<td style="text-align: center;">H</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">83.06%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">74% (1028/1390)</td>
<td style="text-align: center;">97% (554/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">I</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">51.61%</td>
<td style="text-align: center;"><u><strong>100% (302/302)</strong></u></td>
<td style="text-align: center;">32% (447/1390)</td>
<td style="text-align: center;">73% (418/569)</td>
</tr>
<tr class="even">
<td style="text-align: center;">J</td>
<td style="text-align: center;">3-Shot</td>
<td style="text-align: center;">85.94%</td>
<td style="text-align: center;">98% (296/302)</td>
<td style="text-align: center;">80% (1108/1390)</td>
<td style="text-align: center;">95% (539/569)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">K</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">77.96%</td>
<td style="text-align: center;">98% (298/303)</td>
<td style="text-align: center;">66% (919/1391)</td>
<td style="text-align: center;">96% (548/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">L</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">80.57%</td>
<td style="text-align: center;">98% (297/303)</td>
<td style="text-align: center;">70% (972/1391)</td>
<td style="text-align: center;"><u><strong>97% (555/570)</strong></u></td>
</tr>
<tr class="odd">
<td style="text-align: center;">M</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">91.30%</td>
<td style="text-align: center;">97% (294/303)</td>
<td style="text-align: center;">90% (1257/1391)</td>
<td style="text-align: center;">91% (516/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">N</td>
<td style="text-align: center;">0-Shot w/System Prompt</td>
<td style="text-align: center;">88.74%</td>
<td style="text-align: center;">97% (295/303)</td>
<td style="text-align: center;">85% (1184/1391)</td>
<td style="text-align: center;">93% (530/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">O</td>
<td style="text-align: center;">0-Shot w/System Prompt</td>
<td style="text-align: center;">87.10%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">83% (1156/1391)</td>
<td style="text-align: center;">93% (531/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;">P</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">92.23%</td>
<td style="text-align: center;">94% (285/303)</td>
<td style="text-align: center;">94% (1307/1391)</td>
<td style="text-align: center;">87% (496/570)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Q</td>
<td style="text-align: center;">0-Shot</td>
<td style="text-align: center;">79.37%</td>
<td style="text-align: center;">99% (300/303)</td>
<td style="text-align: center;">73% (1009/1391)</td>
<td style="text-align: center;">86% (488/570)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><u><strong>R</strong></u></td>
<td style="text-align: center;"><u><strong>20-Shot</strong></u></td>
<td style="text-align: center;"><u><strong>93.94%</strong></u></td>
<td style="text-align: center;">96% (286/299)</td>
<td style="text-align: center;">98% (1355/1379)</td>
<td style="text-align: center;">83% (467/566)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">S</td>
<td style="text-align: center;">28-Shot</td>
<td style="text-align: center;">93.25%</td>
<td style="text-align: center;">94% (281/298)</td>
<td style="text-align: center;">99% (1358/1373)</td>
<td style="text-align: center;">79% (446/565)</td>
</tr>
<tr class="even">
<td style="text-align: center;">T</td>
<td style="text-align: center;">20-Shot</td>
<td style="text-align: center;">84.54%</td>
<td style="text-align: center;">78% (232/299)</td>
<td style="text-align: center;"><u><strong>99.9% (1378/1379)</strong></u></td>
<td style="text-align: center;">51% (287/566)</td>
</tr>
</tbody>
</table>
<p>I ran inference for phi-3 and phi-3.5 in separate notebooks at the same time, so I have shared final thoughts for both:</p>
<ul>
<li><strong>Few-shot prompting in a chat format is a different experience</strong>: The sentence/label pairs have to be presented as a multi-turn conversation. For a large number of examples, this can lead to running out of GPU memory (as it did for 30-Shot prompting with phi-3.5).</li>
<li><strong>Few-shot example proportion matters</strong>: I used a higher proportion of neutral examples in my 20-shot prompt since the majority of the dataset is made up of <code>neutral</code> sentences. Determining whether the proportion I used is optimal would require further experimentation.</li>
<li><strong>20-Shot phi-3.5 approaches Opus, Sonnet and GPT4 accuracy</strong>: I was pleasantly surprised that phi-3.5 reached the 94% mark that was achieved by GPT4 (<a href="https://huggingface.co/blog/synthetic-data-save-costs">in the original work</a> by Moritz Laurer), and 3-Opus and 3.5-Sonnet in <a href="https://vishalbakshi.github.io/blog/posts/2024-08-29-tinysentiment-claude-experiments/">my previous experiments</a>.</li>
<li><strong>The best performing prompt suffers from a low true positive rate for <code>positive</code> sentiments</strong>: Although the 20-Shot phi-3.5 prompt achieved a high true positive rate (TPR) for <code>neutral</code> sentences (96%), it had one of the lowest TPRs for <code>positive</code> sentences (83%). It’s unclear if this is due to the imbalance between <code>positive</code> and <code>neutral</code> examples, since the TPR for <code>negative</code> sentiment is high (98%) despite having the same number of examples (4) as <code>positive</code>.</li>
<li><strong>phi-3 performed differently than phi-3.5</strong>: phi-3 performed well with a system prompt while phi-3.5 did not. On the other hand, phi-3.5 performed better with 0-Shot prompting than phi-3 (results not shown here).</li>
<li><strong>Future work</strong>: My next step is to run inference on this dataset using the Qwen2-1.5B model. After that, I’ll analyze the errors, especially for sentences that a majority of models classified incorrectly. With prompt engineering, there is potentially unlimited future work. Before I finish this project, I’ll try 30-Shot prompts for phi-2 and Haiku to see if they can beat phi-3’s 92.79% overall accuracy (and maybe even phi-3.5’s 93.94% accuracy).</li>
</ul>
<p>I hope you enjoyed this blog post! Follow me on Twitter <a href="https://twitter.com/vishal_learner"><span class="citation" data-cites="vishal_learner">@vishal_learner</span></a>.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>LLM</category>
  <category>TinySentiment</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2024-09-12-tinysentiment-phi-3-5-sentiment-classification/index.html</guid>
  <pubDate>Thu, 12 Sep 2024 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
