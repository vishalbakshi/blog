<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Vishal Bakshi&#39;s Blog</title>
<link>https://vishalbakshi.github.io/blog/index.html</link>
<atom:link href="https://vishalbakshi.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Machine Learning blog by Vishal Bakshi</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Tue, 13 May 2025 07:00:00 GMT</lastBuildDate>
<item>
  <title>DataInspector with BinPackCollator: Inspecting Packed Dataloader Items</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<iframe width="560" height="315" src="https://www.youtube.com/embed/DUwJ9o-Ut5g?si=G8QiwIx_Y7W_LRZF" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<p>I recently learned (via a desperation google search “llm foundry sequence packing”) that LLM-Foundry has a built-in sequence packer called <a href="https://github.com/mosaicml/llm-foundry/blob/dedcfe3b760b847091642526e9fb303f39742a51/llmfoundry/data/packing.py#L24"><code>BinPackCollator</code></a>. To use it, you simply set two values in the training YAML: <code>train_loader.name=finetuning</code> and <code>train_loader.dataset.packing_ratio</code> to <code>auto</code> or a number greater than <code>1.0</code>. I haven’t fully/thoroughly understood/traced how <code>BinPackCollator</code> is activated, but here’s what I have found:</p>
<ul>
<li><a href="https://github.com/mosaicml/llm-foundry/blob/7993aebe3207aae60aed0aab2a107e0114410e83/llmfoundry/data/finetuning/dataloader.py#L668"><code>build_collate_fn</code></a> uses the <code>packing_ratio</code> config value. If <code>packing_ratio</code> is <code>1.0</code> it returns the <code>Seq2SeqFinetuningCollator</code>. If it’s <code>auto</code>, it calls the function <a href="https://github.com/mosaicml/llm-foundry/blob/dedcfe3b760b847091642526e9fb303f39742a51/llmfoundry/data/packing.py#L364"><code>auto_packing_ratio</code></a> which profiles the dataset to determine the optimal <code>packing_ratio</code> (a <code>packing_ratio</code> with zero waste). If <code>packing_ratio</code> is greater than <code>1.0</code>, it then <a href="https://github.com/mosaicml/llm-foundry/blob/7993aebe3207aae60aed0aab2a107e0114410e83/llmfoundry/data/finetuning/dataloader.py#L705">instantiates <code>BinPackCollator</code></a> as the <code>collate_fn</code>.</li>
<li><a href="https://github.com/mosaicml/llm-foundry/blob/7993aebe3207aae60aed0aab2a107e0114410e83/llmfoundry/data/finetuning/dataloader.py#L235"><code>build_finetuning_dataloader</code></a> constructs the <code>collate_fn</code> from <code>registry.collators</code> (tbh, I haven’t yet grasped the concept of registry and how it works in LLM-Foundry, on my to-do list).</li>
<li>The main training script, command_utils/train.py <a href="https://github.com/mosaicml/llm-foundry/blob/7993aebe3207aae60aed0aab2a107e0114410e83/llmfoundry/command_utils/train.py#L461">uses <code>build_dataloader</code></a> which takes the training loader config and uses <a href="https://github.com/mosaicml/llm-foundry/blob/7993aebe3207aae60aed0aab2a107e0114410e83/llmfoundry/data/dataloader.py#L32">the <code>name</code> attribute in the config (which is <code>finetuning</code> in our case)</a> to <code>construct_from_registry</code> which I do not understand how it works yet.</li>
</ul>
<p>Here’s an example YAML snippet which shows the necessary attributes (<code>name</code> and <code>packing_ratio</code>) to utilize <code>BinPackCollator</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;">train_loader</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-2"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">name</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> finetuning</span></span>
<span id="cb1-3"><span class="at" style="color: #657422;">  </span><span class="fu" style="color: #4758AB;">dataset</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">streams</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;">      </span><span class="fu" style="color: #4758AB;">my_data</span><span class="kw" style="color: #003B4F;">:</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">local</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${variables.data_local}</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">remote</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${variables.data_remote}</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;">        </span><span class="fu" style="color: #4758AB;">split</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> train</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">shuffle</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">max_seq_len</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${variables.max_seq_len}</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">shuffle_seed</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> ${variables.global_seed}</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">decoder_only_format</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="ch" style="color: #20794D;">true</span></span>
<span id="cb1-13"><span class="at" style="color: #657422;">    </span><span class="fu" style="color: #4758AB;">packing_ratio</span><span class="kw" style="color: #003B4F;">:</span><span class="at" style="color: #657422;"> </span><span class="fl" style="color: #AD0000;">5.0</span></span></code></pre></div>
<p>In this blog post, I’m going to share a custom Composer callback I wrote to inspect data during training and ensure that sequences are being packed!</p>
</section>
<section id="datainspector" class="level2">
<h2 class="anchored" data-anchor-id="datainspector"><code>DataInspector</code></h2>
<p>I’ll start by sharing the full code for my callback:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> DataInspector(Callback):</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, save_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/model-checkpoints/binpackcollator"</span>):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">=</span> Path(save_path)</span>
<span id="cb2-4">        <span class="va" style="color: #111111;">self</span>.log <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'log'</span>: {}}</span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;">def</span> after_dataloader(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-7">        <span class="va" style="color: #111111;">self</span>._log(</span>
<span id="cb2-8">            state, </span>
<span id="cb2-9">            <span class="st" style="color: #20794D;">"after_dataloader"</span>, </span>
<span id="cb2-10">            <span class="bu" style="color: null;">str</span>(state.timestamp.batch.value), </span>
<span id="cb2-11">            [</span>
<span id="cb2-12">                (<span class="st" style="color: #20794D;">'collate_fn'</span>, <span class="bu" style="color: null;">str</span>(state.dataloader.collate_fn.base_collator)),</span>
<span id="cb2-13">                (<span class="st" style="color: #20794D;">'input_ids_shape'</span>, <span class="bu" style="color: null;">str</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>].shape)), </span>
<span id="cb2-14">                (<span class="st" style="color: #20794D;">'total_tokens'</span>, <span class="bu" style="color: null;">str</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>].shape[<span class="dv" style="color: #AD0000;">1</span>])),</span>
<span id="cb2-15">                (<span class="st" style="color: #20794D;">'decoded_tokens'</span>, <span class="bu" style="color: null;">str</span>(state.model.tokenizer.decode(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>]))),</span>
<span id="cb2-16">                (<span class="st" style="color: #20794D;">'padding_tokens'</span>, <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">len</span>([o <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>]) <span class="cf" style="color: #003B4F;">if</span> o.item() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>]))),</span>
<span id="cb2-17">                (<span class="st" style="color: #20794D;">'non_padding_tokens'</span>, <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">len</span>([o <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>]) <span class="cf" style="color: #003B4F;">if</span> o.item() <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>]))),</span>
<span id="cb2-18">                (<span class="st" style="color: #20794D;">'input_ids[0]'</span>, <span class="bu" style="color: null;">str</span>(<span class="bu" style="color: null;">list</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>]))),</span>
<span id="cb2-19">                </span>
<span id="cb2-20">            ])</span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="kw" style="color: #003B4F;">def</span> _log(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>, batch_num: <span class="bu" style="color: null;">str</span>, values: <span class="bu" style="color: null;">list</span>[<span class="bu" style="color: null;">str</span>]) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-23">        <span class="cf" style="color: #003B4F;">for</span> label, value <span class="kw" style="color: #003B4F;">in</span> values: <span class="va" style="color: #111111;">self</span>.log[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>batch_num<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>label<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>] <span class="op" style="color: #5E5E5E;">=</span> value</span>
<span id="cb2-24">        <span class="va" style="color: #111111;">self</span>._save()</span>
<span id="cb2-25"></span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;">def</span> _save(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-27">        os.makedirs(<span class="va" style="color: #111111;">self</span>.save_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-28">        log_file <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">/</span> <span class="st" style="color: #20794D;">"datainspector_logs.json"</span></span>
<span id="cb2-29">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(log_file, <span class="st" style="color: #20794D;">'w'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb2-30">            json.dump(<span class="va" style="color: #111111;">self</span>.log, f, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<p>I started testing the callback by writing a very basic version first:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> DataInspector(Callback):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, save_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/model-checkpoints/binpackcollator"</span>):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">=</span> Path(save_path)</span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.log <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'log'</span>: {}}</span>
<span id="cb3-5"></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;">def</span> after_dataloader(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-7">        <span class="va" style="color: #111111;">self</span>._log(state, <span class="st" style="color: #20794D;">"after_dataloader"</span>, <span class="st" style="color: #20794D;">"some value"</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9">    <span class="kw" style="color: #003B4F;">def</span> _log(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>, value: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-10">        <span class="va" style="color: #111111;">self</span>.log[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>] <span class="op" style="color: #5E5E5E;">=</span> value</span>
<span id="cb3-11">        <span class="va" style="color: #111111;">self</span>._save()</span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;">def</span> _save(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-14">        os.makedirs(<span class="va" style="color: #111111;">self</span>.save_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb3-15">        log_file <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">/</span> <span class="st" style="color: #20794D;">"datainspector_logs.json"</span></span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(log_file, <span class="st" style="color: #20794D;">'w'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb3-17">            json.dump(<span class="va" style="color: #111111;">self</span>.log, f, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<p>The <code>__init__</code> and <code>_save</code> methods are pretty straigtforward, as they instantiate the <code>save_path</code> and <code>log</code> and then save to the <code>log</code> at that <code>save_path</code>. I could have chosen any number of events to trigger logging, but I chose <code>after_loader</code> since I wanted to inspect the data after the dataloader was constructed. The <code>_log</code> basically takes in as input the strings you want to save in the <code>self.log</code> dictionary. Once this initial functionality was working, I added different items for logging one at a time, starting with <code>input_ids</code>, <code>non_padding_tokens</code> and <code>padding_tokens</code> (which are counts of tokens), inspecting the logs visually before I moved on to the next item. Along the way I learned that the dataloader’s <code>collate_fn</code> was <code>LossGeneratingTokensCollatorWrapper</code> and that its <code>base_collator</code> function was <code>BinPackCollator</code>.</p>
<p>Here’s a snippet of the log:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb4-1"><span class="er" style="color: #AD0000;">"log":</span> <span class="fu" style="color: #4758AB;">{</span></span>
<span id="cb4-2">    <span class="dt" style="color: #AD0000;">"after_dataloader_0_collate_fn"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"&lt;llmfoundry.data.packing.BinPackCollator object at 0x2ad36237cc20&gt;"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb4-3">    <span class="dt" style="color: #AD0000;">"after_dataloader_0_input_ids_shape"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"torch.Size([4, 2048])"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb4-4">    <span class="dt" style="color: #AD0000;">"after_dataloader_0_total_tokens"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"2048"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb4-5">    <span class="dt" style="color: #AD0000;">"after_dataloader_0_padding_tokens"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"102"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb4-6">    <span class="dt" style="color: #AD0000;">"after_dataloader_0_non_padding_tokens"</span><span class="fu" style="color: #4758AB;">:</span> <span class="st" style="color: #20794D;">"1946"</span><span class="fu" style="color: #4758AB;">,</span></span>
<span id="cb4-7">    <span class="er" style="color: #AD0000;">...</span></span></code></pre></div>
<p>Here are screenshots of the actual log, first <strong>without</strong> using <code>BinPackCollator</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="log without using BinPackCollator. Note that the number of padding tokens represent ~90% of the max sequence length of 2048" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">log without using <code>BinPackCollator</code>. Note that the number of padding tokens represent ~90% of the max sequence length of 2048</figcaption><p></p>
</figure>
</div>
<p>And with using <code>BinPackCollator</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" title="log when using BinPackCollator. Now the non-padding token represent 90% of the sequence length" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">log when using <code>BinPackCollator</code>. Now the non-padding token represent 90% of the sequence length</figcaption><p></p>
</figure>
</div>
<p>Using <code>BinPackCollator</code>, we are now using more than 90% of the maximum sequence length with loss generating tokens!</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>This is the fourth or fifth custom Composer callback I’ve written and I am really enjoyin writing and using them! The callback system makes it so easy to “look at your data”, and visually inspect and confirm that the model and/or data artifacts are correct. Expect more blog posts around Composer callbacks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="ChatGPT generated graphic for `DataInspector`.png" class="lightbox" title="3.png" data-gallery="quarto-lightbox-gallery-3"><img src="https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/ChatGPT generated graphic for `DataInspector`.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">3.png</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>LLM-Foundry</category>
  <category>Custom Composer Callback</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/index.html</guid>
  <pubDate>Tue, 13 May 2025 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-05-13-DataInspector-BinPackCollator/1.png" medium="image" type="image/png" height="85" width="144"/>
</item>
<item>
  <title>Comparing RAGatouille and ColBERT Indexes and Search Results</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-10-RAGatouille-ColBERT-Comparisons/index.html</link>
  <description><![CDATA[ 



<div class="cell">
<details>
<summary>Show setup</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> faiss</span>
<span id="cb1-2"><span class="bu" style="color: null;">hasattr</span>(faiss, <span class="st" style="color: #20794D;">"StandardGpuResources"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> pytrec_eval</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> evaluate</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> Qrels, Run</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> pickle</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb1-12"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-13"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-14"><span class="im" style="color: #00769E;">import</span> srsly</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="im" style="color: #00769E;">from</span> colbert <span class="im" style="color: #00769E;">import</span> Indexer</span>
<span id="cb1-17"><span class="im" style="color: #00769E;">from</span> colbert.infra <span class="im" style="color: #00769E;">import</span> RunConfig, ColBERTConfig</span>
<span id="cb1-18"><span class="im" style="color: #00769E;">from</span> colbert.infra.run <span class="im" style="color: #00769E;">import</span> Run</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="im" style="color: #00769E;">from</span> colbert.data <span class="im" style="color: #00769E;">import</span> Queries</span>
<span id="cb1-21"><span class="im" style="color: #00769E;">from</span> colbert <span class="im" style="color: #00769E;">import</span> Searcher</span></code></pre></div>
</details>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I am trying to answer two questions:</p>
<ol type="1">
<li>For a given document collection and indexing configuration, do RAGatouille and ColBERT produce the same index?</li>
<li>For a given index and search configuration, do RAGatouille and ColBERT retrieve the same passages/Recall@10?</li>
</ol>
<p>For this exercise, I’m using the UKPLab/DAPR’s ConditionalQA document collection which is 69k rows. If this exercise is successful, I’ll scale to larger document collections.</p>
<p>Here’s my rough plan:</p>
<ol type="1">
<li>Index the ConditionalQA document collection using RAGatouille and ColBERT. Be very thorough in ensuring the same configuration values are used.</li>
<li>Compare artifacts of the index (json and pt files). Document differences.</li>
<li>If successful, I would expect both indexes to largely be identical. If not, that’s a deeper dive.</li>
<li>Assuming successful equality of indexes, I’ll then perform search on the index using each framework, and compare retrieved passages and Recall@10. Initially, I’ll use RAGatouille search on the RAGatouille index, and ColBERT search on the ColBERT index. If that goes well, I might use one framework to search on the other’s index. RAGatouille requires some additional files so I’ll likely have to create them manually from the ColBERT index artifacts.</li>
<li>If I get similar Recall@10 and retrieved passages, great! If not, that’s a deeper dive.</li>
</ol>
</section>
<section id="load-the-data" class="level2">
<h2 class="anchored" data-anchor-id="load-the-data">Load the Data</h2>
<div class="cell" data-execution_count="150">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"ConditionalQA"</span></span>
<span id="cb2-2">dataset_name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="150">
<pre><code>'ConditionalQA'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="292">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb4-2">queries <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-queries"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb4-3">qrels_rows <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-qrels"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span></code></pre></div>
</div>
</section>
<section id="create-ragatouille-index-1k-subset" class="level2">
<h2 class="anchored" data-anchor-id="create-ragatouille-index-1k-subset">Create RAGatouille Index (1k subset)</h2>
<div class="cell" data-execution_count="152">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="153">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n_items <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb6-2">n_items</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="153">
<pre><code>1000</code></pre>
</div>
</div>
<p>Notes about <code>RAG.model.config</code> before indexing:</p>
<ul>
<li>The following values are <code>None</code>: <code>ncells</code>, <code>centroid_score_threshold</code>, <code>ndocs</code></li>
<li><code>kmeans_niters=4</code></li>
<li><code>nbits=1</code></li>
<li><code>index_bsize=64</code></li>
<li><code>bsize=32</code></li>
<li><code>dim=96</code></li>
<li><code>doc_maxlen=300</code></li>
<li><code>rank=0</code></li>
<li><code>nranks=4</code></li>
<li><code>gpus=4</code></li>
</ul>
<div class="cell" data-execution_count="154">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">RAG.model.config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="154">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=None, centroid_score_threshold=None, ndocs=None, load_index_with_mmap=False, index_path=None, index_bsize=64, nbits=1, kmeans_niters=4, resume=False, pool_factor=1, clustering_mode='hierarchical', protected_tokens=0, similarity='cosine', bsize=32, accumsteps=1, lr=1e-05, maxsteps=15626, save_every=None, warmup=781, warmup_bert=None, relu=False, nway=32, use_ib_negatives=False, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name='answerdotai/AnswerAI-ColBERTv2.5-small', query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=96, doc_maxlen=300, mask_punctuation=True, checkpoint='/home/vishal/.cache/huggingface/hub/models--answerdotai--answerai-colbert-small-v1/snapshots/be1703c55532145a844da800eea4c9a692d7e267/', triples='/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl', collection='/home/bclavie/colbertv2.5_en/data/msmarco/collection.tsv', queries='/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv', index_name=None, overwrite=False, root='.ragatouille/', experiment='colbert', index_root=None, name='2024-08/07/08.16.20', rank=0, nranks=4, amp=True, gpus=4, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="155">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;">#!rm -rf .ragatouille/colbert/indexes/ConditionalQA_RAGatouille_index_1k</span></span></code></pre></div>
</div>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">RAG_index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb11-2">    index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_RAGatouille_index_1k"</span>,</span>
<span id="cb11-3">    collection<span class="op" style="color: #5E5E5E;">=</span>passages[:n_items][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb11-4">    document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:n_items][<span class="st" style="color: #20794D;">"_id"</span>],</span>
<span id="cb11-5">    use_faiss<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> <span class="co" style="color: #5E5E5E;"># to match ColBERT</span></span>
<span id="cb11-6">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="157">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;">!</span>du <span class="op" style="color: #5E5E5E;">-</span>sh {RAG_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.2M    .ragatouille/colbert/indexes/ConditionalQA_RAGatouille_index_1k</code></pre>
</div>
</div>
<div class="cell" data-execution_count="158">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="op" style="color: #5E5E5E;">!</span>ls {RAG_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.codes.pt   avg_residual.pt  collection.json  metadata.json
0.metadata.json  buckets.pt   doclens.0.json   pid_docid_map.json
0.residuals.pt   centroids.pt     ivf.pid.pt       plan.json</code></pre>
</div>
</div>
<p>Notes about <code>metadata.json</code> <em>after</em> indexing:</p>
<ul>
<li>The following values are still <code>None</code>: <code>ncells</code>, <code>centroid_score_threshold</code>, <code>ndocs</code></li>
<li><code>kmeans_niters=20</code> (up from 4)</li>
<li><code>nbits=4</code> (up from 1)</li>
<li><code>index_bsize=64</code></li>
<li><code>bsize=64</code> (up from 32)</li>
<li><code>dim=96</code></li>
<li><code>doc_maxlen=256</code> (down from 300)</li>
<li><code>rank=0</code></li>
<li><code>nranks=1</code> (down from 4)</li>
<li><code>gpus=1</code> (down from 4)</li>
<li><code>'num_partitions'=1024</code> (not in original config)</li>
</ul>
<p>Inspecting the RAGatouille metadata:</p>
<div class="cell" data-scrolled="true" data-execution_count="159">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/metadata.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb16-2">    RAG_metadata <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb16-3">RAG_metadata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="159">
<pre><code>{'config': {'query_token_id': '[unused0]',
  'doc_token_id': '[unused1]',
  'query_token': '[Q]',
  'doc_token': '[D]',
  'ncells': None,
  'centroid_score_threshold': None,
  'ndocs': None,
  'load_index_with_mmap': False,
  'index_path': None,
  'index_bsize': 32,
  'nbits': 4,
  'kmeans_niters': 20,
  'resume': False,
  'pool_factor': 1,
  'clustering_mode': 'hierarchical',
  'protected_tokens': 0,
  'similarity': 'cosine',
  'bsize': 64,
  'accumsteps': 1,
  'lr': 1e-05,
  'maxsteps': 15626,
  'save_every': None,
  'warmup': 781,
  'warmup_bert': None,
  'relu': False,
  'nway': 32,
  'use_ib_negatives': False,
  'reranker': False,
  'distillation_alpha': 1.0,
  'ignore_scores': False,
  'model_name': 'answerdotai/AnswerAI-ColBERTv2.5-small',
  'query_maxlen': 32,
  'attend_to_mask_tokens': False,
  'interaction': 'colbert',
  'dim': 96,
  'doc_maxlen': 256,
  'mask_punctuation': True,
  'checkpoint': 'answerdotai/answerai-colbert-small-v1',
  'triples': '/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl',
  'collection': ['list with 1000 elements starting with...',
   ['Overview',
    'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
    'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.']],
  'queries': '/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv',
  'index_name': 'ConditionalQA_RAGatouille_index_1k',
  'overwrite': False,
  'root': '.ragatouille/',
  'experiment': 'colbert',
  'index_root': None,
  'name': '2025-05/09/10.30.23',
  'rank': 0,
  'nranks': 1,
  'amp': True,
  'gpus': 1,
  'avoid_fork_if_possible': False},
 'num_chunks': 1,
 'num_partitions': 1024,
 'num_embeddings': 15198,
 'avg_doclen': 15.198,
 'RAGatouille': {'index_config': {'index_type': 'PLAID',
   'index_name': 'ConditionalQA_RAGatouille_index_1k'}}}</code></pre>
</div>
</div>
<table class="table">
<colgroup>
<col style="width: 22%">
<col style="width: 32%">
<col style="width: 30%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>Parameter</th>
<th>Before Indexing</th>
<th>After Indexing</th>
<th>Impact</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>kmeans_niters</code></td>
<td>4</td>
<td>20</td>
<td>5× more iterations for clustering</td>
</tr>
<tr class="even">
<td><code>nbits</code></td>
<td>1</td>
<td>4</td>
<td>4× more bits for residual compression</td>
</tr>
<tr class="odd">
<td><code>bsize</code></td>
<td>32</td>
<td>64</td>
<td>Doubled batch size</td>
</tr>
<tr class="even">
<td><code>doc_maxlen</code></td>
<td>300</td>
<td>256</td>
<td>Reduced document length limit</td>
</tr>
<tr class="odd">
<td><code>nranks</code></td>
<td>4</td>
<td>1</td>
<td>Changed to single-process execution</td>
</tr>
<tr class="even">
<td><code>gpus</code></td>
<td>4</td>
<td>1</td>
<td>Changed to single-GPU execution</td>
</tr>
<tr class="odd">
<td><code>num_partitions</code></td>
<td>(not set)</td>
<td>1024</td>
<td>New parameter added during indexing</td>
</tr>
</tbody>
</table>
<p>The following are search parameters so they are not set/used for indexing: <code>ncells</code>, <code>centroid_score_threshold</code>, <code>ndocs</code>.</p>
</section>
<section id="create-vanilla-colbert-index-1k-subset" class="level2">
<h2 class="anchored" data-anchor-id="create-vanilla-colbert-index-1k-subset">Create Vanilla ColBERT Index (1k subset)</h2>
<p>Next, I’ll index the same document collection using vanilla ColBERT (which is installed with RAGatouille).</p>
<div class="cell" data-execution_count="160">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">dataset_name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="160">
<pre><code>'ConditionalQA'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="161">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ColBERTConfig()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="161">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=None, centroid_score_threshold=None, ndocs=None, load_index_with_mmap=False, index_path=None, index_bsize=64, nbits=1, kmeans_niters=4, resume=False, pool_factor=1, clustering_mode='hierarchical', protected_tokens=0, similarity='cosine', bsize=32, accumsteps=1, lr=3e-06, maxsteps=500000, save_every=None, warmup=None, warmup_bert=None, relu=False, nway=2, use_ib_negatives=False, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name=None, query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=128, doc_maxlen=220, mask_punctuation=True, checkpoint=None, triples=None, collection=None, queries=None, index_name=None, overwrite=False, root='/mnt/my4tb/vishal_data/SuperPassage/experiments', experiment='default', index_root=None, name='2025-05/09/10.30.23', rank=0, nranks=1, amp=True, gpus=1, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<p>Key differences from this initial config and RAGatouille’s post-indexing metadata:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Parameter</th>
<th style="text-align: center;">RAGatouille value</th>
<th style="text-align: center;">ColBERT value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>kmeans_iter</code></td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>nbits</code></td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>dim</code></td>
<td style="text-align: center;">96</td>
<td style="text-align: center;">128</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>doc_maxlen</code></td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">220</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>index_bsize</code></td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">64</td>
</tr>
</tbody>
</table>
<p>I will set these explicitly in the ColBERTConfig before indexing.</p>
<div class="cell" data-execution_count="162">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">n_items</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="162">
<pre><code>1000</code></pre>
</div>
</div>
<p>The following environmental variable needs to be set otherwise the script won’t run.</p>
<div class="cell" data-execution_count="189">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">os.environ[<span class="st" style="color: #20794D;">"MKL_SERVICE_FORCE_INTEL"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"1"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="165">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;">#!rm -rf /mnt/my4tb/vishal_data/SuperPassage/.ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_1k</span></span></code></pre></div>
</div>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)):</span>
<span id="cb26-2">    config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig(</span>
<span id="cb26-3">        doc_maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,      </span>
<span id="cb26-4">        nbits<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>,             </span>
<span id="cb26-5">        dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">96</span>,             </span>
<span id="cb26-6">        kmeans_niters<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb26-7">        index_bsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>,</span>
<span id="cb26-8">        bsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb26-9">        checkpoint<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>,</span>
<span id="cb26-10">    )</span>
<span id="cb26-11">    </span>
<span id="cb26-12">    indexer <span class="op" style="color: #5E5E5E;">=</span> Indexer(checkpoint<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>, config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb26-13">    indexer.index(name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_ColBERT_index_1k"</span>, collection<span class="op" style="color: #5E5E5E;">=</span>passages[:n_items][<span class="st" style="color: #20794D;">"text"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="167">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">ColBERT_index_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">".ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_1k"</span></span></code></pre></div>
</div>
<p>The ColBERT index is a tiny bit smaller than RAGatouille, likely because it doesn’t store the collection as a JSON file and doesn’t store pid to docid map as a JSON file (which RAGatouille does—something we’ll encounter later on during search).</p>
<div class="cell" data-execution_count="168">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="op" style="color: #5E5E5E;">!</span>du <span class="op" style="color: #5E5E5E;">-</span>sh {ColBERT_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.1M    .ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_1k</code></pre>
</div>
</div>
<div class="cell" data-execution_count="169">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;">!</span>ls {ColBERT_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.codes.pt   0.residuals.pt   buckets.pt    doclens.0.json  metadata.json
0.metadata.json  avg_residual.pt  centroids.pt  ivf.pid.pt  plan.json</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="170">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/metadata.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb32-2">    ColBERT_metadata <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb32-3">ColBERT_metadata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="170">
<pre><code>{'config': {'query_token_id': '[unused0]',
  'doc_token_id': '[unused1]',
  'query_token': '[Q]',
  'doc_token': '[D]',
  'ncells': None,
  'centroid_score_threshold': None,
  'ndocs': None,
  'load_index_with_mmap': False,
  'index_path': None,
  'index_bsize': 32,
  'nbits': 4,
  'kmeans_niters': 20,
  'resume': False,
  'pool_factor': 1,
  'clustering_mode': 'hierarchical',
  'protected_tokens': 0,
  'similarity': 'cosine',
  'bsize': 64,
  'accumsteps': 1,
  'lr': 1e-05,
  'maxsteps': 15626,
  'save_every': None,
  'warmup': 781,
  'warmup_bert': None,
  'relu': False,
  'nway': 32,
  'use_ib_negatives': False,
  'reranker': False,
  'distillation_alpha': 1.0,
  'ignore_scores': False,
  'model_name': 'answerdotai/AnswerAI-ColBERTv2.5-small',
  'query_maxlen': 32,
  'attend_to_mask_tokens': False,
  'interaction': 'colbert',
  'dim': 96,
  'doc_maxlen': 256,
  'mask_punctuation': True,
  'checkpoint': 'answerdotai/answerai-colbert-small-v1',
  'triples': '/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl',
  'collection': ['list with 1000 elements starting with...',
   ['Overview',
    'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
    'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.']],
  'queries': '/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv',
  'index_name': 'ConditionalQA_ColBERT_index_1k',
  'overwrite': False,
  'root': '.ragatouille/',
  'experiment': 'colbert',
  'index_root': None,
  'name': '2025-05/09/10.30.23',
  'rank': 0,
  'nranks': 1,
  'amp': True,
  'gpus': 1,
  'avoid_fork_if_possible': False},
 'num_chunks': 1,
 'num_partitions': 1024,
 'num_embeddings': 15198,
 'avg_doclen': 15.198}</code></pre>
</div>
</div>
</section>
<section id="comparing-1k-subset-index-artifacts" class="level2">
<h2 class="anchored" data-anchor-id="comparing-1k-subset-index-artifacts">Comparing 1k subset Index Artifacts</h2>
<p>RAGatouille files:</p>
<ul>
<li>0.codes.pt<br>
</li>
<li>0.residuals.pt</li>
<li>buckets.pt<br>
</li>
<li>doclens.0.json</li>
<li>metadata.json</li>
<li>0.metadata.json</li>
<li>avg_residual.pt</li>
<li>centroids.pt</li>
<li>ivf.pid.pt</li>
<li>plan.json</li>
<li>collection.json (unique to RAGatouille)</li>
<li>pid_docid_map.json (unique to RAGatouille)</li>
</ul>
<p>ColBERT files:</p>
<ul>
<li>0.codes.pt</li>
<li>0.residuals.pt</li>
<li>buckets.pt</li>
<li>doclens.0.json</li>
<li>metadata.json</li>
<li>0.metadata.json</li>
<li>avg_residual.pt</li>
<li>centroids.pt<br>
</li>
<li>ivf.pid.pt<br>
</li>
<li>plan.json</li>
</ul>
<p>All parameters relevant to indexing are matching in the corresponding metadata.json files:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;">Parameter</th>
<th style="text-align: left;">Value</th>
<th style="text-align: center;">Status</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>index_bsize</code></td>
<td style="text-align: left;">32</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>nbits</code></td>
<td style="text-align: left;">4</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>kmeans_niters</code></td>
<td style="text-align: left;">20</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>dim</code></td>
<td style="text-align: left;">96</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>doc_maxlen</code></td>
<td style="text-align: left;">256</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>num_partitions</code></td>
<td style="text-align: left;">1024</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>num_embeddings</code></td>
<td style="text-align: left;">15198</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>avg_doclen</code></td>
<td style="text-align: left;">15.198</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>checkpoint</code></td>
<td style="text-align: left;">‘answerdotai/answerai-colbert-small-v1’</td>
<td style="text-align: center;">✅ Matches</td>
</tr>
</tbody>
</table>
<p>Walking through each file and comparing contents:</p>
<div class="cell" data-execution_count="171">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">def</span> _compare_pt(r_path, c_path):</span>
<span id="cb34-2">    r <span class="op" style="color: #5E5E5E;">=</span> torch.load(r_path)</span>
<span id="cb34-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.load(c_path)</span>
<span id="cb34-4">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(r,<span class="bu" style="color: null;">tuple</span>):</span>
<span id="cb34-5">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"0 shape:"</span>, r[<span class="dv" style="color: #AD0000;">0</span>].shape, c[<span class="dv" style="color: #AD0000;">0</span>].shape)</span>
<span id="cb34-6">        <span class="bu" style="color: null;">print</span>(r[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb34-7">        <span class="bu" style="color: null;">print</span>(c[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb34-8">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-9">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"0 match: "</span>, (r[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> c[<span class="dv" style="color: #AD0000;">0</span>]).<span class="bu" style="color: null;">float</span>().mean())</span>
<span id="cb34-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-11">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'#'</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb34-12">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-13">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 shape:"</span>, r[<span class="dv" style="color: #AD0000;">1</span>].shape, c[<span class="dv" style="color: #AD0000;">1</span>].shape)</span>
<span id="cb34-14">        <span class="bu" style="color: null;">print</span>(r[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb34-15">        <span class="bu" style="color: null;">print</span>(c[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb34-16">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-17">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"1 match: "</span>, (r[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> c[<span class="dv" style="color: #AD0000;">1</span>]).<span class="bu" style="color: null;">float</span>().mean())</span>
<span id="cb34-18">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb34-19">        <span class="bu" style="color: null;">print</span>(r)</span>
<span id="cb34-20">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-21">        <span class="bu" style="color: null;">print</span>(c)</span>
<span id="cb34-22">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-23">        <span class="bu" style="color: null;">print</span>(r.shape, c.shape)</span>
<span id="cb34-24">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb34-25">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"match: "</span>,(r <span class="op" style="color: #5E5E5E;">==</span> c).<span class="bu" style="color: null;">float</span>().mean())</span></code></pre></div>
</div>
<section id="codes.pt" class="level3">
<h3 class="anchored" data-anchor-id="codes.pt">0.codes.pt</h3>
<div class="cell" data-execution_count="173">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/0.codes.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/0.codes.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([345, 288, 647,  ..., 232, 767,  29], dtype=torch.int32)


tensor([345, 288, 647,  ..., 232, 767,  29], dtype=torch.int32)


torch.Size([15198]) torch.Size([15198])


match:  tensor(1.)</code></pre>
</div>
</div>
</section>
<section id="residuals.pt" class="level3">
<h3 class="anchored" data-anchor-id="residuals.pt">0.residuals.pt</h3>
<div class="cell" data-execution_count="175">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/0.residuals.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/0.residuals.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[ 30, 225, 225,  ..., 238, 238,  30],
        [238, 238, 238,  ..., 238, 238, 238],
        [240, 254, 253,  ..., 175, 240, 128],
        ...,
        [ 99, 105, 231,  ...,  40,  95,  48],
        [ 85, 241,  87,  ..., 128,   8, 179],
        [ 89, 106, 150,  ..., 162, 238,  22]], dtype=torch.uint8)


tensor([[ 30, 225, 225,  ..., 238, 238,  30],
        [238, 238, 238,  ..., 238, 238, 238],
        [240, 254, 253,  ..., 175, 240, 128],
        ...,
        [ 99, 105, 231,  ...,  40,  95,  48],
        [ 85, 241,  87,  ..., 128,   8, 179],
        [ 89, 106, 150,  ..., 162, 238,  22]], dtype=torch.uint8)


torch.Size([15198, 48]) torch.Size([15198, 48])


match:  tensor(1.)</code></pre>
</div>
</div>
</section>
<section id="centroids.pt" class="level3">
<h3 class="anchored" data-anchor-id="centroids.pt">centroids.pt</h3>
<div class="cell" data-execution_count="176">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/centroids.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/centroids.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor([[-0.0701,  0.0035, -0.0785,  ...,  0.1628,  0.0201, -0.0419],
        [-0.0350, -0.0082, -0.0715,  ...,  0.1119, -0.0159, -0.1164],
        [-0.0753,  0.0172, -0.0513,  ...,  0.1070,  0.1476, -0.0699],
        ...,
        [-0.1425,  0.1393, -0.2316,  ...,  0.0169,  0.0897, -0.0431],
        [-0.0690,  0.0513, -0.0935,  ...,  0.1311,  0.0324, -0.0705],
        [-0.0812,  0.0511, -0.0482,  ...,  0.1010,  0.0365, -0.0582]],
       device='cuda:0', dtype=torch.float16)


tensor([[-0.0701,  0.0035, -0.0785,  ...,  0.1628,  0.0201, -0.0419],
        [-0.0350, -0.0082, -0.0715,  ...,  0.1119, -0.0159, -0.1164],
        [-0.0753,  0.0172, -0.0513,  ...,  0.1070,  0.1476, -0.0699],
        ...,
        [-0.1425,  0.1393, -0.2316,  ...,  0.0169,  0.0897, -0.0431],
        [-0.0690,  0.0513, -0.0935,  ...,  0.1311,  0.0324, -0.0705],
        [-0.0812,  0.0511, -0.0482,  ...,  0.1010,  0.0365, -0.0582]],
       device='cuda:0', dtype=torch.float16)


torch.Size([1024, 96]) torch.Size([1024, 96])


match:  tensor(1., device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="ivf.pid.pt" class="level3">
<h3 class="anchored" data-anchor-id="ivf.pid.pt">ivf.pid.pt</h3>
<div class="cell" data-execution_count="177">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/ivf.pid.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/ivf.pid.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 shape: torch.Size([11696]) torch.Size([11696])
tensor([889, 894, 916,  ...,   0,   0,   0], dtype=torch.int32)
tensor([889, 894, 916,  ...,   0,   0,   0], dtype=torch.int32)


0 match:  tensor(1.)


##############################


1 shape: torch.Size([1024]) torch.Size([1024])
tensor([ 5, 46, 16,  ...,  7, 11,  3])
tensor([ 5, 46, 16,  ...,  7, 11,  3])


1 match:  tensor(1.)</code></pre>
</div>
</div>
</section>
<section id="buckets.pt" class="level3">
<h3 class="anchored" data-anchor-id="buckets.pt">buckets.pt</h3>
<div class="cell" data-execution_count="178">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/buckets.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/buckets.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0 shape: torch.Size([15]) torch.Size([15])
tensor([-0.0310, -0.0208, -0.0148, -0.0101, -0.0065, -0.0037, -0.0015,  0.0000,
         0.0016,  0.0037,  0.0067,  0.0103,  0.0150,  0.0210,  0.0312],
       device='cuda:0')
tensor([-0.0310, -0.0208, -0.0148, -0.0101, -0.0065, -0.0037, -0.0015,  0.0000,
         0.0016,  0.0037,  0.0067,  0.0103,  0.0150,  0.0210,  0.0312],
       device='cuda:0')


0 match:  tensor(1., device='cuda:0')


##############################


1 shape: torch.Size([16]) torch.Size([16])
tensor([-0.0417, -0.0248, -0.0175, -0.0123, -0.0082, -0.0050, -0.0025, -0.0006,
         0.0007,  0.0026,  0.0051,  0.0084,  0.0125,  0.0178,  0.0251,  0.0417],
       device='cuda:0', dtype=torch.float16)
tensor([-0.0417, -0.0248, -0.0175, -0.0123, -0.0082, -0.0050, -0.0025, -0.0006,
         0.0007,  0.0026,  0.0051,  0.0084,  0.0125,  0.0178,  0.0251,  0.0417],
       device='cuda:0', dtype=torch.float16)


1 match:  tensor(1., device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="avg_residual.pt" class="level3">
<h3 class="anchored" data-anchor-id="avg_residual.pt">avg_residual.pt</h3>
<div class="cell" data-execution_count="179">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">_compare_pt(r_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/avg_residual.pt"</span>, c_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/avg_residual.pt"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(0.0150, device='cuda:0', dtype=torch.float16)


tensor(0.0150, device='cuda:0', dtype=torch.float16)


torch.Size([]) torch.Size([])


match:  tensor(1., device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="doclens.0.json" class="level3">
<h3 class="anchored" data-anchor-id="doclens.0.json">doclens.0.json</h3>
<div class="cell" data-execution_count="180">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/doclens.0.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb47-2">    RAGatouille_doclens <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb47-3">RAGatouille_doclens[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="180">
<pre><code>[4, 20, 18, 23, 8]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="181">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/doclens.0.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb49-2">    ColBERT_doclens <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span>
<span id="cb49-3">ColBERT_doclens[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="181">
<pre><code>[4, 20, 18, 23, 8]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="182">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">RAGatouille_doclens <span class="op" style="color: #5E5E5E;">==</span> ColBERT_doclens</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="182">
<pre><code>True</code></pre>
</div>
</div>
<p>Based on these comparisons, I can conclude that ColBERT and RAGatouille do indeed produce identical index artifacts given the same configuration and document collection!</p>
</section>
</section>
<section id="indexing-full-conditionalqa-comparing-artifacts" class="level2">
<h2 class="anchored" data-anchor-id="indexing-full-conditionalqa-comparing-artifacts">Indexing Full ConditionalQA + Comparing Artifacts</h2>
<p>With a 1k subset confirmed, I’ll now index the full ConditionalQA document collection, which contains ~70k rows.</p>
<div class="cell" data-execution_count="183">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">dataset_name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="183">
<pre><code>'ConditionalQA'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="186">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="bu" style="color: null;">len</span>(passages)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="186">
<pre><code>69199</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb57-2">RAG_index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb57-3">    index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_RAGatouille_index_full"</span>,</span>
<span id="cb57-4">    collection<span class="op" style="color: #5E5E5E;">=</span>passages[<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb57-5">    document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[<span class="st" style="color: #20794D;">"_id"</span>],</span>
<span id="cb57-6">    use_faiss<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> <span class="co" style="color: #5E5E5E;"># to match ColBERT</span></span>
<span id="cb57-7">)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="187">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="op" style="color: #5E5E5E;">!</span>du <span class="op" style="color: #5E5E5E;">-</span>sh {RAG_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>45M .ragatouille/colbert/indexes/ConditionalQA_RAGatouille_index_full</code></pre>
</div>
</div>
<div class="cell" data-execution_count="188">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="op" style="color: #5E5E5E;">!</span>ls {RAG_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.codes.pt   1.residuals.pt   buckets.pt       doclens.2.json
0.metadata.json  2.codes.pt   centroids.pt     ivf.pid.pt
0.residuals.pt   2.metadata.json  collection.json  metadata.json
1.codes.pt   2.residuals.pt   doclens.0.json   pid_docid_map.json
1.metadata.json  avg_residual.pt  doclens.1.json   plan.json</code></pre>
</div>
</div>
<div class="cell" data-execution_count="196">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;">#!rm -rf .ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_full</span></span></code></pre></div>
</div>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">os.environ[<span class="st" style="color: #20794D;">"MKL_SERVICE_FORCE_INTEL"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"1"</span></span>
<span id="cb63-2"><span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)):</span>
<span id="cb63-3">    config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig(</span>
<span id="cb63-4">        doc_maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,      </span>
<span id="cb63-5">        nbits<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,  <span class="co" style="color: #5E5E5E;"># to match RAGatouille           </span></span>
<span id="cb63-6">        dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">96</span>,             </span>
<span id="cb63-7">        kmeans_niters<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, <span class="co" style="color: #5E5E5E;"># to match RAGatouille</span></span>
<span id="cb63-8">        index_bsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>,</span>
<span id="cb63-9">        bsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb63-10">        checkpoint<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>,</span>
<span id="cb63-11">    )</span>
<span id="cb63-12">    </span>
<span id="cb63-13">    indexer <span class="op" style="color: #5E5E5E;">=</span> Indexer(checkpoint<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>, config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb63-14">    indexer.index(name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_ColBERT_index_full"</span>, collection<span class="op" style="color: #5E5E5E;">=</span>passages[<span class="st" style="color: #20794D;">"text"</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="198">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">ColBERT_index_path <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">".ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_full"</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="199">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="op" style="color: #5E5E5E;">!</span>du <span class="op" style="color: #5E5E5E;">-</span>sh {ColBERT_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>38M .ragatouille/colbert/indexes/ConditionalQA_ColBERT_index_full</code></pre>
</div>
</div>
<div class="cell" data-execution_count="200">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="op" style="color: #5E5E5E;">!</span>ls {ColBERT_index_path}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.codes.pt   1.residuals.pt   buckets.pt      ivf.pid.pt
0.metadata.json  2.codes.pt   centroids.pt    metadata.json
0.residuals.pt   2.metadata.json  doclens.0.json  plan.json
1.codes.pt   2.residuals.pt   doclens.1.json
1.metadata.json  avg_residual.pt  doclens.2.json</code></pre>
</div>
</div>
<section id="comparing-metadata" class="level3">
<h3 class="anchored" data-anchor-id="comparing-metadata">Comparing Metadata</h3>
<p>All key metadata parameters are equivalent between the RAGatouille and ColBERT indexes.</p>
<div class="cell" data-execution_count="221">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">params <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"index_bsize"</span>, <span class="st" style="color: #20794D;">"nbits"</span>, <span class="st" style="color: #20794D;">"kmeans_niters"</span>, <span class="st" style="color: #20794D;">"bsize"</span>, <span class="st" style="color: #20794D;">"dim"</span>, <span class="st" style="color: #20794D;">"rank"</span>, <span class="st" style="color: #20794D;">"gpus"</span>, <span class="st" style="color: #20794D;">"nranks"</span>, <span class="st" style="color: #20794D;">"num_chunks"</span>, <span class="st" style="color: #20794D;">"num_partitions"</span>, <span class="st" style="color: #20794D;">"num_embeddings"</span>, <span class="st" style="color: #20794D;">"avg_doclen"</span>]</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="222">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/metadata.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb70-2">    RAG_metadata <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="223">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/metadata.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb71-2">    ColBERT_metadata <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="232">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> params: </span>
<span id="cb72-2">    <span class="cf" style="color: #003B4F;">if</span> p <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"num_chunks"</span>, <span class="st" style="color: #20794D;">"num_partitions"</span>, <span class="st" style="color: #20794D;">"num_embeddings"</span>, <span class="st" style="color: #20794D;">"avg_doclen"</span>]: <span class="cf" style="color: #003B4F;">assert</span> RAG_metadata[<span class="st" style="color: #20794D;">'config'</span>][p] <span class="op" style="color: #5E5E5E;">==</span> ColBERT_metadata[<span class="st" style="color: #20794D;">'config'</span>][p], p</span>
<span id="cb72-3">    <span class="cf" style="color: #003B4F;">elif</span> p <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"avg_doclen"</span>: <span class="cf" style="color: #003B4F;">assert</span> (RAG_metadata[p] <span class="op" style="color: #5E5E5E;">-</span> ColBERT_metadata[p]) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">1e-7</span></span>
<span id="cb72-4">    <span class="cf" style="color: #003B4F;">else</span>: <span class="cf" style="color: #003B4F;">assert</span> RAG_metadata[p] <span class="op" style="color: #5E5E5E;">==</span> ColBERT_metadata[p], p</span></code></pre></div>
</div>
</section>
<section id="comparing-index-artifacts" class="level3">
<h3 class="anchored" data-anchor-id="comparing-index-artifacts">Comparing Index Artifacts</h3>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">def</span> _compare_pt(r_path, c_path):</span>
<span id="cb73-2">    r <span class="op" style="color: #5E5E5E;">=</span> torch.load(r_path)</span>
<span id="cb73-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.load(c_path)</span>
<span id="cb73-4">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(r,<span class="bu" style="color: null;">tuple</span>):</span>
<span id="cb73-5">        <span class="cf" style="color: #003B4F;">assert</span> r[<span class="dv" style="color: #AD0000;">0</span>].shape <span class="op" style="color: #5E5E5E;">==</span> c[<span class="dv" style="color: #AD0000;">0</span>].shape</span>
<span id="cb73-6">        <span class="cf" style="color: #003B4F;">assert</span> (r[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> c[<span class="dv" style="color: #AD0000;">0</span>]).<span class="bu" style="color: null;">float</span>().mean() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb73-7">        <span class="cf" style="color: #003B4F;">assert</span> (r[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> c[<span class="dv" style="color: #AD0000;">1</span>]).<span class="bu" style="color: null;">float</span>().mean() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb73-8">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb73-9">        <span class="cf" style="color: #003B4F;">assert</span> r.shape <span class="op" style="color: #5E5E5E;">==</span> c.shape</span>
<span id="cb73-10">        <span class="cf" style="color: #003B4F;">assert</span> (r <span class="op" style="color: #5E5E5E;">==</span> c).<span class="bu" style="color: null;">float</span>().mean() <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="237">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">files <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb74-2">    <span class="st" style="color: #20794D;">"0.codes.pt"</span>,</span>
<span id="cb74-3">    <span class="st" style="color: #20794D;">"0.residuals.pt"</span>,</span>
<span id="cb74-4">    <span class="st" style="color: #20794D;">"centroids.pt"</span>,</span>
<span id="cb74-5">    <span class="st" style="color: #20794D;">"ivf.pid.pt"</span>,</span>
<span id="cb74-6">    <span class="st" style="color: #20794D;">"buckets.pt"</span>,</span>
<span id="cb74-7">    <span class="st" style="color: #20794D;">"avg_residual.pt"</span>,</span>
<span id="cb74-8">    <span class="st" style="color: #20794D;">"doclens.0.json"</span></span>
<span id="cb74-9">]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="241">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="cf" style="color: #003B4F;">for</span> f <span class="kw" style="color: #003B4F;">in</span> files:</span>
<span id="cb75-2">    <span class="cf" style="color: #003B4F;">if</span> f <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"doclens.0.json"</span>: </span>
<span id="cb75-3">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>f<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> _f: RAG_doclens <span class="op" style="color: #5E5E5E;">=</span> json.load(_f)</span>
<span id="cb75-4">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>f<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> _f: ColBERT_doclens <span class="op" style="color: #5E5E5E;">=</span> json.load(_f)</span>
<span id="cb75-5">        <span class="cf" style="color: #003B4F;">assert</span> RAG_doclens <span class="op" style="color: #5E5E5E;">==</span> ColBERT_doclens</span>
<span id="cb75-6">    <span class="cf" style="color: #003B4F;">else</span>: _compare_pt(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>f<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>f<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
</div>
<p>All index artifacts are equivalent! This further confirms the equivalency of the indexes created by RAGatouille and ColBERT.</p>
</section>
</section>
<section id="comparing-search-results" class="level2">
<h2 class="anchored" data-anchor-id="comparing-search-results">Comparing Search Results</h2>
<p>To reset, I had started this exploration with two questions:</p>
<ol type="1">
<li>For a given document collection and indexing configuration, do RAGatouille and ColBERT produce the same index?</li>
<li>For a given index and search configuration, do RAGatouille and ColBERT retrieve the same passages/Recall@10?</li>
</ol>
<p>The answer to the first question is YES. Let’s move on to answering the second question, starting by searching the RAGatouille index with RAGatouille.</p>
<section id="searching-ragatouille-index-with-ragatouille" class="level3">
<h3 class="anchored" data-anchor-id="searching-ragatouille-index-with-ragatouille">Searching RAGatouille Index with RAGatouille</h3>
<p>I will explicitly set search parameters for RAGatouille, even though they get set based on document collection size in <a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L266"><code>PLAIDModelIndex._load_searcher</code></a>:</p>
<div class="sourceCode" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> force_fast:</span>
<span id="cb76-2">    <span class="va" style="color: #111111;">self</span>.searcher.configure(ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>)</span>
<span id="cb76-3">    <span class="va" style="color: #111111;">self</span>.searcher.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>)</span>
<span id="cb76-4">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.searcher.collection) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10000</span>:</span>
<span id="cb76-5">        <span class="va" style="color: #111111;">self</span>.searcher.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb76-6">        <span class="va" style="color: #111111;">self</span>.searcher.configure(centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.4</span>)</span>
<span id="cb76-7">    <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.searcher.collection) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100000</span>:</span>
<span id="cb76-8">        <span class="va" style="color: #111111;">self</span>.searcher.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb76-9">        <span class="va" style="color: #111111;">self</span>.searcher.configure(centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.45</span>)</span>
<span id="cb76-10">    <span class="co" style="color: #5E5E5E;"># Otherwise, use defaults for k</span></span>
<span id="cb76-11"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb76-12">    <span class="co" style="color: #5E5E5E;"># Use fast settingss</span></span>
<span id="cb76-13">    <span class="va" style="color: #111111;">self</span>.searcher.configure(ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb76-14">    <span class="va" style="color: #111111;">self</span>.searcher.configure(centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb76-15">    <span class="va" style="color: #111111;">self</span>.searcher.configure(ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>)</span></code></pre></div>
<div class="cell" data-execution_count="244">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">RAG.model.config.ncells <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb77-2">RAG.model.config.centroid_score_threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span></span>
<span id="cb77-3">RAG.model.config.ndocs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1024</span></span>
<span id="cb77-4">RAG.model.config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="244">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=4, centroid_score_threshold=0.45, ndocs=1024, load_index_with_mmap=False, index_path=None, index_bsize=32, nbits=2, kmeans_niters=10, resume=False, pool_factor=1, clustering_mode='hierarchical', protected_tokens=0, similarity='cosine', bsize=32, accumsteps=1, lr=1e-05, maxsteps=15626, save_every=None, warmup=781, warmup_bert=None, relu=False, nway=32, use_ib_negatives=False, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name='answerdotai/AnswerAI-ColBERTv2.5-small', query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=96, doc_maxlen=256, mask_punctuation=True, checkpoint='/home/vishal/.cache/huggingface/hub/models--answerdotai--answerai-colbert-small-v1/snapshots/be1703c55532145a844da800eea4c9a692d7e267/', triples='/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl', collection='/home/bclavie/colbertv2.5_en/data/msmarco/collection.tsv', queries='/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv', index_name=None, overwrite=False, root='.ragatouille/colbert/indexes', experiment='colbert', index_root=None, name='2024-08/07/08.16.20', rank=0, nranks=4, amp=True, gpus=4, avoid_fork_if_possible=True)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="422">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">ragatouille_results <span class="op" style="color: #5E5E5E;">=</span> {}</span></code></pre></div>
</div>
<div class="cell" data-scrolled="true" data-execution_count="423">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb80-2">    results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb80-3">    ragatouille_results[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {result[<span class="st" style="color: #20794D;">'document_id'</span>]: <span class="bu" style="color: null;">float</span>(result[<span class="st" style="color: #20794D;">'score'</span>]) <span class="cf" style="color: #003B4F;">for</span> result <span class="kw" style="color: #003B4F;">in</span> results}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="424">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">ragatouille_results[<span class="st" style="color: #20794D;">'dev-0'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="424">
<pre><code>{'107-242': 69.9375,
 '496-116': 69.9375,
 '86-28': 69.875,
 '254-4': 69.875,
 '107-103': 69.875,
 '8-67': 69.8125,
 '98-46': 69.8125,
 '8-80': 69.8125,
 '8-116': 69.8125,
 '107-43': 69.8125}</code></pre>
</div>
</div>
<p>The mean Recall@10 for all 271 queries is 0.29.</p>
<div class="cell" data-execution_count="429">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">qrels <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb83-2"><span class="cf" style="color: #003B4F;">for</span> qrel_row <span class="kw" style="color: #003B4F;">in</span> qrels_rows:</span>
<span id="cb83-3">    qid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"query_id"</span>]</span>
<span id="cb83-4">    pid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"corpus_id"</span>]</span>
<span id="cb83-5">    rel <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"score"</span>]</span>
<span id="cb83-6">    qrels.setdefault(qid, {})</span>
<span id="cb83-7">    qrels[qid][pid] <span class="op" style="color: #5E5E5E;">=</span> rel</span></code></pre></div>
</div>
<div class="cell" data-execution_count="430">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span>
<span id="cb84-2">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(ragatouille_results)</span>
<span id="cb84-3"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(metrics) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">set</span>(qrels_rows[<span class="st" style="color: #20794D;">"query_id"</span>]))</span>
<span id="cb84-4"></span>
<span id="cb84-5">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb84-6">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="430">
<pre><code>0.2855810510889169</code></pre>
</div>
</div>
</section>
<section id="searching-the-colbert-index-with-colbert" class="level3">
<h3 class="anchored" data-anchor-id="searching-the-colbert-index-with-colbert">Searching the ColBERT Index with ColBERT</h3>
<p>Next, I’ll search the ColBERT index with ColBERT, setting the same configuration values as RAGatouille.</p>
<div class="cell" data-execution_count="297">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">RAG.model.config.ncells, <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb86-2">RAG.model.config.centroid_score_threshold, <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb86-3">RAG.model.config.ndocs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="297">
<pre><code>(4, 0.45, 1024)</code></pre>
</div>
</div>
<p>ColBERT expects the queries to be structured as a dictionary, so I’ll prepare that accordingly:</p>
<div class="cell" data-execution_count="425">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">queries_dict <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb88-2"><span class="cf" style="color: #003B4F;">for</span> item <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb88-3">    queries_dict[item[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> item[<span class="st" style="color: #20794D;">'text'</span>]</span>
<span id="cb88-4"></span>
<span id="cb88-5"><span class="bu" style="color: null;">len</span>(queries_dict)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="425">
<pre><code>271</code></pre>
</div>
</div>
<p>I was posting on Twitter about how I wasn’t getting the same search results when using RAGatouille and vanilla ColBERT given the same index. <a href="https://ben.clavie.eu/">Benjamin Clavie</a>, the author of RAGatouille, kindly took some time to explain a core difference in how RAGatouille and ColBERT process queries:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
Oh that'll be because ragatouille has a policy to never truncate queries so it updates the querylen to be <em>at least</em> the actual query length (further tests show it should be querylen + 8 at least, to get better augmentation). Your colbert (stanford) config is truncating to 32…
</p>
— Ben Clavié (<span class="citation" data-cites="bclavie">@bclavie</span>) <a href="https://twitter.com/bclavie/status/1921056639739678751?ref_src=twsrc%5Etfw">May 10, 2025</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>As was shared in his tweet, <a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L298">RAGatouille uses a larger maximum query length than ColBERT</a>. ColBERT uses a default of 32. So to replicate the same scores (and therefore the same top-k retrieved passages) I needed to mimic RAGatouille’s query length maximum.</p>
<p>Note that ColBERT doesn’t store original passage <code>_id</code>s like RAGatouille does, so I have to extract it from the original <code>passages</code> with <code>passages[idx]['_id']</code>.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">current_dir <span class="op" style="color: #5E5E5E;">=</span> os.path.abspath(<span class="st" style="color: #20794D;">"."</span>)</span>
<span id="cb90-2">index_root <span class="op" style="color: #5E5E5E;">=</span> os.path.join(current_dir, <span class="st" style="color: #20794D;">".ragatouille"</span>, <span class="st" style="color: #20794D;">"colbert"</span>, <span class="st" style="color: #20794D;">"indexes"</span>)</span>
<span id="cb90-3">colbert_results <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb90-4"></span>
<span id="cb90-5"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb90-6">    query_length <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(<span class="bu" style="color: null;">len</span>(q[<span class="st" style="color: #20794D;">'text'</span>].split(<span class="st" style="color: #20794D;">" "</span>)) <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.35</span>) <span class="co" style="color: #5E5E5E;"># this lines comes from RAGatouille</span></span>
<span id="cb90-7">    <span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)):</span>
<span id="cb90-8">        searcher <span class="op" style="color: #5E5E5E;">=</span> Searcher(</span>
<span id="cb90-9">            index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ConditionalQA_ColBERT_index_full"</span>,</span>
<span id="cb90-10">            index_root<span class="op" style="color: #5E5E5E;">=</span>index_root,  </span>
<span id="cb90-11">            config<span class="op" style="color: #5E5E5E;">=</span>ColBERTConfig(</span>
<span id="cb90-12">                ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb90-13">                centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.45</span>,</span>
<span id="cb90-14">                ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>,</span>
<span id="cb90-15">                query_maxlen<span class="op" style="color: #5E5E5E;">=</span>query_length</span>
<span id="cb90-16">            )</span>
<span id="cb90-17">        )</span>
<span id="cb90-18">    </span>
<span id="cb90-19">        ranking <span class="op" style="color: #5E5E5E;">=</span> searcher.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb90-20">        colbert_results[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {passages[idx][<span class="st" style="color: #20794D;">'_id'</span>]: score <span class="cf" style="color: #003B4F;">for</span> idx, score <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>(ranking[<span class="dv" style="color: #AD0000;">0</span>], ranking[<span class="dv" style="color: #AD0000;">2</span>]))}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="427">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span>
<span id="cb91-2">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(colbert_results)</span>
<span id="cb91-3"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(metrics) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">set</span>(qrels_rows[<span class="st" style="color: #20794D;">"query_id"</span>]))</span>
<span id="cb91-4"></span>
<span id="cb91-5">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb91-6">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="427">
<pre><code>0.2855810510889169</code></pre>
</div>
</div>
<p>With the maximum query length adjusted, ColBERT yields the same Recall@10 as RAGatouille! This makes sense because as Benjamin said in another tweet reply:</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
It's most likely down to the default search settings in ragatouille being a bit more aggressive, so you end up with better results. If you change ncells/score_thresh/ndocs to more aggressive values I reckon the colbert library would match it? All ragatouille does under the hood is wrap things with strong defaults/abstractions 😄
</p>
— Ben Clavié (<span class="citation" data-cites="bclavie">@bclavie</span>) <a href="https://twitter.com/bclavie/status/1921052397314732447?ref_src=twsrc%5Etfw">May 10, 2025</a>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>While the exact same recall is a good check, I’ll double check that for each query, the retrieved passage IDs and scores are identical between RAGatouille and ColBERT.</p>
<div class="cell" data-execution_count="428">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> colbert_results.keys():</span>
<span id="cb93-2">    <span class="cf" style="color: #003B4F;">for</span> pid, score <span class="kw" style="color: #003B4F;">in</span> colbert_results[i].items():</span>
<span id="cb93-3">        <span class="cf" style="color: #003B4F;">assert</span> ragatouille_results[i][pid] <span class="op" style="color: #5E5E5E;">==</span> score</span></code></pre></div>
</div>
</section>
<section id="searching-ragatouille-index-with-colbert-and-vice-versa" class="level3">
<h3 class="anchored" data-anchor-id="searching-ragatouille-index-with-colbert-and-vice-versa">Searching RAGatouille Index with ColBERT (and vice versa)</h3>
<p>As a final check of consistency, I’ll search the RAGatouille index with ColBERT and search the ColBERT index with RAGatouille and confirm that they yield the same retrieved passages and Recall@10.</p>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">current_dir <span class="op" style="color: #5E5E5E;">=</span> os.path.abspath(<span class="st" style="color: #20794D;">"."</span>)</span>
<span id="cb94-2">index_root <span class="op" style="color: #5E5E5E;">=</span> os.path.join(current_dir, <span class="st" style="color: #20794D;">".ragatouille"</span>, <span class="st" style="color: #20794D;">"colbert"</span>, <span class="st" style="color: #20794D;">"indexes"</span>)</span>
<span id="cb94-3">colbert_results2 <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb94-4"></span>
<span id="cb94-5"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb94-6">    query_length <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(<span class="bu" style="color: null;">len</span>(q[<span class="st" style="color: #20794D;">'text'</span>].split(<span class="st" style="color: #20794D;">" "</span>)) <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.35</span>)</span>
<span id="cb94-7">    <span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)):</span>
<span id="cb94-8">        searcher <span class="op" style="color: #5E5E5E;">=</span> Searcher(</span>
<span id="cb94-9">            index<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"ConditionalQA_RAGatouille_index_full"</span>,</span>
<span id="cb94-10">            index_root<span class="op" style="color: #5E5E5E;">=</span>index_root,  </span>
<span id="cb94-11">            config<span class="op" style="color: #5E5E5E;">=</span>ColBERTConfig(</span>
<span id="cb94-12">                ncells<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb94-13">                centroid_score_threshold<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.45</span>,</span>
<span id="cb94-14">                ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>,</span>
<span id="cb94-15">                query_maxlen<span class="op" style="color: #5E5E5E;">=</span>query_length</span>
<span id="cb94-16">            )</span>
<span id="cb94-17">        )</span>
<span id="cb94-18">    </span>
<span id="cb94-19">        ranking <span class="op" style="color: #5E5E5E;">=</span> searcher.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb94-20">        colbert_results2[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {passages[idx][<span class="st" style="color: #20794D;">'_id'</span>]: score <span class="cf" style="color: #003B4F;">for</span> idx, score <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>(ranking[<span class="dv" style="color: #AD0000;">0</span>], ranking[<span class="dv" style="color: #AD0000;">2</span>]))}</span></code></pre></div>
</div>
<p>We get the same results as searching the ColBERT index with ColBERT! This again further proves that these two frameworks produce the same indexes (which is to be expected).</p>
<div class="cell" data-execution_count="432">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> colbert_results.keys():</span>
<span id="cb95-2">    <span class="cf" style="color: #003B4F;">for</span> pid, score <span class="kw" style="color: #003B4F;">in</span> colbert_results[i].items():</span>
<span id="cb95-3">        <span class="cf" style="color: #003B4F;">assert</span> colbert_results2[i][pid] <span class="op" style="color: #5E5E5E;">==</span> score</span></code></pre></div>
</div>
<div class="cell" data-execution_count="433">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span>
<span id="cb96-2">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(colbert_results2)</span>
<span id="cb96-3"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(metrics) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">set</span>(qrels_rows[<span class="st" style="color: #20794D;">"query_id"</span>]))</span>
<span id="cb96-4"></span>
<span id="cb96-5">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb96-6">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="433">
<pre><code>0.2855810510889169</code></pre>
</div>
</div>
<p>Finally, as the last piece of this exercise, I’ll search the ColBERT index with RAGatouille and see if I get the same result. I certainly expect to!</p>
</section>
<section id="searching-colbert-index-with-ragatouille" class="level3">
<h3 class="anchored" data-anchor-id="searching-colbert-index-with-ragatouille">Searching ColBERT Index with RAGatouille</h3>
<p>RAGatouille creates two files (collection.json and pid_docid_map.json) which ColBERT does not, so we have to create them manually for RAGatouille to search the ColBERT Index.</p>
<p>collection.json is just a list of the document collection text.</p>
<div class="cell" data-execution_count="434">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/collection.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb98-2">    RAG_collection <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="435">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="bu" style="color: null;">len</span>(RAG_collection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="435">
<pre><code>69199</code></pre>
</div>
</div>
<div class="cell" data-execution_count="436">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">RAG_collection[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="436">
<pre><code>['Overview',
 'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
 'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.',
 'You might be able to apply for Pension Credit if you and your partner are State Pension age or over.',
 'What you’ll get']</code></pre>
</div>
</div>
<p>pid_docid_map.json is a dictionary where the keys are the index in the collection and the values are the dataset’s defined <code>_id</code> string.</p>
<div class="cell" data-execution_count="437">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>RAG_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/pid_docid_map.json"</span>, <span class="st" style="color: #20794D;">'r'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb103-2">    RAG_pid_docid_map <span class="op" style="color: #5E5E5E;">=</span> json.load(f)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="438">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="bu" style="color: null;">list</span>(RAG_pid_docid_map.items())[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">list</span>(RAG_pid_docid_map.items())[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="438">
<pre><code>(('0', '0-0'), ('69198', '651-91'))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="439">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">passages[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="439">
<pre><code>{'_id': '651-91',
 'text': 'Trade union reps can be on picket lines at different workplaces if they’re responsible for organising workers in those workplaces.',
 'title': 'Taking part in industrial action and strikes',
 'doc_id': '651',
 'paragraph_no': 91,
 'total_paragraphs': 92,
 'is_candidate': True}</code></pre>
</div>
</div>
<p>Saving the collection as a JSON is simple enough, I just dump <code>passages['text']</code> into a JSON file.</p>
<div class="cell" data-execution_count="289">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">srsly.write_json(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/collection.json"</span>, passages[<span class="st" style="color: #20794D;">'text'</span>])</span></code></pre></div>
</div>
<p>Creating pid_docid_map.json is also quite straightforward. I map from the index of the passage item to its <code>_id</code>.</p>
<div class="cell" data-execution_count="440">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">pid_docid_map <span class="op" style="color: #5E5E5E;">=</span> {<span class="bu" style="color: null;">str</span>(i): p[<span class="st" style="color: #20794D;">'_id'</span>] <span class="cf" style="color: #003B4F;">for</span> i,p <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(passages)}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="441">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="bu" style="color: null;">list</span>(pid_docid_map.items())[<span class="dv" style="color: #AD0000;">0</span>], <span class="bu" style="color: null;">list</span>(pid_docid_map.items())[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="441">
<pre><code>(('0', '0-0'), ('69198', '651-91'))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="287">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1">srsly.write_json(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>ColBERT_index_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/pid_docid_map.json"</span>, pid_docid_map)</span></code></pre></div>
</div>
<p>Let’s make sure these match the RAGatouille-built artifacts:</p>
<div class="cell" data-execution_count="442">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1"><span class="cf" style="color: #003B4F;">for</span> i, _id <span class="kw" style="color: #003B4F;">in</span> RAG_pid_docid_map.items(): <span class="cf" style="color: #003B4F;">assert</span> _id <span class="op" style="color: #5E5E5E;">==</span> pid_docid_map[i]</span>
<span id="cb113-2"><span class="cf" style="color: #003B4F;">for</span> i, _id <span class="kw" style="color: #003B4F;">in</span> pid_docid_map.items(): <span class="cf" style="color: #003B4F;">assert</span> _id <span class="op" style="color: #5E5E5E;">==</span> RAG_pid_docid_map[i]</span></code></pre></div>
</div>
<p>With those two files created, I can now create a <code>RAGPretrainedModel</code> object <code>from_index</code> using the ColBERT index.</p>
<div class="cell" data-execution_count="443">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">RAG2 <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_index(ColBERT_index_path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Constructing default index configuration for index `None` as it does not contain RAGatouille specific metadata.</code></pre>
</div>
</div>
<div class="cell" data-scrolled="true">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">RAG2.model.config.ncells <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb116-2">RAG2.model.config.centroid_score_threshold <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span></span>
<span id="cb116-3">RAG2.model.config.ndocs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1024</span></span>
<span id="cb116-4"></span>
<span id="cb116-5">ragatouille_results2 <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb116-6"></span>
<span id="cb116-7"></span>
<span id="cb116-8"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb116-9">    results <span class="op" style="color: #5E5E5E;">=</span> RAG2.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb116-10">    ragatouille_results2[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {result[<span class="st" style="color: #20794D;">'document_id'</span>]: <span class="bu" style="color: null;">float</span>(result[<span class="st" style="color: #20794D;">'score'</span>]) <span class="cf" style="color: #003B4F;">for</span> result <span class="kw" style="color: #003B4F;">in</span> results}</span></code></pre></div>
</div>
<p>We get the same results as searching the RAGatouille index with RAGatouille, searching the ColBERT index with ColBERT and searching the RAGatouille index with ColBERT!</p>
<div class="cell" data-execution_count="445">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> colbert_results.keys():</span>
<span id="cb117-2">    <span class="cf" style="color: #003B4F;">for</span> pid, score <span class="kw" style="color: #003B4F;">in</span> colbert_results[i].items():</span>
<span id="cb117-3">        <span class="cf" style="color: #003B4F;">assert</span> ragatouille_results2[i][pid] <span class="op" style="color: #5E5E5E;">==</span> score</span></code></pre></div>
</div>
<div class="cell" data-execution_count="446">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span>
<span id="cb118-2">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(ragatouille_results2)</span>
<span id="cb118-3"><span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(metrics) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(<span class="bu" style="color: null;">set</span>(qrels_rows[<span class="st" style="color: #20794D;">"query_id"</span>]))</span>
<span id="cb118-4"></span>
<span id="cb118-5">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb118-6">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="446">
<pre><code>0.2855810510889169</code></pre>
</div>
</div>
</section>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>Every interaction I’ve had with RAGatouille and ColBERT has been an awesome learning experience. I feel like inspecting their behavior and artifacts as left me with a better understanding of information retrieval in general. One small learning that I left out: ColBERT uses FAISS for k-means clustering while for small document collections (such as my initial 1k subset) RAGatouille uses a PyTorch implementation. This difference, even though all relevant configuration parameters were equal, resulted in different index artifacts. There was only about a 15% overlap between the <code>centroids.pt</code> tensors of the resulting RAGatouille and ColBERT indexes.</p>
<p>Another piece of motivation for me is that I needed to use both RAGatouille and ColBERT for indexing the full set of UKPLab/DAPR document collections, as ColBERT was able to index the larger collections (6M+) without crashing the kernel, while RAGatouille was not. In some initial experiments I was getting different mean Recall@10 values when using RAGatouille versus when using ColBERT (because I hadn’t incorporated the max query length code and probably had different configs). So I felt like this was a good opportunity, once and for all, to answer the two questions I listed at the start of this notebook:</p>
<ol type="1">
<li>For a given document collection and indexing configuration, do RAGatouille and ColBERT produce the same index?</li>
<li>For a given index and search configuration, do RAGatouille and ColBERT retrieve the same passages/Recall@10?</li>
</ol>
<p>The answer for both, is a resounding yes! With this knowledge in my belt, I can now move forward with indexing and searching with either library as I please.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>information retrieval</category>
  <category>RAGatouille</category>
  <category>ColBERT</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-10-RAGatouille-ColBERT-Comparisons/index.html</guid>
  <pubDate>Sat, 10 May 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Resolving RAGatouille OOM Error and faiss-gpu Warning</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-08-TIL-RAGatouille/index.html</link>
  <description><![CDATA[ 



<p>I’m in the process of indexing the UKPLab/DAPR datasets, which span in size from ~70k to ~32M documents. Using a RTX3090, I ran into an OOM error (during search) and a warning stating that faiss-cpu was being used instead of faiss-gpu, causing the indexing process to take longer.</p>
<p>I found <a href="https://github.com/AnswerDotAI/RAGatouille/issues/177">this RAGatouille GitHub issue</a> which recommended lowering the <code>batch_size</code> in ColBERT’s <a href="https://github.com/stanford-futuredata/ColBERT/blob/8627585ad290c21720eaa54e325e7c8c301d15f6/colbert/search/index_storage.py#L121"><code>IndexScorer.score_pids</code> method</a>. I made that change (from 2^20 to 2^16) and that resolved the OOM error, at least for the 2.68M document collection (NaturalQuestions).</p>
<p>When I was using Google Colab GPUs, the following install commands correctly installed faiss-gpu after installing RAGatouille:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">pip uninstall <span class="op" style="color: #5E5E5E;">-</span>y faiss<span class="op" style="color: #5E5E5E;">-</span>cpu</span>
<span id="cb1-2">pip install faiss<span class="op" style="color: #5E5E5E;">-</span>gpu<span class="op" style="color: #5E5E5E;">-</span>cu12</span></code></pre></div>
<p>Using an RTX3090 (not on Colab), this was not correctly installing faiss-gpu, leading to the following RAGatouille warning during indexing, and as a result, using the CPU for indexing (which eventually crashed the kernel):</p>
<pre><code>________________________________________________________________________________
WARNING! You have a GPU available, but only `faiss-cpu` is currently installed.
This means that indexing will be slow. To make use of your GPU
Please install `faiss-gpu` by running:
pip uninstall --y faiss-cpu &amp; pip install faiss-gpu
________________________________________________________________________________</code></pre>
<p>This warning is thrown in RAGatouille’s <a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L226"><code>PLAIDModelIndex.build</code></a> if <code>hasattr(faiss, "StandardGpuResources")</code> is <code>False</code>.</p>
<p>Looking at the <a href="https://github.com/facebookresearch/faiss/tree/main#:~:text=faiss%2Dcpu%2C-,faiss%2Dgpu,-and%20faiss%2Dgpu">faiss repo</a>, they recommend using conda for installation. I ran <code>conda install pytorch::faiss-gpu</code>, restarted the kernel, confirmed that <code>hasattr(faiss, "StandardGpuResources")</code> returns <code>True</code> and was successfully able to circumvent that warning. As a result, RAGatouille was able to use faiss-gpu and it was able to index 2M document.</p>
<p>It’s still TBD if this allows me to finish indexing all of my datasets (especially the 13M and 32M ones).</p>
<p>In a conversation with Claude, I outlined a few different scenarios that I may have to (get to) pursue:</p>
<blockquote class="blockquote">
<p>Since both repos are open sourced, I can fork them (which I have) and add print statements/modify code to debug as needed.</p>
<p>I am running into a couple issues that I’m trying to resolve. I don’t want you to suggest any code yet, let’s think this through.</p>
<ol type="1">
<li>When performing retrieval on a 2.6M document collection on an RTX3090, RAGatouille.search throws an OOM error.</li>
<li>So I chose to run retrieval on the RAGatouille index using vanilla ColBERT and it did not run out of memory.</li>
<li>However, the retrieval results are <em>significantly</em> different between ColBERT and RAGatouille.</li>
</ol>
<p>Each of these gives me a uniquely interesting direction to pursue:</p>
<ol type="1">
<li>Why does RAGatouille throw the OOM error? 2.6M documents (index with 8.5GB disk space) is not small, but not terribly large. There’s an issue open in RAGatouille where they note that changing batch_size in score_pids in IndexScorer resolves an OOM error during search. I want to give this a try!</li>
<li>Why does ColBERT not run out of memory? But RAGatouille does?</li>
<li>Why are the retrieval results between RAGatouille and ColBERT different? The RAGatouille documentation says the following, which leads me to believe they should yield the same results:</li>
</ol>
<p>If you’d like to use more than RAGatouille, ColBERT has a growing number of integrations, and they all fully support models trained or fine-tuned with RAGatouille! The official ColBERT implementation has a built-in query server (using Flask), which you can easily query via API requests and does support indexes generated with RAGatouille! This should be enough for most small applications, so long as you can persist the index on disk.</p>
<p>Each of these explorations are fascinating, and I think I’m going to pursue each one.</p>
<ol type="1">
<li>resolving the RAGatouille OOM error would solve my immediate problem. ideally I tackle this first.</li>
<li>Understanding memory usage between RAGatouille and ColBERT has been an ongoing interest of mine. I have memory profiled both before during indexing, but not during search. This would be a very interesting research task.</li>
<li>Debugging the searching/scoring difference would be probably the hardest task. I would likely have to trace down all function calls, checking intermedite values, comparing them between the two frameworks. Absolutely fascinating and would learn a ton. Would also be a significant achievement to resolve the discrepancy (maybe something in the Config? Maybe something more fundamental?)</li>
</ol>
</blockquote>
<p>TBD on whether I pursue points 2 and 3.</p>



 ]]></description>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-08-TIL-RAGatouille/index.html</guid>
  <pubDate>Thu, 08 May 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>DataInspector: Inspecting input_ids Token Statistics in LLM-Foundry with packing_ratio=5.0</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-08-DataInspector/index.html</link>
  <description><![CDATA[ 






 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-08-DataInspector/index.html</guid>
  <pubDate>Thu, 08 May 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding Sequence Packing - Initial Musings</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-04-Understanding-Sequence-Packing/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<details>
<summary>Show pip installs and imports</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>qq <span class="op" style="color: #5E5E5E;">-</span>U flash<span class="op" style="color: #5E5E5E;">-</span>attn <span class="op" style="color: #5E5E5E;">--</span>no<span class="op" style="color: #5E5E5E;">-</span>build<span class="op" style="color: #5E5E5E;">-</span>isolation</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;">!</span>pip uninstall transformers <span class="op" style="color: #5E5E5E;">-</span>y</span>
<span id="cb1-3"><span class="op" style="color: #5E5E5E;">!</span>pip install git<span class="op" style="color: #5E5E5E;">+</span>https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>vishalbakshi<span class="op" style="color: #5E5E5E;">/</span>transformers.git <span class="op" style="color: #5E5E5E;">-</span>qq</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM, AutoTokenizer</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> inspect</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> torch.nn.functional <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb1-9"></span>
<span id="cb1-10">model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"HuggingFaceTB/SmolLM2-135M"</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(</span>
<span id="cb1-13">    model_name,</span>
<span id="cb1-14">    attn_implementation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flash_attention_2"</span>,</span>
<span id="cb1-15">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span>torch.bfloat16,</span>
<span id="cb1-16">    device_map<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"auto"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_name)</span></code></pre></div>
</details>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this blog post, I’m walking through <code>transformers</code> code to start exploring functionality between sequence packing and Flash Attention. I’m new to both concepts, so this is purely an exploratory exercise.</p>
<p>To assist my exploration, I’ve forked the Transformers library and added print statements at key junctures related to sequence packing and FA2. Referencing the original repo here’s where I’ve inserted print statements:</p>
<ul>
<li>Right after the function signature for <code>flash_attention_forward</code> in <a href="https://github.com/huggingface/transformers/blob/2932f318a20d9e54cc7aea052e040164d85de7d6/src/transformers/integrations/flash_attention.py#L22">src/transformers/integrations/flash_attention.py</a> (which is called from inside <code>model.model.layers[0].self_attn.forward</code>).</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">=== FLASH_ATTENTION_FORWARD ENTRY ==="</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"kwargs received: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">list</span>(kwargs.keys())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
<ul>
<li>Right after the function signature/docstring for <code>_flash_attention_forward</code> in <a href="https://github.com/huggingface/transformers/blob/2932f318a20d9e54cc7aea052e040164d85de7d6/src/transformers/modeling_flash_attention_utils.py#L324">src/transformers/modeling_flash_attention_utils.py</a>:</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">=== _FLASH_ATTENTION_FORWARD ENTRY ==="</span>)</span>
<span id="cb3-2"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"kwargs received: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">list</span>(kwargs.keys())<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> attention_mask"</span>)</span>
<span id="cb3-5"><span class="bu" style="color: null;">print</span>(attention_mask)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> position_ids"</span>)</span>
<span id="cb3-8"><span class="bu" style="color: null;">print</span>(position_ids)</span></code></pre></div>
<p>In the same file, later on:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Contains at least one padding token in the sequence</span></span>
<span id="cb4-2"><span class="cf" style="color: #003B4F;">if</span> attention_mask <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-3">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"attention_mask is not None"</span>)</span>
<span id="cb4-4">    ...</span></code></pre></div>
<p>and later on further in the <code>_flash_attention_forward</code> function definition:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;">elif</span> position_ids <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> (</span>
<span id="cb5-2">    max_length_q <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> (query_length <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> <span class="kw" style="color: #003B4F;">not</span> (torch.diff(position_ids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>).<span class="bu" style="color: null;">all</span>())</span>
<span id="cb5-3">):</span>
<span id="cb5-4">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"position_ids is not None and max_length_q check"</span>)</span>
<span id="cb5-5">    batch_size <span class="op" style="color: #5E5E5E;">=</span> query_states.size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">if</span> cu_seq_lens_q <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> cu_seq_lens_k <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-8">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"cu_seq_lens_q is None: </span><span class="sc" style="color: #5E5E5E;">{</span>cu_seq_lens_q <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"cu_seq_lens_k is None: </span><span class="sc" style="color: #5E5E5E;">{</span>cu_seq_lens_q <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-10">        query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb5-11">            prepare_fa2_from_position_ids(query_states, key_states, value_states, position_ids)</span>
<span id="cb5-12">        )</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;"> cu_seq_lens"</span>)</span>
<span id="cb5-15">        <span class="bu" style="color: null;">print</span>(cu_seq_lens)</span>
<span id="cb5-16">        cu_seq_lens_q, cu_seq_lens_k <span class="op" style="color: #5E5E5E;">=</span> cu_seq_lens</span>
<span id="cb5-17">        max_length_q, max_length_k <span class="op" style="color: #5E5E5E;">=</span> max_seq_lens</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-20">        ...</span></code></pre></div>
<p>I originally identified these functions by using the <code>inspect</code> library, e.g.:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;">print</span>(inspect.getsource(model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.forward))</span></code></pre></div>
<p>The goal of these print functions initially was to understand how <code>cu_seqlens</code> is utilized (if at all) and then after realizing it wasn’t being used, my goal became to understand which function form <code>flash_attn</code> is being used: <code>flash_attn_func</code> or <code>flash_attn_varlen_func</code>?</p>
</section>
<section id="initial-example-passing-in-input_ids-cu_seqlens-and-max_seqlen-to-the-smollm2-135m-forward-pass" class="level2">
<h2 class="anchored" data-anchor-id="initial-example-passing-in-input_ids-cu_seqlens-and-max_seqlen-to-the-smollm2-135m-forward-pass">Initial Example: Passing in <code>input_ids</code>, <code>cu_seqlens</code> and <code>max_seqlen</code> to the SmolLM2-135M Forward Pass</h2>
<p>At first, based on a Claude-generated example, I passed in the following fake input data.</p>
<div class="cell" data-outputid="6bc4c7d5-d953-4f4b-911c-b1b2936fbb5c" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb7-2">test_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb7-3">    <span class="st" style="color: #20794D;">'input_ids'</span>: torch.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">10</span>)).to(<span class="st" style="color: #20794D;">"cuda"</span>),</span>
<span id="cb7-4">    <span class="st" style="color: #20794D;">'cu_seqlens'</span>: [torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32).to(<span class="st" style="color: #20794D;">"cuda"</span>)],</span>
<span id="cb7-5">    <span class="st" style="color: #20794D;">'max_seqlen'</span>: [<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb7-6">}</span>
<span id="cb7-7">test_params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>{'input_ids': tensor([[7, 6, 8, 5, 1, 3, 8, 6, 5, 3]], device='cuda:0'),
 'cu_seqlens': [tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32)],
 'max_seqlen': [10]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): output <span class="op" style="color: #5E5E5E;">=</span> model(<span class="op" style="color: #5E5E5E;">**</span>test_params)</span></code></pre></div>
</div>
<p>The following was printed out for each attention mechanism call in each of the model’s 30 layers:</p>
<pre><code>=== FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['position_ids', 'output_attentions', 'use_cache', 'cu_seqlens', 'max_seqlen']

=== _FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['output_attentions', 'use_cache', 'cu_seqlens', 'max_seqlen']

 attention_mask
None

 position_ids
tensor([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], device='cuda:0')
flash_attn_func is called
flash_kwargs received: ['deterministic']</code></pre>
<p>I was surprised to see that <code>flash_attn_func</code> was called, because IIUC that doesn’t handle sequence packed inputs. Looking at <a href="https://github.com/Dao-AILab/flash-attention/blob/fd2fc9d85c8e54e5c20436465bca709bc1a6c5a1/hopper/flash_attn_interface.py#L501">its function signature</a>, there’s no <code>cu_seqlens</code> or similar parameter:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> flash_attn_func(</span>
<span id="cb11-2">    q,</span>
<span id="cb11-3">    k,</span>
<span id="cb11-4">    v,</span>
<span id="cb11-5">    softmax_scale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb11-6">    causal<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb11-7">    qv<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb11-8">    q_descale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, k_descale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, v_descale<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb11-9">    window_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb11-10">    attention_chunk<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb11-11">    softcap<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.0</span>,</span>
<span id="cb11-12">    num_splits<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb11-13">    pack_gqa<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb11-14">    deterministic<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb11-15">    sm_margin<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>,</span>
<span id="cb11-16">)</span></code></pre></div>
<p>Additionally, <code>position_ids</code> is defined even though I didn’t pass it in. IIUC, that’s done in the model’s forward pass with the line:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="cf" style="color: #003B4F;">if</span> position_ids <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb12-2">    position_ids <span class="op" style="color: #5E5E5E;">=</span> cache_position.unsqueeze(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<p>Where <code>cache_position</code> is defined earlier in that forward pass. This can be observed by running:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">forward_method <span class="op" style="color: #5E5E5E;">=</span> inspect.getsource(model.model.forward)</span>
<span id="cb13-2"><span class="bu" style="color: null;">print</span>(forward_method)</span></code></pre></div>
</section>
<section id="second-attempt-passing-in-position_ids-to-the-forward-pass-as-well" class="level2">
<h2 class="anchored" data-anchor-id="second-attempt-passing-in-position_ids-to-the-forward-pass-as-well">Second Attempt: Passing in <code>position_ids</code> to the Forward Pass as Well</h2>
<p>Claude helped me understand that what triggers the function call of <code>flash_attn_varlen_func</code> is the following conditional in <a href="https://github.com/huggingface/transformers/blob/2932f318a20d9e54cc7aea052e040164d85de7d6/src/transformers/modeling_flash_attention_utils.py#L378"><code>_flash_attention_forward</code></a>:</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;">elif</span> position_ids <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> (</span>
<span id="cb14-2">        max_length_q <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> (query_length <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> <span class="kw" style="color: #003B4F;">not</span> (torch.diff(position_ids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>).<span class="bu" style="color: null;">all</span>())</span>
<span id="cb14-3">    )</span></code></pre></div>
<p>In particular, this line was of interest: <code>torch.diff(position_ids, dim=-1) &gt;= 0</code></p>
<p>In the following contrived example, <code>position_ids</code> is not a list of consecutive numbers (which seems to be the default value constructed is no <code>position_ids</code> value is passed to the model’s forward pass).</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">input_ids <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">14</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">16</span>]]).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb15-2">position_ids <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>]]).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb15-3">cu_seqlens <span class="op" style="color: #5E5E5E;">=</span> [torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32).to(<span class="st" style="color: #20794D;">"cuda"</span>)]</span></code></pre></div>
</div>
<div class="cell" data-outputid="46c76718-2cd2-411b-eb4e-5822cb0d73d7" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">(torch.diff(position_ids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span>).<span class="bu" style="color: null;">all</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor(False, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="5bed5591-9d67-4d15-cb42-8b1ab15f3089" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">torch.diff(position_ids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([[ True,  True, False,  True,  True,  True,  True,  True,  True]],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="d15b4b7a-5cee-4651-e5b3-861f7c4d03b6" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">torch.diff(position_ids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>tensor([[ 1,  1, -2,  1,  1,  1,  1,  1,  1]], device='cuda:0')</code></pre>
</div>
</div>
<p>Some diffs between consecutive elements in <code>position_ids</code> are negative (because we are defining two sequences’ position ids).</p>
<p>I would now expect <code>flash_attn_varlen_func</code> to be called.</p>
<div class="cell" data-outputid="bbd565ce-415c-4756-98f0-364a438ed5ed" data-execution_count="43">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb22-2">test_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb22-3">    <span class="st" style="color: #20794D;">'input_ids'</span>: torch.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">10</span>)).to(<span class="st" style="color: #20794D;">"cuda"</span>),</span>
<span id="cb22-4">    <span class="st" style="color: #20794D;">'position_ids'</span>: torch.tensor([[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>]]).to(<span class="st" style="color: #20794D;">"cuda"</span>),</span>
<span id="cb22-5">    <span class="st" style="color: #20794D;">'cu_seqlens'</span>: [torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32).to(<span class="st" style="color: #20794D;">"cuda"</span>)],</span>
<span id="cb22-6">    <span class="st" style="color: #20794D;">'max_seqlen'</span>: [<span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb22-7">}</span>
<span id="cb22-8">test_params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>{'input_ids': tensor([[7, 6, 8, 5, 1, 3, 8, 6, 5, 3]], device='cuda:0'),
 'position_ids': tensor([[0, 1, 2, 0, 1, 2, 3, 4, 5, 6]], device='cuda:0'),
 'cu_seqlens': [tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32)],
 'max_seqlen': [7]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb24-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): output <span class="op" style="color: #5E5E5E;">=</span> model(<span class="op" style="color: #5E5E5E;">**</span>test_params)</span></code></pre></div>
</div>
<p>Passing <code>test_params</code> through the model’s forward pass yields:</p>
<pre><code>=== FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['position_ids', 'output_attentions', 'use_cache', 'cu_seqlens', 'max_seqlen']

=== _FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['output_attentions', 'use_cache', 'cu_seqlens', 'max_seqlen']

 attention_mask
None

 position_ids
tensor([[0, 1, 2, 0, 1, 2, 3, 4, 5, 6]], device='cuda:0')
position_ids is not None and max_length_q check
cu_seq_lens_q is None: True
cu_seq_lens_k is None: True

 cu_seq_lens
(tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32), tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32))</code></pre>
<p>The <code>position_ids</code> are as passed in. However, it does not use <code>cu_seqlens</code> directly from <code>kwargs</code>. Instead it builds it <a href="https://github.com/huggingface/transformers/blob/2932f318a20d9e54cc7aea052e040164d85de7d6/src/transformers/modeling_flash_attention_utils.py#L383">in the following line</a>:</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens <span class="op" style="color: #5E5E5E;">=</span> (</span>
<span id="cb26-2">    prepare_fa2_from_position_ids(query_states, key_states, value_states, position_ids)</span>
<span id="cb26-3">)</span></code></pre></div>
<p>The value of <code>cu_seqlens</code> is the tuple:</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">(tensor([ <span class="dv" style="color: #AD0000;">0</span>,  <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda:0'</span>, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32), tensor([ <span class="dv" style="color: #AD0000;">0</span>,  <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda:0'</span>, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32))</span></code></pre></div>
<p>Which is deconstructed into <code>cu_seq_lens_q</code> and <code>cu_seql_lens_k</code> which are then passed as arguments to <code>flash_attn_varlen_func</code>.</p>
<p>The main takeaway from this: Flash Attention will not handle sequence packing correctly unless you pass in <code>position_ids</code>.</p>
</section>
<section id="packed-sequence-loss" class="level2">
<h2 class="anchored" data-anchor-id="packed-sequence-loss">Packed Sequence Loss</h2>
<p>In the remaining sections of this blog post, I’ll explore how to correctly handle calculating loss for a packed sequence.</p>
<div class="cell" data-outputid="05592fff-ecf2-4adf-e347-a4526778898f" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">output.logits.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>torch.Size([1, 10, 49152])</code></pre>
</div>
</div>
<p>Following how labels are constructed in HuggingFace’s <a href="https://github.com/RhuiDih/transformers/blob/90305596c1f14376bb2049f408a4c53e024b2450/src/transformers/data/data_collator.py#L1643"><code>DataCollatorWithFlattening</code></a>, the first token in each sequence is replaced with <code>-100</code>. This is because the HuggingFace CausalLM loss function handles the shifting of labels to allow next-token prediction.</p>
<div class="cell" data-outputid="0df22f75-897e-4207-8285-5b4edffc30c7" data-execution_count="19">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">labels <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>]).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb30-2">labels</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor([-100,    6,    8, -100,    1,    3,    8,    6,    5,    3],
       device='cuda:0')</code></pre>
</div>
</div>
<p>The following two lines are taken from the model’s loss function which can be inspected with <code>print(inspect.getsource(model.loss_function))</code>:</p>
<div class="cell" data-outputid="19309094-2315-487f-badc-574c5b8fab60" data-execution_count="20">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">_labels <span class="op" style="color: #5E5E5E;">=</span> torch.nn.functional.pad(labels, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), value<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb32-2">shift_labels <span class="op" style="color: #5E5E5E;">=</span> _labels[..., <span class="dv" style="color: #AD0000;">1</span>:].contiguous()</span>
<span id="cb32-3">shift_labels</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>tensor([   6,    8, -100,    1,    3,    8,    6,    5,    3, -100],
       device='cuda:0')</code></pre>
</div>
</div>
<p>We can see that the labels have been shifted to the left by 1 element, and a <code>-100</code> ignore index has been added to the right, which is needed because the last token in the input doesn’t predict anything.</p>
<p>Calculating the loss using <code>F.cross_entropy</code> directly and the model’s <code>loss_function</code> (providing it unshifted <code>labels</code>):</p>
<div class="cell" data-outputid="d77b6fcb-8635-4fc2-dc2b-e767fd428d7c" data-execution_count="21">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">loss <span class="op" style="color: #5E5E5E;">=</span> F.cross_entropy(</span>
<span id="cb34-2">    output.logits.reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, output.logits.size(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)).<span class="bu" style="color: null;">float</span>(),</span>
<span id="cb34-3">    shift_labels.reshape(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb34-4">)</span>
<span id="cb34-5">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>tensor(20.2832, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="91c2e8da-2901-44a0-e234-5dbe77787361" data-execution_count="22">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">model.loss_function(output.logits, labels, <span class="dv" style="color: #AD0000;">49152</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>tensor(20.2832, device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="padded-batch-loss" class="level2">
<h2 class="anchored" data-anchor-id="padded-batch-loss">Padded Batch Loss</h2>
<p>Sequence packing shouldn’t change the loss value of a given input batch. To test this, I’ll construct a padded batch from our fake data and calculate its outputs, labels and loss.</p>
<div class="cell" data-outputid="e7066f5a-18f6-43b6-a247-bf162df07b79" data-execution_count="23">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">input_ids <span class="op" style="color: #5E5E5E;">=</span> test_params[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb38-2">input_ids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([7, 6, 8, 5, 1, 3, 8, 6, 5, 3], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="8c2cc60a-1319-480c-e975-b60ea1e94a7a" data-execution_count="24">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">cu_seqlens <span class="op" style="color: #5E5E5E;">=</span> test_params[<span class="st" style="color: #20794D;">'cu_seqlens'</span>][<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb40-2">cu_seqlens</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32)</code></pre>
</div>
</div>
<div class="cell" data-outputid="bbb44c85-d6d9-4d4a-d91d-7ced9a893f42" data-execution_count="25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">seq_boundaries <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">zip</span>(cu_seqlens[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], cu_seqlens[<span class="dv" style="color: #AD0000;">1</span>:]))</span>
<span id="cb42-2">seq_boundaries</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>[(tensor(0, device='cuda:0', dtype=torch.int32),
  tensor(3, device='cuda:0', dtype=torch.int32)),
 (tensor(3, device='cuda:0', dtype=torch.int32),
  tensor(10, device='cuda:0', dtype=torch.int32))]</code></pre>
</div>
</div>
<div class="cell" data-outputid="eca4d729-ec35-4d60-b6d3-0504fd4cda7a" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">seq1 <span class="op" style="color: #5E5E5E;">=</span> input_ids[seq_boundaries[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]: seq_boundaries[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb44-2">seq2 <span class="op" style="color: #5E5E5E;">=</span> input_ids[seq_boundaries[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]: seq_boundaries[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb44-3">seq1, seq2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>(tensor([7, 6, 8], device='cuda:0'),
 tensor([5, 1, 3, 8, 6, 5, 3], device='cuda:0'))</code></pre>
</div>
</div>
<p>The first item in the batch has 3 elements, and the second item in the batch has 7 elements. We need to pad the first item so it’s 7 elements long.</p>
<div class="cell" data-outputid="2260cb77-daca-41dc-9d40-5fce0bf2d638" data-execution_count="27">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">seq1 <span class="op" style="color: #5E5E5E;">=</span> torch.cat([seq1, torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]).to(<span class="st" style="color: #20794D;">"cuda"</span>)])</span>
<span id="cb46-2">seq1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([7, 6, 8, 0, 0, 0, 0], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="99b50860-f6ea-472e-b244-0424fa99d756" data-execution_count="28">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">padded_batch <span class="op" style="color: #5E5E5E;">=</span> torch.stack([seq1, seq2], dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb48-2">padded_batch, padded_batch.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>(tensor([[7, 6, 8, 0, 0, 0, 0],
         [5, 1, 3, 8, 6, 5, 3]], device='cuda:0'),
 torch.Size([2, 7]))</code></pre>
</div>
</div>
<p>Similarly, we need to construct <code>labels</code> such that the last four elements in the first batch item are ignored.</p>
<div class="cell" data-outputid="79c4035c-71f7-4d78-f722-05623c1f5c7f" data-execution_count="29">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">seq1 <span class="op" style="color: #5E5E5E;">=</span> input_ids[seq_boundaries[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">0</span>]: seq_boundaries[<span class="dv" style="color: #AD0000;">0</span>][<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb50-2">seq2 <span class="op" style="color: #5E5E5E;">=</span> input_ids[seq_boundaries[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>]: seq_boundaries[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb50-3">seq1, seq2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>(tensor([7, 6, 8], device='cuda:0'),
 tensor([5, 1, 3, 8, 6, 5, 3], device='cuda:0'))</code></pre>
</div>
</div>
<div class="cell" data-outputid="ea05103b-0a1e-4a5d-89ca-a7e243c5f66a" data-execution_count="30">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">seq1 <span class="op" style="color: #5E5E5E;">=</span> torch.cat([seq1, torch.tensor([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>]).to(<span class="st" style="color: #20794D;">"cuda"</span>)])</span>
<span id="cb52-2">seq1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>tensor([   7,    6,    8, -100, -100, -100, -100], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="bf8a766d-0c21-4ce8-c288-7d654906f228" data-execution_count="31">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">padded_labels <span class="op" style="color: #5E5E5E;">=</span> torch.stack([seq1, seq2], dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb54-2">padded_labels</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>tensor([[   7,    6,    8, -100, -100, -100, -100],
        [   5,    1,    3,    8,    6,    5,    3]], device='cuda:0')</code></pre>
</div>
</div>
<p>Calculating the logits:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb56-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): padded_output <span class="op" style="color: #5E5E5E;">=</span> model(input_ids<span class="op" style="color: #5E5E5E;">=</span>padded_batch)</span></code></pre></div>
</div>
<p>Noting that I haven’t pass any <code>position_ids</code> and the printed output shows us that <code>flash_attn_func</code> is indeed the “vanilla” implementation of Flash Attention for padded batches:</p>
<pre><code>=== FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['position_ids', 'output_attentions', 'use_cache']

=== _FLASH_ATTENTION_FORWARD ENTRY ===
kwargs received: ['output_attentions', 'use_cache']

 attention_mask
None

 position_ids
tensor([[0, 1, 2, 3, 4, 5, 6]], device='cuda:0')
flash_attn_func is called
flash_kwargs received: ['deterministic']</code></pre>
<p>Comparing the packed output logits with the padded output logits. The shapes are different but the values are the same.</p>
<div class="cell" data-outputid="3aadf767-b684-4d5a-b77d-c61d133baa74" data-execution_count="33">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">output.logits.shape, padded_output.logits.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>(torch.Size([1, 10, 49152]), torch.Size([2, 7, 49152]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="070e6ffd-013f-4ecd-befc-9ac8dae7cc91" data-execution_count="34">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">(output.logits[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>, :] <span class="op" style="color: #5E5E5E;">==</span> padded_output.logits[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">3</span>, :]).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor(1., device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="8598f24d-6e50-4bc8-ce46-e04918d5afc2" data-execution_count="35">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">(output.logits[<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>:, :] <span class="op" style="color: #5E5E5E;">==</span> padded_output.logits[<span class="dv" style="color: #AD0000;">1</span>, :, :]).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>tensor(1., device='cuda:0')</code></pre>
</div>
</div>
<p>Finally, calculating the padded batch’s loss gives us the same value as the sequence packed loss:</p>
<div class="cell" data-outputid="d4daac3a-2429-438a-deb4-c09d5bca924c" data-execution_count="36">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">padded_loss <span class="op" style="color: #5E5E5E;">=</span> model.loss_function(padded_output.logits, padded_labels, vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">49152</span>)</span>
<span id="cb64-2">padded_loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor(20.2832, device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="not-passing-in-position_ids-with-packed-sequence" class="level2">
<h2 class="anchored" data-anchor-id="not-passing-in-position_ids-with-packed-sequence">Not Passing in <code>position_ids</code> With Packed Sequence</h2>
<p>To confirm that not passing in position_ids does in indeed make HuggingFace use the wrong Flash Attention implementation for a packed sequence, I’ll compare the logits and loss:</p>
<div class="cell" data-outputid="990a6acb-870f-46fd-e6e1-8e9c49adde95" data-execution_count="50">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb66-2">test_params <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb66-3">    <span class="st" style="color: #20794D;">'input_ids'</span>: torch.randint(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">10</span>)).to(<span class="st" style="color: #20794D;">"cuda"</span>),</span>
<span id="cb66-4">    <span class="st" style="color: #20794D;">'cu_seqlens'</span>: [torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">10</span>], dtype<span class="op" style="color: #5E5E5E;">=</span>torch.int32).to(<span class="st" style="color: #20794D;">"cuda"</span>)],</span>
<span id="cb66-5">    <span class="st" style="color: #20794D;">'max_seqlen'</span>: [<span class="dv" style="color: #AD0000;">10</span>]</span>
<span id="cb66-6">}</span>
<span id="cb66-7">test_params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>{'input_ids': tensor([[7, 6, 8, 5, 1, 3, 8, 6, 5, 3]], device='cuda:0'),
 'cu_seqlens': [tensor([ 0,  3, 10], device='cuda:0', dtype=torch.int32)],
 'max_seqlen': [10]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb68-2"><span class="cf" style="color: #003B4F;">with</span> torch.no_grad(): output2 <span class="op" style="color: #5E5E5E;">=</span> model(<span class="op" style="color: #5E5E5E;">**</span>test_params)</span></code></pre></div>
</div>
<p>The logits are not the same as when <code>flash_attn_varlen_func</code> is used.</p>
<div class="cell" data-outputid="91d780a7-01bb-4650-e622-6901fc72cc7b" data-execution_count="52">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">(output.logits <span class="op" style="color: #5E5E5E;">==</span> output2.logits).<span class="bu" style="color: null;">float</span>().mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>tensor(0.3012, device='cuda:0')</code></pre>
</div>
</div>
<p>It follows that the loss value is not the same either.</p>
<div class="cell" data-outputid="6ec37ab6-7dac-4d44-f171-901f927ad8b0" data-execution_count="40">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">labels <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>]).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb71-2">model.loss_function(output.logits, labels, <span class="dv" style="color: #AD0000;">49152</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>tensor(17.4632, device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>I’ll reiterate that I’m not familiar with how sequence packing is implemented (in HuggingFace or ModernBERT) and even less familiar with how Flash Attention is implemented. That being said, this cursory investigation allowed me to understand high-level concepts of how these two interact. My key takeaway is that the correct <code>position_ids</code> need to be passed to the model otherwise HuggingFace will not use the correct <code>flash_attn_varlen_func</code> for sequence packed inputs and that will result in incorrect logits and loss values.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-04-Understanding-Sequence-Packing/index.html</guid>
  <pubDate>Sun, 04 May 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Initial Manual Scoring Results for TinyStories Models</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-05-01-TSL-Initial-Scoring-Results/index.html</link>
  <description><![CDATA[ 



<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this post, I’m going to analyze the initial manual scoring results for my baseline models’ text generations given my 150 evaluation prompts across six scoring categories and 18 criteria. A quick recap of what I’ve done so far:</p>
<ul>
<li>Defined scoring criteria</li>
<li>Curated a set of eval prompts based on each scoring category</li>
<li>Created a fast HTML app where I can perform my scoring activities</li>
</ul>
<p>The raw scores analyzed in this blog post can be found in <a href="https://github.com/vishalbakshi/TinyScaleLab">my TinyScaleLab repo</a>.</p>
</section>
<section id="evaluation-categories" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-categories">Evaluation Categories</h2>
<p>I have six scoring categories that I’m evaluating my models on:</p>
<section id="foundational-language-capabilities" class="level3">
<h3 class="anchored" data-anchor-id="foundational-language-capabilities">Foundational language capabilities</h3>
<ul>
<li>Grammar</li>
<li>Context-Tracking (Consistency)</li>
</ul>
</section>
<section id="emergent-capabilities" class="level3">
<h3 class="anchored" data-anchor-id="emergent-capabilities">Emergent capabilities</h3>
<ul>
<li>Factual Knowledge</li>
<li>Reasoning</li>
<li>Creativity</li>
</ul>
</section>
<section id="story-related-capabilities" class="level3">
<h3 class="anchored" data-anchor-id="story-related-capabilities">Story-related capabilities</h3>
<ul>
<li>Plot</li>
</ul>
<p>My goal was to generate prompts that either isolate (Factual Knowledge, Reasoning, Context-Tracking) or elicit opportunities to exhibit (Plot, Creativity) scoring categories. I wanted to make the job easier first for myself, and then use that as a proxy of making the job of the LLM judge easier to evaluate scoring categories in a focused way.</p>
</section>
</section>
<section id="baseline-models" class="level2">
<h2 class="anchored" data-anchor-id="baseline-models">Baseline Models</h2>
<p>I’ve chosen three models as my baseline because they’re similar in size to the models that I’m going to be training in this project:</p>
<ul>
<li>TinyStories-1M (~3.7 million parameters)</li>
<li>TinyStories-8M (~20 million parameters)</li>
<li>TinyStories-28M (~60 million parameters)</li>
</ul>
</section>
<section id="generation-script" class="level2">
<h2 class="anchored" data-anchor-id="generation-script">Generation Script</h2>
<p>I’m using a pretty standard generation script. Things I want to highlight:</p>
<ul>
<li>Making sure the padding side is left so that we’re not generating tokens based on padding tokens</li>
<li><code>model.eval()</code> and <code>torch.no_grad()</code> are things that I always make sure to do so that it’s somewhat deterministic when it’s expected to be deterministic</li>
<li>I’m doing <code>do_sample=False</code> and <code>num_beams=5</code> because that was published by the authors as their parameters for generation</li>
<li>I have a minimum and maximum length, which I’ll talk about at the end about how I think that might change moving forward</li>
</ul>
</section>
<section id="eval-prompts" class="level2">
<h2 class="anchored" data-anchor-id="eval-prompts">Eval Prompts</h2>
<p>My current eval prompts set includes:</p>
<ul>
<li>25 unique prompts for Reasoning</li>
<li>25 unique prompts for Factual Knowledge</li>
<li>25 prompts each for Context-Tracking, Plot and Creativity (with some overlap)</li>
<li>25 prompts for Grammar (5 prompts sampled from the other 5 categories)</li>
</ul>
<p>That’s 150 total prompts.</p>
</section>
<section id="scoring-methodology" class="level2">
<h2 class="anchored" data-anchor-id="scoring-methodology">Scoring Methodology</h2>
<p>I have six categories across 18 criteria, evaluating generations from three models on 150 prompts each. The scores that I’m providing for each criteria are either 0, 0.5, and 1.0, taken from the Tiny Stories paper (though they didn’t quite use it the same way I’m using it), in Section 4.2 (Figures 9/10/11) where they use scoring levels success (green), failure (red), and partial success (yellow).</p>
</section>
<section id="overall-results" class="level2">
<h2 class="anchored" data-anchor-id="overall-results">Overall Results</h2>
<p>First, let’s look at the average value across all categories and criteria for each model:</p>
<table class="table">
<thead>
<tr class="header">
<th>model_name</th>
<th>score_value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>roneneneldan/TinyStories-1M</td>
<td>0.25</td>
</tr>
<tr class="even">
<td>roneneneldan/TinyStories-8M</td>
<td>0.49</td>
</tr>
<tr class="odd">
<td>roneneneldan/TinyStories-28M</td>
<td>0.61</td>
</tr>
</tbody>
</table>
<p>As I would expect, as model size increases, the average score value increases. The 1M parameter model (which actually has 3.7M parameters) has an average score of 0.25. The 8M parameter model (which is closer to 20M parameters) has an average score of about 0.5. And the 28M parameter model (which has about 60M parameters) has an average score of 0.61.</p>
<p>A parameter count <em>increase</em> of 4x (16.3M increase from 3.7M to 20M) yields an overall mean score <em>increase</em> of 1x (0.25 to 0.50). A parameter count <em>increase</em> of 2x (40M increase from 20M to 60M) yields an overall mean score <em>increase</em> of 25% (0.49 to 0.61). There are decreasing gains overall when increasing parameter count. For a 125M parameter model (that I’m planning to train), I would expect &lt;10% increase from a mean overall score of 0.61.</p>
</section>
<section id="scores-by-category" class="level2">
<h2 class="anchored" data-anchor-id="scores-by-category">Scores by Category</h2>
<p>Next, let’s look at how these models are doing for each of the categories overall:</p>
<table class="table">
<thead>
<tr class="header">
<th></th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Context-Tracking</td>
<td>0.14</td>
<td>0.51</td>
<td>0.63</td>
</tr>
<tr class="even">
<td>Creativity</td>
<td>0.12</td>
<td>0.16</td>
<td>0.32</td>
</tr>
<tr class="odd">
<td>Factual Knowledge</td>
<td>0.08</td>
<td>0.32</td>
<td>0.40</td>
</tr>
<tr class="even">
<td>Grammar</td>
<td>0.59</td>
<td>0.82</td>
<td>0.86</td>
</tr>
<tr class="odd">
<td>Plot</td>
<td>0.10</td>
<td>0.42</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>Reasoning</td>
<td>0.20</td>
<td>0.44</td>
<td>0.70</td>
</tr>
</tbody>
</table>
<p>Some interesting things to point out:</p>
<p>The highest category by score for my 1M parameter model is grammar, by farL 0.59. That’s about three times as large as any other category. This is in line with what I read in the TinyStories paper, that grammar appears first as a capability.</p>
<p>The worst categories, even for the largest model that I tested, were Creativity and Factual Knowledge. Creativity in particular was the lowest scoring, and this also tracks with the TinyStories paper, because they had shown that creativity only really appears at large hidden dimension sizes. And even then, the maximum value of creativity (8s and 9s out of 10) was only available for models like GPT-4.</p>
<p>Factual Knowledge was also significantly lower than the other four categories.</p>
<p>The other category I want to highlight is Reasoning. The Reasoning score for the smallest model is 0.2, it doubles to 0.44 at 8M, and then it goes up by another 60 percent to 0.7 for the 28M model. That’s pretty solid! 70%, 7 out of 10. So, if we were talking about school grades, a 70 percent is passing. Very cool to see reasoning potential, even for the tiniest model evaluated.</p>
<p>In every case, there is an increase as we go from 1M to 8M to 28M model name. In some cases, the jump comes later, such as for Creativity. In most cases, the jump happens between the 1M and 8M models.</p>
</section>
<section id="scoring-by-criteria" class="level2">
<h2 class="anchored" data-anchor-id="scoring-by-criteria">Scoring by Criteria</h2>
<p>Now let’s look at each criteria for each category:</p>
<section id="emergent-capabilities-creativity-factual-knowledge-and-reasoning" class="level3">
<h3 class="anchored" data-anchor-id="emergent-capabilities-creativity-factual-knowledge-and-reasoning">Emergent Capabilities: Creativity, Factual Knowledge and Reasoning</h3>
<table class="table">
<colgroup>
<col style="width: 78%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th>Factual Knowledge</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Completion contains only correct factual information relevant to the prompt</td>
<td>0.08</td>
<td>0.32</td>
<td>0.4</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 79%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Reasoning</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Completion demonstrates correct logical reasoning relevant to the prompt</td>
<td>0.2</td>
<td>0.44</td>
<td>0.7</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 73%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th>Creativity</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Character behavioral and emotional responses are innovative</td>
<td>0.00</td>
<td>0.04</td>
<td>0.22</td>
</tr>
<tr class="even">
<td>The completion contains unique details to the story world</td>
<td>0.02</td>
<td>0.12</td>
<td>0.34</td>
</tr>
<tr class="odd">
<td>The completion creates fresh situations</td>
<td>0.00</td>
<td>0.08</td>
<td>0.20</td>
</tr>
<tr class="even">
<td>The completion offers unexpected or novel elements</td>
<td>0.48</td>
<td>0.42</td>
<td>0.50</td>
</tr>
</tbody>
</table>
<p>Factual Knowledge and Reasoning only had one criteria each. For Factual Knowledge, I was assessing if the completion contains only correct factual information relevant to the prompt. For Reasoning, I was assessing if the completion demonstrates correct logical reasoning relevant to the prompt.</p>
<p>For Creativity, note that the smallest model performs well for the criteria “The completion offers unexpected or novel elements.” Since I was isolating Grammar, Plot and Context-Tracking from Creativity, the tiniest model could deviate from Plot/Context and still get a high score for this criterion, making it the lowest bar to cross. For the other three Creativity criteria, the 1M model has negligible skill.</p>
</section>
<section id="foundational-language-capabilities-grammar-and-context-tracking" class="level3">
<h3 class="anchored" data-anchor-id="foundational-language-capabilities-grammar-and-context-tracking">Foundational Language Capabilities: Grammar and Context-Tracking</h3>
<table class="table">
<colgroup>
<col style="width: 73%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th>Grammar</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Age-appropriate vocabulary usage</td>
<td>1.00</td>
<td>1.00</td>
<td>0.98</td>
</tr>
<tr class="even">
<td>Dialogue formatting and punctuation</td>
<td>1.00</td>
<td>0.96</td>
<td>0.98</td>
</tr>
<tr class="odd">
<td>Proper use of pronouns and referents</td>
<td>0.56</td>
<td>0.88</td>
<td>0.90</td>
</tr>
<tr class="even">
<td>Sentence structure logic, clarity and completion</td>
<td>0.14</td>
<td>0.62</td>
<td>0.70</td>
</tr>
<tr class="odd">
<td>Tense consistency throughout the completion</td>
<td>0.26</td>
<td>0.66</td>
<td>0.74</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 79%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Context-Tracking</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Completion maintains complete coherence with prompt</td>
<td>0.20</td>
<td>0.62</td>
<td>0.64</td>
</tr>
<tr class="even">
<td>Correctly references/tracks all objects, characters, and their attributes</td>
<td>0.20</td>
<td>0.52</td>
<td>0.68</td>
</tr>
<tr class="odd">
<td>Maintains consistent narrative flow</td>
<td>0.02</td>
<td>0.40</td>
<td>0.56</td>
</tr>
</tbody>
</table>
<p>For Grammar, the age-appropriate vocabulary usage was the easiest to score. These models don’t really generate anything that’s not within the TinyStories dataset.</p>
<p>Sentence structure, logic, clarity, and completion had the biggest jump from 1M to 8M, going from 0.14 to 0.62. That matches my experiencing scoring: the small model had terrible structure, logic, clarity, and completion in its completions.</p>
<p>For context tracking, I was looking at three criteria. The biggest jump is from 2% to 40% for maintaining a consistent narrative flow. The medium-sized models were definitely not perfect, but was much better at following the narrative flow of the story.</p>
</section>
<section id="story-related-capabilities-plot" class="level3">
<h3 class="anchored" data-anchor-id="story-related-capabilities-plot">Story-Related Capabilities: Plot</h3>
<table class="table">
<colgroup>
<col style="width: 81%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Plot</th>
<th>1M</th>
<th>8M</th>
<th>28M</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Conflicts are addressed rather than abandoned</td>
<td>0.00</td>
<td>0.42</td>
<td>0.60</td>
</tr>
<tr class="even">
<td>The pacing is appropriate (not too rushed or dragging)</td>
<td>0.00</td>
<td>0.14</td>
<td>0.24</td>
</tr>
<tr class="odd">
<td>The story has a clear beginning, middle, and end appropriate to age level</td>
<td>0.26</td>
<td>0.50</td>
<td>0.72</td>
</tr>
<tr class="even">
<td>The story maintains focus on the central conflict/theme without random diversions</td>
<td>0.12</td>
<td>0.64</td>
<td>0.84</td>
</tr>
</tbody>
</table>
<p>For Plot, I found the pacing to be the worst category across all models. This checks out with my experience as I was grading these stories - I didn’t really get a sense that there was a well-paced story. Either it was dragging and repeating itself slightly, or it was just one or two sentences and insufficient.</p>
<p>For “conflicts are addressed” we go from 0% to 42% from 1M to 8M. The smallest model simply ignored or abandoned conflicts that were in the premise and the prompt. The other big jump is for “focusing on the central theme” - the smallest to medium model had almost a 3x jump, and then there was still a considerable 30% jump from the medium to large model.</p>
</section>
</section>
<section id="comparison-to-tinystories-paper" class="level2">
<h2 class="anchored" data-anchor-id="comparison-to-tinystories-paper">Comparison to TinyStories Paper</h2>
<p>I’m going to revisit the targets that I established from Figure 4 of the TinyStories paper, where they showed the different scores based on hidden dimension and number of layers. I matched that up with the three models that I’m testing:</p>
<section id="creativity" class="level3">
<h3 class="anchored" data-anchor-id="creativity">Creativity</h3>
<p>The TinyStories paper reported:</p>
<ul>
<li>1M: 0.47</li>
<li>8M: 0.65</li>
<li>28M: 0.69</li>
</ul>
<p>My scores:</p>
<ul>
<li>1M: 0.12</li>
<li>8M: 0.16</li>
<li>28M: 0.32</li>
</ul>
<p>This was really interesting - I was expecting my assessment to be maybe a little lenient, but it turns out that’s not the case. My scores were significantly lower. The 28M parameter model (which is actually 60M) got 70% for creativity in the paper, while mine was at 30%. I might have to change that criteria over the course of this project, or it might turn out that for creativity, I have a stricter judge.</p>
</section>
<section id="grammar" class="level3">
<h3 class="anchored" data-anchor-id="grammar">Grammar</h3>
<p>TinyStories:</p>
<ul>
<li>1M: 0.61</li>
<li>8M: 0.77</li>
<li>28M: 0.83</li>
</ul>
<p>My scores:</p>
<ul>
<li>1M: 0.59</li>
<li>8M: 0.82</li>
<li>28M: 0.86</li>
</ul>
<p>This matched out pretty well! 61%/59%, 77%/82%, and 83%/86%. The most common baseline capability matches between the targets and my relatively rough evaluation, so thumbs up!</p>
</section>
<section id="context-tracking-consistency" class="level3">
<h3 class="anchored" data-anchor-id="context-tracking-consistency">Context-Tracking (Consistency)</h3>
<p>TinyStories:</p>
<ul>
<li>1M: 0.45</li>
<li>8M: 0.80</li>
<li>28M: 0.90</li>
</ul>
<p>My scores:</p>
<ul>
<li>1M: 0.14</li>
<li>8M: 0.51</li>
<li>28M: 0.63</li>
</ul>
<p>Similar to creativity, it turns out that my criteria or my judging is a lot stricter than the GPT-4 evaluator used in the paper. The highest score in the paper was 90%, whereas mine was 63%. I’m not too worried about this - I would much rather be stricter than not. However, I’ll be open to changing my approach later on if that turns out to be a problem.</p>
</section>
<section id="plot" class="level3">
<h3 class="anchored" data-anchor-id="plot">Plot</h3>
<p>TinyStories: - 1M: 0.44 - 8M: 0.72 - 28M: 0.73</p>
<p>My scores: - 1M: 0.10 - 8M: 0.42 - 28M: 0.60</p>
<p>The 28M scores for Plot are in the same range but medium-sized and small model scores are significantly different.</p>
<p>Factual Knowledge and Reasoning were not quantitatively assessed in the TinyStories paper in the way that these other scores were listed, so I don’t have those reference points for my evaluation.</p>
</section>
</section>
<section id="observations-from-manual-scoring" class="level2">
<h2 class="anchored" data-anchor-id="observations-from-manual-scoring">Observations From Manual Scoring</h2>
<p>After manually scoring 450 stories, I have some observations:</p>
<ol type="1">
<li><p>Judging quality improves (and changes) over time</p>
<ul>
<li>Implicit judging criteria surfaces over time.</li>
<li>By the time I was doing the last hundred, I realized that I was a lot more definitive in giving 0s, 0.5s, and 1s.</li>
<li>Thee largest model likely has the strictest scores (it was graded last).</li>
</ul></li>
<li><p>Phrasing of scoring criteria improved</p>
<ul>
<li>I wanted to be able to answer the question as fast as I could (450 stories to get through!) with a quick yes, no, maybe (1, 0, 0.5).</li>
<li>Initially, some of the criteria were phrased as questions, requiring more cognitive work. I expect that rephrasing the criteria as statements will also ease the “cognitive load” for my LLM judge.</li>
</ul></li>
<li><p>I identified one duplicate prompt and replaced it</p></li>
<li><p>Pros and cons of isolating scoring categories</p>
<ul>
<li>I scored each category in isolation.</li>
<li>More times than not, I found this very liberating—I could assess Creativity without worrying about Context-Tracking or Plot.</li>
<li>However, language is very difficult to compartmentalize. If something’s not factually correct, it will be a distraction when assessing Reasoning. If the context is not being tracked, it makes it harder to assess plot.</li>
<li>Regardless, I thought this isolation of scoring categories overall benefited my approach</li>
</ul></li>
</ol>
</section>
<section id="exciting-discoveries" class="level2">
<h2 class="anchored" data-anchor-id="exciting-discoveries">Exciting Discoveries</h2>
<p>The main takeaway for me, which was very cool to see, is that Reasoning and Factual Knowledge capabilities exists even for the smallest model. The 1M model scored 20% on Reasoning - that’s not nothing!</p>
<p>The fact that there are non-zero values for these tiny models is really mind-blowing to me. It’s really exciting because there’s potential. We can do something with this, especially as these are just pre-trained models—we haven’t fine-tuned them yet. What can we do with this Reasoning and Factual Knowledge capability? That’s what really excites me moving forward.</p>
</section>
<section id="process-improvements" class="level2">
<h2 class="anchored" data-anchor-id="process-improvements">Process Improvements</h2>
<p>When generating completions for my Reasoning and Factual Knowledge, I want to remove the <code>min_length</code> parameter for <code>model.generate()</code> because I don’t want there to be a minimum generation length when the answer can be a few tokens, forcing the model to uneccesarily elongate the story. However, I won’t make this change for my LLM judge as I want to compare its scores with mine for the same prompt/completion pairs.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>With a full eval set scored, I can now move on to prompt engineering an LLM judge (I’ll be using Gemini 2.5 Flash and Claude Haiku 3.5). My goal is for a 90%+ alignment between my scores and the LLM judge before I choose to use it for future experiments.</p>
<p>Follow along this project (and others) in my <a href="https://www.youtube.com/@vishal_learner">YouTube channel!</a>.</p>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>TinyScaleLab</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-05-01-TSL-Initial-Scoring-Results/index.html</guid>
  <pubDate>Thu, 01 May 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Curating Evaluation Prompts, Defining Scoring Criteria, and Designing an LLM Judge Prompt Template</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/index.html</link>
  <description><![CDATA[ 



<section id="recap-and-initial-approach" class="level2">
<h2 class="anchored" data-anchor-id="recap-and-initial-approach">Recap and Initial Approach</h2>
<p>Initially, I planned to use the 44 evaluation prompts from the Tiny Stories dataset HuggingFace repo. These were the same prompts used in the paper to evaluate various model sizes.</p>
<p>I also documented the target scores for evaluation based on the TinyStories’ 10-point scoring rubric for my TinyScaleLab architectures:</p>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Similar to</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Num Layers</th>
<th style="text-align: center;">Eval Loss</th>
<th style="text-align: center;">Creativity</th>
<th style="text-align: center;">Grammar</th>
<th style="text-align: center;">Consistency</th>
<th style="text-align: center;">Plot</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">TSL-5M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">12</td>
<td style="text-align: center;">2.02</td>
<td style="text-align: center;">4.84</td>
<td style="text-align: center;">6.19</td>
<td style="text-align: center;">4.75</td>
<td style="text-align: center;">4.39</td>
</tr>
<tr class="even">
<td style="text-align: center;">TSL-25M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.38</td>
<td style="text-align: center;">6.54</td>
<td style="text-align: center;">7.72</td>
<td style="text-align: center;">8.02</td>
<td style="text-align: center;">7.23</td>
</tr>
<tr class="odd">
<td style="text-align: center;">TSL-60M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">Average of 4 and 8 scores</td>
<td style="text-align: center;">1.23</td>
<td style="text-align: center;">6.8</td>
<td style="text-align: center;">8.35</td>
<td style="text-align: center;">8.7</td>
<td style="text-align: center;">7.31</td>
</tr>
<tr class="even">
<td style="text-align: center;">TSL-125M</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.18</td>
<td style="text-align: center;">7.02</td>
<td style="text-align: center;">8.62</td>
<td style="text-align: center;">9.34</td>
<td style="text-align: center;">7.34</td>
</tr>
</tbody>
</table>
<p>I am particularly interested in matching the scores shown in the table above, which presents results from GPT-4 evaluations of models with different hidden dimensions and layer counts.</p>
</section>
<section id="one-prompt-to-score-them-all" class="level2">
<h2 class="anchored" data-anchor-id="one-prompt-to-score-them-all">One Prompt to Score them All?</h2>
<p>The Tiny Stories paper used distinct approaches for different capabilities in Section 4.2 (“Knowledge, reasoning and context-tracking”):</p>
<ul>
<li><strong>Factual prompts</strong> - testing models’ knowledge of common sense facts</li>
<li><strong>Reasoning prompts</strong> - testing basic reasoning abilities</li>
<li><strong>Consistency (context-tracking) prompts</strong> - testing models’ ability to maintain coherence</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Knowledge, Reasoning and Context-Tracking Section"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Knowledge, Reasoning and Context-Tracking Section</figcaption><p></p>
</figure>
</div>
<p>What caught my attention was how they assessed these differently, using qualitative measures (success, failure, or partial success) rather than the numerical scores used for other categories.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Performance Table Example"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Performance Table Example</figcaption><p></p>
</figure>
</div>
</section>
<section id="analyzing-the-44-prompts" class="level2">
<h2 class="anchored" data-anchor-id="analyzing-the-44-prompts">Analyzing the 44 Prompts</h2>
<p>I asked Claude to analyze the 44 prompts from the dataset repository to identify which ones were good evaluators for factual knowledge, reasoning, and context-tracking capabilities.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Claude Prompt Analysis"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Claude Prompt Analysis</figcaption><p></p>
</figure>
</div>
<p>When Claude assessed the prompts, I noticed:</p>
<ol type="1">
<li>Factual knowledge prompts were the most specific/easiest to isolate.</li>
<li>Context-tracking prompts were dime a dozen (found everywhere).</li>
<li>Reasoning was hard to isolate from context-tracking.</li>
</ol>
<p>This led me to an important realization: <strong>I needed to curate specific prompts for each scoring category rather than using one set for all</strong>.</p>
</section>
<section id="prompts-for-creativity-and-plot" class="level2">
<h2 class="anchored" data-anchor-id="prompts-for-creativity-and-plot">Prompts for Creativity and Plot</h2>
<p>For creativity and plot, the challenge was different. Here, I needed prompts that <strong>provided opportunities</strong> for models to exhibit these capabilities.</p>
<p>When flagging good candidates for creativity, I looked for prompts that allowed creative responses <strong>without sacrificing consistency or plot</strong>. Not all prompts are equal in this regard.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Creativity Example"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Creativity Example</figcaption><p></p>
</figure>
</div>
<p>For plot, I sought prompts that provided strong opportunities to resolve conflict or pursue adventure—elements that test a model’s ability to construct a coherent narrative arc.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Plot Example"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/5.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Plot Example</figcaption><p></p>
</figure>
</div>
</section>
<section id="curating-category-specific-prompts" class="level2">
<h2 class="anchored" data-anchor-id="curating-category-specific-prompts">Curating Category-Specific Prompts</h2>
<p>Using the factual and reasoning prompts from the paper as a foundation, I worked with Claude to generate additional prompts for each category. Here are examples for factual knowledge:</p>
<ul>
<li>Alice was so tired when she got back home so she went</li>
<li>Jack and Lily saw a rain- bow after a rainy day. They were amazed by the colors. Jack said, “Look, Lily. A rainbow has</li>
<li>Jack and Lily liked to watch the moon at night. They noticed that the moon changed its shape every night. Sometimes the moon was big and round, and sometimes it was</li>
<li>Jack wanted to read a book, so he went to</li>
</ul>
<p>And reasoning prompts:</p>
<ul>
<li>Lily likes cats and dogs. She asked her mom for a dog and her mom said no, so instead she asked</li>
<li>Jack told Mary, ‘If you give me your banana, I’ll give you my apple’. Mary gave Jack her banana so</li>
<li>On weekends Jack went to visit his grandmother whereas on weekdays he would go to school. Last weekend, when Jack was on his way to</li>
<li>Lily and Ben were having an argument. Ben said that cake is much better than ice cream and Lily said that</li>
<li>Lily and Ben are having an argument. They are trying to decide between the park and the swimming pool. Ben says, ‘I want to go to the park’. Lily says</li>
</ul>
<p>I followed a similar process for plot prompts:</p>
<ul>
<li>Once upon a time, there lived a bunny in a field. Her name was Lucy. Lucy loved to have feasts and parties with her bunny friends. One day, when Lucy was about to leave for a feast at a friend’s house, she realized she’s starting to feel sick. She was so weak she could</li>
<li>One day a girl walked into the living room and noticed something very strange. There was a huge cabinet standing in the corner. It looked very old and heavy. She walked over and tried to open it, when suddenly</li>
<li>Once upon a time, there lived a hamster in the forest. Every day, he would walked around the forest looking for adventures. One day, he heard someone calling out from behind the bushes. The hamster listened carefully. He realised that it was a small mouse calling out for help. It got stuck under a heavy log and couldn’t get out. The hamster immediately realized that</li>
<li>Alice walked into the kitchen and saw Ben who was looking for something but looked frustrated. She said, “Ben, why are you</li>
</ul>
<p>And creativity:</p>
<ul>
<li>One day a girl walked into the living room and noticed something very strange. There was a huge cabinet standing in the corner. It looked very old and heavy. She walked over and tried to open it, when suddenly</li>
<li>Once upon a time, there was tiger who liked to play the guitar. One day, a bunny heard the guitar from a distance and</li>
<li>One day, a bird was flying high over the sea. At some point the bird noticed small boat with a boy sitting inside. The boy looked lost so</li>
</ul>
<p>I used most of the original 44 prompts for context-tracking, and sampled 5 from each of the non-Grammar categories for Grammar.</p>
</section>
<section id="current-evaluation-prompt-set" class="level2">
<h2 class="anchored" data-anchor-id="current-evaluation-prompt-set">Current Evaluation Prompt Set</h2>
<p>My final evaluation set includes: - 25 unique prompts for Reasoning - 25 unique prompts for Factual Knowledge - 25 prompts each for Context-Tracking, Plot, and Creativity (with some overlap) - 25 prompts for Grammar (5 prompts sampled from the other 5 categories)</p>
<p>This gives me a total of 150 prompts—significantly more than the original 44, but with targeted coverage of each capability.</p>
</section>
<section id="scoring-category-rubrics" class="level2">
<h2 class="anchored" data-anchor-id="scoring-category-rubrics">Scoring Category Rubrics</h2>
<p>For each scoring category, I developed specific rubrics, taking many of them wholesale from the TinyHackathon competition I recently participated in:</p>
<section id="grammar" class="level3">
<h3 class="anchored" data-anchor-id="grammar">Grammar</h3>
<ul>
<li>Dialogue formatting and punctuation</li>
<li>Tense consistency throughout the narrative</li>
<li>Sentence structure logic, clarity and completion</li>
<li>Age-appropriate vocabulary usage</li>
<li>Proper use of pronouns and referents</li>
</ul>
</section>
<section id="creativity" class="level3">
<h3 class="anchored" data-anchor-id="creativity">Creativity</h3>
<ul>
<li>Does the completion offer unexpected or novel elements?</li>
<li>Are character behavioral and emotional responses predictable or innovative?</li>
<li>Does the story rely on cliches or create fresh situations?</li>
<li>Does the writer add unique details to the story world?</li>
</ul>
</section>
<section id="plot" class="level3">
<h3 class="anchored" data-anchor-id="plot">Plot</h3>
<ul>
<li>Is there a clear beginning, middle, and end appropriate to age level?</li>
<li>Are conflicts addressed rather than abandoned?</li>
<li>Is the pacing appropriate (not too rushed or dragging)?</li>
<li>Does the story maintain focus on the central conflict/theme without random diversions?</li>
</ul>
</section>
<section id="factual-knowledge" class="level3">
<h3 class="anchored" data-anchor-id="factual-knowledge">Factual Knowledge</h3>
<ul>
<li>Completion contains only correct factual information relevant to the prompt</li>
</ul>
</section>
</section>
<section id="reasoning" class="level2">
<h2 class="anchored" data-anchor-id="reasoning">Reasoning</h2>
<ul>
<li>Completion demonstrates correct logical reasoning relevant to the prompt</li>
</ul>
<section id="context-tracking" class="level3">
<h3 class="anchored" data-anchor-id="context-tracking">Context-Tracking</h3>
<ul>
<li>Competion maintains complete coherence with prompt</li>
<li>Correctly references/tracks all objects, characters, and their attributes</li>
<li>Maintains consistent narrative flow</li>
</ul>
<p>Notice that different categories have different numbers of criteria:</p>
<ul>
<li>Grammar: 5 criteria</li>
<li>Creativity: 4 criteria</li>
<li>Plot: 4 criteria</li>
<li>Context-tracking: 3 criteria</li>
<li>Factual knowledge: 1 criterion</li>
<li>Reasoning: 1 criterion</li>
</ul>
<p>This means raw scores aren’t directly comparable across categories, which will require normalization during analysis.</p>
</section>
</section>
<section id="llm-judge-prompt-template" class="level2">
<h2 class="anchored" data-anchor-id="llm-judge-prompt-template">LLM Judge Prompt Template</h2>
<p>Instead of using one prompt for all categories, I created a specific judge prompt template for each category:</p>
<pre><code>&lt;instruction-prompt id="Evaluation"&gt;
&lt;instruction&gt;
You are an expert evaluator for tiny language models trained on children's stories. Your task is to score the given model completion (generated using the provided prompt) using the rubric below. Provide a detailed assessment followed by a final total score.
&lt;/instruction&gt;

&lt;rubric&gt;
&lt;criteria&gt;
&lt;criterion id="A"&gt;&lt;/criterion&gt;
&lt;criterion id="B"&gt;&lt;/criterion&gt;
&lt;criterion id="C"&gt;&lt;/criterion&gt;
&lt;criterion id="D"&gt;&lt;/criterion&gt;
&lt;criterion id="E"&gt;&lt;/criterion&gt;
&lt;/criteria&gt;

&lt;scoring-scale&gt;
&lt;level value="1.0"&gt;Criterion is fully satisfied&lt;/level&gt;
&lt;level value="0.5"&gt;Criterion is partially satisfied&lt;/level&gt;
&lt;level value="0.0"&gt;Criterion is not satisfied&lt;/level&gt;
&lt;/scoring-scale&gt;

&lt;scoring-instructions&gt;
For each criterion A-E, assign a score of 1.0, 0.5, or 0.0 based on how well the completion satisfies that criterion. The final score is the sum of all criterion scores.
&lt;/scoring-instructions&gt;
&lt;/rubric&gt;

&lt;generation-prompt&gt;
{prompt}
&lt;/generation-prompt&gt;

&lt;completion&gt;
{completion}
&lt;/completion&gt;

&lt;response-format&gt;
Provide your assessment of each criterion with specific examples from the text, then calculate the final score (sum of all criterion scores).

Format your response as:
&lt;evaluation&gt;
&lt;criterion-A-score&gt;[0.0, 0.5, or 1.0]&lt;/criterion-A-score&gt;
&lt;criterion-A-explanation&gt;Your explanation here&lt;/criterion-A-explanation&gt;

&lt;criterion-B-score&gt;[0.0, 0.5, or 1.0]&lt;/criterion-B-score&gt;
&lt;criterion-B-explanation&gt;Your explanation here&lt;/criterion-B-explanation&gt;

&lt;criterion-C-score&gt;[0.0, 0.5, or 1.0]&lt;/criterion-C-score&gt;
&lt;criterion-C-explanation&gt;Your explanation here&lt;/criterion-C-explanation&gt;

&lt;criterion-D-score&gt;[0.0, 0.5, or 1.0]&lt;/criterion-D-score&gt;
&lt;criterion-D-explanation&gt;Your explanation here&lt;/criterion-D-explanation&gt;

&lt;criterion-E-score&gt;[0.0, 0.5, or 1.0]&lt;/criterion-E-score&gt;
&lt;criterion-E-explanation&gt;Your explanation here&lt;/criterion-E-explanation&gt;

&lt;final-score&gt;[Sum of all criterion scores, between #.# and #.#]&lt;/final-score&gt;
&lt;/evaluation&gt;
&lt;/response-format&gt;
&lt;/instruction-prompt&gt;</code></pre>
<p>The template includes:</p>
<ul>
<li>Instructions for the judge</li>
<li>Criteria specific to the category being evaluated</li>
<li>Scoring scale (0, 0.5, 1.0)</li>
<li>Scoring instructions</li>
<li>Response format</li>
</ul>
</section>
<section id="initial-testing" class="level2">
<h2 class="anchored" data-anchor-id="initial-testing">Initial Testing</h2>
<p>I tested the approach with Claude Haiku 3.5, and the results were promising. When evaluating grammar, it gave a weaker model a score of 3.5/5. When I gave it a larger model’s completion, it scored it 5/5. This suggests the approach can successfully differentiate between model capabilities.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>My immediate next steps are:</p>
<ol type="1">
<li>Generate 150 completions, one for each the 150 prompts, per TinyStories model (1M, 8M, 28M).</li>
<li>Build an evaluation interface to help grade model responses using FastHTML.</li>
<li>Score all completions using the 0/0.5/1.0 methodology.</li>
<li>Compare results with the targets from the Tiny Stories paper.</li>
<li>Refine scoring rubric if needed.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Evaluation Interface Mockup"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/6.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Evaluation Interface Mockup</figcaption><p></p>
</figure>
</div>
<p>I expect this to take several days as generating completions, building the interface, and evaluating 450 prompts (150 for each of three models) is no small task! Thankfully, it’s terribly large either.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The journey from a simple plan to use 44 prompts to a comprehensive evaluation approach with 150 category-specific prompts shows how even “squishy” concepts like language can be systematically evaluated with the right structure.</p>
<p>By distinguishing between capabilities that need to be isolated (factual knowledge, reasoning, context-tracking) and those that need opportunities to be exhibited (creativity and plot), I’ve created what I believe is a robust evaluation methodology. Obviously, time, very quickly and definitely, will tell.</p>
<p>I’m excited to see if this approach gives me scores comparable to those in the Tiny Stories paper. Stay tuned for the results!</p>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>TinyScaleLab</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/index.html</guid>
  <pubDate>Mon, 28 Apr 2025 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-04-28-TSL-Curating-Eval-Prompts/1.png" medium="image" type="image/png" height="46" width="144"/>
</item>
<item>
  <title>TinyScaleLab Update: Training Cost Analysis and Evaluation Infrastructure Plans</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-27-TSL-Initial-Training-Runs/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll share results from some quick and dirty training runs executed so I get a rough but reasonable estimate of training time and costs using L4 and A100 GPUs on Google Colab Pro.</p>
</section>
<section id="model-sizes" class="level2">
<h2 class="anchored" data-anchor-id="model-sizes">Model Sizes</h2>
<p>In these experiments, I’m training four model sizes: 5M, 25M, 60M and 125M. I’ve chosen to roughly follow the TinyStories models, using the hidden dimension and intermediate dimension for the TinyStories-1M, -8M, -28M and -33M models, in each case there is a 4x increase from hidden to intermediate dimension in the MLP layers. These are just initial architectural choices which might change over the course of the project as I learn more about what results in a better performing model.</p>
<p>For now, I’m using 8 attention heads (for all models) and the Llama-2 tokenizer with a 32000 vocab size.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model Name</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Intermediate Dim</th>
<th style="text-align: center;">Number of Layers</th>
<th style="text-align: center;">Number of Params</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">5M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">4_949_696</td>
</tr>
<tr class="even">
<td style="text-align: center;">25M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">1024</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">24_776_960</td>
</tr>
<tr class="odd">
<td style="text-align: center;">60M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">2048</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">57_940_480</td>
</tr>
<tr class="even">
<td style="text-align: center;">125M</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">3072</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">124_662_528</td>
</tr>
</tbody>
</table>
</section>
<section id="training-dataset" class="level2">
<h2 class="anchored" data-anchor-id="training-dataset">Training Dataset</h2>
<p>I’ve tokenized the <a href="https://huggingface.co/datasets/roneneldan/TinyStories/blob/main/TinyStories_all_data.tar.gz">TinyStories_all_data.tar.gz</a> dataset which contains 4.9M stories generated by GPT3.5 and GPT4, using the <code>meta-llama/Llama-2-7b-hf</code> tokenizer. I haven’t performed any data cleaning (yet). The total number of tokens in this dataset is little over 1B: <strong>1_028_013_532</strong>.</p>
</section>
<section id="training-duration" class="level2">
<h2 class="anchored" data-anchor-id="training-duration">Training Duration</h2>
<p>I’m training all initial runs for 1 epoch.</p>
</section>
<section id="training-gpus" class="level2">
<h2 class="anchored" data-anchor-id="training-gpus">Training GPUs</h2>
<p>I trained the 5M and 25M models on both L4 (22.5 GB VRAM) and A100 (40GB VRAM) GPUs. I trained the 60M and 125M models on the A100 GPU.</p>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>All models are trained for 1 epoch (1.03 tokens):</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Hardware</th>
<th style="text-align: center;">Model Size</th>
<th style="text-align: center;">Time (hr)</th>
<th style="text-align: center;">Batch Size</th>
<th style="text-align: center;">Max Memory</th>
<th style="text-align: center;">Cost</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">L4</td>
<td style="text-align: center;">5M</td>
<td style="text-align: center;">0.87</td>
<td style="text-align: center;">384</td>
<td style="text-align: center;">20%</td>
<td style="text-align: center;">$0.18</td>
</tr>
<tr class="even">
<td style="text-align: center;">L4</td>
<td style="text-align: center;">25M</td>
<td style="text-align: center;">1.45</td>
<td style="text-align: center;">288</td>
<td style="text-align: center;">65%</td>
<td style="text-align: center;">$0.30</td>
</tr>
<tr class="odd">
<td style="text-align: center;">A100-40GB</td>
<td style="text-align: center;">5M</td>
<td style="text-align: center;">0.32</td>
<td style="text-align: center;">2048</td>
<td style="text-align: center;">78%</td>
<td style="text-align: center;">$0.25</td>
</tr>
<tr class="even">
<td style="text-align: center;">A100-40GB</td>
<td style="text-align: center;">25M</td>
<td style="text-align: center;">0.35</td>
<td style="text-align: center;">1536</td>
<td style="text-align: center;">98%</td>
<td style="text-align: center;">$0.27</td>
</tr>
<tr class="odd">
<td style="text-align: center;">A100-40GB</td>
<td style="text-align: center;">60M</td>
<td style="text-align: center;">0.54</td>
<td style="text-align: center;">1152</td>
<td style="text-align: center;">86%</td>
<td style="text-align: center;">$0.41</td>
</tr>
<tr class="even">
<td style="text-align: center;">A100-40GB</td>
<td style="text-align: center;">125M</td>
<td style="text-align: center;">1.10</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">99%</td>
<td style="text-align: center;">$0.84</td>
</tr>
</tbody>
</table>
</section>
<section id="takeaways" class="level2">
<h2 class="anchored" data-anchor-id="takeaways">Takeaways</h2>
<p>From this analysis, only the 5M model makes sense to train on the L4. It’s 3 cents cheaper per hour to train the 25M model on the A100, though I’m flirting with OOM so I should reduce the batch size.</p>
<p>I’ll need to perform longer trainings to get a sense of how many full epochs I need to produce coherent language-generating models, but from my TinyHackathon experience, it took 20 epochs for the 60M model to perform decently (3/5 LLM Judge overall score). I would expect the 125M model to require less epochs, and the smaller models more epochs, to achieve comparable performance. But we’ll see!</p>
</section>
<section id="appendix" class="level2">
<h2 class="anchored" data-anchor-id="appendix">Appendix</h2>
<p>Here are the <code>LlamaConfig</code> objects for each model:</p>
<section id="m" class="level3">
<h3 class="anchored" data-anchor-id="m">5M</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">config <span class="op" style="color: #5E5E5E;">=</span> LlamaConfig(</span>
<span id="cb1-2">    vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32000</span>,</span>
<span id="cb1-3">    hidden_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>,</span>
<span id="cb1-4">    intermediate_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,</span>
<span id="cb1-5">    num_hidden_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">13</span>,</span>
<span id="cb1-6">    num_attention_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb1-7">    max_position_embeddings<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb1-8">    rope_theta<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10000.0</span>,</span>
<span id="cb1-9">    attention_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb1-10">    mlp_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb1-11">    attn_implementation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flash_attention_2"</span>,</span>
<span id="cb1-12">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bfloat16"</span></span>
<span id="cb1-13">)</span></code></pre></div>
</section>
<section id="m-1" class="level3">
<h3 class="anchored" data-anchor-id="m-1">25M</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">config <span class="op" style="color: #5E5E5E;">=</span> LlamaConfig(</span>
<span id="cb2-2">    vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32000</span>,</span>
<span id="cb2-3">    hidden_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>,</span>
<span id="cb2-4">    intermediate_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1024</span>,</span>
<span id="cb2-5">    num_hidden_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb2-6">    num_attention_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb2-7">    max_position_embeddings<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb2-8">    rope_theta<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10000.0</span>,</span>
<span id="cb2-9">    attention_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb2-10">    mlp_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb2-11">    attn_implementation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flash_attention_2"</span>,</span>
<span id="cb2-12">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bfloat16"</span></span>
<span id="cb2-13">)</span></code></pre></div>
</section>
<section id="m-2" class="level3">
<h3 class="anchored" data-anchor-id="m-2">60M</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">config <span class="op" style="color: #5E5E5E;">=</span> LlamaConfig(</span>
<span id="cb3-2">    vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32000</span>,</span>
<span id="cb3-3">    hidden_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb3-4">    intermediate_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2048</span>,</span>
<span id="cb3-5">    num_hidden_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>,</span>
<span id="cb3-6">    num_attention_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb3-7">    max_position_embeddings<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb3-8">    rope_theta<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10000.0</span>,</span>
<span id="cb3-9">    attention_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb3-10">    mlp_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb3-11">    attn_implementation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flash_attention_2"</span>,</span>
<span id="cb3-12">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bfloat16"</span></span>
<span id="cb3-13">)</span></code></pre></div>
</section>
<section id="m-3" class="level3">
<h3 class="anchored" data-anchor-id="m-3">125M</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">config <span class="op" style="color: #5E5E5E;">=</span> LlamaConfig(</span>
<span id="cb4-2">    vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32000</span>,</span>
<span id="cb4-3">    hidden_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">768</span>,</span>
<span id="cb4-4">    intermediate_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3072</span>,</span>
<span id="cb4-5">    num_hidden_layers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb4-6">    num_attention_heads<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb4-7">    max_position_embeddings<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">512</span>,</span>
<span id="cb4-8">    rope_theta<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">10000.0</span>,</span>
<span id="cb4-9">    attention_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb4-10">    mlp_bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb4-11">    attn_implementation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flash_attention_2"</span>,</span>
<span id="cb4-12">    torch_dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bfloat16"</span></span>
<span id="cb4-13">)</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>TinyScaleLab</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-27-TSL-Initial-Training-Runs/index.html</guid>
  <pubDate>Sun, 27 Apr 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>TinyScale Lab Update: Setting Eval Targets and Generating Completions for LLM Judge Development</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-27-TSL-Setting-Eval-Targets/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’m going to generate story completions using the TinyStories 1M, 8M, 28M models. The actual HF model size for these models is 3.7M, 19.7M and 52M, respectively. Since I’m training 5M, 25M, 60M and 125M models, these three TinyStories models will serve as proxies for my first three sizes, and I will expect my 125M model to generate stories that receive higher scores than my 60M (by how much higher is TBD).</p>
<p>Ronen Eldan, the TinyStories paper author, has listed on <a href="https://huggingface.co/roneneldan/TinyStories-33M/discussions/9#64f94b050a2884a831b29eb6">this HF model card discussion forum</a>:</p>
<blockquote class="blockquote">
<p>we used temp=0, beams=5</p>
</blockquote>
<p>So I’ll be using those two settings during inference.</p>
<p>Here are some key architectural details for my initial quick-and-dirty models:</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model Name</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Intermediate Dim</th>
<th style="text-align: center;">Number of Layers</th>
<th style="text-align: center;">Number of Params</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">5M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">4_949_696</td>
</tr>
<tr class="even">
<td style="text-align: center;">25M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">1024</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">24_776_960</td>
</tr>
<tr class="odd">
<td style="text-align: center;">60M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">2048</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">57_940_480</td>
</tr>
<tr class="even">
<td style="text-align: center;">125M</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">3072</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">124_662_528</td>
</tr>
</tbody>
</table>
<p>Here are my initial scoring categories, based on type of language model capability:</p>
<ul>
<li><strong>Foundational language capabilities</strong>: Grammar and Context-Tracking (Consistency)</li>
<li><strong>Emergent capabilities</strong>: Factual Knowledge, Reasoning, Creativity</li>
<li><strong>Story-related capabilities</strong>: Plot</li>
</ul>
<p>Referencing Figure 4 in the <a href="https://arxiv.org/abs/2305.07759">TinyStories paper</a> I would expect to achieve LLM Judge for these models close to the following (TSL = TinyScale Lab):</p>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Similar to</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Num Layers</th>
<th style="text-align: center;">Eval Loss</th>
<th style="text-align: center;">Creativity</th>
<th style="text-align: center;">Grammar</th>
<th style="text-align: center;">Consistency</th>
<th style="text-align: center;">Plot</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">TSL-5M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">12</td>
<td style="text-align: center;">2.02</td>
<td style="text-align: center;">4.84</td>
<td style="text-align: center;">6.19</td>
<td style="text-align: center;">4.75</td>
<td style="text-align: center;">4.39</td>
</tr>
<tr class="even">
<td style="text-align: center;">TSL-25M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.38</td>
<td style="text-align: center;">6.54</td>
<td style="text-align: center;">7.72</td>
<td style="text-align: center;">8.02</td>
<td style="text-align: center;">7.23</td>
</tr>
<tr class="odd">
<td style="text-align: center;">TSL-60M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">Average of 4 and 8 scores</td>
<td style="text-align: center;">1.23</td>
<td style="text-align: center;">6.8</td>
<td style="text-align: center;">8.35</td>
<td style="text-align: center;">8.7</td>
<td style="text-align: center;">7.31</td>
</tr>
<tr class="even">
<td style="text-align: center;">TSL-125M</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.18</td>
<td style="text-align: center;">7.02</td>
<td style="text-align: center;">8.62</td>
<td style="text-align: center;">9.34</td>
<td style="text-align: center;">7.34</td>
</tr>
</tbody>
</table>
<p>Mapping the Figure 4 scores to the official 1M, 8M and 28M models directly:</p>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">TinyStories</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Num Layers</th>
<th style="text-align: center;">Eval Loss</th>
<th style="text-align: center;">Creativity</th>
<th style="text-align: center;">Grammar</th>
<th style="text-align: center;">Consistency</th>
<th style="text-align: center;">Plot</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">2.08</td>
<td style="text-align: center;">4.68</td>
<td style="text-align: center;">6.14</td>
<td style="text-align: center;">4.45</td>
<td style="text-align: center;">4.40</td>
</tr>
<tr class="even">
<td style="text-align: center;">8M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.38</td>
<td style="text-align: center;">6.54</td>
<td style="text-align: center;">7.72</td>
<td style="text-align: center;">8.02</td>
<td style="text-align: center;">7.23</td>
</tr>
<tr class="odd">
<td style="text-align: center;">28M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.20</td>
<td style="text-align: center;">6.85</td>
<td style="text-align: center;">8.34</td>
<td style="text-align: center;">8.95</td>
<td style="text-align: center;">7.26</td>
</tr>
</tbody>
</table>
<p>The two scoring categories I’m using that are not assessed quantitatively in the TinyStories paper: Factual Knowledge and Reasoning. If my LLM Judge scores match Figure 4 for the other four categories and match my manual evaluations for all six categories, I should expect the LLM Judge to assess these two categories correctly.</p>
</section>
<section id="evaluation-prompts" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-prompts">Evaluation Prompts</h2>
<p>Lucky for me, the TinyStories authors have published their <a href="https://huggingface.co/datasets/roneneldan/TinyStories/blob/main/Evaluation%20prompts.yaml">evaluation prompts</a>.</p>
<div class="cell" data-outputid="6457a149-b8a1-44fe-9171-592115dbf3af" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> yaml</span>
<span id="cb1-3">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://huggingface.co/datasets/roneneldan/TinyStories/raw/main/Evaluation%20prompts.yaml"</span></span>
<span id="cb1-4">response <span class="op" style="color: #5E5E5E;">=</span> requests.get(url)</span>
<span id="cb1-5">data <span class="op" style="color: #5E5E5E;">=</span> yaml.safe_load(response.text)</span>
<span id="cb1-6"><span class="bu" style="color: null;">len</span>(data)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>44</code></pre>
</div>
</div>
<div class="cell" data-outputid="c65bbed1-af12-43b2-98a4-a8a702fa16e4" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>"Once upon a time, there lived a bunny in a field. Her name was Lucy. Lucy loved to have feasts and parties with her bunny friends. One day, when Lucy was about to leave for a feast at a friend's house, she realized she's starting to feel sick. She was so weak she could"</code></pre>
</div>
</div>
</section>
<section id="generating-story-completions" class="level2">
<h2 class="anchored" data-anchor-id="generating-story-completions">Generating Story Completions</h2>
<p>I’ll walk through some basic generation code to make sure it works before I apply it to the full dataset.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoTokenizer, AutoModelForCausalLM</span>
<span id="cb5-2"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb5-3"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;">"roneneldan/TinyStories-1M"</span>).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb6-2">tokz <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(<span class="st" style="color: #20794D;">"roneneldan/TinyStories-1M"</span>)</span>
<span id="cb6-3">tokz.pad_token_id</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">tokz.pad_token <span class="op" style="color: #5E5E5E;">=</span> tokz.eos_token</span></code></pre></div>
</div>
<p>To my knowledge, you want tokz.padding_side to be “left” during batched inference, and the default here is “right”. Examples of difference shown for batched prompts. Padding right starts the next token prediction with the pad token, padding left with the last tok in prompt.</p>
<div class="cell" data-outputid="91b9d304-8ca3-4080-a601-60ec83e1e0a6" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">tokz.bos_token_id, tokz.eos_token_id, tokz.pad_token_id, tokz.padding_side</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(50256, 50256, 50256, 'right')</code></pre>
</div>
</div>
<div class="cell" data-outputid="cf22cd11-a1b7-4458-e2f4-a8fc94b411b1" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">inputs <span class="op" style="color: #5E5E5E;">=</span> tokz(data, padding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb10-2">tokz.decode(inputs.input_ids[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>"Once upon a time, there lived a bunny in a field. Her name was Lucy. Lucy loved to have feasts and parties with her bunny friends. One day, when Lucy was about to leave for a feast at a friend's house, she realized she's starting to feel sick. She was so weak she could&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;"</code></pre>
</div>
</div>
<div class="cell" data-outputid="bb4b5968-acbe-43dc-a4dc-952fad6e2b5c" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">tokz.padding_side <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"left"</span></span>
<span id="cb12-2">inputs <span class="op" style="color: #5E5E5E;">=</span> tokz(data, padding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb12-3">tokz.decode(inputs.input_ids[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>"&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;&lt;|endoftext|&gt;Once upon a time, there lived a bunny in a field. Her name was Lucy. Lucy loved to have feasts and parties with her bunny friends. One day, when Lucy was about to leave for a feast at a friend's house, she realized she's starting to feel sick. She was so weak she could"</code></pre>
</div>
</div>
<div class="cell" data-outputid="8cab2d05-e8e7-4b77-e76c-5b1df238f698" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">inputs.input_ids[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>tensor([50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256,
        50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256,
        50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256,
        50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256,
        50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256, 50256,
        50256, 50256, 50256, 50256, 50256,  7454,  2402,   257,   640,    11,
          612,  5615,   257, 44915,   287,   257,  2214,    13,  2332,  1438,
          373, 22162,    13, 22162,  6151,   284,   423,   730,  5773,   290,
         4671,   351,   607, 44915,  2460,    13,  1881,  1110,    11,   618,
        22162,   373,   546,   284,  2666,   329,   257, 26951,   379,   257,
         1545,   338,  2156,    11,   673,  6939,   673,   338,  3599,   284,
         1254,  6639,    13,  1375,   373,   523,  4939,   673,   714],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="947c8522-53fd-489f-e333-d53212214fb0" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">inputs.attention_mask[<span class="dv" style="color: #AD0000;">0</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>torch.Size([119])</code></pre>
</div>
</div>
<p>Reusing the generation code I used for the TinyHackthon competition, but setting <code>do_sample=False</code> and <code>num_beams=5</code>:</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;">def</span> _generate(model, prompts, max_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">384</span>, min_length<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>):</span>
<span id="cb18-2">    tokz.padding_side <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"left"</span></span>
<span id="cb18-3">    inputs <span class="op" style="color: #5E5E5E;">=</span> tokz(prompts, padding<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, truncation<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, return_tensors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pt"</span>).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb18-4"></span>
<span id="cb18-5">    model.<span class="bu" style="color: null;">eval</span>()</span>
<span id="cb18-6">    <span class="cf" style="color: #003B4F;">with</span> torch.no_grad():</span>
<span id="cb18-7">        outputs <span class="op" style="color: #5E5E5E;">=</span> model.generate(</span>
<span id="cb18-8">            inputs.input_ids,</span>
<span id="cb18-9">            attention_mask<span class="op" style="color: #5E5E5E;">=</span>inputs.attention_mask,</span>
<span id="cb18-10">            max_length<span class="op" style="color: #5E5E5E;">=</span>max_length,</span>
<span id="cb18-11">            min_length<span class="op" style="color: #5E5E5E;">=</span>min_length,</span>
<span id="cb18-12">            num_beams<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb18-13">            do_sample<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>,</span>
<span id="cb18-14">            pad_token_id<span class="op" style="color: #5E5E5E;">=</span>tokz.eos_token_id</span>
<span id="cb18-15">        )</span>
<span id="cb18-16"></span>
<span id="cb18-17">        input_length <span class="op" style="color: #5E5E5E;">=</span> inputs.input_ids[<span class="dv" style="color: #AD0000;">0</span>].size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb18-18">        completion_tokens <span class="op" style="color: #5E5E5E;">=</span> outputs[<span class="dv" style="color: #AD0000;">0</span>][input_length:]</span>
<span id="cb18-19">        completion_text <span class="op" style="color: #5E5E5E;">=</span> tokz.decode(completion_tokens, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-20"></span>
<span id="cb18-21">        completions <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb18-22"></span>
<span id="cb18-23">        <span class="cf" style="color: #003B4F;">for</span> j, output <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(outputs):</span>
<span id="cb18-24">            input_length <span class="op" style="color: #5E5E5E;">=</span> inputs.input_ids[j].size(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb18-25">            completion_tokens <span class="op" style="color: #5E5E5E;">=</span> output[input_length:]</span>
<span id="cb18-26">            completion_text <span class="op" style="color: #5E5E5E;">=</span> tokz.decode(completion_tokens, skip_special_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb18-27">            completions.append(completion_text)</span>
<span id="cb18-28"></span>
<span id="cb18-29">        <span class="cf" style="color: #003B4F;">assert</span> outputs.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb18-30">        <span class="cf" style="color: #003B4F;">assert</span> outputs.shape[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">==</span> max_length</span>
<span id="cb18-31">        <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(completions) <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(prompts)</span>
<span id="cb18-32">        <span class="cf" style="color: #003B4F;">return</span> completions</span>
<span id="cb18-33"></span>
<span id="cb18-34">completions <span class="op" style="color: #5E5E5E;">=</span> _generate(model, data)</span></code></pre></div>
</div>
<div class="cell" data-outputid="5bb67862-93ee-47f1-ff95-0996af4f1843" data-execution_count="41">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;">print</span>(completions[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> not sleep.

Lucy asked her mom, "What's wrong, Mommy?" Her mom replied, "It's okay, sweetie. I'll help you."

Lucy smiled and said, "I'm sorry, Mommy. I'll help you." Her mom smiled and said, "It's okay, Lucy. I'm glad you're safe."

Lucy smiled and said, "Thank you, Mommy. I love you." Her mom smiled and said, "I love you too, Lucy."
</code></pre>
</div>
</div>
<div class="cell" data-outputid="c303089b-c591-4950-c77a-9f0b9ba2a294" data-execution_count="42">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;">print</span>(completions[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> go to the hospital. The little boy was very sad and he didn't want to go to the hospital. 

His mom said, "Don't worry, I'll help you." But the little boy didn't listen. He said, "I'm sorry, mom. I won't do it again." 

His mom smiled and said, "It's okay, I'll help you." 

The little boy was so happy and thanked his mom. From that day on, he always made sure to always be careful when playing outside.
</code></pre>
</div>
</div>
<div class="cell" data-outputid="1e8db0c5-13bc-4dee-b57e-1f6088dee7e6" data-execution_count="43">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;">print</span>(completions[<span class="dv" style="color: #AD0000;">22</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> room. 

The little girl asked her daddy, "Daddy, can you help me?" 

Daddy said, "Yes, I can help you." 

The little girl was so happy. She said, "Thank you, Daddy!" 

Daddy smiled and said, "You're welcome, sweetheart. I'm glad you're safe." 

The little girl smiled and said, "Thank you, Daddy!"

Daddy smiled and said, "You're welcome, sweetheart. I'm glad you're safe." 

The little girl smiled and said, "I'm glad you're safe."
</code></pre>
</div>
</div>
<p>I’ll now iterate through a list of all three models, generate story completions, and save it to CSV for evaluation.</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">model_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"roneneldan/TinyStories-1M"</span>, <span class="st" style="color: #20794D;">"roneneldan/TinyStories-8M"</span>, <span class="st" style="color: #20794D;">"roneneldan/TinyStories-28M"</span>]</span></code></pre></div>
</div>
<div class="cell" data-outputid="856cc1fd-21ca-4452-a8d1-afd4664a0f18" data-execution_count="52">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">"prompt"</span>: data, <span class="st" style="color: #20794D;">"1M"</span>: [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(data), <span class="st" style="color: #20794D;">"8M"</span>: [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(data), <span class="st" style="color: #20794D;">"28M"</span>: [<span class="va" style="color: #111111;">None</span>]<span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(data)})</span>
<span id="cb26-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">


  <div id="df-d3226fdd-e225-4ef3-a087-845fa3564beb" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>prompt</th>
      <th>1M</th>
      <th>8M</th>
      <th>28M</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Once upon a time, there lived a bunny in a fie...</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>1</th>
      <td>One day a girl walked into the living room and...</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Once upon a time, there lived a hamster in the...</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jack asked his mom if he could ride the bike a...</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Alice was bored and wanted to find some advent...</td>
      <td>None</td>
      <td>None</td>
      <td>None</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-d3226fdd-e225-4ef3-a087-845fa3564beb')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-d3226fdd-e225-4ef3-a087-845fa3564beb button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-d3226fdd-e225-4ef3-a087-845fa3564beb');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-1cd2bf3d-8fce-4357-9c1a-a3becd941453">
      <button class="colab-df-quickchart" onclick="quickchart('df-1cd2bf3d-8fce-4357-9c1a-a3becd941453')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-1cd2bf3d-8fce-4357-9c1a-a3becd941453 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="cf" style="color: #003B4F;">for</span> name <span class="kw" style="color: #003B4F;">in</span> model_names:</span>
<span id="cb27-2">    model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(name).to(<span class="st" style="color: #20794D;">"cuda"</span>)</span>
<span id="cb27-3">    tokz <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(name)</span>
<span id="cb27-4">    tokz.pad_token <span class="op" style="color: #5E5E5E;">=</span> tokz.eos_token</span>
<span id="cb27-5">    completions <span class="op" style="color: #5E5E5E;">=</span> _generate(model, data)</span>
<span id="cb27-6">    df[name.split(<span class="st" style="color: #20794D;">"-"</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]] <span class="op" style="color: #5E5E5E;">=</span> completions</span></code></pre></div>
</div>
<div class="cell" data-outputid="7a079003-5f3c-4bda-f762-87b14b3f333a" data-execution_count="55">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">


  <div id="df-46266037-47c6-4550-91a9-93f2cb686066" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>prompt</th>
      <th>1M</th>
      <th>8M</th>
      <th>28M</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Once upon a time, there lived a bunny in a fie...</td>
      <td>not sleep.\n\nLucy asked her mom, "What's wro...</td>
      <td>hardly move.\n\nLucy's friend, a wise old owl...</td>
      <td>barely move. \n\nLucy's bunny friends noticed...</td>
    </tr>
    <tr>
      <th>1</th>
      <td>One day a girl walked into the living room and...</td>
      <td>, she heard a voice.\n\n"What are you doing he...</td>
      <td>she heard a voice.\n\n"Who are you?" the voic...</td>
      <td>a voice came from behind her.\n\n"What do you...</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Once upon a time, there lived a hamster in the...</td>
      <td>it was too late.\n\nThe next day, the hamster...</td>
      <td>the mouse was trying to help him.\n\nThe hams...</td>
      <td>he had to help the mouse.\n\nHe used all his ...</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Jack asked his mom if he could ride the bike a...</td>
      <td>thank you" to his daughter.\n\nThe next day, J...</td>
      <td>no" and he knew that he had to be careful.\n\n...</td>
      <td>Don't ride too fast, be careful!"\n\nSo Jack s...</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Alice was bored and wanted to find some advent...</td>
      <td>go to the park?"\n\nTom said, "I don't want t...</td>
      <td>go on an adventure together?"\n\nBen smiled a...</td>
      <td>go on an adventure?"\n\nBen thought for a mom...</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-46266037-47c6-4550-91a9-93f2cb686066')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-46266037-47c6-4550-91a9-93f2cb686066 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-46266037-47c6-4550-91a9-93f2cb686066');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-de0c88ef-903d-4b9a-9c0a-53db68fe08e1">
      <button class="colab-df-quickchart" onclick="quickchart('df-de0c88ef-903d-4b9a-9c0a-53db68fe08e1')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-de0c88ef-903d-4b9a-9c0a-53db68fe08e1 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">df.to_csv(<span class="st" style="color: #20794D;">"2025-04-27-evals.csv"</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
<p>While we’re, I’ll calculat the average prompt and completion length in tokens.</p>
<div class="cell" data-outputid="223dae72-f5c1-45a8-f350-e998d5714008" data-execution_count="57">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">tokz(data[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>{'input_ids': [7454, 2402, 257, 640, 11, 612, 5615, 257, 44915, 287, 257, 2214, 13, 2332, 1438, 373, 22162, 13, 22162, 6151, 284, 423, 730, 5773, 290, 4671, 351, 607, 44915, 2460, 13, 1881, 1110, 11, 618, 22162, 373, 546, 284, 2666, 329, 257, 26951, 379, 257, 1545, 338, 2156, 11, 673, 6939, 673, 338, 3599, 284, 1254, 6639, 13, 1375, 373, 523, 4939, 673, 714], 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}</code></pre>
</div>
</div>
<div class="cell" data-outputid="e14c1c7a-3e2e-4a00-91b6-66ab4f19762d" data-execution_count="61">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">toks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb32-2"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> data: toks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(tokz(p).input_ids)</span>
<span id="cb32-3">toks<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">44</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>62</code></pre>
</div>
</div>
<div class="cell" data-outputid="a64f24ca-762c-4043-a601-d3b5949cc900" data-execution_count="62">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">toks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> df[<span class="st" style="color: #20794D;">"1M"</span>]: toks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(tokz(p).input_ids)</span>
<span id="cb34-3">toks<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">44</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>164</code></pre>
</div>
</div>
<div class="cell" data-outputid="eeef388e-08ab-436e-c300-a30cc625ec66" data-execution_count="63">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">toks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb36-2"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> df[<span class="st" style="color: #20794D;">"8M"</span>]: toks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(tokz(p).input_ids)</span>
<span id="cb36-3">toks<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">44</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>153</code></pre>
</div>
</div>
<div class="cell" data-outputid="057638d1-c550-43af-ef0c-afd026dd85cc" data-execution_count="64">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">toks <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb38-2"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> df[<span class="st" style="color: #20794D;">"28M"</span>]: toks <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(tokz(p).input_ids)</span>
<span id="cb38-3">toks<span class="op" style="color: #5E5E5E;">//</span><span class="dv" style="color: #AD0000;">44</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>140</code></pre>
</div>
</div>
<div class="cell" data-outputid="a85210bb-79b9-45c3-fb4a-b1ee8c4a7ca6" data-execution_count="65">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="dv" style="color: #AD0000;">62</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">164</span>, <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">153</span>, <span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">140</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>(226, 217, 204)</code></pre>
</div>
</div>
<p>The prompt (62) and completions (140, 153, 164) average about 200 tokens in length. This is a different tokenizer than I’m using so results will vary for my trained models</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>I have established two key elements for my evals:</p>
<ul>
<li>Targets based on the literature (for my reference models and experiment models)</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">TinyStories</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Num Layers</th>
<th style="text-align: center;">Eval Loss</th>
<th style="text-align: center;">Creativity</th>
<th style="text-align: center;">Grammar</th>
<th style="text-align: center;">Consistency</th>
<th style="text-align: center;">Plot</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">2.08</td>
<td style="text-align: center;">4.68</td>
<td style="text-align: center;">6.14</td>
<td style="text-align: center;">4.45</td>
<td style="text-align: center;">4.40</td>
</tr>
<tr class="even">
<td style="text-align: center;">8M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.38</td>
<td style="text-align: center;">6.54</td>
<td style="text-align: center;">7.72</td>
<td style="text-align: center;">8.02</td>
<td style="text-align: center;">7.23</td>
</tr>
<tr class="odd">
<td style="text-align: center;">28M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">1.20</td>
<td style="text-align: center;">6.85</td>
<td style="text-align: center;">8.34</td>
<td style="text-align: center;">8.95</td>
<td style="text-align: center;">7.26</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Model Name</th>
<th style="text-align: center;">Hidden Dim</th>
<th style="text-align: center;">Intermediate Dim</th>
<th style="text-align: center;">Number of Layers</th>
<th style="text-align: center;">Number of Params</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">5M</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">4_949_696</td>
</tr>
<tr class="even">
<td style="text-align: center;">25M</td>
<td style="text-align: center;">256</td>
<td style="text-align: center;">1024</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">24_776_960</td>
</tr>
<tr class="odd">
<td style="text-align: center;">60M</td>
<td style="text-align: center;">512</td>
<td style="text-align: center;">2048</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">57_940_480</td>
</tr>
<tr class="even">
<td style="text-align: center;">125M</td>
<td style="text-align: center;">768</td>
<td style="text-align: center;">3072</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">124_662_528</td>
</tr>
</tbody>
</table>
<ul>
<li>Generations using reference models for evaluation prompts from literature
<ul>
<li>44 prompts (62 tokens on average)</li>
</ul></li>
</ul>
<p>My next steps:</p>
<ul>
<li>Evaluate a sample of prompts from each model by hand for my six scoring categories:
<ul>
<li><strong>Foundational language capabilities</strong>: Grammar and Context-Tracking (Consistency)</li>
<li><strong>Emergent capabilities</strong>: Factual Knowledge, Reasoning, Creativity</li>
<li><strong>Story-related capabilities</strong>: Plot</li>
</ul></li>
<li>Prompt different LLMs, iterating on prompts until LLM Judge scores match mine 90%+ of the time.</li>
</ul>
<p>Both steps will take considerable, so I’ll break them down to smaller steps and publish blog posts and videos along the way. Make sure to subscribe to my YouTube channel or check the <a href="https://www.youtube.com/playlist?list=PLVaenshL7UUD8iFmDDUpLCcuB-K_72mwI">TinyScale Lab playlist</a> for latest content!</p>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>TinyScaleLab</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-27-TSL-Setting-Eval-Targets/index.html</guid>
  <pubDate>Sun, 27 Apr 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>TinyScaleLab: Bridging Training Dynamics and Model Capabilities</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-26-TinyScale-Lab-Kickoff/index.html</link>
  <description><![CDATA[ 



<iframe width="560" height="315" src="https://www.youtube.com/embed/82mE39Ef5eY?si=5h9fdvnAF0071VcA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m excited to announce the kickoff of TinyScale Lab, a research project focused on exploring the connection between training dynamics and model capabilities. This research is motivated by two papers that I’ve studied in detail: <a href="https://arxiv.org/abs/2305.07759">“TinyStories: How Small Can Language Models Be and Still Speak Coherent English?” by Ronen Eldan and Yuanzhi Li</a>, and <a href="https://arxiv.org/abs/2309.14322">“Small-scale proxies for Large-scale Transformer Training Instabilities” by Wortsman, et al</a>.</p>
<p>Most LLM training-related research requires computational resources that are financially out of reach for individual researchers or small teams. At the same time, recent work has shown that tiny models exhibit emergent capabilities (as demonstrated in the TinyStories paper) and exhibit large-scale training dynamics (as shown in the Small-scale proxies paper).</p>
<p>While I don’t claim to be creating a definitive blueprint, I believe this approach—using tiny models as proxies to study phenomena relevant to models of all sizes—represents an underexplored path that could benefit other resource-constrained researchers.</p>
<p>I think this is how most of the world’s potential researchers would need to work. Making ML research accessible to resource-constrained environments isn’t trivial - it’s essential for the field’s diversity and progress.</p>
</section>
<section id="research-hypotheses" class="level2">
<h2 class="anchored" data-anchor-id="research-hypotheses">Research Hypotheses</h2>
<p>I’ve developed four main hypotheses that will guide my research:</p>
<ol type="1">
<li><strong>H1</strong>: Training stability directly affects specific model capabilities in predictable ways.</li>
<li><strong>H2</strong>: Different model capabilities (like grammar or consistency) respond differently to training adjustments.</li>
<li><strong>H3</strong>: Early training signals can predict which capabilities a model will or won’t develop before training is complete.</li>
<li><strong>H4</strong>: Techniques that stabilize training will have varying effects on different types of model capabilities.</li>
</ol>
<p>I’ve kept these hypotheses general at a high level because I really don’t know what I’m going to learn, but I do have a sense based on the TinyStories and Small-scale proxies papers that there is something around these four elements that I’m going to experience, and I expect to see some relationships.</p>
<p>I want to bridge the TinyStories paper analysis on emergent capabilities (grammar, consistency, factual knowledge, reasoning, etc.) with the Small-scale proxies paper training dynamics analysis (attention logits, training instabilities, learning rates, etc.).</p>
</section>
<section id="experimental-design" class="level2">
<h2 class="anchored" data-anchor-id="experimental-design">Experimental Design</h2>
<p>For my experimental design, I’ve decided to focus on four model sizes:</p>
<ul>
<li>~3M parameters</li>
<li>~20M parameters</li>
<li>~60M parameters</li>
<li>~120M parameters</li>
</ul>
<p>This follows the TinyStories paper closely, with the addition of a 120M parameter model.</p>
<p>I’ll use the same learning rates as the Small-scale proxies paper, ranging from 3e-4 to 3e-1 with seven learning rates in total: <code>{3e-4, 1e-3, 3e-3, 1e-2, 3e-2, 1e-1, 3e-1}</code></p>
<p>I’ll implement two stability techniques from the Small-scale proxies paper:</p>
<ul>
<li>QK layer norm (to mitigate attention logit growth)</li>
<li>Z loss (to mitigate output logit divergence)</li>
</ul>
<p>What will remain fixed across all training runs are the datasets, the number of training steps, and other hyperparameters like weight decay and warm-up steps.</p>
<p>The training dynamics I’ll log throughout training include:</p>
<ul>
<li>Logits</li>
<li>Gradients</li>
<li>Parameters</li>
<li>Loss</li>
</ul>
<p>For each of these, I’ll capture norms, means, maximum values, and RMS values.</p>
<p>The capabilities I want to evaluate are split into three categories:</p>
<ol type="1">
<li><strong>Foundational language</strong>: Grammar and context-tracking (consistency)</li>
<li><strong>Emergent capabilities</strong>: Factual knowledge, reasoning, and creativity</li>
<li><strong>Story-related</strong>: Plot</li>
</ol>
<p>The relationship between these training dynamics and capabilities is what I want to explore.</p>
</section>
<section id="success-criteria" class="level2">
<h2 class="anchored" data-anchor-id="success-criteria">Success Criteria</h2>
<p>My success criteria are simple but not easy: establishing clear connections between training dynamics and tiny model capabilities. This work is exploratory, and I’m open to discovering that the relationships might be more complex or different than initially hypothesized.</p>
</section>
<section id="risk-assessment" class="level2">
<h2 class="anchored" data-anchor-id="risk-assessment">Risk Assessment</h2>
<p>I’ve identified several risks that could impact this project:</p>
<ol type="1">
<li>Lack of connection between training dynamics and tiny model capabilities</li>
<li>Technical challenges in monitoring complex training dynamics</li>
<li>Sub-optimal parameter usage</li>
<li>Compute and inference costs ballooning beyond budget</li>
</ol>
</section>
<section id="risk-mitigation" class="level2">
<h2 class="anchored" data-anchor-id="risk-mitigation">Risk Mitigation</h2>
<p>To mitigate these risks, I plan to:</p>
<ol type="1">
<li>Shorten the iteration loop</li>
<li>Ensure evaluations are robust from the start</li>
<li>Start at the tiniest scale and progressively increase model size</li>
<li>Implement early stopping to avoid wasting compute</li>
</ol>
<p>I learned from the fastAI course and community that you want to shorten the iteration loop and ensure that evals are robust from the start. This gives you quick, immediate, robust, clear signal when you get feedback on how your model is performing.</p>
</section>
<section id="deliverables" class="level2">
<h2 class="anchored" data-anchor-id="deliverables">Deliverables</h2>
<p>My commitment is to produce:</p>
<ol type="1">
<li>Comprehensive research repositories including code, trained models, and detailed datasets (training dynamics and LLM Judge scores)</li>
<li>Weekly video content and blog posts</li>
<li>Technical report</li>
<li>Interactive visualizations</li>
</ol>
<p>The main thing I want to emphasize is that I’ll be doing this publicly and open-source. All models, code, and findings will be freely available to enable broader participation in ML research.</p>
</section>
<section id="timeline-and-budget" class="level2">
<h2 class="anchored" data-anchor-id="timeline-and-budget">Timeline and Budget</h2>
<p>I’ve broken the project into four phases:</p>
<ol type="1">
<li><strong>Phase 1</strong>: Eval/Logging Setup, Initial Training Runs (2-3 months)</li>
<li><strong>Phase 2</strong>: Experimental Implementation (3-4 months)</li>
<li><strong>Phase 3</strong>: Analysis &amp; Synthesis (2-3 months)</li>
<li><strong>Phase 4</strong>: Documentation &amp; Finalization (1 month)</li>
</ol>
<p>At minimum, I think this work will take eight months, and it could go well past a year.</p>
<p>For the budget, I’m estimating: - <strong>Training</strong>: $1700 (approximately 100 training runs on 25B tokens) - <strong>Inference</strong>: $200 (using Gemini 2.5 Flash for LLM Judge scoring) - <strong>Total</strong>: $2000</p>
<p>At this point, I’m considering whether it makes sense to buy my own GPU rig. If this is going to cost $2,000, why not spend a little more or twice as much and get a GPU rig that I can own? There are a lot of variables when it comes to budget and timeline, so I’m going to take it one week at a time and make adjustments as necessary.</p>
</section>
<section id="closing-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h2>
<p>To recap, TinyScale Lab aims to:</p>
<ol type="1">
<li>Bridge training dynamics and model capabilities to understand what makes tiny models effective</li>
<li>Create a systematic framework for understanding how training choices affect specific model capabilities</li>
<li>Demonstrate that meaningful ML research is accessible with modest computational resources</li>
<li>Open-source all models, code, and findings to enable broader participation in ML research</li>
</ol>
<p>As Nick Sirianni (championship winning coach of the Philadelphia Eagles) said, “You cannot be great without the greatness of others.” I truly stand on the shoulders of giants, especially the authors of the TinyStories and Small-scale proxies papers. Without their work and contributions in the open source space, I would not be able to even approach this kind of research.</p>
<p>If someone with similar interests sees this work and it inspires them, or they can use something I built that saves them time, saves them money, or gives them insight–that would be the best reward that comes out of this work.</p>
<p>I hope you’ll follow along with this journey. I’ll be keeping everything in the <a href="https://www.youtube.com/playlist?list=PLVaenshL7UUD8iFmDDUpLCcuB-K_72mwI">TinyScale Lab playlist on my YouTube</a> and will tag related posts on my blog.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="TinyScale-Lab bridges the gap between tiny model capabilities and training dynamics" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-26-TinyScale-Lab-Kickoff/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">TinyScale-Lab bridges the gap between tiny model capabilities and training dynamics</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <category>TinyScaleLab</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-26-TinyScale-Lab-Kickoff/index.html</guid>
  <pubDate>Sat, 26 Apr 2025 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-04-26-TinyScale-Lab-Kickoff/1.png" medium="image" type="image/png" height="216" width="144"/>
</item>
<item>
  <title>LossInspector: A Deep Dive Into LLM-Foundry’s Next-Token Prediction with a Custom Composer Callback</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-22-LossInspector/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I’m working on a research project where we’ll be fine-tuning small models with various techniques and datasets using LLM-Foundry. As part of our infrastructure setup, we wanted to make sure that we thoroughly understood how a batch of data is prepared by LLM-Foundry, and how the outputs of a model, along with the labels, are passed to the loss function to calculate the loss. To do so, with the help of Claude, I wrote up a custom Composer Callback. This is the third custom callback I’ve written for Composer/LLM-Foundry, you can read more about <a href="https://vishalbakshi.github.io/blog/posts/2025-03-30-Composer-Callback/">my first</a> and <a href="https://vishalbakshi.github.io/blog/posts/2025-04-02-Composer-Callback-Logging-dtypes/">second</a> callbacks.</p>
<p>I was initially going to have two or three callbacks: one to inspect inputs/outputs to the embedding, one to inspect the input/outputs to the model’s forward pass, and one to inspect the loss function. 27 commits later, I had a relatively lean single callback that gave me all the information I needed.</p>
<p>I focused on three events during Composer’s <a href="https://docs.mosaicml.com/projects/composer/en/stable/trainer/events.html">training loop</a>:</p>
<ul>
<li><code>before_loss</code>: to store the “untouched” batch from Composer’s <code>state</code>.</li>
<li><code>before_forward</code>: to store the untouched <code>input_ids</code> and <code>labels</code> from the state’s batch.</li>
<li><code>after_loss</code>: to both capture the calculated loss and “manually” calculate the loss using the model’s loss function.</li>
</ul>
<p>Before we go further into detail, here’s the callback code (and necessary imports):</p>
<p>Here’s my video walkthrough of the code in this notebook:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/9ffnmeiDF_M?si=DVAZhHFDfxkuzG6n" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
</section>
<section id="lossinspector-callback" class="level2">
<h2 class="anchored" data-anchor-id="lossinspector-callback"><code>LossInspector</code> Callback</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> composer.core.callback <span class="im" style="color: #00769E;">import</span> Callback</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> composer.core <span class="im" style="color: #00769E;">import</span> State</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> composer.loggers <span class="im" style="color: #00769E;">import</span> Logger</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> LossInspector(Callback):       </span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-9">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb1-10">        <span class="va" style="color: #111111;">self</span>.inspected <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb1-11">        <span class="va" style="color: #111111;">self</span>.input_ids <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-12">        <span class="va" style="color: #111111;">self</span>.labels <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-13">    </span>
<span id="cb1-14">    <span class="kw" style="color: #003B4F;">def</span> before_loss(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-15">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.inspected:</span>
<span id="cb1-16">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb1-17">        <span class="va" style="color: #111111;">self</span>.state_outputs <span class="op" style="color: #5E5E5E;">=</span> state.outputs</span>
<span id="cb1-18">        <span class="va" style="color: #111111;">self</span>.state_batch <span class="op" style="color: #5E5E5E;">=</span> state.batch</span>
<span id="cb1-19">        </span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;">def</span> before_forward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-22">        <span class="co" style="color: #5E5E5E;"># check that input_ids and labels are the same as after loss</span></span>
<span id="cb1-23">        <span class="va" style="color: #111111;">self</span>.input_ids <span class="op" style="color: #5E5E5E;">=</span> state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>].detach().cpu()</span>
<span id="cb1-24">        <span class="va" style="color: #111111;">self</span>.labels <span class="op" style="color: #5E5E5E;">=</span> state.batch[<span class="st" style="color: #20794D;">'labels'</span>][<span class="dv" style="color: #AD0000;">0</span>].detach().cpu()</span>
<span id="cb1-25">    </span>
<span id="cb1-26">    <span class="kw" style="color: #003B4F;">def</span> after_loss(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.inspected:</span>
<span id="cb1-28">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb1-29">            </span>
<span id="cb1-30">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">=== LOSS CALCULATION INSPECTION ==="</span>)</span>
<span id="cb1-31">        </span>
<span id="cb1-32">        <span class="co" style="color: #5E5E5E;"># Get the framework loss from state</span></span>
<span id="cb1-33">        framework_loss <span class="op" style="color: #5E5E5E;">=</span> state.loss.item()</span>
<span id="cb1-34">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Framework loss: </span><span class="sc" style="color: #5E5E5E;">{</span>framework_loss<span class="sc" style="color: #5E5E5E;">:.6f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-35">        </span>
<span id="cb1-36">        <span class="co" style="color: #5E5E5E;"># Access model's loss_function directly</span></span>
<span id="cb1-37">        logits <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.state_outputs[<span class="st" style="color: #20794D;">'logits'</span>]</span>
<span id="cb1-38">        labels <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.state_batch[<span class="st" style="color: #20794D;">'labels'</span>]</span>
<span id="cb1-39">        vocab_size <span class="op" style="color: #5E5E5E;">=</span> state.model.model.config.vocab_size</span>
<span id="cb1-40">        </span>
<span id="cb1-41">        direct_loss <span class="op" style="color: #5E5E5E;">=</span> state.model.model.loss_function(</span>
<span id="cb1-42">            logits<span class="op" style="color: #5E5E5E;">=</span>logits,</span>
<span id="cb1-43">            labels<span class="op" style="color: #5E5E5E;">=</span>labels,</span>
<span id="cb1-44">            vocab_size<span class="op" style="color: #5E5E5E;">=</span>vocab_size</span>
<span id="cb1-45">        )</span>
<span id="cb1-46">        </span>
<span id="cb1-47">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Direct call to model.loss_function: </span><span class="sc" style="color: #5E5E5E;">{</span>direct_loss<span class="sc" style="color: #5E5E5E;">.</span>item()<span class="sc" style="color: #5E5E5E;">:.6f}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-48">        </span>
<span id="cb1-49">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">-------- input_ids --------"</span>)</span>
<span id="cb1-50">        input_ids <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.state_batch[<span class="st" style="color: #20794D;">'input_ids'</span>][<span class="dv" style="color: #AD0000;">0</span>].detach().cpu()</span>
<span id="cb1-51">        <span class="bu" style="color: null;">print</span>(input_ids.tolist())</span>
<span id="cb1-52">        decoded_input <span class="op" style="color: #5E5E5E;">=</span> state.model.tokenizer.decode(input_ids)</span>
<span id="cb1-53">        <span class="bu" style="color: null;">print</span>(decoded_input[:<span class="dv" style="color: #AD0000;">1000</span>])</span>
<span id="cb1-54">        </span>
<span id="cb1-55">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">-------- labels --------"</span>)</span>
<span id="cb1-56">        labels <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.state_batch[<span class="st" style="color: #20794D;">'labels'</span>][<span class="dv" style="color: #AD0000;">0</span>].detach().cpu()</span>
<span id="cb1-57">        <span class="bu" style="color: null;">print</span>(labels.tolist())</span>
<span id="cb1-58">        valid_labels <span class="op" style="color: #5E5E5E;">=</span> labels[labels <span class="op" style="color: #5E5E5E;">!=</span> <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">100</span>]</span>
<span id="cb1-59">        decoded_labels <span class="op" style="color: #5E5E5E;">=</span> state.model.tokenizer.decode(valid_labels)</span>
<span id="cb1-60">        <span class="bu" style="color: null;">print</span>(decoded_labels)</span>
<span id="cb1-61"></span>
<span id="cb1-62">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">-------- matches before_forward values? --------"</span>)</span>
<span id="cb1-63">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"input_ids: </span><span class="sc" style="color: #5E5E5E;">{</span>torch<span class="sc" style="color: #5E5E5E;">.</span>allclose(input_ids, <span class="va" style="color: #111111;">self</span>.input_ids)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-64">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"labels: </span><span class="sc" style="color: #5E5E5E;">{</span>torch<span class="sc" style="color: #5E5E5E;">.</span>allclose(labels, <span class="va" style="color: #111111;">self</span>.labels)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-65">        </span>
<span id="cb1-66">        <span class="va" style="color: #111111;">self</span>.inspected <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
<p>The callback is then appended to the <code>callbacks</code> list before passed to the Composer trainer.</p>
</section>
<section id="smollm2-135m-loss-function" class="level2">
<h2 class="anchored" data-anchor-id="smollm2-135m-loss-function">SmolLM2-135M Loss Function</h2>
<p>It was surprisingly difficult to inspect the loss function. Or rather my lack of Composer/HuggingFace internals knowledge immediately surfaced with this task! Looking through the Composer GitHub repo and documentation, I found the following references to the model’s loss function—all quite helpful but too general:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">loss <span class="op" style="color: #5E5E5E;">=</span> model.loss(outputs, targets)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(NUM_EPOCHS):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">for</span> inputs, targets <span class="kw" style="color: #003B4F;">in</span> dataloader:</span>
<span id="cb3-3">        outputs <span class="op" style="color: #5E5E5E;">=</span> model.forward(inputs)</span>
<span id="cb3-4">        loss <span class="op" style="color: #5E5E5E;">=</span> model.loss(outputs, targets)</span>
<span id="cb3-5">        loss.backward()</span>
<span id="cb3-6">        optimizer.step()</span>
<span id="cb3-7">        optimizer.zero_grad()</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> loss(<span class="va" style="color: #111111;">self</span>, outputs, batch):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;"># pass batches and `forward` outputs to the loss</span></span>
<span id="cb4-3">    _, targets <span class="op" style="color: #5E5E5E;">=</span> batch</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;">return</span> F.cross_entropy(outputs, targets)</span></code></pre></div>
<p>I looked at their MixUp algorithm’s source code in hopes for more detail but found none—though it did help me confirm how batches are handled:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">class</span> MixUp(Algorithm):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;">def</span> match(<span class="va" style="color: #111111;">self</span>, event: Event, state: State) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="bu" style="color: null;">bool</span>:</span>
<span id="cb5-3">        <span class="co" style="color: #5E5E5E;">"""Determines whether the algorithm should run on a given event."""</span></span>
<span id="cb5-4">        <span class="cf" style="color: #003B4F;">return</span> event <span class="kw" style="color: #003B4F;">in</span> [Event.AFTER_DATALOADER, Event.AFTER_LOSS]</span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;">def</span> <span class="bu" style="color: null;">apply</span>(<span class="va" style="color: #111111;">self</span>, event: Event, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-7">        <span class="co" style="color: #5E5E5E;">"""Run the algorithm by modifying the State."""</span></span>
<span id="cb5-8">        <span class="bu" style="color: null;">input</span>, target <span class="op" style="color: #5E5E5E;">=</span> state.batch</span>
<span id="cb5-9"></span>
<span id="cb5-10">        <span class="cf" style="color: #003B4F;">if</span> event <span class="op" style="color: #5E5E5E;">==</span> Event.AFTER_DATALOADER:</span>
<span id="cb5-11">            new_input, <span class="va" style="color: #111111;">self</span>.permuted_target, <span class="va" style="color: #111111;">self</span>.mixing <span class="op" style="color: #5E5E5E;">=</span> mixup_batch(<span class="bu" style="color: null;">input</span>, target, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb5-12">            state.batch <span class="op" style="color: #5E5E5E;">=</span> (new_input, target)</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;">if</span> event <span class="op" style="color: #5E5E5E;">==</span> Event.AFTER_LOSS:</span>
<span id="cb5-15">            modified_batch <span class="op" style="color: #5E5E5E;">=</span> (<span class="bu" style="color: null;">input</span>, <span class="va" style="color: #111111;">self</span>.permuted_target)</span>
<span id="cb5-16">            new_loss <span class="op" style="color: #5E5E5E;">=</span> state.model.loss(state.outputs, modified_batch)</span>
<span id="cb5-17">            state.loss <span class="op" style="color: #5E5E5E;">*=</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> <span class="va" style="color: #111111;">self</span>.mixing)</span>
<span id="cb5-18">            state.loss <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.mixing <span class="op" style="color: #5E5E5E;">*</span> new_loss</span></code></pre></div>
<p>Looking at Composer’s <code>HuggingFaceModel</code> did not give me the necessary detail, but provided the key for the next step: the loss was stored in <code>outputs</code>.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> loss(<span class="va" style="color: #111111;">self</span>, outputs, batch):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.config.use_return_dict:</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;">return</span> outputs[<span class="st" style="color: #20794D;">'loss'</span>]</span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-5">        <span class="co" style="color: #5E5E5E;"># loss is at index 0 in the output tuple</span></span>
<span id="cb6-6">        <span class="cf" style="color: #003B4F;">return</span> outputs[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<p>Did this mean that the loss function was tucked away in the forward pass? Let’s take a look.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM, AutoTokenizer</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">model_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"HuggingFaceTB/SmolLM2-135M"</span></span>
<span id="cb8-2">tokenizer <span class="op" style="color: #5E5E5E;">=</span> AutoTokenizer.from_pretrained(model_name)</span>
<span id="cb8-3">model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(model_name)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;">import</span> inspect</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">forward_method <span class="op" style="color: #5E5E5E;">=</span> inspect.getsource(model.forward)</span>
<span id="cb10-2"><span class="bu" style="color: null;">print</span>(forward_method)</span></code></pre></div>
</div>
<p>I won’t print out the whole forward method, but will highlight that tucked away in there was the loss function call!</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">loss <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;">if</span> labels <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb11-3">    loss <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.loss_function(logits<span class="op" style="color: #5E5E5E;">=</span>logits, labels<span class="op" style="color: #5E5E5E;">=</span>labels, vocab_size<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.vocab_size, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span></code></pre></div>
<p>Aha! The function in question is <code>loss_function</code>. Inspecting that in more detail:</p>
<div class="cell" data-outputid="d9ba0d35-319f-444b-e060-7842ce9c6ebf" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">hasattr</span>(model, <span class="st" style="color: #20794D;">'loss_function'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
</div>
<p>This was a great opportunity for a refresher on the next-token objective and auto-regressive nature of this model.</p>
<div class="cell" data-outputid="be12edc7-9551-4d19-99f6-16d6af06abe1" data-execution_count="16">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;">print</span>(inspect.getsource(model.loss_function))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>def ForCausalLMLoss(
    logits,
    labels,
    vocab_size: int,
    num_items_in_batch: Optional[int] = None,
    ignore_index: int = -100,
    shift_labels: Optional[torch.Tensor] = None,
    **kwargs,
) -&gt; torch.Tensor:
    # Upcast to float if we need to compute the loss to avoid potential precision issues
    logits = logits.float()

    if shift_labels is None:
        # Shift so that tokens &lt; n predict n
        labels = nn.functional.pad(labels, (0, 1), value=ignore_index)
        shift_labels = labels[..., 1:].contiguous()

    # Flatten the tokens
    logits = logits.view(-1, vocab_size)
    shift_labels = shift_labels.view(-1)
    # Enable model parallelism
    shift_labels = shift_labels.to(logits.device)
    loss = fixed_cross_entropy(logits, shift_labels, num_items_in_batch, ignore_index, **kwargs)
    return loss
</code></pre>
</div>
</div>
<p>The key for understanding next-token prediction are the following lines:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="cf" style="color: #003B4F;">if</span> shift_labels <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;"># Shift so that tokens &lt; n predict n</span></span>
<span id="cb16-3">    labels <span class="op" style="color: #5E5E5E;">=</span> nn.functional.pad(labels, (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>), value<span class="op" style="color: #5E5E5E;">=</span>ignore_index)</span>
<span id="cb16-4">    shift_labels <span class="op" style="color: #5E5E5E;">=</span> labels[..., <span class="dv" style="color: #AD0000;">1</span>:].contiguous()</span></code></pre></div>
<p><code>nn.functional.pad</code> adds padding tokens to <code>labels</code>, specifically <code>0</code> to the left-most end of the last dimension and <code>1</code> padding token to the right-most end. The token it uses as padding is <code>ignore_index</code>, which is <code>-100</code>.</p>
<p>Next, it <em>shifts</em> the labels by 1 element to the left with <code>labels[..., 1:]</code>. I took a moment to realize what this meant: the <code>input_ids</code> and <code>labels</code>, in terms of position, are the same! To align the <code>labels</code> with the <code>logits</code> (which are already “shifted” in the sense that the first position in <code>logits</code> corresponds to the first predicted token: the second token in the context) we have to shift the <code>labels</code> by 1. To ensure that the final token in <code>input_ids</code> doesn’t predict anything, we pad <code>labels</code> with <code>-100</code>, the value ignored in the loss calculation.</p>
<p>As a reminder, if the context we’re training our model on is “the cat sat on the table”, each next token is predicted based on all previous tokens:</p>
<pre><code>the --&gt; cat
the cat --&gt; sat
the cat sat --&gt; on
the cat sat on --&gt; the
the cat sat on the --&gt; table</code></pre>
<p>This is a good time to return to our callback and analyze its output, but before I do, here’s a quick demo of the label shifting operation:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;">from</span> torch.nn.functional <span class="im" style="color: #00769E;">import</span> pad</span>
<span id="cb18-2"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> tensor</span></code></pre></div>
</div>
<div class="cell" data-outputid="71616038-3f2d-43e5-85f2-adcc9b90a766" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">labels <span class="op" style="color: #5E5E5E;">=</span> tensor([<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb19-2">labels</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>tensor([3, 6, 4, 2])</code></pre>
</div>
</div>
<div class="cell" data-outputid="72be094b-fdd3-4317-fea6-53ce914d3b3d" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">pad(labels, (<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>), value<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>tensor([   3,    6,    4,    2, -100])</code></pre>
</div>
</div>
<div class="cell" data-outputid="1184fe03-3d4d-41db-e07f-3d0cf1de0823" data-execution_count="12">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">pad(labels, (<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">0</span>), value<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([-100,    3,    6,    4,    2])</code></pre>
</div>
</div>
<div class="cell" data-outputid="5893adca-e559-46bd-c16c-c02c7a876779" data-execution_count="13">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">pad(labels, (<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>), value<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([-100,    3,    6,    4,    2, -100])</code></pre>
</div>
</div>
<div class="cell" data-outputid="4d957eab-06ec-4c64-9c1e-54b4a13e8a59" data-execution_count="14">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">pad(labels, (<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>), value<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">100</span>)[...,<span class="dv" style="color: #AD0000;">1</span>:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([   6,    4,    2, -100])</code></pre>
</div>
</div>
</section>
<section id="callback-logs" class="level2">
<h2 class="anchored" data-anchor-id="callback-logs">Callback Logs</h2>
<p>There were four key print statements of interest in my callback. I’ll display each and show their printed value:</p>
<ol type="1">
<li><code>print(f"Framework loss: {framework_loss:.6f}")</code></li>
</ol>
<pre><code>Framework loss: 1.067513</code></pre>
<ol start="2" type="1">
<li><code>print(f"Direct call to model.loss_function: {direct_loss.item():.6f}")</code></li>
</ol>
<pre><code>Direct call to model.loss_function: 1.067513</code></pre>
<ol start="3" type="1">
<li><code>print(input_ids.tolist())</code></li>
<li><code>print(labels.tolist())</code></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="input_ids (top) and labels (bottom) with the response highlighted in yellow"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-22-LossInspector/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption"><code>input_ids</code> (top) and <code>labels</code> (bottom) with the response highlighted in yellow</figcaption><p></p>
</figure>
</div>
<p>The first two print statements confirmed that I was calling <code>state.model.loss_function</code> correctly. It also confirmed that the loss function doesn’t take in the <code>input_ids</code>.</p>
<p>The last two print statements confirmed my understanding: positionally speaking, the <code>input_ids</code> and <code>labels</code> are the same. In <code>labels</code> the positions of <code>input_ids</code> tokens that contain the prompt (and EOS tokens) are replaced with <code>-100</code> and the tokens that represent the response are kept as is. For reference, here’s what <code>input_ids</code> looks like (both the prompt and the response) coming from an item of the MetaMathQA dataset (I have ommitted the hundreds of padding EOS tokens and formatted the text for clearer presentation):</p>
<pre><code>A box with a volume of 16 $\text{cm}^3$ can hold X paperclips.
How many paperclips could a box with a volume of 48 $\text{cm}^3$ hold?
If we know the answer to the above question is 150, what is the value of unknown variable X?

We are given that a box with a volume of 16 $\text{cm}^3$ can hold $X$ paperclips.
To find out how many paperclips a box with a volume of 48 $\text{cm}^3$ can hold, we can set up a proportion using the given information.
We can write the proportion as:
16 $\text{cm}^3$ / $X$ paperclips = 48 $\text{cm}^3$ / 150 paperclips
We can cross-multiply and solve for $X$:
16 * 150 = 48 * $X$
2400 = 48 * $X$
Dividing both sides by 48, we get:
$X$ = 50
The value of $X$ is 50.
The answer is: 50&lt;|endoftext|&gt;</code></pre>
<p><code>labels</code> has the prompt replaced with <code>-100</code>s, and the loss function then left-shifts the <code>labels</code> tokens by 1 spot to align with the logits for next-token prediction comparison.</p>
<p>Unsurprisingly, the <code>input_ids</code> and <code>labels</code> before the forward pass and after the loss calculation are the same:</p>
<pre><code>print("\n-------- matches before_forward values? --------")
print(f"input_ids: {torch.allclose(input_ids, self.input_ids)}")
print(f"labels: {torch.allclose(labels, self.labels)}")</code></pre>
<pre><code>-------- matches before_forward values? --------
input_ids: True
labels: True</code></pre>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>With this baseline established, I can use this callback everytime we have processed a new dataset for training, inspecting the tokens, decoded text and loss values to ensure that the training loop will run properly for next-token prediction, whether it’s a continued pretraining or instruction fine-tuning dataset! Working with LLM-Foundry is a steep learning curve but I am learning a TON.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-22-LossInspector/index.html</guid>
  <pubDate>Tue, 22 Apr 2025 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-04-22-LossInspector/1.png" medium="image" type="image/png" height="70" width="144"/>
</item>
<item>
  <title>Optimizing Matrix Multiplication Using Numba and Broadcasting</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this notebook I’ll solidy the matrix multiplication concepts taught in Lesson 11 of the fastai course (part 2). Most importantly, I want to make sure I understand the use of broadcasting to make the matmul operation 7000x faster!</p>
<p>Here’s a summary of run times for the five methods explored in this blog post:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Method</th>
<th style="text-align: center;">Images</th>
<th style="text-align: center;">Run Time (ms)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Python for-loops</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1090ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">Numba-compiled Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.555ms</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Python Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1.47ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">PyTorch Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1.22ms</td>
</tr>
<tr class="odd">
<td style="text-align: center;">PyTorch Broadcasting</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.158ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">Numba-compiled Broadcasting</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.0936ms</td>
</tr>
</tbody>
</table>
<p>Here’s my video walkthrough of the code in this notebook:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-t8b7Otfmjo?si=XxML2gDu0u2H9P0g" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="">
</iframe>
</section>
<section id="load-the-data" class="level2">
<h2 class="anchored" data-anchor-id="load-the-data">Load the Data</h2>
<p>We’ll use the MNIST dataset for this exercise.</p>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> torch <span class="im" style="color: #00769E;">import</span> tensor</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> pickle, gzip, math, os, time, shutil, matplotlib <span class="im" style="color: #00769E;">as</span> mpl, matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> urllib.request <span class="im" style="color: #00769E;">import</span> urlretrieve</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">MNIST_URL<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/data/mnist.pkl.gz?raw=true'</span></span>
<span id="cb2-2">path_data <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'data'</span>)</span>
<span id="cb2-3">path_data.mkdir(exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-4">path_gz <span class="op" style="color: #5E5E5E;">=</span> path_data<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'mnist.pkl.gz'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> path_gz.exists(): urlretrieve(MNIST_URL, path_gz)</span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;">with</span> gzip.<span class="bu" style="color: null;">open</span>(path_gz, <span class="st" style="color: #20794D;">'rb'</span>) <span class="im" style="color: #00769E;">as</span> f: ((x_train, y_train), (x_valid, y_valid), _) <span class="op" style="color: #5E5E5E;">=</span> pickle.load(f, encoding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'latin-1'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="314ea9fa-e0ee-4889-b82b-2fa6eb76da22" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;">!</span>ls <span class="op" style="color: #5E5E5E;">-</span>l data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>total 16656
-rw-r--r-- 1 root root 17051982 Apr 21 22:56 mnist.pkl.gz</code></pre>
</div>
</div>
<div class="cell" data-outputid="35f01f0b-da44-4f57-ecd7-0735437dd72e" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">x_train,y_train,x_valid,y_valid <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">map</span>(tensor, (x_train,y_train,x_valid,y_valid))</span>
<span id="cb6-2">x_train.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>torch.Size([50000, 784])</code></pre>
</div>
</div>
<div class="cell" data-outputid="b485d5c3-2095-4a56-87d4-1aa1d0932eed" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">imgs <span class="op" style="color: #5E5E5E;">=</span> x_train.reshape((<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">28</span>,<span class="dv" style="color: #AD0000;">28</span>))</span>
<span id="cb8-2">imgs.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>torch.Size([50000, 28, 28])</code></pre>
</div>
</div>
<div class="cell" data-outputid="2bf4f561-0371-41b3-fae9-e322e1b8d812" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.imshow(imgs[<span class="dv" style="color: #AD0000;">0</span>])<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-8-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>For our weights, we’ll create a set of random floats with shape 784 (rows) x 10 (columns). In an applied sense, these 10 outputs would be the logits associated with the ten possible digits (0-9) for each 28x28 image.</p>
<div class="cell" data-outputid="1f22c0e7-a087-4b0b-b0d1-dd41e8940ecb" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">torch.manual_seed(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb11-2">weights <span class="op" style="color: #5E5E5E;">=</span> torch.randn(<span class="dv" style="color: #AD0000;">784</span>, <span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb11-3">weights.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>torch.Size([784, 10])</code></pre>
</div>
</div>
<p>For our inputs (which get multiplied by our weights) we’ll use the first 5 digits (28x28 images) from the validation set. These inputs and our weights are the two matrices we want to multiply!</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">m1 <span class="op" style="color: #5E5E5E;">=</span> x_valid[:<span class="dv" style="color: #AD0000;">5</span>]</span>
<span id="cb13-2">m2 <span class="op" style="color: #5E5E5E;">=</span> weights</span></code></pre></div>
</div>
<div class="cell" data-outputid="212a05d8-26bd-4556-860b-257409a0fee5" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">m1.shape,m2.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(torch.Size([5, 784]), torch.Size([784, 10]))</code></pre>
</div>
</div>
</section>
<section id="initial-solution-python-for-loops" class="level2">
<h2 class="anchored" data-anchor-id="initial-solution-python-for-loops">Initial Solution: Python for-Loops</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Naive implementation of matrix multiplication"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Naive implementation of matrix multiplication</figcaption><p></p>
</figure>
</div>
<p>For our first iteration, we’ll do a nested for-loop—the most naive implementation of matrix multiplication in this exercise.</p>
<p>We iterate through the 5 rows of our input matrix (images). For each row, we iterate through each column of our weights matrix. For each of the 784 elements in that row/column (i,j) combination, we take the dot product and store it in the output matrix. 5 images x 10 outputs x 784 elements = 39200 total items operated on.</p>
<div class="cell" data-outputid="cb867e65-bd14-4756-a67d-532d55b3abd1" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">10</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">784</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>39200</code></pre>
</div>
</div>
<div class="cell" data-outputid="60c72dc6-52ab-412f-a330-aa63684b44da" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">ar,ac <span class="op" style="color: #5E5E5E;">=</span> m1.shape <span class="co" style="color: #5E5E5E;"># n_rows * n_cols</span></span>
<span id="cb18-2">br,bc <span class="op" style="color: #5E5E5E;">=</span> m2.shape</span>
<span id="cb18-3">(ar,ac),(br,bc)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>((5, 784), (784, 10))</code></pre>
</div>
</div>
<div class="cell" data-outputid="8425c8be-f9b5-40d5-f2d0-d7d301d18c05" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">t1 <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc) <span class="co" style="color: #5E5E5E;"># resultant tensor</span></span>
<span id="cb20-2">t1.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>torch.Size([5, 10])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar): <span class="co" style="color: #5E5E5E;">#5</span></span>
<span id="cb22-2">    <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bc): <span class="co" style="color: #5E5E5E;"># 10</span></span>
<span id="cb22-3">        <span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ac): <span class="co" style="color: #5E5E5E;"># 784</span></span>
<span id="cb22-4">            t1[i,j] <span class="op" style="color: #5E5E5E;">+=</span> m1[i,k] <span class="op" style="color: #5E5E5E;">*</span> m2[k,j]</span></code></pre></div>
</div>
<p>The resulting matrix has 5 rows (1 for each image) and 10 columns (one for each “neuron” in our weights matrix).</p>
<div class="cell" data-outputid="237f3596-1c48-43c0-bb07-bae65246ac40" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">torch.set_printoptions(precision<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>, sci_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb23-2">t1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>tensor([[-10.94,  -0.68,  -7.00,  -4.01,  -2.09,  -3.36,   3.91,  -3.44, -11.47,  -2.12],
        [ 14.54,   6.00,   2.89,  -4.08,   6.59, -14.74,  -9.28,   2.16, -15.28,  -2.68],
        [  2.22,  -3.22,  -4.80,  -6.05,  14.17,  -8.98,  -4.79,  -5.44, -20.68,  13.57],
        [ -6.71,   8.90,  -7.46,  -7.90,   2.70,  -4.73, -11.03, -12.98,  -6.44,   3.64],
        [ -2.44,  -6.40,  -2.40,  -9.04,  11.18,  -5.77,  -8.92,  -3.79,  -8.98,   5.28]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb25-2">np.set_printoptions(precision<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">140</span>)</span></code></pre></div>
</div>
<p>Wrapping this code into a function we can time it.</p>
<div class="cell" data-execution_count="135">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb26-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb26-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc)</span>
<span id="cb26-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar):</span>
<span id="cb26-5">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bc):</span>
<span id="cb26-6">            <span class="cf" style="color: #003B4F;">for</span> k <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ac): c[i,j] <span class="op" style="color: #5E5E5E;">+=</span> a[i,k] <span class="op" style="color: #5E5E5E;">*</span> b[k,j]</span>
<span id="cb26-7">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-outputid="20110470-6efe-4296-fe08-6e37fb72d9aa" data-execution_count="137">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="op" style="color: #5E5E5E;">%</span>time _<span class="op" style="color: #5E5E5E;">=</span>matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1.09 s, sys: 544 µs, total: 1.09 s
Wall time: 1.09 s</code></pre>
</div>
</div>
<p>It takes a whopping 1.09 seconds to perform this matrix multiplication for 5 images! Let’s optimize this with numba.</p>
</section>
<section id="compiling-the-dot-product-with-numba" class="level2">
<h2 class="anchored" data-anchor-id="compiling-the-dot-product-with-numba">Compiling the Dot Product with Numba</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Matrix multiplication using a numba-compiled dot product operation"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/2.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Matrix multiplication using a numba-compiled dot product operation</figcaption><p></p>
</figure>
</div>
<p>To reduce the number of python for-loops, we write the dot product (between the two 784-element vectors) in numba:</p>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;">from</span> numba <span class="im" style="color: #00769E;">import</span> njit</span></code></pre></div>
</div>
<div class="cell" data-execution_count="139">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="at" style="color: #657422;">@njit</span></span>
<span id="cb30-2"><span class="kw" style="color: #003B4F;">def</span> dot(a,b):</span>
<span id="cb30-3">    res <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.</span></span>
<span id="cb30-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(a)): res<span class="op" style="color: #5E5E5E;">+=</span>a[i]<span class="op" style="color: #5E5E5E;">*</span>b[i]</span>
<span id="cb30-5">    <span class="cf" style="color: #003B4F;">return</span> res</span></code></pre></div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;">from</span> numpy <span class="im" style="color: #00769E;">import</span> array</span></code></pre></div>
</div>
<p>The first run of <code>dot</code> takes longer as it includes the compile time:</p>
<div class="cell" data-outputid="61b070bc-e64a-4931-eb9a-16dc74db549c" data-execution_count="141">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="op" style="color: #5E5E5E;">%</span>time dot(array([<span class="fl" style="color: #AD0000;">1.</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>]),array([<span class="fl" style="color: #AD0000;">2.</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 123 ms, sys: 0 ns, total: 123 ms
Wall time: 124 ms</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="141">
<pre><code>20.0</code></pre>
</div>
</div>
<p>The second run is 250x times faster.</p>
<div class="cell" data-outputid="8b7c64a0-582c-4b7f-ba4c-fae8fbcf9c26" data-execution_count="143">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="fl" style="color: #AD0000;">0.124</span><span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">0.000489</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="143">
<pre><code>253.5787321063395</code></pre>
</div>
</div>
<div class="cell" data-outputid="30d7d3a4-c845-477c-9623-675a383c6fbb" data-execution_count="142">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="op" style="color: #5E5E5E;">%</span>time dot(array([<span class="fl" style="color: #AD0000;">1.</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>]),array([<span class="fl" style="color: #AD0000;">2.</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 40 µs, sys: 5 µs, total: 45 µs
Wall time: 48.9 µs</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="142">
<pre><code>20.0</code></pre>
</div>
</div>
<p>We replace the third for-loop with our numba <code>dot</code> function:</p>
<div class="cell" data-execution_count="160">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb40-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb40-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc)</span>
<span id="cb40-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar):</span>
<span id="cb40-5">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bc): c[i,j] <span class="op" style="color: #5E5E5E;">=</span> dot(a[i,:], b[:,j])</span>
<span id="cb40-6">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">m1a,m2a <span class="op" style="color: #5E5E5E;">=</span> m1.numpy(),m2.numpy()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="im" style="color: #00769E;">from</span> fastcore.test <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>We test that it yields the same result:</p>
<div class="cell" data-execution_count="163">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">test_close(t1,matmul(m1a, m2a))</span></code></pre></div>
</div>
<div class="cell" data-outputid="b9655c05-775a-425e-8921-91505c5a4d48" data-execution_count="151">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">50</span> matmul(m1a,m2a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>555 µs ± 14.5 µs per loop (mean ± std. dev. of 7 runs, 50 loops each)</code></pre>
</div>
</div>
<p>Our numba-compiled <code>dot</code> operation makes our matrix multiplication 2000x faster!</p>
<div class="cell" data-outputid="5d850c83-dc19-43fb-a238-e613ef13bfc8" data-execution_count="152">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="fl" style="color: #AD0000;">1.09</span><span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">555e-6</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>1963.963963963964</code></pre>
</div>
</div>
<p>The same operation can be done in Python:</p>
<div class="cell" data-execution_count="164">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb48-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb48-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc)</span>
<span id="cb48-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar):</span>
<span id="cb48-5">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bc): c[i,j] <span class="op" style="color: #5E5E5E;">=</span> (a[i,:] <span class="op" style="color: #5E5E5E;">*</span> b[:,j]).<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb48-6">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-execution_count="165">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">test_close(t1,matmul(m1, m2))</span></code></pre></div>
</div>
<p>But it’s three times slower than numba:</p>
<div class="cell" data-outputid="e9b4fe5b-ca19-4d9c-ab52-6b6e5b7f5cc9" data-execution_count="166">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">50</span> _<span class="op" style="color: #5E5E5E;">=</span>matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.47 ms ± 32.3 µs per loop (mean ± std. dev. of 7 runs, 50 loops each)</code></pre>
</div>
</div>
<p>Using <code>torch.dot</code> is a smidge faster than Python:</p>
<div class="cell" data-execution_count="167">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb52-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb52-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc)</span>
<span id="cb52-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar):</span>
<span id="cb52-5">        <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(bc): c[i,j] <span class="op" style="color: #5E5E5E;">=</span> torch.dot(a[i,:], b[:,j])</span>
<span id="cb52-6">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-execution_count="168">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">test_close(t1,matmul(m1, m2))</span></code></pre></div>
</div>
<div class="cell" data-outputid="60fdda95-41de-4628-b901-bd94f407e572" data-execution_count="169">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">50</span> _<span class="op" style="color: #5E5E5E;">=</span>matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.22 ms ± 39.1 µs per loop (mean ± std. dev. of 7 runs, 50 loops each)</code></pre>
</div>
</div>
</section>
<section id="faster-use-broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="faster-use-broadcasting">Faster: Use Broadcasting!</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Using broadcasting to compute all image/weight dot products simultaneously!"><img src="https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/3.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Using broadcasting to compute all image/weight dot products simultaneously!</figcaption><p></p>
</figure>
</div>
<p>Broadcasting effectively expands the smaller matrix to match the size of the larger one so that element-wise operations can take place.</p>
<p>Suppose we wanted to take the dot product between the first image and all 10 columns of weights. Adding a <code>None</code> during indexing adds a unit axis at that position:</p>
<div class="cell" data-outputid="2676c4cc-c732-4947-e7d1-851a3b0fadf1" data-execution_count="21">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">m1[<span class="dv" style="color: #AD0000;">0</span>,:].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>torch.Size([784])</code></pre>
</div>
</div>
<div class="cell" data-outputid="bc6ed9d8-f7cc-48b8-b6e5-a0e3e5edcf7b" data-execution_count="22">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">m1[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>torch.Size([784, 1])</code></pre>
</div>
</div>
<div class="cell" data-outputid="8c97f11e-a361-4495-dc0e-1b02a7a41a11" data-execution_count="23">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1">m2.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>torch.Size([784, 10])</code></pre>
</div>
</div>
<p>Multiplying (element-wise) <code>m1[0, :, None]</code> with <code>m2</code> <em>broadcasts</em> <code>m1[0, :, None]</code> across the 10 columns of <code>m2</code>. In other words, each row of <code>m1[0]</code> is virtually copied over 10 times, one for each column of <code>m2</code>.</p>
<div class="cell" data-outputid="851cd77c-a7c6-47c4-b5ab-4cf31b2f3992" data-execution_count="25">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">(m1[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> m2).shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>torch.Size([784, 10])</code></pre>
</div>
</div>
<div class="cell" data-outputid="ff7e2357-7bd5-4fcc-b145-209686989ebb" data-execution_count="36">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">m1.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>torch.Size([5, 784])</code></pre>
</div>
</div>
<div class="cell" data-outputid="6d3005bf-b2b3-47df-ed78-974f090d94e6" data-execution_count="42">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">m1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]])</code></pre>
</div>
</div>
<p>Here’s a smaller example. <code>a</code> has 5 rows, “images”, each with 4 pixels.</p>
<div class="cell" data-outputid="a1c16304-fd94-4b01-e12c-dfe5d97511b6" data-execution_count="37">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">a <span class="op" style="color: #5E5E5E;">=</span> torch.randint(low<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb68-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>tensor([[1, 4, 3, 4],
        [1, 4, 1, 3],
        [3, 2, 2, 4],
        [3, 1, 3, 1],
        [2, 3, 1, 1]])</code></pre>
</div>
</div>
<p>We pluck out the first “image” with <code>0</code>, then add a unit axis at the end with <code>None</code> to make it “broadcastable”</p>
<div class="cell" data-outputid="917a5f84-282b-4c51-bf82-4860c08cc859" data-execution_count="38">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">a[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor([[1],
        [4],
        [3],
        [4]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="19287d6f-36f8-42e6-8136-36cb6881f1ff" data-execution_count="43">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">a.shape, a[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>].shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>(torch.Size([5, 4]), torch.Size([4, 1]))</code></pre>
</div>
</div>
<p>Suppose we have weights <code>w</code> with 4 rows, each 10 columns wide.</p>
<div class="cell" data-outputid="2370ca54-9190-4415-d920-171c9c705707" data-execution_count="47">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">w <span class="op" style="color: #5E5E5E;">=</span> torch.randint(low<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, high<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb74-2">w</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>tensor([[2, 2, 1, 1, 4, 3, 4, 2, 4, 3],
        [1, 2, 4, 2, 4, 1, 3, 1, 2, 1],
        [4, 3, 4, 3, 1, 2, 1, 3, 3, 4],
        [1, 3, 3, 3, 3, 1, 1, 1, 4, 4]])</code></pre>
</div>
</div>
<p>We broadcast the 4-vector <code>a[0, :, None]</code> across all 10 4-vectors in <code>w</code>:</p>
<div class="cell" data-outputid="73442351-22b9-46eb-cde5-d4ee374d2679" data-execution_count="48">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">a[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> w</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>tensor([[ 2,  2,  1,  1,  4,  3,  4,  2,  4,  3],
        [ 4,  8, 16,  8, 16,  4, 12,  4,  8,  4],
        [12,  9, 12,  9,  3,  6,  3,  9,  9, 12],
        [ 4, 12, 12, 12, 12,  4,  4,  4, 16, 16]])</code></pre>
</div>
</div>
<p>Then take the sum down the columns (along the row axis) to get the 10 output “activations” for this “image”:</p>
<div class="cell" data-outputid="0795be2f-d5b5-42a7-91f8-13d352fc7a46" data-execution_count="49">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">(a[<span class="dv" style="color: #AD0000;">0</span>, :, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> w).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([22, 31, 41, 30, 35, 17, 23, 19, 37, 35])</code></pre>
</div>
</div>
<p>Looking at the first value of <code>22</code>, it comes from the dot product between the first “image” in <code>a</code> and the first row of weights (the “neuron”) in <code>w</code>:</p>
<p>22 = 1*2 + 4*1 + 3*4 + 4*1 = 2 + 4 + 12 + 4</p>
<p>In this way, we have the dot product between the first image and all 10 columns. This is the first row of the matrix product between <code>a</code> and <code>w</code>.</p>
<p>We can then loop over the images, broadcasting it across the weight matrix, summing down the columns to get each subsequent row of our resultant matrix product:</p>
<div class="cell" data-outputid="db6f46a2-bfa0-48a7-b336-5f5c1332f01f" data-execution_count="51">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">(ar,ac),(wr,wc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,w.shape</span>
<span id="cb80-2">ar,ac,wr,wc</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>(5, 4, 4, 10)</code></pre>
</div>
</div>
<div class="cell" data-outputid="2b8330a8-6dbd-4092-8f5f-6aaeaf7ccdfb" data-execution_count="52">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, wc)</span>
<span id="cb82-2">c.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>torch.Size([5, 10])</code></pre>
</div>
</div>
<div class="cell" data-outputid="ab5b28b8-b7be-4d85-da36-730fd8943ca4" data-execution_count="53">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar):</span>
<span id="cb84-2">    c[i] <span class="op" style="color: #5E5E5E;">=</span> (a[i, :, <span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> w).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb84-3">c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>tensor([[22., 31., 41., 30., 35., 17., 23., 19., 37., 35.],
        [13., 22., 30., 21., 30., 12., 20., 12., 27., 23.],
        [20., 28., 31., 25., 34., 19., 24., 18., 38., 35.],
        [20., 20., 22., 17., 22., 17., 19., 17., 27., 26.],
        [12., 16., 21., 14., 24., 12., 19., 11., 21., 17.]])</code></pre>
</div>
</div>
<p>In this way, we have performed matrix multiplication by taking the dot product of each row/column using broadcasting! Returning to our original dataset:</p>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb86-2">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb86-3">    c <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(ar, bc)</span>
<span id="cb86-4">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar): c[i]  <span class="op" style="color: #5E5E5E;">=</span> (a[i,:,<span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> b).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb86-5">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">test_close(t1,matmul(m1, m2))</span></code></pre></div>
</div>
<div class="cell" data-outputid="dcb5e610-3ea9-4af8-83bf-c0390020cd2c" data-execution_count="58">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">50</span> _<span class="op" style="color: #5E5E5E;">=</span>matmul(m1, m2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>158 µs ± 15.1 µs per loop (mean ± std. dev. of 7 runs, 50 loops each)</code></pre>
</div>
</div>
<p>This gives us a 8x speedup from the numba-compiled dot product (1.22ms –&gt; 0.158 ms).</p>
<p>Now, instead of 5 images we can perform matmul with all 50k images in our dataset.</p>
<div class="cell" data-outputid="3877da3f-6cfe-433f-f7bc-6e70d2b80678" data-execution_count="59">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">tr <span class="op" style="color: #5E5E5E;">=</span> matmul(x_train, weights)</span>
<span id="cb90-2">tr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>tensor([[  0.96,  -2.96,  -2.11,  ..., -15.09, -17.69,   0.60],
        [  6.89,  -0.34,   0.79,  ..., -17.13, -25.36,  16.23],
        [-10.18,   7.38,   4.13,  ...,  -6.73,  -6.79,  -1.58],
        ...,
        [  7.40,   7.64,  -3.50,  ...,  -1.02, -16.22,   2.07],
        [  3.25,   9.52,  -9.37,  ...,   2.98, -19.58,  -1.96],
        [ 15.70,   4.12,  -5.62,  ...,   8.08, -12.21,   0.42]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="a96bae33-3c9c-4380-c4da-7df3c44e1cb3" data-execution_count="60">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">tr.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>torch.Size([50000, 10])</code></pre>
</div>
</div>
<p>This operation now takes less than two seconds!</p>
<div class="cell" data-outputid="9b5bb005-9613-4419-dfc5-af1c2b30c464" data-execution_count="63">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="op" style="color: #5E5E5E;">%</span>time _<span class="op" style="color: #5E5E5E;">=</span>matmul(x_train, weights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1.62 s, sys: 0 ns, total: 1.62 s
Wall time: 1.63 s</code></pre>
</div>
</div>
</section>
<section id="fastest-numba-broadcasting" class="level2">
<h2 class="anchored" data-anchor-id="fastest-numba-broadcasting">Fastest: Numba Broadcasting</h2>
<div class="cell" data-outputid="4af16216-46bd-41a9-a893-aa5229bb6d54" data-execution_count="69">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">m1a.shape, m2a.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>((5, 784), (784, 10))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="at" style="color: #657422;">@njit</span></span>
<span id="cb98-2"><span class="kw" style="color: #003B4F;">def</span> matmul(a,b):</span>
<span id="cb98-3">    (ar,ac),(br,bc) <span class="op" style="color: #5E5E5E;">=</span> a.shape,b.shape</span>
<span id="cb98-4">    c <span class="op" style="color: #5E5E5E;">=</span> np.zeros((ar, bc))</span>
<span id="cb98-5">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(ar): c[i] <span class="op" style="color: #5E5E5E;">=</span> (a[i,:,<span class="va" style="color: #111111;">None</span>] <span class="op" style="color: #5E5E5E;">*</span> b).<span class="bu" style="color: null;">sum</span>(axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb98-6">    <span class="cf" style="color: #003B4F;">return</span> c</span></code></pre></div>
</div>
<div class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">test_close(t1,matmul(m1a, m2a))</span></code></pre></div>
</div>
<div class="cell" data-outputid="13b4fff2-ef89-4c34-9bc9-0d77963e5334" data-execution_count="86">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="op" style="color: #5E5E5E;">%</span>timeit <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">50</span> _<span class="op" style="color: #5E5E5E;">=</span>matmul(m1a, m2a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>93.6 µs ± 9.26 µs per loop (mean ± std. dev. of 7 runs, 50 loops each)</code></pre>
</div>
</div>
<p>We can now perform matrix multiplication for all 50_000 images in less time than we could for 5 images using nested for-loops. AMAZING!</p>
<div class="cell" data-outputid="6f076764-93d6-41d6-a7bf-b82f5ee271a2" data-execution_count="91">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="op" style="color: #5E5E5E;">%</span>time _<span class="op" style="color: #5E5E5E;">=</span>matmul(x_train.numpy(), weights.numpy())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 885 ms, sys: 0 ns, total: 885 ms
Wall time: 881 ms</code></pre>
</div>
</div>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>I’ve been busy with other ML projects over the past few months but I’m so glad I have gotten back in the driver’s seat for fastai course part 2! The videos, content, and potential projects/exercises that spring forth are absolutely delicious. Using relatively simple building blocks, I was able to understand matrix multiplication through Python loops, numba dot product, and Yorick-inspired PyTorch broadcasting. Creating the visuals (in excalidraw) was a <em>must</em> because I really needed to cement these concepts in my mind, as encouraged by Jeremy in the video.</p>
<p>Here’s the summary again of run times for each of the methods shown above:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Method</th>
<th style="text-align: center;">Images</th>
<th style="text-align: center;">Run Time (ms)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Python for-loops</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1090ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">Numba-compiled Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.555ms</td>
</tr>
<tr class="odd">
<td style="text-align: center;">Python Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1.47ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">PyTorch Dot Product</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">1.22ms</td>
</tr>
<tr class="odd">
<td style="text-align: center;">PyTorch Broadcasting</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.158ms</td>
</tr>
<tr class="even">
<td style="text-align: center;">Numba-compiled Broadcasting</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">0.0936ms</td>
</tr>
</tbody>
</table>
<p>Using numba-compiled broadcasting, the 5-image matrix multiplication with weights experienced a 12000x speedup compared to the naive Python nested for-loop implementation! Amazing!!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/index.html</guid>
  <pubDate>Mon, 21 Apr 2025 07:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-04-21-Matrix-Multiplication/1.png" medium="image" type="image/png" height="49" width="144"/>
</item>
<item>
  <title>Logging Data Types for Activations, Gradients, Weights, Optimizer States and Loss during Training with LLM-Foundry</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-02-Composer-Callback-Logging-dtypes/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In a <a href="https://vishalbakshi.github.io/blog/posts/2025-03-30-Composer-Callback/">previous blog post</a> I shared my first couple of iterations of custom Composer callback used to log data types of different entities (activations, gradients, weights, optimizer states, and loss) during training with LLM-Foundry. In this blog post I’ll share my final callback iteration’s code, some lessons I learned along the way (i.e.&nbsp;LLaMA’s self-attention module doesn’t have positional arguments!) and analyze the logging results to observe entity data types throughout the training loop.</p>
</section>
<section id="composer-callback-walkthrough" class="level2">
<h2 class="anchored" data-anchor-id="composer-callback-walkthrough">Composer Callback Walkthrough</h2>
<p>The data types of entities (activations, gradients, weights, loss, and optimizer states) are logged during training with a custom Composer callback <code>DtypeLogger</code> passed to the Composer <code>Trainer</code>. This callback was built up and tested event-by-event using Claude. There is one event handler in the callback for each Composer event from <code>&lt;FIT_START&gt;</code> to <code>&lt;BATCH_END&gt;</code>:</p>
<pre><code># &lt;INIT&gt;
# &lt;BEFORE_LOAD&gt;
# &lt;AFTER_LOAD&gt;
# &lt;FIT_START&gt;
for epoch in range(NUM_EPOCHS):
    # &lt;EPOCH_START&gt;
    while True:
        # &lt;BEFORE_DATALOADER&gt;
        batch = next(dataloader)
        if batch is None:
            break
        inputs, targets = batch
        # &lt;AFTER_DATALOADER&gt;

        # &lt;BATCH_START&gt;

        # &lt;BEFORE_FORWARD&gt;
        outputs = model.forward(inputs)
        # &lt;AFTER_FORWARD&gt;

        # &lt;BEFORE_LOSS&gt;
        loss = model.loss(outputs, targets)
        # &lt;AFTER_LOSS&gt;

        # &lt;BEFORE_BACKWARD&gt;
        loss.backward()
        # &lt;AFTER_BACKWARD&gt;

        optimizer.step()
        optimizer.zero_grad()

        # &lt;BATCH_END&gt;
    # &lt;EPOCH_END&gt;</code></pre>
<p>There are four explicit logging functions:</p>
<ul>
<li><code>_log_model_weight_dtypes</code></li>
<li><code>_log_gradient_dtypes</code></li>
<li><code>_log_optimizer_state_dtypes</code></li>
<li><code>_log_loss_dtype</code></li>
</ul>
<p>Additionally, activations are logged using <code>register_forward_hook</code> for all modules except self-attention (more on that below). Self-attention inputs are logged using a monkey-patched forward pass.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">class</span> DtypeLogger(Callback):</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, save_path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"/model-checkpoints/dtype_tracking"</span>, log_interval<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">=</span> Path(save_path)</span>
<span id="cb2-4">        <span class="va" style="color: #111111;">self</span>.dtype_logs <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'log'</span>: {}}</span>
<span id="cb2-5">        <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">=</span> log_interval</span>
<span id="cb2-6">        <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-7">        </span>
<span id="cb2-8">    <span class="kw" style="color: #003B4F;">def</span> fit_start(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-9">        <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"fit_start"</span>)</span>
<span id="cb2-10">        <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-11">        </span>
<span id="cb2-12">    <span class="kw" style="color: #003B4F;">def</span> epoch_start(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-13">        <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"epoch_start"</span>)</span>
<span id="cb2-14">        <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;">def</span> before_dataloader(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-18">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"before_dataloader"</span>)</span>
<span id="cb2-19">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-20">            </span>
<span id="cb2-21">    <span class="kw" style="color: #003B4F;">def</span> after_dataloader(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-23">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"after_dataloader"</span>)</span>
<span id="cb2-24">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-25">            </span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;">def</span> batch_start(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-28">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"batch_start"</span>)</span>
<span id="cb2-29">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-30">            </span>
<span id="cb2-31">    <span class="kw" style="color: #003B4F;">def</span> before_forward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-32">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-33">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"before_forward"</span>)</span>
<span id="cb2-34">            </span>
<span id="cb2-35">            <span class="co" style="color: #5E5E5E;"># Clear old hooks</span></span>
<span id="cb2-36">            <span class="cf" style="color: #003B4F;">for</span> hook <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.hooks:</span>
<span id="cb2-37">                hook.remove()</span>
<span id="cb2-38">            <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-39">            </span>
<span id="cb2-40">            <span class="co" style="color: #5E5E5E;"># Get the model</span></span>
<span id="cb2-41">            model <span class="op" style="color: #5E5E5E;">=</span> state.model.model.base_model.model</span>
<span id="cb2-42">            transformer_model <span class="op" style="color: #5E5E5E;">=</span> model.model  <span class="co" style="color: #5E5E5E;"># This is the transformer part</span></span>
<span id="cb2-43">            batch_id <span class="op" style="color: #5E5E5E;">=</span> state.timestamp.batch.value</span>
<span id="cb2-44">            </span>
<span id="cb2-45">            <span class="co" style="color: #5E5E5E;"># Store original forward methods to restore later</span></span>
<span id="cb2-46">            <span class="va" style="color: #111111;">self</span>.original_forward_methods <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb2-47">            </span>
<span id="cb2-48">            <span class="kw" style="color: #003B4F;">def</span> hook_fn(layer_name, module_name):</span>
<span id="cb2-49">                <span class="kw" style="color: #003B4F;">def</span> _hook(module, inputs, outputs):</span>
<span id="cb2-50">                    <span class="co" style="color: #5E5E5E;"># Log input activation dtype</span></span>
<span id="cb2-51">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(inputs, <span class="bu" style="color: null;">tuple</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(inputs) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-52">                        <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"forward:</span><span class="sc" style="color: #5E5E5E;">{</span>module_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>layer_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:activation_input"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(inputs[<span class="dv" style="color: #AD0000;">0</span>].dtype)</span>
<span id="cb2-53">                    </span>
<span id="cb2-54">                    <span class="co" style="color: #5E5E5E;"># Log output activation dtype</span></span>
<span id="cb2-55">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(outputs, torch.Tensor):</span>
<span id="cb2-56">                        <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"forward:</span><span class="sc" style="color: #5E5E5E;">{</span>module_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>layer_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:activation_output"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(outputs.dtype)</span>
<span id="cb2-57">                    <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(outputs, <span class="bu" style="color: null;">tuple</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(outputs) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-58">                        <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"forward:</span><span class="sc" style="color: #5E5E5E;">{</span>module_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>layer_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:activation_output"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(outputs[<span class="dv" style="color: #AD0000;">0</span>].dtype)</span>
<span id="cb2-59">                <span class="cf" style="color: #003B4F;">return</span> _hook</span>
<span id="cb2-60">            </span>
<span id="cb2-61">            <span class="co" style="color: #5E5E5E;"># Monkey patch self-attention modules</span></span>
<span id="cb2-62">            <span class="cf" style="color: #003B4F;">for</span> layer_idx, layer <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(transformer_model.layers):</span>
<span id="cb2-63">                <span class="co" style="color: #5E5E5E;"># Store the original forward method</span></span>
<span id="cb2-64">                original_forward <span class="op" style="color: #5E5E5E;">=</span> layer.self_attn.forward</span>
<span id="cb2-65">                <span class="va" style="color: #111111;">self</span>.original_forward_methods[layer_idx] <span class="op" style="color: #5E5E5E;">=</span> original_forward</span>
<span id="cb2-66">                </span>
<span id="cb2-67">                <span class="co" style="color: #5E5E5E;"># Define a closure to capture the current layer_idx</span></span>
<span id="cb2-68">                <span class="kw" style="color: #003B4F;">def</span> make_patched_forward(layer_idx, orig_forward):</span>
<span id="cb2-69">                    <span class="kw" style="color: #003B4F;">def</span> patched_forward(self_attn, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb2-70">                        <span class="co" style="color: #5E5E5E;"># Log the hidden_states dtype</span></span>
<span id="cb2-71">                        <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'hidden_states'</span> <span class="kw" style="color: #003B4F;">in</span> kwargs <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">hasattr</span>(kwargs[<span class="st" style="color: #20794D;">'hidden_states'</span>], <span class="st" style="color: #20794D;">'dtype'</span>):</span>
<span id="cb2-72">                            <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"forward:self_attn:layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:activation_input"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(kwargs[<span class="st" style="color: #20794D;">'hidden_states'</span>].dtype)</span>
<span id="cb2-73">                        </span>
<span id="cb2-74">                        <span class="co" style="color: #5E5E5E;"># Call the original method as a bound method</span></span>
<span id="cb2-75">                        <span class="co" style="color: #5E5E5E;"># This ensures 'self_attn' is correctly passed as 'self'</span></span>
<span id="cb2-76">                        <span class="cf" style="color: #003B4F;">return</span> orig_forward.<span class="fu" style="color: #4758AB;">__get__</span>(self_attn, <span class="bu" style="color: null;">type</span>(self_attn))(<span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb2-77">                    </span>
<span id="cb2-78">                    <span class="cf" style="color: #003B4F;">return</span> patched_forward</span>
<span id="cb2-79">                </span>
<span id="cb2-80">                <span class="co" style="color: #5E5E5E;"># Replace the forward method</span></span>
<span id="cb2-81">                layer.self_attn.forward <span class="op" style="color: #5E5E5E;">=</span> make_patched_forward(layer_idx, original_forward).<span class="fu" style="color: #4758AB;">__get__</span>(layer.self_attn, <span class="bu" style="color: null;">type</span>(layer.self_attn))</span>
<span id="cb2-82">            </span>
<span id="cb2-83">            <span class="co" style="color: #5E5E5E;"># Register hook for lm_head</span></span>
<span id="cb2-84">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(model, <span class="st" style="color: #20794D;">'lm_head'</span>):</span>
<span id="cb2-85">                <span class="va" style="color: #111111;">self</span>.hooks.append(model.lm_head.register_forward_hook(hook_fn(<span class="st" style="color: #20794D;">"output"</span>, <span class="st" style="color: #20794D;">"lm_head"</span>)))</span>
<span id="cb2-86">            </span>
<span id="cb2-87">            <span class="co" style="color: #5E5E5E;"># Register hook for embedding layer</span></span>
<span id="cb2-88">            <span class="va" style="color: #111111;">self</span>.hooks.append(transformer_model.embed_tokens.register_forward_hook(hook_fn(<span class="st" style="color: #20794D;">"embeddings"</span>, <span class="st" style="color: #20794D;">"embed_tokens"</span>)))</span>
<span id="cb2-89">            </span>
<span id="cb2-90">            <span class="co" style="color: #5E5E5E;"># Register hooks for each transformer layer</span></span>
<span id="cb2-91">            <span class="cf" style="color: #003B4F;">for</span> layer_idx, layer <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(transformer_model.layers):</span>
<span id="cb2-92">                <span class="co" style="color: #5E5E5E;"># Self-attention components - we still register hooks for outputs</span></span>
<span id="cb2-93">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.self_attn.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"self_attn"</span>)))</span>
<span id="cb2-94">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.self_attn.q_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"q_proj"</span>)))</span>
<span id="cb2-95">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.self_attn.k_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"k_proj"</span>)))</span>
<span id="cb2-96">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.self_attn.v_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"v_proj"</span>)))</span>
<span id="cb2-97">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.self_attn.o_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"o_proj"</span>)))</span>
<span id="cb2-98">                </span>
<span id="cb2-99">                <span class="co" style="color: #5E5E5E;"># MLP components</span></span>
<span id="cb2-100">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.mlp.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"mlp"</span>)))</span>
<span id="cb2-101">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.mlp.gate_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"gate_proj"</span>)))</span>
<span id="cb2-102">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.mlp.up_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"up_proj"</span>)))</span>
<span id="cb2-103">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.mlp.down_proj.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"down_proj"</span>)))</span>
<span id="cb2-104">                </span>
<span id="cb2-105">                <span class="co" style="color: #5E5E5E;"># Layer norms</span></span>
<span id="cb2-106">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.input_layernorm.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"input_layernorm"</span>)))</span>
<span id="cb2-107">                <span class="va" style="color: #111111;">self</span>.hooks.append(layer.post_attention_layernorm.register_forward_hook(hook_fn(<span class="ss" style="color: #20794D;">f"layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>, <span class="st" style="color: #20794D;">"post_attention_layernorm"</span>)))</span>
<span id="cb2-108">            </span>
<span id="cb2-109">            <span class="co" style="color: #5E5E5E;"># Final layer norm</span></span>
<span id="cb2-110">            <span class="va" style="color: #111111;">self</span>.hooks.append(transformer_model.norm.register_forward_hook(hook_fn(<span class="st" style="color: #20794D;">"final"</span>, <span class="st" style="color: #20794D;">"norm"</span>)))</span>
<span id="cb2-111">            </span>
<span id="cb2-112">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-113">            </span>
<span id="cb2-114">    <span class="kw" style="color: #003B4F;">def</span> after_forward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-115">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-116">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"after_forward"</span>)</span>
<span id="cb2-117">            </span>
<span id="cb2-118">            <span class="co" style="color: #5E5E5E;"># Restore original forward methods</span></span>
<span id="cb2-119">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(<span class="va" style="color: #111111;">self</span>, <span class="st" style="color: #20794D;">'original_forward_methods'</span>):</span>
<span id="cb2-120">                model <span class="op" style="color: #5E5E5E;">=</span> state.model.model.base_model.model</span>
<span id="cb2-121">                transformer_model <span class="op" style="color: #5E5E5E;">=</span> model.model</span>
<span id="cb2-122">                </span>
<span id="cb2-123">                <span class="cf" style="color: #003B4F;">for</span> layer_idx, original_forward <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.original_forward_methods.items():</span>
<span id="cb2-124">                    transformer_model.layers[layer_idx].self_attn.forward <span class="op" style="color: #5E5E5E;">=</span> original_forward</span>
<span id="cb2-125">                </span>
<span id="cb2-126">                <span class="va" style="color: #111111;">self</span>.original_forward_methods <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb2-127">            </span>
<span id="cb2-128">            <span class="co" style="color: #5E5E5E;"># Clear hooks</span></span>
<span id="cb2-129">            <span class="cf" style="color: #003B4F;">for</span> hook <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.hooks:</span>
<span id="cb2-130">                hook.remove()</span>
<span id="cb2-131">            <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb2-132">            </span>
<span id="cb2-133">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-134">            </span>
<span id="cb2-135">    <span class="kw" style="color: #003B4F;">def</span> before_loss(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-136">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-137">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"before_loss"</span>)</span>
<span id="cb2-138">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-139">            </span>
<span id="cb2-140">    <span class="kw" style="color: #003B4F;">def</span> after_loss(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-141">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-142">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"after_loss"</span>)</span>
<span id="cb2-143">            <span class="va" style="color: #111111;">self</span>._log_loss_dtype(state, <span class="st" style="color: #20794D;">"after_loss"</span>)</span>
<span id="cb2-144">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-145">            </span>
<span id="cb2-146">    <span class="kw" style="color: #003B4F;">def</span> before_backward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-147">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-148">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"before_backward"</span>)</span>
<span id="cb2-149">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-150">            </span>
<span id="cb2-151">    <span class="kw" style="color: #003B4F;">def</span> after_backward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-152">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-153">            <span class="co" style="color: #5E5E5E;"># Log gradient dtypes as before</span></span>
<span id="cb2-154">            <span class="va" style="color: #111111;">self</span>._log_gradient_dtypes(state, <span class="st" style="color: #20794D;">"after_backward"</span>)</span>
<span id="cb2-155">            </span>
<span id="cb2-156">            <span class="co" style="color: #5E5E5E;"># Track weight dtypes before optimizer step</span></span>
<span id="cb2-157">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"before_optim_step"</span>)</span>
<span id="cb2-158">            </span>
<span id="cb2-159">            <span class="co" style="color: #5E5E5E;"># Log optimizer state dtypes</span></span>
<span id="cb2-160">            <span class="va" style="color: #111111;">self</span>._log_optimizer_state_dtypes(state, <span class="st" style="color: #20794D;">"optimizer_step"</span>)</span>
<span id="cb2-161">            </span>
<span id="cb2-162">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-163">                    </span>
<span id="cb2-164">    <span class="kw" style="color: #003B4F;">def</span> batch_end(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-165">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb2-166">            <span class="co" style="color: #5E5E5E;"># Track weight dtypes after optimizer step to detect precision changes</span></span>
<span id="cb2-167">            <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"after_optim_step"</span>)</span>
<span id="cb2-168">            <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-169"></span>
<span id="cb2-170">    <span class="kw" style="color: #003B4F;">def</span> epoch_end(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-171">        <span class="va" style="color: #111111;">self</span>._log_model_weight_dtypes(state, <span class="st" style="color: #20794D;">"epoch_end"</span>)</span>
<span id="cb2-172">        <span class="va" style="color: #111111;">self</span>._save_logs()</span>
<span id="cb2-173">        </span>
<span id="cb2-174">    <span class="kw" style="color: #003B4F;">def</span> _log_model_weight_dtypes(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-175">        model <span class="op" style="color: #5E5E5E;">=</span> state.model</span>
<span id="cb2-176">        <span class="cf" style="color: #003B4F;">for</span> name, param <span class="kw" style="color: #003B4F;">in</span> model.named_parameters():</span>
<span id="cb2-177">            name <span class="op" style="color: #5E5E5E;">=</span> name.removeprefix(<span class="st" style="color: #20794D;">"model.base_model.model.model."</span>)</span>
<span id="cb2-178">            <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:weights"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(param.dtype)</span>
<span id="cb2-179"></span>
<span id="cb2-180">    <span class="kw" style="color: #003B4F;">def</span> _log_gradient_dtypes(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-181">        model <span class="op" style="color: #5E5E5E;">=</span> state.model</span>
<span id="cb2-182">        <span class="cf" style="color: #003B4F;">for</span> name, param <span class="kw" style="color: #003B4F;">in</span> model.named_parameters():</span>
<span id="cb2-183">            name <span class="op" style="color: #5E5E5E;">=</span> name.removeprefix(<span class="st" style="color: #20794D;">"model.base_model.model.model."</span>)</span>
<span id="cb2-184">            <span class="cf" style="color: #003B4F;">if</span> param.grad <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>: <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">'log'</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:gradients"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(param.grad.dtype)</span>
<span id="cb2-185">            <span class="cf" style="color: #003B4F;">else</span>: <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">'log'</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:gradients"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"None"</span></span>
<span id="cb2-186">    </span>
<span id="cb2-187">    <span class="kw" style="color: #003B4F;">def</span> _log_loss_dtype(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-188">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(state, <span class="st" style="color: #20794D;">'loss'</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">hasattr</span>(state.loss, <span class="st" style="color: #20794D;">'dtype'</span>):</span>
<span id="cb2-189">            <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:loss"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(state.loss.dtype)</span>
<span id="cb2-190">            </span>
<span id="cb2-191">    <span class="kw" style="color: #003B4F;">def</span> _log_optimizer_state_dtypes(<span class="va" style="color: #111111;">self</span>, state: State, event_name: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-192">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(state, <span class="st" style="color: #20794D;">'optimizers'</span>) <span class="kw" style="color: #003B4F;">and</span> state.optimizers <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-193">            <span class="co" style="color: #5E5E5E;"># Handle single optimizer or list of optimizers</span></span>
<span id="cb2-194">            optimizers <span class="op" style="color: #5E5E5E;">=</span> state.optimizers <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(state.optimizers, <span class="bu" style="color: null;">list</span>) <span class="cf" style="color: #003B4F;">else</span> [state.optimizers]</span>
<span id="cb2-195">            </span>
<span id="cb2-196">            <span class="cf" style="color: #003B4F;">for</span> opt_idx, optimizer <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(optimizers):</span>
<span id="cb2-197">                <span class="co" style="color: #5E5E5E;"># Get optimizer state dict</span></span>
<span id="cb2-198">                opt_state <span class="op" style="color: #5E5E5E;">=</span> optimizer.state_dict()</span>
<span id="cb2-199">                </span>
<span id="cb2-200">                <span class="co" style="color: #5E5E5E;"># Check if 'state' exists in the optimizer state dict</span></span>
<span id="cb2-201">                <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'state'</span> <span class="kw" style="color: #003B4F;">in</span> opt_state:</span>
<span id="cb2-202">                    <span class="cf" style="color: #003B4F;">for</span> param_id, param_state <span class="kw" style="color: #003B4F;">in</span> opt_state[<span class="st" style="color: #20794D;">'state'</span>].items():</span>
<span id="cb2-203">                        <span class="cf" style="color: #003B4F;">for</span> state_name, state_value <span class="kw" style="color: #003B4F;">in</span> param_state.items():</span>
<span id="cb2-204">                            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(state_value, torch.Tensor):</span>
<span id="cb2-205">                                <span class="co" style="color: #5E5E5E;"># Store dtype of optimizer state tensors (momentum buffers, etc.)</span></span>
<span id="cb2-206">                                key <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f"optimizer_</span><span class="sc" style="color: #5E5E5E;">{</span>opt_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_param_</span><span class="sc" style="color: #5E5E5E;">{</span>param_id<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>state_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span>
<span id="cb2-207">                                <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>event_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:</span><span class="sc" style="color: #5E5E5E;">{</span>key<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:optimizer_states"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(state_value.dtype)</span>
<span id="cb2-208">            </span>
<span id="cb2-209">    <span class="kw" style="color: #003B4F;">def</span> _save_logs(<span class="va" style="color: #111111;">self</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb2-210">        os.makedirs(<span class="va" style="color: #111111;">self</span>.save_path, exist_ok<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb2-211">        log_file <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.save_path <span class="op" style="color: #5E5E5E;">/</span> <span class="st" style="color: #20794D;">"dtype_logs.json"</span></span>
<span id="cb2-212">        <span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(log_file, <span class="st" style="color: #20794D;">'w'</span>) <span class="im" style="color: #00769E;">as</span> f:</span>
<span id="cb2-213">            json.dump(<span class="va" style="color: #111111;">self</span>.dtype_logs, f, indent<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<p>The most involved event handler is <code>before_forward</code> which involves creating a hook function (<code>hook_fn</code>) passed to PyTorch’s <a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.register_forward_hook"><code>register_forward_hook</code></a> which exposes the positional inputs and outputs of a module’s <code>forward</code> pass. The hook function modifies <code>self.dtype_logs</code> directly by storing the data type string of inputs and outputs. <code>hook_fn</code> is used for all modules except self attention.</p>
<p>Self attention <a href="https://github.com/huggingface/transformers/issues/29247#issuecomment-1965894085">cannot utilize <code>register_forward_hook</code></a> because the <a href="https://github.com/huggingface/transformers/blob/bf41e54fc8242dafa31bf6203e3d505bcb907119/src/transformers/models/llama/modeling_llama.py#L345">LlamaDecoderLayer</a> does not call self attention forward pass with any positional arguments:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">hidden_states, self_attn_weights <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.self_attn(</span>
<span id="cb3-2">    hidden_states<span class="op" style="color: #5E5E5E;">=</span>hidden_states,</span>
<span id="cb3-3">    attention_mask<span class="op" style="color: #5E5E5E;">=</span>attention_mask,</span>
<span id="cb3-4">    position_ids<span class="op" style="color: #5E5E5E;">=</span>position_ids,</span>
<span id="cb3-5">    past_key_value<span class="op" style="color: #5E5E5E;">=</span>past_key_value,</span>
<span id="cb3-6">    output_attentions<span class="op" style="color: #5E5E5E;">=</span>output_attentions,</span>
<span id="cb3-7">    use_cache<span class="op" style="color: #5E5E5E;">=</span>use_cache,</span>
<span id="cb3-8">    cache_position<span class="op" style="color: #5E5E5E;">=</span>cache_position,</span>
<span id="cb3-9">    position_embeddings<span class="op" style="color: #5E5E5E;">=</span>position_embeddings,</span>
<span id="cb3-10">    <span class="op" style="color: #5E5E5E;">**</span>kwargs,</span>
<span id="cb3-11">)</span></code></pre></div>
<p>Contrast this with how the forward pass of other modules are called with positional arguments only:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># self attention sublayers</span></span>
<span id="cb4-2">query_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.q_proj(hidden_states).view(hidden_shape).transpose(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb4-3">key_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.k_proj(hidden_states).view(hidden_shape).transpose(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb4-4">value_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.v_proj(hidden_states).view(hidden_shape).transpose(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb4-5">attn_output <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.o_proj(attn_output)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># mlp sublayers</span></span>
<span id="cb4-8">down_proj <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.down_proj(<span class="va" style="color: #111111;">self</span>.act_fn(<span class="va" style="color: #111111;">self</span>.gate_proj(x)) <span class="op" style="color: #5E5E5E;">*</span> <span class="va" style="color: #111111;">self</span>.up_proj(x))</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;"># non-self attention modules</span></span>
<span id="cb4-11">hidden_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.input_layernorm(hidden_states)</span>
<span id="cb4-12">hidden_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.post_attention_layernorm(hidden_states)</span>
<span id="cb4-13">hidden_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.mlp(hidden_states)</span>
<span id="cb4-14">hidden_states <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.norm(hidden_states)</span></code></pre></div>
<p>Since self-attention inputs can’t be captured by a hook I had to monkey patch its forward pass to log its inputs’ data type:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;">for</span> layer_idx, layer <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(transformer_model.layers):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;"># Store the original forward method</span></span>
<span id="cb5-3">    original_forward <span class="op" style="color: #5E5E5E;">=</span> layer.self_attn.forward</span>
<span id="cb5-4">    <span class="va" style="color: #111111;">self</span>.original_forward_methods[layer_idx] <span class="op" style="color: #5E5E5E;">=</span> original_forward</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;"># Define a closure to capture the current layer_idx</span></span>
<span id="cb5-7">    <span class="kw" style="color: #003B4F;">def</span> make_patched_forward(layer_idx, orig_forward):</span>
<span id="cb5-8">        <span class="kw" style="color: #003B4F;">def</span> patched_forward(self_attn, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb5-9">            <span class="co" style="color: #5E5E5E;"># Log the hidden_states dtype</span></span>
<span id="cb5-10">            <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'hidden_states'</span> <span class="kw" style="color: #003B4F;">in</span> kwargs <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">hasattr</span>(kwargs[<span class="st" style="color: #20794D;">'hidden_states'</span>], <span class="st" style="color: #20794D;">'dtype'</span>):</span>
<span id="cb5-11">                <span class="va" style="color: #111111;">self</span>.dtype_logs[<span class="st" style="color: #20794D;">"log"</span>][<span class="ss" style="color: #20794D;">f"forward:self_attn:layer_</span><span class="sc" style="color: #5E5E5E;">{</span>layer_idx<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">:activation_input"</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(kwargs[<span class="st" style="color: #20794D;">'hidden_states'</span>].dtype)</span>
<span id="cb5-12">            </span>
<span id="cb5-13">            <span class="co" style="color: #5E5E5E;"># Call the original method as a bound method</span></span>
<span id="cb5-14">            <span class="co" style="color: #5E5E5E;"># This ensures 'self_attn' is correctly passed as 'self'</span></span>
<span id="cb5-15">            <span class="cf" style="color: #003B4F;">return</span> orig_forward.<span class="fu" style="color: #4758AB;">__get__</span>(self_attn, <span class="bu" style="color: null;">type</span>(self_attn))(<span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb5-16">        </span>
<span id="cb5-17">        <span class="cf" style="color: #003B4F;">return</span> patched_forward</span>
<span id="cb5-18"></span>
<span id="cb5-19">    <span class="co" style="color: #5E5E5E;"># Replace the forward method</span></span>
<span id="cb5-20">    layer.self_attn.forward <span class="op" style="color: #5E5E5E;">=</span> make_patched_forward(layer_idx, original_forward).<span class="fu" style="color: #4758AB;">__get__</span>(layer.self_attn, <span class="bu" style="color: null;">type</span>(layer.self_attn))</span></code></pre></div>
<p><code>patched_forward</code> receives positional arguments <code>*args</code> (of which there are none) and keyword arguments <code>**kwargs</code> (all of the arguments to the self-attention forward) and logs the data types of the inputs to self-attention (<code>hidden_states</code>) as <code>self_attn_input</code> before returning the outputs of the original forward pass.</p>
<p>A key line is <code>orig_forward.__get__(self_attn, type(self_attn))(**kwargs)</code>. As Claude’s comment mentions, this is to avoid using <code>orig_forward(self_attn, **kwargs)</code> which was causing the following error because the first argument, <code>self_attn</code>, was being interpreted as <code>hidden_states</code> whereas it was intended to represent <code>self</code>:</p>
<pre><code>TypeError: LlamaFlashAttention2.forward() got multiple values for argument 'hidden_states'</code></pre>
<p>In short, when you call <code>__get__(obj, type)</code> on a function it will bind that function as a method to the given object, thus no longer requiring you to pass in <code>self</code> as an argument. This is critical because <code>self_attn.forward</code> <em>has no positional arguments</em>. We can then pass in the keyword arguments to the bound method <code>orig_forward.__get__(self_attn, type(self_attn))(**kwargs)</code>, and let the model continue using self-attention correctly. See the <a href="https://docs.python.org/3/howto/descriptor.html#functions-and-methods:~:text=To%20recap%2C%20functions%20have%20a%20__get__()%20method%20so%20that%20they%20can%20be%20converted%20to%20a%20method%20when%20accessed%20as%20attributes.%20The%20non%2Ddata%20descriptor%20transforms%20an%20obj.f(*args)%20call%20into%20f(obj%2C%20*args).%20Calling%20cls.f(*args)%20becomes%20f(*args).">Descriptor Guide in the Python docs</a> for more information.</p>
</section>
<section id="helper-functions" class="level2">
<h2 class="anchored" data-anchor-id="helper-functions">Helper Functions</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">import</span> re</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb7-4"><span class="im" style="color: #00769E;">import</span> requests</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> parse_index(string):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;">"""Extract structured information from parameter names"""</span></span>
<span id="cb8-3">    info <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb8-4">        <span class="st" style="color: #20794D;">'layer_number'</span>: <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb8-5">        <span class="st" style="color: #20794D;">'module'</span>: <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb8-6">        <span class="st" style="color: #20794D;">'layer_name'</span>: <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb8-7">        <span class="st" style="color: #20794D;">'lora_layer'</span>: <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb8-8">        <span class="st" style="color: #20794D;">'training_step'</span>: <span class="va" style="color: #111111;">None</span>,</span>
<span id="cb8-9">        <span class="st" style="color: #20794D;">'entity'</span>: <span class="va" style="color: #111111;">None</span></span>
<span id="cb8-10">    }</span>
<span id="cb8-11"></span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;"># layer = string.split(":")[1]</span></span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;"># info["layer"] = layer</span></span>
<span id="cb8-14"></span>
<span id="cb8-15">    layer_number_match <span class="op" style="color: #5E5E5E;">=</span> re.search(<span class="vs" style="color: #20794D;">r'layers\.(\d+)'</span>, string)</span>
<span id="cb8-16">    <span class="cf" style="color: #003B4F;">if</span> layer_number_match: info[<span class="st" style="color: #20794D;">'layer_number'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(layer_number_match.group(<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb8-17"></span>
<span id="cb8-18">    modules <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-19">        <span class="st" style="color: #20794D;">"embed_tokens"</span>,</span>
<span id="cb8-20">        <span class="st" style="color: #20794D;">"input_layernorm"</span>,</span>
<span id="cb8-21">        <span class="st" style="color: #20794D;">"self_attn"</span>,</span>
<span id="cb8-22">        <span class="st" style="color: #20794D;">"post_attention_layernorm"</span>,</span>
<span id="cb8-23">        <span class="st" style="color: #20794D;">"mlp"</span>,</span>
<span id="cb8-24">        <span class="st" style="color: #20794D;">"norm"</span>,</span>
<span id="cb8-25">        <span class="st" style="color: #20794D;">"lm_head"</span></span>
<span id="cb8-26">    ]</span>
<span id="cb8-27"></span>
<span id="cb8-28">    module_match <span class="op" style="color: #5E5E5E;">=</span> re.search(<span class="vs" style="color: #20794D;">r'(mlp|self_attn|input_layernorm|post_attention_layernorm|embed_tokens|norm|lm_head)'</span>, string)</span>
<span id="cb8-29">    <span class="cf" style="color: #003B4F;">if</span> module_match: info[<span class="st" style="color: #20794D;">'module'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(modules.index(module_match.group(<span class="dv" style="color: #AD0000;">1</span>))).zfill(<span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> module_match.group(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-30"></span>
<span id="cb8-31">    layer_name_match <span class="op" style="color: #5E5E5E;">=</span> re.search(<span class="vs" style="color: #20794D;">r'(q_proj|k_proj|v_proj|o_proj|gate_proj|up_proj|down_proj)'</span>, string)</span>
<span id="cb8-32">    <span class="cf" style="color: #003B4F;">if</span> layer_name_match: info[<span class="st" style="color: #20794D;">'layer_name'</span>] <span class="op" style="color: #5E5E5E;">=</span> layer_name_match.group(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-33"></span>
<span id="cb8-34">    lora_match <span class="op" style="color: #5E5E5E;">=</span> re.search(<span class="vs" style="color: #20794D;">r'(base_layer|lora_A|lora_B)'</span>, string)</span>
<span id="cb8-35">    <span class="cf" style="color: #003B4F;">if</span> lora_match: info[<span class="st" style="color: #20794D;">'lora_layer'</span>] <span class="op" style="color: #5E5E5E;">=</span> lora_match.group(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb8-36">    <span class="cf" style="color: #003B4F;">else</span>: info[<span class="st" style="color: #20794D;">'lora_layer'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Not a LoRA Layer"</span></span>
<span id="cb8-37"></span>
<span id="cb8-38">    training_steps <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb8-39">        <span class="st" style="color: #20794D;">"fit_start"</span>,</span>
<span id="cb8-40">        <span class="st" style="color: #20794D;">"epoch_start"</span>,</span>
<span id="cb8-41">        <span class="st" style="color: #20794D;">"before_dataloader"</span>,</span>
<span id="cb8-42">        <span class="st" style="color: #20794D;">"after_dataloader"</span>,</span>
<span id="cb8-43">        <span class="st" style="color: #20794D;">"batch_start"</span>,</span>
<span id="cb8-44">        <span class="st" style="color: #20794D;">"before_forward"</span>,</span>
<span id="cb8-45">        <span class="st" style="color: #20794D;">"forward"</span>,</span>
<span id="cb8-46">        <span class="st" style="color: #20794D;">"after_forward"</span>,</span>
<span id="cb8-47">        <span class="st" style="color: #20794D;">"before_loss"</span>,</span>
<span id="cb8-48">        <span class="st" style="color: #20794D;">"after_loss"</span>,</span>
<span id="cb8-49">        <span class="st" style="color: #20794D;">"before_backward"</span>,</span>
<span id="cb8-50">        <span class="st" style="color: #20794D;">"after_backward"</span>,</span>
<span id="cb8-51">        <span class="st" style="color: #20794D;">"before_optim_step"</span>,</span>
<span id="cb8-52">        <span class="st" style="color: #20794D;">"optimizer_step"</span>,</span>
<span id="cb8-53">        <span class="st" style="color: #20794D;">"after_optim_step"</span></span>
<span id="cb8-54">        ]</span>
<span id="cb8-55"></span>
<span id="cb8-56">    training_step <span class="op" style="color: #5E5E5E;">=</span> string.split(<span class="st" style="color: #20794D;">":"</span>)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb8-57">    info[<span class="st" style="color: #20794D;">'training_step'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(training_steps.index(training_step)).zfill(<span class="dv" style="color: #AD0000;">2</span>) <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> training_step</span>
<span id="cb8-58"></span>
<span id="cb8-59">    info[<span class="st" style="color: #20794D;">'entity'</span>] <span class="op" style="color: #5E5E5E;">=</span> string.split(<span class="st" style="color: #20794D;">":"</span>)[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-60"></span>
<span id="cb8-61"></span>
<span id="cb8-62">    <span class="cf" style="color: #003B4F;">return</span> info</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> _df(url):</span>
<span id="cb9-2">    dtype_data <span class="op" style="color: #5E5E5E;">=</span> json.loads(requests.get(url).text)</span>
<span id="cb9-3"></span>
<span id="cb9-4">    df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(dtype_data).reset_index()</span>
<span id="cb9-5">    df <span class="op" style="color: #5E5E5E;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"index"</span>: <span class="st" style="color: #20794D;">"index"</span>, <span class="st" style="color: #20794D;">"log"</span>: <span class="st" style="color: #20794D;">"dtype"</span>})</span>
<span id="cb9-6"></span>
<span id="cb9-7">    parsed_info <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'index'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: parse_index(x))</span>
<span id="cb9-8"></span>
<span id="cb9-9">    df[<span class="st" style="color: #20794D;">'layer_number'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'layer_number'</span>])</span>
<span id="cb9-10">    df[<span class="st" style="color: #20794D;">'module'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'module'</span>])</span>
<span id="cb9-11">    df[<span class="st" style="color: #20794D;">'layer_name'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'layer_name'</span>])</span>
<span id="cb9-12">    df[<span class="st" style="color: #20794D;">'lora_layer'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'lora_layer'</span>])</span>
<span id="cb9-13">    df[<span class="st" style="color: #20794D;">'training_step'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'training_step'</span>])</span>
<span id="cb9-14">    df[<span class="st" style="color: #20794D;">'entity'</span>] <span class="op" style="color: #5E5E5E;">=</span> parsed_info.<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x[<span class="st" style="color: #20794D;">'entity'</span>])</span>
<span id="cb9-15"></span>
<span id="cb9-16">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
</section>
<section id="model-in-fp32-master_weights_dtypenone" class="level2">
<h2 class="anchored" data-anchor-id="model-in-fp32-master_weights_dtypenone">Model in fp32 (<code>master_weights_dtype==None</code>)</h2>
<p>In this case, <code>master_weights_dtype</code> is not provided in the training YAML file.</p>
<div class="cell" data-outputid="73fb1c7d-f091-413b-90af-cf9fb0c6eb51" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/vishalbakshi/9ade8d501629d4c30e8aecfa1c6f67cf/raw/0c162e2305002fbe57fd2570ade302c3659140a1/dtypes_logs_1ba_fp32.json"</span></span>
<span id="cb10-2">df <span class="op" style="color: #5E5E5E;">=</span> _df(url)</span>
<span id="cb10-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">


  <div id="df-f6bb70e8-9110-47f0-85d1-46d907c311a6" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>index</th>
      <th>dtype</th>
      <th>layer_number</th>
      <th>module</th>
      <th>layer_name</th>
      <th>lora_layer</th>
      <th>training_step</th>
      <th>entity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>fit_start:embed_tokens.weight:weights</td>
      <td>torch.float32</td>
      <td>NaN</td>
      <td>00_embed_tokens</td>
      <td>None</td>
      <td>Not a LoRA Layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>1</th>
      <td>fit_start:layers.0.self_attn.q_proj.base_layer...</td>
      <td>torch.float32</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>base_layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>2</th>
      <td>fit_start:layers.0.self_attn.q_proj.lora_A.def...</td>
      <td>torch.float32</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>lora_A</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>3</th>
      <td>fit_start:layers.0.self_attn.q_proj.lora_B.def...</td>
      <td>torch.float32</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>lora_B</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>4</th>
      <td>fit_start:layers.0.self_attn.k_proj.base_layer...</td>
      <td>torch.float32</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>k_proj</td>
      <td>base_layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-f6bb70e8-9110-47f0-85d1-46d907c311a6')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-f6bb70e8-9110-47f0-85d1-46d907c311a6 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-f6bb70e8-9110-47f0-85d1-46d907c311a6');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-b878e7a4-6a3d-484e-8565-4873e2d61a8a">
  <button class="colab-df-quickchart" onclick="quickchart('df-b878e7a4-6a3d-484e-8565-4873e2d61a8a')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-b878e7a4-6a3d-484e-8565-4873e2d61a8a button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<section id="data-types-by-lora_layer" class="level3">
<h3 class="anchored" data-anchor-id="data-types-by-lora_layer">Data Types by <code>lora_layer</code></h3>
<p>All LoRA layer entities are in fp32.</p>
<div class="cell" data-outputid="d3494bca-3fbd-4a42-ae1b-5087d3ef6618" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df.groupby([<span class="st" style="color: #20794D;">'lora_layer'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>lora_layer</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="4" valign="top">Not a LoRA Layer</th>
      <th>None</th>
      <td>62</td>
    </tr>
    <tr>
      <th>torch.bfloat16</th>
      <td>331</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>2339</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">base_layer</th>
      <th>None</th>
      <td>210</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>2520</td>
    </tr>
    <tr>
      <th>lora_A</th>
      <th>torch.float32</th>
      <td>2730</td>
    </tr>
    <tr>
      <th>lora_B</th>
      <th>torch.float32</th>
      <td>2730</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
<section id="data-types-by-entity-activations-gradients-loss-optimizer-states-and-weights" class="level3">
<h3 class="anchored" data-anchor-id="data-types-by-entity-activations-gradients-loss-optimizer-states-and-weights">Data Types by <code>entity</code> (Activations, Gradients, Loss, Optimizer States and Weights)</h3>
<p>Every entity except activations are in fp32. Some parameters don’t have gradients because we are training with LoRA.</p>
<div class="cell" data-outputid="78343b50-69b7-4e1e-f2eb-58f2a3fbc781" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df.groupby([<span class="st" style="color: #20794D;">'entity'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>entity</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="3" valign="top">activation_input</th>
      <th>torch.bfloat16</th>
      <td>60</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">activation_output</th>
      <th>torch.bfloat16</th>
      <td>271</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>62</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">gradients</th>
      <th>None</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>420</td>
    </tr>
    <tr>
      <th>loss</th>
      <th>torch.float32</th>
      <td>1</td>
    </tr>
    <tr>
      <th>optimizer_states</th>
      <th>torch.float32</th>
      <td>1260</td>
    </tr>
    <tr>
      <th>weights</th>
      <th>torch.float32</th>
      <td>8304</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
<section id="data-types-by-composer-training-step" class="level3">
<h3 class="anchored" data-anchor-id="data-types-by-composer-training-step">Data Types by Composer Training Step</h3>
<div class="cell" data-outputid="98def9cf-d2c3-4003-a11c-1293b9879460" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df.groupby([<span class="st" style="color: #20794D;">'training_step'</span>, <span class="st" style="color: #20794D;">'entity'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>training_step</th>
      <th>entity</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>00_fit_start</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>01_epoch_start</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>02_before_dataloader</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>03_after_dataloader</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>04_batch_start</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>05_before_forward</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="5" valign="top">06_forward</th>
      <th rowspan="3" valign="top">activation_input</th>
      <th>torch.bfloat16</th>
      <td>60</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">activation_output</th>
      <th>torch.bfloat16</th>
      <td>271</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>62</td>
    </tr>
    <tr>
      <th>07_after_forward</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>08_before_loss</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">09_after_loss</th>
      <th>loss</th>
      <th>torch.float32</th>
      <td>1</td>
    </tr>
    <tr>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>10_before_backward</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">11_after_backward</th>
      <th rowspan="2" valign="top">gradients</th>
      <th>None</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>420</td>
    </tr>
    <tr>
      <th>12_before_optim_step</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
    <tr>
      <th>13_optimizer_step</th>
      <th>optimizer_states</th>
      <th>torch.float32</th>
      <td>1260</td>
    </tr>
    <tr>
      <th>14_after_optim_step</th>
      <th>weights</th>
      <th>torch.float32</th>
      <td>692</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
</section>
<section id="model-in-bf16-master_weights_dtypebfloat16" class="level2">
<h2 class="anchored" data-anchor-id="model-in-bf16-master_weights_dtypebfloat16">Model in bf16 (<code>master_weights_dtype==bfloat16</code>)</h2>
<p>I also logged data types after setting <code>master_weights_dtype</code> in the training YAML to <code>bfloat16</code>.</p>
<div class="cell" data-outputid="5b638922-40c0-42a9-9c0e-8b907d105abd" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"https://gist.githubusercontent.com/vishalbakshi/ec91a59754633611fd8eb33b59031243/raw/5b83a7ebd5759cf6bd2db2369edf1c73e1fb67cf/dtypes_logs_1ba_bf16.json"</span></span>
<span id="cb14-2">df <span class="op" style="color: #5E5E5E;">=</span> _df(url)</span>
<span id="cb14-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">


  <div id="df-6f3e8532-20df-451d-8e93-caa52d279f3f" class="colab-df-container">
    <div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>index</th>
      <th>dtype</th>
      <th>layer_number</th>
      <th>module</th>
      <th>layer_name</th>
      <th>lora_layer</th>
      <th>training_step</th>
      <th>entity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>fit_start:embed_tokens.weight:weights</td>
      <td>torch.bfloat16</td>
      <td>NaN</td>
      <td>00_embed_tokens</td>
      <td>None</td>
      <td>Not a LoRA Layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>1</th>
      <td>fit_start:layers.0.self_attn.q_proj.base_layer...</td>
      <td>torch.bfloat16</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>base_layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>2</th>
      <td>fit_start:layers.0.self_attn.q_proj.lora_A.def...</td>
      <td>torch.bfloat16</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>lora_A</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>3</th>
      <td>fit_start:layers.0.self_attn.q_proj.lora_B.def...</td>
      <td>torch.bfloat16</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>q_proj</td>
      <td>lora_B</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
    <tr>
      <th>4</th>
      <td>fit_start:layers.0.self_attn.k_proj.base_layer...</td>
      <td>torch.bfloat16</td>
      <td>0.0</td>
      <td>02_self_attn</td>
      <td>k_proj</td>
      <td>base_layer</td>
      <td>00_fit_start</td>
      <td>weights</td>
    </tr>
  </tbody>
</table>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-6f3e8532-20df-451d-8e93-caa52d279f3f')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-6f3e8532-20df-451d-8e93-caa52d279f3f button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-6f3e8532-20df-451d-8e93-caa52d279f3f');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-159646a6-3c88-49de-8770-5f4464ad1b49">
  <button class="colab-df-quickchart" onclick="quickchart('df-159646a6-3c88-49de-8770-5f4464ad1b49')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-159646a6-3c88-49de-8770-5f4464ad1b49 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
<section id="data-type-by-lora_layer" class="level3">
<h3 class="anchored" data-anchor-id="data-type-by-lora_layer">Data Type by <code>lora_layer</code></h3>
<p>Interestingly, setting <code>master_weights_dtype</code> makes all LoRA layers bfloat16 but some non-LoRA layers’ entities are still in fp32.</p>
<div class="cell" data-outputid="b18ff791-dbf5-40a8-fcfe-402ed510d645" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df.groupby([<span class="st" style="color: #20794D;">'lora_layer'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>lora_layer</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="4" valign="top">Not a LoRA Layer</th>
      <th>None</th>
      <td>62</td>
    </tr>
    <tr>
      <th>torch.bfloat16</th>
      <td>2249</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>421</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">base_layer</th>
      <th>None</th>
      <td>210</td>
    </tr>
    <tr>
      <th>torch.bfloat16</th>
      <td>2520</td>
    </tr>
    <tr>
      <th>lora_A</th>
      <th>torch.bfloat16</th>
      <td>2730</td>
    </tr>
    <tr>
      <th>lora_B</th>
      <th>torch.bfloat16</th>
      <td>2730</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
<section id="data-types-by-entity-activations-gradients-loss-optimizer-states-and-weights-1" class="level3">
<h3 class="anchored" data-anchor-id="data-types-by-entity-activations-gradients-loss-optimizer-states-and-weights-1">Data Types by <code>entity</code> (Activations, Gradients, Loss, Optimizer States and Weights)</h3>
<p>All floating point values are in bfloat16 except for the loss and some of the optimizer states. I’m not sure why some optimizer states are in bf16, even though it says in the <a href="https://docs.mosaicml.com/projects/composer/en/latest/notes/numerics.html#automatic-mixed-precision-amp-training">Composer docs</a>:</p>
<blockquote class="blockquote">
<p>Store the weights and perform the optimizer step in single precision, enabling the weight update to be done more precisely.</p>
</blockquote>
<div class="cell" data-outputid="17283b63-7034-448d-f2a6-b51857b9d320" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">df.groupby([<span class="st" style="color: #20794D;">'entity'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>entity</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">activation_input</th>
      <th>torch.bfloat16</th>
      <td>332</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th>activation_output</th>
      <th>torch.bfloat16</th>
      <td>333</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">gradients</th>
      <th>None</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.bfloat16</th>
      <td>420</td>
    </tr>
    <tr>
      <th>loss</th>
      <th>torch.float32</th>
      <td>1</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">optimizer_states</th>
      <th>torch.bfloat16</th>
      <td>840</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>420</td>
    </tr>
    <tr>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>8304</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
<section id="data-type-by-composer-training-step" class="level3">
<h3 class="anchored" data-anchor-id="data-type-by-composer-training-step">Data Type by Composer Training Step</h3>
<div class="cell" data-outputid="168d15bc-1303-40c0-cc01-7a529ed5cb5d" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.groupby([<span class="st" style="color: #20794D;">'training_step'</span>, <span class="st" style="color: #20794D;">'entity'</span>, <span class="st" style="color: #20794D;">'dtype'</span>])[<span class="st" style="color: #20794D;">'dtype'</span>].count()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th></th>
      <th>dtype</th>
    </tr>
    <tr>
      <th>training_step</th>
      <th>entity</th>
      <th>dtype</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>00_fit_start</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>01_epoch_start</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>02_before_dataloader</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>03_after_dataloader</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>04_batch_start</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>05_before_forward</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="3" valign="top">06_forward</th>
      <th rowspan="2" valign="top">activation_input</th>
      <th>torch.bfloat16</th>
      <td>332</td>
    </tr>
    <tr>
      <th>torch.int64</th>
      <td>1</td>
    </tr>
    <tr>
      <th>activation_output</th>
      <th>torch.bfloat16</th>
      <td>333</td>
    </tr>
    <tr>
      <th>07_after_forward</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>08_before_loss</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">09_after_loss</th>
      <th>loss</th>
      <th>torch.float32</th>
      <td>1</td>
    </tr>
    <tr>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th>10_before_backward</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">11_after_backward</th>
      <th rowspan="2" valign="top">gradients</th>
      <th>None</th>
      <td>272</td>
    </tr>
    <tr>
      <th>torch.bfloat16</th>
      <td>420</td>
    </tr>
    <tr>
      <th>12_before_optim_step</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">13_optimizer_step</th>
      <th rowspan="2" valign="top">optimizer_states</th>
      <th>torch.bfloat16</th>
      <td>840</td>
    </tr>
    <tr>
      <th>torch.float32</th>
      <td>420</td>
    </tr>
    <tr>
      <th>14_after_optim_step</th>
      <th>weights</th>
      <th>torch.bfloat16</th>
      <td>692</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> int64</label>
</div>
</div>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>I absolutely loved this exercise. I learned a ton about callbacks, data types during mixed precision training, and Python fundamentals. Working with LLM-Foundry has opened up a whole universe of learning opportunities as I try to better understand what’s going on under the hood. It’s a gift that keeps giving!</p>
<p>I’m trying to grow <a href="https://www.youtube.com/@vishal_learner">my YouTube channel</a> so please give it a visit and subscribe if you want to stay in the loop.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-02-Composer-Callback-Logging-dtypes/index.html</guid>
  <pubDate>Wed, 02 Apr 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding Python Descriptors</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-04-01-Python-Descriptor/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>When monkey-patching the Llama self-attention forward pass (to log its inputs’ data type) I was vibe coding with Claude and it generated the following line to pass the necessary arguments to the original forward pass of the module:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">orig_forward.<span class="fu" style="color: #4758AB;">__get__</span>(self_attn, <span class="bu" style="color: null;">type</span>(self_attn))(<span class="op" style="color: #5E5E5E;">**</span>kwargs)</span></code></pre></div>
<p>In a prior iteration, I was using the following line suggested by Claude, with the intention of passing <code>self_attn</code> as <code>self</code>:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">orig_forward(self_attn, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span></code></pre></div>
<p>This was essentially doing the following:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">orig_forward(self_attn, hidden_states<span class="op" style="color: #5E5E5E;">=</span>hidden_states, attention_mask<span class="op" style="color: #5E5E5E;">=</span>attention_mask, ...)</span></code></pre></div>
<p>Which caused the following error:</p>
<pre><code>TypeError: LlamaFlashAttention2.forward() got multiple values for argument 'hidden_states'</code></pre>
<p><code>self_attn</code> was being passed as the argument to the <code>hidden_states</code> parameter, and then <code>hidden_states=hidden_states</code> was again assigning an argument to the <code>hidden_states</code> parameter. So how do we pass <code>self_attn</code> as <code>self</code>? This is where the <code>__get__</code> method comes in which is part of the Python <a href="https://docs.python.org/3/glossary.html#term-descriptor">Descriptor</a>. Descriptors are:</p>
<blockquote class="blockquote">
<p>Any object which defines the methods <code>__get__()</code>, <code>__set__()</code>, or <code>__delete__()</code>. When a class attribute is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, using <em>a.b</em> to get, set or delete an attribute looks up the object named <em>b</em> in the class dictionary for <em>a</em>, but if <em>b</em> is a descriptor, the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of Python because they are the basis for many features including functions, methods, properties, class methods, static methods, and reference to super classes.</p>
</blockquote>
<p>After reading that a few times I still didn’t understand it! Though I think the key is:</p>
<blockquote class="blockquote">
<p>When a class attribute is a descriptor, its special binding behavior is triggered upon attribute lookup.</p>
</blockquote>
<p>Claude explained it this way:</p>
<blockquote class="blockquote">
<p><code>__get__</code> is a special method that converts a function into a bound method. It’s like saying “make this function a method of this object.”</p>
</blockquote>
<p>Translating that to my use case: <code>__get__</code> makes <code>orig_forward</code> a method of <code>self_attn</code>, no longer requiring us to pass <code>self_attn</code> as it now is <code>self</code>.</p>
<p>That certainly makes sense (i.e.&nbsp;I understand those words) but I don’t really understand why or how. That led me to the Python documentation’s <a href="https://docs.python.org/3/howto/descriptor.html#id1">Descriptor Guide</a> which I’ll walk through here.</p>
<p>(There was also this interesting <a href="https://discuss.python.org/t/changing-the-name-of-get-to-bind/14243">discussion</a> about changing the name to <code>__bind__</code> when calling it on a function as it binds the function as a method of the given object, which we’ll see later on).</p>
</section>
<section id="primer" class="level2">
<h2 class="anchored" data-anchor-id="primer">Primer</h2>
<section id="simple-example-a-descriptor-that-returns-a-constant" class="level3">
<h3 class="anchored" data-anchor-id="simple-example-a-descriptor-that-returns-a-constant">Simple example: A descriptor that returns a constant</h3>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;">class</span> Ten:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">10</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="eeac4968-a49d-4411-c5f6-3231b2ff396c" data-execution_count="18">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">t <span class="op" style="color: #5E5E5E;">=</span> Ten()</span>
<span id="cb6-2">t</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;__main__.Ten at 0x78b2fd072c50&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="3c8c18b5-e974-4c71-90cd-bed54365c3f9" data-execution_count="19">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;">type</span>(t)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>__main__.Ten</code></pre>
</div>
</div>
<div class="cell" data-outputid="6af99ff9-5bb6-4561-b5df-af18e218253f" data-execution_count="20">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">t.<span class="fu" style="color: #4758AB;">__get__</span>(<span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>10</code></pre>
</div>
</div>
<p>I think the only reason <code>Ten</code> is a descriptor is because it “defines the methods <code>__get__()</code>, <code>__set__()</code>, or <code>__delete__()</code>”.</p>
<blockquote class="blockquote">
<p>To use the descriptor, it must be stored as a class variable in another class:</p>
</blockquote>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb12-2">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span>                       <span class="co" style="color: #5E5E5E;"># Regular class attribute</span></span>
<span id="cb12-3">    y <span class="op" style="color: #5E5E5E;">=</span> Ten()                   <span class="co" style="color: #5E5E5E;"># Descriptor instance</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="fe3fcdb4-845c-4e7e-d4aa-83f23603d858" data-execution_count="22">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">a <span class="op" style="color: #5E5E5E;">=</span> A()                     <span class="co" style="color: #5E5E5E;"># Make an instance of class A</span></span>
<span id="cb13-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;__main__.A at 0x78b2fd0707d0&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="93f0602a-05b0-4a09-b674-aa00ee892704" data-execution_count="23">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">a.x                         <span class="co" style="color: #5E5E5E;"># Normal attribute lookup</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>5</code></pre>
</div>
</div>
<div class="cell" data-outputid="52372c3e-1077-4f9a-b2f8-71b3394c8b1b" data-execution_count="24">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">a.y                         <span class="co" style="color: #5E5E5E;"># Descriptor lookup</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>10</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Note that the value 10 is not stored in either the class dictionary or the instance dictionary. Instead, the value 10 is computed on demand.</p>
</blockquote>
<div class="cell" data-outputid="afb4e225-ef85-4202-eb56-db22b5269554" data-execution_count="25">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">A.__dict__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>mappingproxy({'__module__': '__main__',
              'x': 5,
              'y': &lt;__main__.Ten at 0x78b2fd0722d0&gt;,
              '__dict__': &lt;attribute '__dict__' of 'A' objects&gt;,
              '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;,
              '__doc__': None})</code></pre>
</div>
</div>
<p>Modifying <code>Ten</code> a bit to visualize this:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;">class</span> Ten2:</span>
<span id="cb21-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb21-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"__get__ called with obj=</span><span class="sc" style="color: #5E5E5E;">{</span>obj<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, objtype=</span><span class="sc" style="color: #5E5E5E;">{</span>objtype<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb21-4">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;">class</span> A2:</span>
<span id="cb21-7">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb21-8">    y <span class="op" style="color: #5E5E5E;">=</span> Ten2()  <span class="co" style="color: #5E5E5E;"># Descriptor instance</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">a2 <span class="op" style="color: #5E5E5E;">=</span> A2()</span></code></pre></div>
</div>
<div class="cell" data-outputid="e528db12-faa4-463b-b3ba-71897fc0b887" data-execution_count="28">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">a2.y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2fd089710&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>10</code></pre>
</div>
</div>
<p>Cool!</p>
</section>
<section id="dynamic-lookups" class="level3">
<h3 class="anchored" data-anchor-id="dynamic-lookups">Dynamic Lookups</h3>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;">class</span> DirectorySize:</span>
<span id="cb26-4"></span>
<span id="cb26-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb26-6">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(os.listdir(obj.dirname))</span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="kw" style="color: #003B4F;">class</span> Directory:</span>
<span id="cb26-9"></span>
<span id="cb26-10">    size <span class="op" style="color: #5E5E5E;">=</span> DirectorySize()              <span class="co" style="color: #5E5E5E;"># Descriptor instance</span></span>
<span id="cb26-11"></span>
<span id="cb26-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, dirname):</span>
<span id="cb26-13">        <span class="va" style="color: #111111;">self</span>.dirname <span class="op" style="color: #5E5E5E;">=</span> dirname          <span class="co" style="color: #5E5E5E;"># Regular instance attribute</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">s <span class="op" style="color: #5E5E5E;">=</span> Directory(<span class="st" style="color: #20794D;">'songs'</span>)</span>
<span id="cb27-2">g <span class="op" style="color: #5E5E5E;">=</span> Directory(<span class="st" style="color: #20794D;">'games'</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="09aa2729-6427-4da8-e619-fb6ce2abd29e" data-execution_count="54">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">s.size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>4</code></pre>
</div>
</div>
<div class="cell" data-outputid="5f1ace26-b65a-4747-dccf-150ae2da1111" data-execution_count="48">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">g.size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>2</code></pre>
</div>
</div>
<p>Removing a file then calling the descriptor’s <code>__get__</code> dynamically calculates the new value:</p>
<div class="cell" data-outputid="0e7788d5-e734-40fc-df0c-07077782244a" data-execution_count="49">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">os.remove(<span class="st" style="color: #20794D;">'games/game1.txt'</span>)            <span class="co" style="color: #5E5E5E;"># Delete a game</span></span>
<span id="cb32-2">g.size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>1</code></pre>
</div>
</div>
</section>
<section id="managed-attributes" class="level3">
<h3 class="anchored" data-anchor-id="managed-attributes">Managed attributes</h3>
<blockquote class="blockquote">
<p>The descriptor is assigned to a public attribute in the class dictionary while the actual data is stored as a private attribute in the instance dictionary.</p>
</blockquote>
<p>Note that I wasn’t able to see the logging output in this notebook so I’m using print statements instead.</p>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="kw" style="color: #003B4F;">class</span> LoggedAgeAccess:</span>
<span id="cb34-2"></span>
<span id="cb34-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb34-4">        value <span class="op" style="color: #5E5E5E;">=</span> obj._age</span>
<span id="cb34-5">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Accessing age giving </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb34-6">        <span class="cf" style="color: #003B4F;">return</span> value</span>
<span id="cb34-7"></span>
<span id="cb34-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__set__</span>(<span class="va" style="color: #111111;">self</span>, obj, value):</span>
<span id="cb34-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Updating age to </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb34-10">        obj._age <span class="op" style="color: #5E5E5E;">=</span> value</span>
<span id="cb34-11"></span>
<span id="cb34-12"><span class="kw" style="color: #003B4F;">class</span> Person:</span>
<span id="cb34-13"></span>
<span id="cb34-14">    age <span class="op" style="color: #5E5E5E;">=</span> LoggedAgeAccess()             <span class="co" style="color: #5E5E5E;"># Descriptor instance</span></span>
<span id="cb34-15"></span>
<span id="cb34-16">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, name, age):</span>
<span id="cb34-17">        <span class="va" style="color: #111111;">self</span>.name <span class="op" style="color: #5E5E5E;">=</span> name                <span class="co" style="color: #5E5E5E;"># Regular instance attribute</span></span>
<span id="cb34-18">        <span class="va" style="color: #111111;">self</span>.age <span class="op" style="color: #5E5E5E;">=</span> age                  <span class="co" style="color: #5E5E5E;"># Calls __set__()</span></span>
<span id="cb34-19"></span>
<span id="cb34-20">    <span class="kw" style="color: #003B4F;">def</span> birthday(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb34-21">        <span class="va" style="color: #111111;">self</span>.age <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span>                   <span class="co" style="color: #5E5E5E;"># Calls both __get__() and __set__()</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="8b75d44a-d3d3-4a0f-8b6a-b1526c61850c" data-execution_count="82">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">mary <span class="op" style="color: #5E5E5E;">=</span> Person(<span class="st" style="color: #20794D;">'Mary M'</span>, <span class="dv" style="color: #AD0000;">30</span>)         <span class="co" style="color: #5E5E5E;"># The initial age update is logged</span></span>
<span id="cb35-2">dave <span class="op" style="color: #5E5E5E;">=</span> Person(<span class="st" style="color: #20794D;">'David D'</span>, <span class="dv" style="color: #AD0000;">40</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Updating age to 30
Updating age to 40</code></pre>
</div>
</div>
<div class="cell" data-outputid="6bfbbf95-7e19-4375-e7d0-3ea569224486" data-execution_count="83">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="bu" style="color: null;">vars</span>(mary), <span class="bu" style="color: null;">vars</span>(dave)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>({'name': 'Mary M', '_age': 30}, {'name': 'David D', '_age': 40})</code></pre>
</div>
</div>
<div class="cell" data-outputid="b498be42-317d-4880-e5cd-0ec735143778" data-execution_count="84">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">mary.age</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accessing age giving 30</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>30</code></pre>
</div>
</div>
<div class="cell" data-outputid="c30f9e43-22cb-4d26-b75b-75d9c486f9b9" data-execution_count="85">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">mary.birthday()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accessing age giving 30
Updating age to 31</code></pre>
</div>
</div>
<div class="cell" data-outputid="317f28b0-1e3a-49ed-ef6b-fa6904e9c636" data-execution_count="86">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">mary.age</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accessing age giving 31</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>31</code></pre>
</div>
</div>
<div class="cell" data-outputid="805635b0-8485-4fdb-b066-60314f8ff50c" data-execution_count="87">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">dave.name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>'David D'</code></pre>
</div>
</div>
<div class="cell" data-outputid="a14b4606-f0e2-4654-956e-0b937a8bc394" data-execution_count="88">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">dave.age</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accessing age giving 40</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>40</code></pre>
</div>
</div>
</section>
<section id="customized-names" class="level3">
<h3 class="anchored" data-anchor-id="customized-names">Customized names</h3>
<blockquote class="blockquote">
<p>When a class uses descriptors, it can inform each descriptor about which variable name was used.</p>
</blockquote>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="kw" style="color: #003B4F;">class</span> LoggedAccess:</span>
<span id="cb52-2"></span>
<span id="cb52-3">    <span class="kw" style="color: #003B4F;">def</span> __set_name__(<span class="va" style="color: #111111;">self</span>, owner, name):</span>
<span id="cb52-4">        <span class="va" style="color: #111111;">self</span>.public_name <span class="op" style="color: #5E5E5E;">=</span> name</span>
<span id="cb52-5">        <span class="va" style="color: #111111;">self</span>.private_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> name</span>
<span id="cb52-6"></span>
<span id="cb52-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb52-8">        value <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(obj, <span class="va" style="color: #111111;">self</span>.private_name)</span>
<span id="cb52-9">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Accessing </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>public_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> giving </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb52-10">        <span class="cf" style="color: #003B4F;">return</span> value</span>
<span id="cb52-11"></span>
<span id="cb52-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__set__</span>(<span class="va" style="color: #111111;">self</span>, obj, value):</span>
<span id="cb52-13">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Updating </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>public_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> to </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb52-14">        <span class="bu" style="color: null;">setattr</span>(obj, <span class="va" style="color: #111111;">self</span>.private_name, value)</span>
<span id="cb52-15"></span>
<span id="cb52-16"><span class="kw" style="color: #003B4F;">class</span> Person:</span>
<span id="cb52-17"></span>
<span id="cb52-18">    name <span class="op" style="color: #5E5E5E;">=</span> LoggedAccess()                <span class="co" style="color: #5E5E5E;"># First descriptor instance</span></span>
<span id="cb52-19">    age <span class="op" style="color: #5E5E5E;">=</span> LoggedAccess()                 <span class="co" style="color: #5E5E5E;"># Second descriptor instance</span></span>
<span id="cb52-20"></span>
<span id="cb52-21">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, name, age):</span>
<span id="cb52-22">        <span class="va" style="color: #111111;">self</span>.name <span class="op" style="color: #5E5E5E;">=</span> name                 <span class="co" style="color: #5E5E5E;"># Calls the first descriptor</span></span>
<span id="cb52-23">        <span class="va" style="color: #111111;">self</span>.age <span class="op" style="color: #5E5E5E;">=</span> age                   <span class="co" style="color: #5E5E5E;"># Calls the second descriptor</span></span>
<span id="cb52-24"></span>
<span id="cb52-25">    <span class="kw" style="color: #003B4F;">def</span> birthday(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb52-26">        <span class="va" style="color: #111111;">self</span>.age <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="84700369-3ad4-4565-f86b-10eb90e39f15" data-execution_count="97">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="bu" style="color: null;">vars</span>(Person)[<span class="st" style="color: #20794D;">'name'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>&lt;__main__.LoggedAccess at 0x78b2edeb8950&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="7cac51e2-e623-48fd-8fb0-5a24e8eb9ec0" data-execution_count="98">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="bu" style="color: null;">vars</span>(<span class="bu" style="color: null;">vars</span>(Person)[<span class="st" style="color: #20794D;">'name'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>{'public_name': 'name', 'private_name': '_name'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="92758304-fcce-4f59-b09d-4b5e8bd02aae" data-execution_count="91">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="bu" style="color: null;">vars</span>(<span class="bu" style="color: null;">vars</span>(Person)[<span class="st" style="color: #20794D;">'age'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>{'public_name': 'age', 'private_name': '_age'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="1eaab803-e055-4a57-c28e-be9a86a91e4e" data-execution_count="92">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">pete <span class="op" style="color: #5E5E5E;">=</span> Person(<span class="st" style="color: #20794D;">'Peter P'</span>, <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Updating name to Peter P
Updating age to 10</code></pre>
</div>
</div>
<div class="cell" data-outputid="90fbd1f4-dd19-4e81-ddc0-fa6fc51f8cca" data-execution_count="93">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">kate <span class="op" style="color: #5E5E5E;">=</span> Person(<span class="st" style="color: #20794D;">'Catherine C'</span>, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Updating name to Catherine C
Updating age to 20</code></pre>
</div>
</div>
<div class="cell" data-outputid="aa93dc1b-bbef-4bba-ec4f-adea7923f972" data-execution_count="94">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="bu" style="color: null;">vars</span>(pete)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>{'_name': 'Peter P', '_age': 10}</code></pre>
</div>
</div>
<div class="cell" data-outputid="b45e31dc-98a5-4fca-c3ab-f0f18e80416f" data-execution_count="95">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="bu" style="color: null;">vars</span>(kate)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>{'_name': 'Catherine C', '_age': 20}</code></pre>
</div>
</div>
<p>I think the main takeaway here is that we didn’t specify the name of the field so we could use the same descriptor for both <code>name</code> and <code>age</code>.</p>
</section>
<section id="closing-thoughts" class="level3">
<h3 class="anchored" data-anchor-id="closing-thoughts">Closing thoughts</h3>
<p>Looking at how <code>__set_name__</code> behaves (the example in the <a href="https://docs.python.org/3/reference/datamodel.html#object.__set_name__">docs</a>):</p>
<div class="cell" data-outputid="0db303bd-1e64-4471-940d-7dd8c37833e8" data-execution_count="103">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="kw" style="color: #003B4F;">class</span> C:</span>
<span id="cb67-2">    <span class="kw" style="color: #003B4F;">def</span> __set_name__(<span class="va" style="color: #111111;">self</span>, owner, name):</span>
<span id="cb67-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"__set_name__ called with owner=</span><span class="sc" style="color: #5E5E5E;">{</span>owner<span class="sc" style="color: #5E5E5E;">.</span><span class="va" style="color: #111111;">__name__</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, name='</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'"</span>)</span>
<span id="cb67-4">        <span class="va" style="color: #111111;">self</span>.name <span class="op" style="color: #5E5E5E;">=</span> name</span>
<span id="cb67-5"></span>
<span id="cb67-6"><span class="kw" style="color: #003B4F;">class</span> A:</span>
<span id="cb67-7">    x <span class="op" style="color: #5E5E5E;">=</span> C()  <span class="co" style="color: #5E5E5E;"># This will trigger __set_name__</span></span>
<span id="cb67-8">    y <span class="op" style="color: #5E5E5E;">=</span> C()  <span class="co" style="color: #5E5E5E;"># This will trigger it again with a different name</span></span>
<span id="cb67-9">    bananas <span class="op" style="color: #5E5E5E;">=</span> C()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set_name__ called with owner=A, name='x'
__set_name__ called with owner=A, name='y'
__set_name__ called with owner=A, name='bananas'</code></pre>
</div>
</div>
<div class="cell" data-outputid="940a7982-0418-4c1f-aa86-adf2fecace1f" data-execution_count="104">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">a <span class="op" style="color: #5E5E5E;">=</span> A()</span>
<span id="cb69-2">a.x, a.y, a.x.name, a.y.name, a.bananas.name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>(&lt;__main__.C at 0x78b331674190&gt;,
 &lt;__main__.C at 0x78b2df52ccd0&gt;,
 'x',
 'y',
 'bananas')</code></pre>
</div>
</div>
<p>The part of particular interest to me is:</p>
<blockquote class="blockquote">
<p>Descriptors are used throughout the language. It is how functions turn into bound methods.</p>
</blockquote>
</section>
</section>
<section id="complete-practical-example" class="level2">
<h2 class="anchored" data-anchor-id="complete-practical-example">Complete practical example</h2>
<section id="validator-class" class="level3">
<h3 class="anchored" data-anchor-id="validator-class">Validator class</h3>
<blockquote class="blockquote">
<p>A validator is a descriptor for managed attribute access. Prior to storing any data, it verifies that the new value meets various type and range restrictions. If those restrictions aren’t met, it raises an exception to prevent data corruption at its source.</p>
</blockquote>
<div class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="im" style="color: #00769E;">from</span> abc <span class="im" style="color: #00769E;">import</span> ABC, abstractmethod</span>
<span id="cb71-2"></span>
<span id="cb71-3"><span class="kw" style="color: #003B4F;">class</span> Validator(ABC):</span>
<span id="cb71-4"></span>
<span id="cb71-5">    <span class="kw" style="color: #003B4F;">def</span> __set_name__(<span class="va" style="color: #111111;">self</span>, owner, name):</span>
<span id="cb71-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"__set_name__ is called"</span>)</span>
<span id="cb71-7">        <span class="va" style="color: #111111;">self</span>.private_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'_'</span> <span class="op" style="color: #5E5E5E;">+</span> name</span>
<span id="cb71-8"></span>
<span id="cb71-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb71-10">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"__get__ is called"</span>)</span>
<span id="cb71-11">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">getattr</span>(obj, <span class="va" style="color: #111111;">self</span>.private_name)</span>
<span id="cb71-12"></span>
<span id="cb71-13">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__set__</span>(<span class="va" style="color: #111111;">self</span>, obj, value):</span>
<span id="cb71-14">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"__set__ is called"</span>)</span>
<span id="cb71-15">        <span class="va" style="color: #111111;">self</span>.validate(value)</span>
<span id="cb71-16">        <span class="bu" style="color: null;">setattr</span>(obj, <span class="va" style="color: #111111;">self</span>.private_name, value)</span>
<span id="cb71-17"></span>
<span id="cb71-18">    <span class="at" style="color: #657422;">@abstractmethod</span></span>
<span id="cb71-19">    <span class="kw" style="color: #003B4F;">def</span> validate(<span class="va" style="color: #111111;">self</span>, value):</span>
<span id="cb71-20">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"validate is called"</span>)</span>
<span id="cb71-21">        <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</div>
</section>
<section id="custom-validators" class="level3">
<h3 class="anchored" data-anchor-id="custom-validators">Custom validators</h3>
<blockquote class="blockquote">
<p>Here are three practical data validation utilities:</p>
<ol type="1">
<li><p><code>OneOf</code> verifies that a value is one of a restricted set of options.</p></li>
<li><p><code>Number</code> verifies that a value is either an int or float. Optionally, it verifies that a value is between a given minimum or maximum.</p></li>
<li><p><code>String</code> verifies that a value is a str. Optionally, it validates a given minimum or maximum length. It can validate a user-defined predicate as well.</p></li>
</ol>
</blockquote>
<div class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="kw" style="color: #003B4F;">class</span> OneOf(Validator):</span>
<span id="cb72-2"></span>
<span id="cb72-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>options):</span>
<span id="cb72-4">        <span class="va" style="color: #111111;">self</span>.options <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(options)</span>
<span id="cb72-5"></span>
<span id="cb72-6">    <span class="kw" style="color: #003B4F;">def</span> validate(<span class="va" style="color: #111111;">self</span>, value):</span>
<span id="cb72-7">        <span class="cf" style="color: #003B4F;">if</span> value <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.options:</span>
<span id="cb72-8">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-9">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be one of </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>options<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-10">            )</span>
<span id="cb72-11"></span>
<span id="cb72-12"><span class="kw" style="color: #003B4F;">class</span> Number(Validator):</span>
<span id="cb72-13"></span>
<span id="cb72-14">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, minvalue<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, maxvalue<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb72-15">        <span class="va" style="color: #111111;">self</span>.minvalue <span class="op" style="color: #5E5E5E;">=</span> minvalue</span>
<span id="cb72-16">        <span class="va" style="color: #111111;">self</span>.maxvalue <span class="op" style="color: #5E5E5E;">=</span> maxvalue</span>
<span id="cb72-17"></span>
<span id="cb72-18">    <span class="kw" style="color: #003B4F;">def</span> validate(<span class="va" style="color: #111111;">self</span>, value):</span>
<span id="cb72-19">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(value, (<span class="bu" style="color: null;">int</span>, <span class="bu" style="color: null;">float</span>)):</span>
<span id="cb72-20">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">TypeError</span>(<span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be an int or float'</span>)</span>
<span id="cb72-21">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.minvalue <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> value <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="va" style="color: #111111;">self</span>.minvalue:</span>
<span id="cb72-22">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-23">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be at least </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>minvalue<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-24">            )</span>
<span id="cb72-25">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.maxvalue <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> value <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">self</span>.maxvalue:</span>
<span id="cb72-26">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-27">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be no more than </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>maxvalue<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-28">            )</span>
<span id="cb72-29"></span>
<span id="cb72-30"><span class="kw" style="color: #003B4F;">class</span> String(Validator):</span>
<span id="cb72-31"></span>
<span id="cb72-32">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, minsize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, maxsize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, predicate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb72-33">        <span class="va" style="color: #111111;">self</span>.minsize <span class="op" style="color: #5E5E5E;">=</span> minsize</span>
<span id="cb72-34">        <span class="va" style="color: #111111;">self</span>.maxsize <span class="op" style="color: #5E5E5E;">=</span> maxsize</span>
<span id="cb72-35">        <span class="va" style="color: #111111;">self</span>.predicate <span class="op" style="color: #5E5E5E;">=</span> predicate</span>
<span id="cb72-36"></span>
<span id="cb72-37">    <span class="kw" style="color: #003B4F;">def</span> validate(<span class="va" style="color: #111111;">self</span>, value):</span>
<span id="cb72-38">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">isinstance</span>(value, <span class="bu" style="color: null;">str</span>):</span>
<span id="cb72-39">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">TypeError</span>(<span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be an str'</span>)</span>
<span id="cb72-40">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.minsize <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(value) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="va" style="color: #111111;">self</span>.minsize:</span>
<span id="cb72-41">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-42">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be no smaller than </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>minsize<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-43">            )</span>
<span id="cb72-44">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.maxsize <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(value) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="va" style="color: #111111;">self</span>.maxsize:</span>
<span id="cb72-45">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-46">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;"> to be no bigger than </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>maxsize<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-47">            )</span>
<span id="cb72-48">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.predicate <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">and</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">self</span>.predicate(value):</span>
<span id="cb72-49">            <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">ValueError</span>(</span>
<span id="cb72-50">                <span class="ss" style="color: #20794D;">f'Expected </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>predicate<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> to be true for </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">!r}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb72-51">            )</span></code></pre></div>
</div>
</section>
<section id="practical-application" class="level3">
<h3 class="anchored" data-anchor-id="practical-application">Practical application</h3>
<div class="cell" data-outputid="a291dd22-396d-4771-ef6d-f9ccf1dd7aa8" data-execution_count="119">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="kw" style="color: #003B4F;">class</span> Component:</span>
<span id="cb73-2"></span>
<span id="cb73-3">    name <span class="op" style="color: #5E5E5E;">=</span> String(minsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>, maxsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, predicate<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">str</span>.isupper)</span>
<span id="cb73-4">    kind <span class="op" style="color: #5E5E5E;">=</span> OneOf(<span class="st" style="color: #20794D;">'wood'</span>, <span class="st" style="color: #20794D;">'metal'</span>, <span class="st" style="color: #20794D;">'plastic'</span>)</span>
<span id="cb73-5">    quantity <span class="op" style="color: #5E5E5E;">=</span> Number(minvalue<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb73-6"></span>
<span id="cb73-7">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, name, kind, quantity):</span>
<span id="cb73-8">        <span class="va" style="color: #111111;">self</span>.name <span class="op" style="color: #5E5E5E;">=</span> name</span>
<span id="cb73-9">        <span class="va" style="color: #111111;">self</span>.kind <span class="op" style="color: #5E5E5E;">=</span> kind</span>
<span id="cb73-10">        <span class="va" style="color: #111111;">self</span>.quantity <span class="op" style="color: #5E5E5E;">=</span> quantity</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set_name__ is called
__set_name__ is called
__set_name__ is called</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>The descriptors prevent invalid instances from being created:</p>
</blockquote>
<div class="cell" data-outputid="3b846377-b1de-40cd-dc38-47f088d7bda6" data-execution_count="120">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">Component(<span class="st" style="color: #20794D;">'Widget'</span>, <span class="st" style="color: #20794D;">'metal'</span>, <span class="dv" style="color: #AD0000;">5</span>)      <span class="co" style="color: #5E5E5E;"># Blocked: 'Widget' is not all uppercase</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set__ is called</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: Expected &lt;method 'isupper' of 'str' objects&gt; to be true for 'Widget'</code></pre>
</div>
</div>
<div class="cell" data-outputid="a1ff6411-3569-4dca-91df-dc09c8cfe544" data-execution_count="121">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">Component(<span class="st" style="color: #20794D;">'WIDGET'</span>, <span class="st" style="color: #20794D;">'metle'</span>, <span class="dv" style="color: #AD0000;">5</span>)      <span class="co" style="color: #5E5E5E;"># Blocked: 'metle' is misspelled</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set__ is called
__set__ is called</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: Expected 'metle' to be one of {'metal', 'plastic', 'wood'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="8b1180ca-b0c2-4911-a392-e358c0b51258" data-execution_count="122">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">Component(<span class="st" style="color: #20794D;">'WIDGET'</span>, <span class="st" style="color: #20794D;">'metal'</span>, <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">5</span>)     <span class="co" style="color: #5E5E5E;"># Blocked: -5 is negative</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set__ is called
__set__ is called
__set__ is called</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: Expected -5 to be at least 0</code></pre>
</div>
</div>
<div class="cell" data-outputid="f79c42d5-1ba2-48b0-a112-012fbf3be47b" data-execution_count="123">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">Component(<span class="st" style="color: #20794D;">'WIDGET'</span>, <span class="st" style="color: #20794D;">'metal'</span>, <span class="st" style="color: #20794D;">'V'</span>)    <span class="co" style="color: #5E5E5E;"># Blocked: 'V' isn't a number</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set__ is called
__set__ is called
__set__ is called</code></pre>
</div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: Expected 'V' to be an int or float</code></pre>
</div>
</div>
<div class="cell" data-outputid="b0422385-73be-45e5-b490-fe4632f4fe19" data-execution_count="124">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">c <span class="op" style="color: #5E5E5E;">=</span> Component(<span class="st" style="color: #20794D;">'WIDGET'</span>, <span class="st" style="color: #20794D;">'metal'</span>, <span class="dv" style="color: #AD0000;">5</span>)  <span class="co" style="color: #5E5E5E;"># Allowed:  The inputs are valid</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__set__ is called
__set__ is called
__set__ is called</code></pre>
</div>
</div>
<div class="cell" data-outputid="bdccab04-b422-445b-dd67-18994ae02b77" data-execution_count="125">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">c.name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ is called</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="125">
<pre><code>'WIDGET'</code></pre>
</div>
</div>
</section>
</section>
<section id="technical-tutorial" class="level2">
<h2 class="anchored" data-anchor-id="technical-tutorial">Technical tutorial</h2>
<p>After the reading the introduction of this guide I assumed I would skip the technical tutorial, expecting it to be too technical, but after skimming it I’ve decided to go through it as it might clear some things up for me and the following line was attractive:</p>
<blockquote class="blockquote">
<p>Learning about descriptors not only provides access to a larger toolset, it creates a deeper understanding of how Python works.</p>
</blockquote>
<section id="definition-and-introduction" class="level3">
<h3 class="anchored" data-anchor-id="definition-and-introduction">Definition and introduction</h3>
<p>Reiterating the important definition that a descriptor is anything that has one of the methods in the descriptor protocol:</p>
<blockquote class="blockquote">
<p>In general, a descriptor is an attribute value that has one of the methods in the descriptor protocol. Those methods are <code>__get__()</code>, <code>__set__()</code>, and <code>__delete__()</code>. If any of those methods are defined for an attribute, it is said to be a descriptor.</p>
</blockquote>
<p>And the main goal of descriptors:</p>
<blockquote class="blockquote">
<p>The default behavior for attribute access is to get, set, or delete the attribute from an object’s dictionary.</p>
</blockquote>
</section>
<section id="descriptor-protocol" class="level3">
<h3 class="anchored" data-anchor-id="descriptor-protocol">Descriptor protocol</h3>
<p>I don’t have any comments for this section other than reiterating the following points:</p>
<blockquote class="blockquote">
<p><code>descr.__get__(self, obj, type=None)</code></p>
<p><code>descr.__set__(self, obj, value)</code></p>
<p><code>descr.__delete__(self, obj)</code></p>
<p>That is all there is to it. Define any of these methods and an object is considered a descriptor and can override default behavior upon being looked up as an attribute.</p>
</blockquote>
<blockquote class="blockquote">
<p>If an object defines <code>__set__()</code> or <code>__delete__()</code>, it is considered a data descriptor. Descriptors that only define <code>__get__()</code> are called non-data descriptors (they are often used for methods but other uses are possible).</p>
</blockquote>
</section>
<section id="overview-of-descriptor-invocation" class="level3">
<h3 class="anchored" data-anchor-id="overview-of-descriptor-invocation">Overview of descriptor invocation</h3>
<blockquote class="blockquote">
<p>A descriptor can be called directly with <code>desc.__get__(obj)</code> or <code>desc.__get__(None, cls)</code>.</p>
</blockquote>
<blockquote class="blockquote">
<p>But it is more common for a descriptor to be invoked automatically from attribute access.</p>
</blockquote>
<p>We saw this earlier, but putting that example here again:</p>
<div class="cell" data-outputid="4b62a4a6-552d-4080-eb17-deeba13a03de" data-execution_count="127">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="kw" style="color: #003B4F;">class</span> Ten2:</span>
<span id="cb92-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb92-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"__get__ called with obj=</span><span class="sc" style="color: #5E5E5E;">{</span>obj<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, objtype=</span><span class="sc" style="color: #5E5E5E;">{</span>objtype<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb92-4">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb92-5"></span>
<span id="cb92-6"><span class="kw" style="color: #003B4F;">class</span> A2:</span>
<span id="cb92-7">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb92-8">    y <span class="op" style="color: #5E5E5E;">=</span> Ten2()  <span class="co" style="color: #5E5E5E;"># Descriptor instance</span></span>
<span id="cb92-9"></span>
<span id="cb92-10">a2 <span class="op" style="color: #5E5E5E;">=</span> A2()</span>
<span id="cb92-11">a2.y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2ded96890&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="127">
<pre><code>10</code></pre>
</div>
</div>
</section>
<section id="invocation-from-an-instance" class="level3">
<h3 class="anchored" data-anchor-id="invocation-from-an-instance">Invocation from an instance</h3>
<blockquote class="blockquote">
<p>Instance lookup scans through a chain of namespaces giving data descriptors the highest priority, followed by instance variables, then non-data descriptors, then class variables, and lastly <code>__getattr__()</code> if it is provided.</p>
</blockquote>
<p>I’ve added some print statements in their example code to show which option is triggered:</p>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="kw" style="color: #003B4F;">def</span> find_name_in_mro(cls, name, default):</span>
<span id="cb95-2">    <span class="co" style="color: #5E5E5E;">"Emulate _PyType_Lookup() in Objects/typeobject.c"</span></span>
<span id="cb95-3">    <span class="cf" style="color: #003B4F;">for</span> base <span class="kw" style="color: #003B4F;">in</span> cls.__mro__:</span>
<span id="cb95-4">        <span class="cf" style="color: #003B4F;">if</span> name <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">vars</span>(base):</span>
<span id="cb95-5">            <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">vars</span>(base)[name]</span>
<span id="cb95-6">    <span class="cf" style="color: #003B4F;">return</span> default</span>
<span id="cb95-7"></span>
<span id="cb95-8"><span class="kw" style="color: #003B4F;">def</span> object_getattribute(obj, name):</span>
<span id="cb95-9">    <span class="co" style="color: #5E5E5E;">"Emulate PyObject_GenericGetAttr() in Objects/object.c"</span></span>
<span id="cb95-10">    null <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">object</span>()</span>
<span id="cb95-11">    objtype <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">type</span>(obj)</span>
<span id="cb95-12">    cls_var <span class="op" style="color: #5E5E5E;">=</span> find_name_in_mro(objtype, name, null)</span>
<span id="cb95-13">    descr_get <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(<span class="bu" style="color: null;">type</span>(cls_var), <span class="st" style="color: #20794D;">'__get__'</span>, null)</span>
<span id="cb95-14">    <span class="cf" style="color: #003B4F;">if</span> descr_get <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> null:</span>
<span id="cb95-15">        <span class="cf" style="color: #003B4F;">if</span> (<span class="bu" style="color: null;">hasattr</span>(<span class="bu" style="color: null;">type</span>(cls_var), <span class="st" style="color: #20794D;">'__set__'</span>)</span>
<span id="cb95-16">            <span class="kw" style="color: #003B4F;">or</span> <span class="bu" style="color: null;">hasattr</span>(<span class="bu" style="color: null;">type</span>(cls_var), <span class="st" style="color: #20794D;">'__delete__'</span>)):</span>
<span id="cb95-17">            <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"returning data descriptor set/delete"</span>)</span>
<span id="cb95-18">            <span class="cf" style="color: #003B4F;">return</span> descr_get(cls_var, obj, objtype)     <span class="co" style="color: #5E5E5E;"># data descriptor</span></span>
<span id="cb95-19">    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(obj, <span class="st" style="color: #20794D;">'__dict__'</span>) <span class="kw" style="color: #003B4F;">and</span> name <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">vars</span>(obj):</span>
<span id="cb95-20">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"returning instance variable"</span>)</span>
<span id="cb95-21">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">vars</span>(obj)[name]                          <span class="co" style="color: #5E5E5E;"># instance variable</span></span>
<span id="cb95-22">    <span class="cf" style="color: #003B4F;">if</span> descr_get <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> null:</span>
<span id="cb95-23">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"returning descr_get"</span>)</span>
<span id="cb95-24">        <span class="cf" style="color: #003B4F;">return</span> descr_get(cls_var, obj, objtype)         <span class="co" style="color: #5E5E5E;"># non-data descriptor</span></span>
<span id="cb95-25">    <span class="cf" style="color: #003B4F;">if</span> cls_var <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> null:</span>
<span id="cb95-26">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"returning class variable"</span>)</span>
<span id="cb95-27">        <span class="cf" style="color: #003B4F;">return</span> cls_var                                  <span class="co" style="color: #5E5E5E;"># class variable</span></span>
<span id="cb95-28">    <span class="cf" style="color: #003B4F;">raise</span> <span class="pp" style="color: #AD0000;">AttributeError</span>(name)</span></code></pre></div>
</div>
<div class="cell" data-outputid="7624e6f8-8312-40d2-9c43-178a8e8a5655" data-execution_count="139">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">object_getattribute(a2, <span class="st" style="color: #20794D;">'y'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>returning descr_get
__get__ called with obj=&lt;__main__.A2 object at 0x78b2ded96890&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>10</code></pre>
</div>
</div>
<div class="cell" data-outputid="588ae176-621c-4ae7-b37c-c7a616007844" data-execution_count="140">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1">object_getattribute(a2, <span class="st" style="color: #20794D;">'x'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>returning class variable</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="140">
<pre><code>5</code></pre>
</div>
</div>
<div class="cell" data-execution_count="145">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="kw" style="color: #003B4F;">def</span> getattr_hook(obj, name):</span>
<span id="cb102-2">    <span class="co" style="color: #5E5E5E;">"Emulate slot_tp_getattr_hook() in Objects/typeobject.c"</span></span>
<span id="cb102-3">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb102-4">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"__getattribute__"</span>)</span>
<span id="cb102-5">        <span class="cf" style="color: #003B4F;">return</span> obj.<span class="fu" style="color: #4758AB;">__getattribute__</span>(name)</span>
<span id="cb102-6">    <span class="cf" style="color: #003B4F;">except</span> <span class="pp" style="color: #AD0000;">AttributeError</span>:</span>
<span id="cb102-7">        <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> <span class="bu" style="color: null;">hasattr</span>(<span class="bu" style="color: null;">type</span>(obj), <span class="st" style="color: #20794D;">'__getattr__'</span>):</span>
<span id="cb102-8">            <span class="cf" style="color: #003B4F;">raise</span></span>
<span id="cb102-9">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"__getattr__"</span>)</span>
<span id="cb102-10">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">type</span>(obj).<span class="fu" style="color: #4758AB;">__getattr__</span>(obj, name)</span></code></pre></div>
</div>
<div class="cell" data-outputid="0aabb2c0-7a6d-416b-893c-47b6c94dd29e" data-execution_count="146">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">getattr_hook(a2, <span class="st" style="color: #20794D;">'y'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__getattribute__
__get__ called with obj=&lt;__main__.A2 object at 0x78b2ded96890&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="146">
<pre><code>10</code></pre>
</div>
</div>
<div class="cell" data-outputid="f95a8401-3380-4234-b372-e43d61463745" data-execution_count="147">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">getattr_hook(a2, <span class="st" style="color: #20794D;">'x'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__getattribute__</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="147">
<pre><code>5</code></pre>
</div>
</div>
</section>
<section id="invocation-from-a-class" class="level3">
<h3 class="anchored" data-anchor-id="invocation-from-a-class">Invocation from a class</h3>
<blockquote class="blockquote">
<p>The logic for a dotted lookup such as <code>A.x</code> is in <code>type.__getattribute__()</code>.</p>
</blockquote>
<div class="cell" data-execution_count="150">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">A2.<span class="fu" style="color: #4758AB;">__getattribute__</span>??</span></code></pre></div>
</div>
<pre><code>Signature:   A2.__getattribute__(*args, **kwargs)
Type:        wrapper_descriptor
String form: &lt;slot wrapper '__getattribute__' of 'object' objects&gt;
Docstring:   Return getattr(self, name).</code></pre>
<div class="cell" data-outputid="a7e35d14-2e01-4cb6-f616-cc491f83a923" data-execution_count="152">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1">A2.<span class="fu" style="color: #4758AB;">__getattribute__</span>(A2, <span class="st" style="color: #20794D;">'y'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>&lt;__main__.Ten2 at 0x78b2dee79310&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="da9fcb9a-e92a-4040-eaee-008bfaff133b" data-execution_count="153">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">A2.<span class="fu" style="color: #4758AB;">__getattribute__</span>(A2, <span class="st" style="color: #20794D;">'x'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="153">
<pre><code>5</code></pre>
</div>
</div>
</section>
<section id="invocation-from-super" class="level3">
<h3 class="anchored" data-anchor-id="invocation-from-super">Invocation from super</h3>
<blockquote class="blockquote">
<p>A dotted lookup such as <code>super(A, obj).m</code> searches <code>obj.__class__.__mro__</code> for the base class <code>B</code> immediately following <code>A</code> and then returns <code>B.__dict__['m'].__get__(obj, A)</code>. If not a descriptor, <code>m</code> is returned unchanged.</p>
</blockquote>
<div class="cell" data-execution_count="175">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="kw" style="color: #003B4F;">class</span> Base:</span>
<span id="cb115-2">    z <span class="op" style="color: #5E5E5E;">=</span> Ten2()  <span class="co" style="color: #5E5E5E;"># Descriptor in the base class</span></span>
<span id="cb115-3"></span>
<span id="cb115-4"><span class="kw" style="color: #003B4F;">class</span> A2(Base):</span>
<span id="cb115-5">    x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb115-6">    y <span class="op" style="color: #5E5E5E;">=</span> Ten2()  <span class="co" style="color: #5E5E5E;"># Descriptor instance in A2</span></span>
<span id="cb115-7"></span>
<span id="cb115-8">    <span class="kw" style="color: #003B4F;">def</span> show_super_lookup(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb115-9">        <span class="co" style="color: #5E5E5E;"># This will trigger the descriptor lookup through super()</span></span>
<span id="cb115-10">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">super</span>().z</span></code></pre></div>
</div>
<div class="cell" data-outputid="31c162b5-50cb-4d2f-aeab-40bc3a875242" data-execution_count="176">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1">a <span class="op" style="color: #5E5E5E;">=</span> A2()</span>
<span id="cb116-2">a.y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2dededa90&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="176">
<pre><code>10</code></pre>
</div>
</div>
<div class="cell" data-outputid="506d9028-2db4-425b-e3e3-2dadd34ff683" data-execution_count="177">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="bu" style="color: null;">super</span>(A2, a).z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2dededa90&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="177">
<pre><code>10</code></pre>
</div>
</div>
<div class="cell" data-outputid="f4e57871-b58e-4058-ca54-b2d696eca82e" data-execution_count="178">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1">Base.__dict__[<span class="st" style="color: #20794D;">'z'</span>].<span class="fu" style="color: #4758AB;">__get__</span>(a, A2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2dededa90&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="178">
<pre><code>10</code></pre>
</div>
</div>
<div class="cell" data-outputid="b2270d8e-31ea-4f77-d03f-f9679b1e541e" data-execution_count="179">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1">a.__class__.__mro__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="179">
<pre><code>(__main__.A2, __main__.Base, object)</code></pre>
</div>
</div>
</section>
<section id="summary-of-invocation-logic" class="level3">
<h3 class="anchored" data-anchor-id="summary-of-invocation-logic">Summary of invocation logic</h3>
<p>Showing examples of some of the bullet points in the summary:</p>
<ul>
<li>Descriptors are invoked by the <code>__getattribute__()</code> method.</li>
</ul>
<div class="cell" data-outputid="ea38ba47-a928-4128-a1fb-cbc231fa3a35" data-execution_count="180">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1">a.<span class="fu" style="color: #4758AB;">__getattribute__</span>(<span class="st" style="color: #20794D;">'y'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.A2 object at 0x78b2dededa90&gt;, objtype=&lt;class '__main__.A2'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="180">
<pre><code>10</code></pre>
</div>
</div>
<ul>
<li>Overriding <code>__getattribute__()</code> prevents automatic descriptor calls because all the descriptor logic is in that method.</li>
</ul>
<div class="cell" data-outputid="68ac78c2-2ec1-4ee6-f840-32491435634e" data-execution_count="195">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1"><span class="kw" style="color: #003B4F;">class</span> MyDescriptor:</span>
<span id="cb130-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb130-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Descriptor __get__ called!"</span>)</span>
<span id="cb130-4">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb130-5"></span>
<span id="cb130-6"><span class="kw" style="color: #003B4F;">class</span> Normal:</span>
<span id="cb130-7">    x <span class="op" style="color: #5E5E5E;">=</span> MyDescriptor()</span>
<span id="cb130-8"></span>
<span id="cb130-9">n <span class="op" style="color: #5E5E5E;">=</span> Normal()</span>
<span id="cb130-10">n.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Descriptor __get__ called!</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="195">
<pre><code>42</code></pre>
</div>
</div>
<div class="cell" data-outputid="4c3bfd01-d824-4254-9e21-daf3ab13b60b" data-execution_count="196">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1"><span class="kw" style="color: #003B4F;">class</span> OverrideGetattribute:</span>
<span id="cb133-2">    x <span class="op" style="color: #5E5E5E;">=</span> MyDescriptor()</span>
<span id="cb133-3">    y <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb133-4"></span>
<span id="cb133-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__getattribute__</span>(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb133-6">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Custom __getattribute__ called for </span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb133-7">        <span class="cf" style="color: #003B4F;">if</span> name <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'x'</span>:</span>
<span id="cb133-8">            <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">"Bypassed descriptor"</span></span>
<span id="cb133-9">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">object</span>.<span class="fu" style="color: #4758AB;">__getattribute__</span>(<span class="va" style="color: #111111;">self</span>, name)</span>
<span id="cb133-10"></span>
<span id="cb133-11">o <span class="op" style="color: #5E5E5E;">=</span> OverrideGetattribute()</span>
<span id="cb133-12">o.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Custom __getattribute__ called for x</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="196">
<pre><code>'Bypassed descriptor'</code></pre>
</div>
</div>
<div class="cell" data-outputid="db10e098-648b-42ca-8ca4-51a062eb62c8" data-execution_count="197">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1">o.y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Custom __getattribute__ called for y</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="197">
<pre><code>5</code></pre>
</div>
</div>
<ul>
<li><code>object.__getattribute__()</code> and <code>type.__getattribute__()</code> make different calls to <code>__get__()</code>. The first includes the instance and may include the class. The second puts in <code>None</code> for the instance and always includes the class.</li>
</ul>
<div class="cell" data-execution_count="208">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1"><span class="kw" style="color: #003B4F;">class</span> DetailedDescriptor:</span>
<span id="cb139-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb139-3">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"__get__ called with obj=</span><span class="sc" style="color: #5E5E5E;">{</span>obj<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, objtype=</span><span class="sc" style="color: #5E5E5E;">{</span>objtype<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb139-4">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">42</span></span>
<span id="cb139-5"></span>
<span id="cb139-6"><span class="kw" style="color: #003B4F;">class</span> Normal:</span>
<span id="cb139-7">    x <span class="op" style="color: #5E5E5E;">=</span> DetailedDescriptor()</span>
<span id="cb139-8"></span>
<span id="cb139-9">n <span class="op" style="color: #5E5E5E;">=</span> Normal()</span></code></pre></div>
</div>
<div class="cell" data-outputid="0d60c5f0-9623-4c6f-ccb4-fbcddfa7a428" data-execution_count="209">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">n.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=&lt;__main__.Normal object at 0x78b2dedf0750&gt;, objtype=&lt;class '__main__.Normal'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="209">
<pre><code>42</code></pre>
</div>
</div>
<div class="cell" data-outputid="cc7f4537-465e-48e7-c91d-0060eac405d9" data-execution_count="210">
<div class="sourceCode cell-code" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb143-1">Normal.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__get__ called with obj=None, objtype=&lt;class '__main__.Normal'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="210">
<pre><code>42</code></pre>
</div>
</div>
<ul>
<li>Data descriptors always override instance dictionaries.</li>
</ul>
<div class="cell" data-execution_count="211">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1"><span class="kw" style="color: #003B4F;">class</span> DataDescriptor:</span>
<span id="cb146-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, initial_value<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb146-3">        <span class="va" style="color: #111111;">self</span>.value <span class="op" style="color: #5E5E5E;">=</span> initial_value</span>
<span id="cb146-4"></span>
<span id="cb146-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb146-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"DataDescriptor.__get__ called"</span>)</span>
<span id="cb146-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.value</span>
<span id="cb146-8"></span>
<span id="cb146-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__set__</span>(<span class="va" style="color: #111111;">self</span>, obj, value):</span>
<span id="cb146-10">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"DataDescriptor.__set__ called with value: </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb146-11">        <span class="va" style="color: #111111;">self</span>.value <span class="op" style="color: #5E5E5E;">=</span> value</span>
<span id="cb146-12"></span>
<span id="cb146-13"><span class="kw" style="color: #003B4F;">class</span> Example:</span>
<span id="cb146-14">    x <span class="op" style="color: #5E5E5E;">=</span> DataDescriptor(<span class="dv" style="color: #AD0000;">42</span>)  <span class="co" style="color: #5E5E5E;"># Data descriptor defined in class</span></span>
<span id="cb146-15"></span>
<span id="cb146-16">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb146-17">        <span class="co" style="color: #5E5E5E;"># Try to override with instance attribute</span></span>
<span id="cb146-18">        <span class="va" style="color: #111111;">self</span>.__dict__[<span class="st" style="color: #20794D;">'x'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Instance value"</span></span>
<span id="cb146-19"></span>
<span id="cb146-20"></span>
<span id="cb146-21">example <span class="op" style="color: #5E5E5E;">=</span> Example()</span></code></pre></div>
</div>
<div class="cell" data-outputid="1733a8ce-6f53-4e41-9649-7fa4ddd997f3" data-execution_count="212">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">example.__dict__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="212">
<pre><code>{'x': 'Instance value'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="1d03bcd6-c2b8-4c63-cbfc-cc7c91dbe214" data-execution_count="213">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb149-1">example.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DataDescriptor.__get__ called</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="213">
<pre><code>42</code></pre>
</div>
</div>
<div class="cell" data-outputid="11962f2b-4023-4831-cbb2-cff4a1d85fa1" data-execution_count="215">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">example.x <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb152-2">example.__dict__[<span class="st" style="color: #20794D;">'x'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DataDescriptor.__set__ called with value: 100</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="215">
<pre><code>'Instance value'</code></pre>
</div>
</div>
<div class="cell" data-outputid="b74e3010-a30c-4e4e-b9e3-6d8ddee5a1e8" data-execution_count="216">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">example.x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DataDescriptor.__get__ called</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="216">
<pre><code>100</code></pre>
</div>
</div>
<ul>
<li>Non-data descriptors may be overridden by instance dictionaries.</li>
</ul>
<div class="cell" data-execution_count="217">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1"><span class="kw" style="color: #003B4F;">class</span> NonDataDescriptor:</span>
<span id="cb158-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, initial_value<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb158-3">        <span class="va" style="color: #111111;">self</span>.value <span class="op" style="color: #5E5E5E;">=</span> initial_value</span>
<span id="cb158-4"></span>
<span id="cb158-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb158-6">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"DataDescriptor.__get__ called"</span>)</span>
<span id="cb158-7">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.value</span>
<span id="cb158-8"></span>
<span id="cb158-9"><span class="kw" style="color: #003B4F;">class</span> Example:</span>
<span id="cb158-10">    x <span class="op" style="color: #5E5E5E;">=</span> NonDataDescriptor(<span class="dv" style="color: #AD0000;">42</span>)  <span class="co" style="color: #5E5E5E;"># Data descriptor defined in class</span></span>
<span id="cb158-11"></span>
<span id="cb158-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb158-13">        <span class="co" style="color: #5E5E5E;"># Try to override with instance attribute</span></span>
<span id="cb158-14">        <span class="va" style="color: #111111;">self</span>.__dict__[<span class="st" style="color: #20794D;">'x'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Instance value"</span></span>
<span id="cb158-15"></span>
<span id="cb158-16"></span>
<span id="cb158-17">example <span class="op" style="color: #5E5E5E;">=</span> Example()</span></code></pre></div>
</div>
<div class="cell" data-outputid="2e68841b-5462-42ae-d551-9bda604be404" data-execution_count="218">
<div class="sourceCode cell-code" id="cb159" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb159-1">example.__dict__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="218">
<pre><code>{'x': 'Instance value'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="01acab7f-edb3-4c11-e650-0fa57a156ceb" data-execution_count="219">
<div class="sourceCode cell-code" id="cb161" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb161-1">example.x</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="219">
<pre><code>'Instance value'</code></pre>
</div>
</div>
</section>
<section id="automatic-name-notification" class="level3">
<h3 class="anchored" data-anchor-id="automatic-name-notification">Automatic name notification</h3>
<blockquote class="blockquote">
<p>Sometimes it is desirable for a descriptor to know what class variable name it was assigned to. When a new class is created, the <code>type</code> metaclass scans the dictionary of the new class. If any of the entries are descriptors and if they define <code>__set_name__()</code>, that method is called with two arguments. The owner is the class where the descriptor is used, and the name is the class variable the descriptor was assigned to.</p>
</blockquote>
<div class="cell" data-execution_count="227">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1"><span class="kw" style="color: #003B4F;">class</span> NameTracker:</span>
<span id="cb163-2">   <span class="kw" style="color: #003B4F;">def</span> __set_name__(<span class="va" style="color: #111111;">self</span>, owner, name): <span class="va" style="color: #111111;">self</span>.name <span class="op" style="color: #5E5E5E;">=</span> name</span></code></pre></div>
</div>
<div class="cell" data-execution_count="228">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb164-1">class_dict <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb164-2">        <span class="st" style="color: #20794D;">'x'</span>: NameTracker(),</span>
<span id="cb164-3">        <span class="st" style="color: #20794D;">'y'</span>: NameTracker(),</span>
<span id="cb164-4">        <span class="st" style="color: #20794D;">'z'</span>: <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb164-5">    }</span></code></pre></div>
</div>
<div class="cell" data-execution_count="229">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">Demo <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">type</span>(<span class="st" style="color: #20794D;">'Demo'</span>, (), class_dict)</span></code></pre></div>
</div>
<div class="cell" data-outputid="c1ee1f3c-ddbe-4e35-bced-a11f96ae3cc4" data-execution_count="231">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb166-1">Demo.x.name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="231">
<pre><code>'x'</code></pre>
</div>
</div>
<div class="cell" data-outputid="b3867517-a51b-4675-b24b-70b33ce13579" data-execution_count="232">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">Demo.y.name</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="232">
<pre><code>'y'</code></pre>
</div>
</div>
<p>I’m skipping the ORM example since I don’t have access to the example database.</p>
</section>
</section>
<section id="pure-python-equivalents" class="level2">
<h2 class="anchored" data-anchor-id="pure-python-equivalents">Pure Python Equivalents</h2>
<p>Finally! The section I’m most interested in.</p>
<blockquote class="blockquote">
<p>Properties, bound methods, static methods, class methods, and <code>__slots__</code> are all based on the descriptor protocol.</p>
</blockquote>
<p>I’m going to focus on the functions and methods section.</p>
<section id="functions-and-methods" class="level3">
<h3 class="anchored" data-anchor-id="functions-and-methods">Functions and methods</h3>
<blockquote class="blockquote">
<p>Functions stored in class dictionaries get turned into methods when invoked. Methods only differ from regular functions in that the object instance is prepended to the other arguments. By convention, the instance is called self but could be called this or any other variable name.</p>
</blockquote>
<blockquote class="blockquote">
<p>Methods can be created manually with types.MethodType which is roughly equivalent to:</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1"><span class="kw" style="color: #003B4F;">class</span> MethodType:</span>
<span id="cb170-2">    <span class="co" style="color: #5E5E5E;">"Emulate PyMethod_Type in Objects/classobject.c"</span></span>
<span id="cb170-3"></span>
<span id="cb170-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, func, obj):</span>
<span id="cb170-5">        <span class="va" style="color: #111111;">self</span>.__func__ <span class="op" style="color: #5E5E5E;">=</span> func</span>
<span id="cb170-6">        <span class="va" style="color: #111111;">self</span>.__self__ <span class="op" style="color: #5E5E5E;">=</span> obj</span>
<span id="cb170-7"></span>
<span id="cb170-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb170-9">        func <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.__func__</span>
<span id="cb170-10">        obj <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.__self__</span>
<span id="cb170-11">        <span class="cf" style="color: #003B4F;">return</span> func(obj, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb170-12"></span>
<span id="cb170-13">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__getattribute__</span>(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb170-14">        <span class="co" style="color: #5E5E5E;">"Emulate method_getset() in Objects/classobject.c"</span></span>
<span id="cb170-15">        <span class="cf" style="color: #003B4F;">if</span> name <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'__doc__'</span>:</span>
<span id="cb170-16">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.__func__.__doc__</span>
<span id="cb170-17">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">object</span>.<span class="fu" style="color: #4758AB;">__getattribute__</span>(<span class="va" style="color: #111111;">self</span>, name)</span>
<span id="cb170-18"></span>
<span id="cb170-19">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__getattr__</span>(<span class="va" style="color: #111111;">self</span>, name):</span>
<span id="cb170-20">        <span class="co" style="color: #5E5E5E;">"Emulate method_getattro() in Objects/classobject.c"</span></span>
<span id="cb170-21">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">getattr</span>(<span class="va" style="color: #111111;">self</span>.__func__, name)</span>
<span id="cb170-22"></span>
<span id="cb170-23">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb170-24">        <span class="co" style="color: #5E5E5E;">"Emulate method_descr_get() in Objects/classobject.c"</span></span>
<span id="cb170-25">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span></span></code></pre></div>
</div>
<p>The key dunder method of interest is <code>__call</code>__:</p>
<div class="sourceCode" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb171-1"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__call__</span>(<span class="va" style="color: #111111;">self</span>, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb171-2">    func <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.__func__</span>
<span id="cb171-3">    obj <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.__self__</span>
<span id="cb171-4">    <span class="cf" style="color: #003B4F;">return</span> func(obj, <span class="op" style="color: #5E5E5E;">*</span>args, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span></code></pre></div>
<p>In the example of the self attention module, it has no positional arguments <code>*args</code> and so when I passed <code>self_attn</code> to the <code>obj</code> parameter in <code>func(obj, *args, **kwargs)</code> it understood it to be the first keyword argument.</p>
<blockquote class="blockquote">
<p>The interesting behavior occurs during dotted access from an instance. The dotted lookup calls <strong>get</strong>() which returns a bound method object:</p>
</blockquote>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1"><span class="kw" style="color: #003B4F;">class</span> D:</span>
<span id="cb172-2">    <span class="kw" style="color: #003B4F;">def</span> f(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb172-3">         <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="d7863453-4518-4486-909a-226a3a4b8b2c" data-execution_count="238">
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb173-1">d <span class="op" style="color: #5E5E5E;">=</span> D()</span>
<span id="cb173-2"><span class="bu" style="color: null;">print</span>(d.f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;bound method D.f of &lt;__main__.D object at 0x78b2dec54790&gt;&gt;</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>Internally, the bound method stores the underlying function and the bound instance:</p>
</blockquote>
<div class="cell" data-outputid="e01f04f2-79f4-4fb7-df6d-734f9a3490e7" data-execution_count="240">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb175-1"><span class="bu" style="color: null;">print</span>(d.f.__func__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;function D.f at 0x78b2dedd3ba0&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="be868138-560a-4319-d92a-2572e6d78318" data-execution_count="241">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1"><span class="bu" style="color: null;">print</span>(d.f.__self__)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;__main__.D object at 0x78b2dec54790&gt;</code></pre>
</div>
</div>
<blockquote class="blockquote">
<p>If you have ever wondered where <code>self</code> comes from in regular methods or where <code>cls</code> comes from in class methods, this is it!</p>
</blockquote>
</section>
<section id="kinds-of-methods" class="level3">
<h3 class="anchored" data-anchor-id="kinds-of-methods">Kinds of methods</h3>
<p>Here’s the crux of what I was looking for:</p>
<blockquote class="blockquote">
<p>To recap, functions have a <code>__get__()</code> method so that they can be converted to a method when accessed as attributes. The non-data descriptor transforms an <code>obj.f(*args</code>) call into <code>f(obj, *args)</code>. Calling <code>cls.f(*args)</code> becomes <code>f(*args)</code>.</p>
</blockquote>
<p>If I call <code>__get__(d)</code> on <code>d.f</code> it creates a bound method which passes in the object as <code>self</code>, the first argument of a bound method.</p>
<div class="cell" data-outputid="881f67c4-ba12-49a2-f010-d585a5594103" data-execution_count="243">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1"><span class="bu" style="color: null;">print</span>(d.f.<span class="fu" style="color: #4758AB;">__get__</span>(d))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;bound method D.f of &lt;__main__.D object at 0x78b2dec54790&gt;&gt;</code></pre>
</div>
</div>
<p>Now when I call <code>d.f.__get__(d)()</code> I don’t need to explicitly pass in the object:</p>
<div class="cell" data-outputid="b9d99ad4-baa0-4101-b3bc-a8de2a759be3" data-execution_count="244">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">d.f.<span class="fu" style="color: #4758AB;">__get__</span>(d)()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="244">
<pre><code>&lt;__main__.D at 0x78b2dec54790&gt;</code></pre>
</div>
</div>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Thanks to vibe coding, Claude introduced me to Python behavior I was unfamiliar with, and thanks to the excellent Python documentation, I understood it at a much deeper level than I was planning to.</p>
<p>I think something that still confuses me, and where I feel empathy for <a href="https://discuss.python.org/t/changing-the-name-of-get-to-bind/14243">this poster</a>, is how <code>__get__</code> has special behavior for functions where it binds it to the given object.</p>
<p>In the Primer, initial examples of <code>__get__</code> all, well, get a value:</p>
<div class="sourceCode" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb183-1"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb183-2">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"__get__ called with obj=</span><span class="sc" style="color: #5E5E5E;">{</span>obj<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, objtype=</span><span class="sc" style="color: #5E5E5E;">{</span>objtype<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb183-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb183-4"></span>
<span id="cb183-5"></span>
<span id="cb183-6"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb183-7">    <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(os.listdir(obj.dirname))</span>
<span id="cb183-8"></span>
<span id="cb183-9"></span>
<span id="cb183-10"><span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__get__</span>(<span class="va" style="color: #111111;">self</span>, obj, objtype<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb183-11">    value <span class="op" style="color: #5E5E5E;">=</span> obj._age</span>
<span id="cb183-12">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Accessing age giving </span><span class="sc" style="color: #5E5E5E;">{</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb183-13">    <span class="cf" style="color: #003B4F;">return</span> value</span></code></pre></div>
<p>How that behavior is related to binding a function to an object is beyond my current understanding.</p>
<p>This poster’s response does make sense:</p>
<blockquote class="blockquote">
<p>If descriptors were only callables that bind as methods when accessed as an attribute, then perhaps <code>__bind__()</code> would be a reasonable name for the method. But the descriptor protocol (i.e.&nbsp;<code>__get__</code>, <code>__set__</code>, and <code>__delete__</code>) is a means of implementing a computed attribute in general, which is not necessarily about binding a callable to the instance or type. For example, the <code>__get__()</code> method of a property named <code>x</code> might return the instance attribute <code>_x</code>.</p>
</blockquote>
<p>So perhaps of a computed attributed is generalizable whether your using <code>__get__</code> on a callable descriptor or otherwise. For a function, the “computation” of the attribute is binding it to the object.</p>
<p>I hope you enjoyed this blog post! I’m trying to <a href="https://www.youtube.com/@vishal_learner">grow my YouTube channel</a> so please give that a look/subscribe.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-04-01-Python-Descriptor/index.html</guid>
  <pubDate>Tue, 01 Apr 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Creating a Custom Composer Callback</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-03-30-Composer-Callback/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I’m learning to use LLM-Foundry to finetune SLMs. To better understand what’s going on in the training loop when using Flash Attention 2 (for SmolLM2-135M), I decided to ask Claude to write me a custom callback. Here is my <a href="https://claude.ai/share/9bb6c135-2ffb-42be-91bc-b4e4a6356173">full Claude conversation</a>.</p>
</section>
<section id="initial-plan" class="level2">
<h2 class="anchored" data-anchor-id="initial-plan">Initial Plan</h2>
<p>At first, I was planning to fork Composer (which I did), create a new branch for edits (print statements of datatypes in the <code>Trainer</code> code), and install that repo/branch for training. However, as I was chatting with Claude, it offered an option to write a callback instead. Being that <a href="https://docs.mosaicml.com/projects/composer/en/stable/getting_started/welcome_tour.html#:~:text=This%20is%20based%20on%20the%20two%2Dway%20callback%20system%20from%20(Howard%20et%20al%2C%202020)">this is a core philosophy of how Composer is built</a>, it was a no brainer for me to pursue.</p>
</section>
<section id="first-callback" class="level2">
<h2 class="anchored" data-anchor-id="first-callback">First Callback</h2>
<p>The first callback Claude wrote (I guided it a little bit by feeding it Composer’s <code>trainer.py</code> and giving it their callback example from the docs) was as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> WeightDtypeMonitor(Callback):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, backward_log_interval<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;">self</span>.backward_log_interval <span class="op" style="color: #5E5E5E;">=</span> backward_log_interval</span>
<span id="cb1-4">    </span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;">def</span> fit_start(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-6">        <span class="va" style="color: #111111;">self</span>._log_dtypes(state, logger, <span class="st" style="color: #20794D;">"fit_start"</span>)</span>
<span id="cb1-7">    </span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;">def</span> after_backward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.backward_log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-10">            <span class="va" style="color: #111111;">self</span>._log_dtypes(state, logger, <span class="ss" style="color: #20794D;">f"backward_</span><span class="sc" style="color: #5E5E5E;">{</span>state<span class="sc" style="color: #5E5E5E;">.</span>timestamp<span class="sc" style="color: #5E5E5E;">.</span>batch<span class="sc" style="color: #5E5E5E;">.</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-11">    </span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;">def</span> epoch_end(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-13">        <span class="va" style="color: #111111;">self</span>._log_dtypes(state, logger, <span class="ss" style="color: #20794D;">f"epoch_</span><span class="sc" style="color: #5E5E5E;">{</span>state<span class="sc" style="color: #5E5E5E;">.</span>timestamp<span class="sc" style="color: #5E5E5E;">.</span>epoch<span class="sc" style="color: #5E5E5E;">.</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb1-14">    </span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;">def</span> _log_dtypes(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger, prefix: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-16">        model <span class="op" style="color: #5E5E5E;">=</span> state.model</span>
<span id="cb1-17">        logger.log_metrics({</span>
<span id="cb1-18">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/lm_head"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.lm_head.weight.dtype),</span>
<span id="cb1-19">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_base"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.base_layer.weight.dtype),</span>
<span id="cb1-20">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_lora_A"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.lora_A.default.weight.dtype),</span>
<span id="cb1-21">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_lora_B"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.lora_B.default.weight.dtype)</span>
<span id="cb1-22">        })</span></code></pre></div>
<p>For reference, here is the list of events available in Composer during the training loop:</p>
<pre><code># &lt;INIT&gt;
# &lt;BEFORE_LOAD&gt;
# &lt;AFTER_LOAD&gt;
# &lt;FIT_START&gt;
for epoch in range(NUM_EPOCHS):
    # &lt;EPOCH_START&gt;
    while True:
        # &lt;BEFORE_DATALOADER&gt;
        batch = next(dataloader)
        if batch is None:
            break
        inputs, targets = batch
        # &lt;AFTER_DATALOADER&gt;

        # &lt;BATCH_START&gt;

        # &lt;BEFORE_FORWARD&gt;
        outputs = model.forward(inputs)
        # &lt;AFTER_FORWARD&gt;

        # &lt;BEFORE_LOSS&gt;
        loss = model.loss(outputs, targets)
        # &lt;AFTER_LOSS&gt;

        # &lt;BEFORE_BACKWARD&gt;
        loss.backward()
        # &lt;AFTER_BACKWARD&gt;

        optimizer.step()
        optimizer.zero_grad()

        # &lt;BATCH_END&gt;
    # &lt;EPOCH_END&gt;</code></pre>
<p>For each event I wanted to log data types for, the callback passes <code>state</code> (where the <code>model</code> is stored), <code>logger</code> (to do the logging) and a <code>prefix</code> (to denote what’s being logged). Only every <code>backward_log_interval</code>-th batch’s backward pass is logged, to avoid clutter.</p>
<p>Here is example output:</p>
<pre><code># fit_start
Train dtype/fit_start/lm_head: "torch.float32"
Train dtype/fit_start/q_proj_base: "torch.float32"
Train dtype/fit_start/q_proj_lora_A: "torch.float32" 
Train dtype/fit_start/q_proj_lora_B: "torch.float32"

# after_backward
Train dtype/backward_0/lm_head: "torch.float32"
Train dtype/backward_0/q_proj_base: "torch.float32"
Train dtype/backward_0/q_proj_lora_A: "torch.float32"
Train dtype/backward_0/q_proj_lora_B: "torch.float32"</code></pre>
<p>I was surprised to see that everything was in float32, I thought Flash Attention 2 (FA2) used mixed precision? Note that I haven’t read the FA2 paper.</p>
</section>
<section id="second-callback" class="level2">
<h2 class="anchored" data-anchor-id="second-callback">Second Callback</h2>
<p>Now that I understood a basic logging callback, I asked Claude to generate a callback that would help me see where mixed precision came into play. This one was a bit more involved:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">class</span> DtypeMonitor(Callback):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, log_interval<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">=</span> log_interval</span>
<span id="cb4-4">        <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="kw" style="color: #003B4F;">def</span> fit_start(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-7">        <span class="va" style="color: #111111;">self</span>._log_weight_dtypes(state, logger, <span class="st" style="color: #20794D;">"fit_start"</span>)</span>
<span id="cb4-8">    </span>
<span id="cb4-9">    <span class="kw" style="color: #003B4F;">def</span> before_forward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-11">            <span class="co" style="color: #5E5E5E;"># Log input tensor dtypes</span></span>
<span id="cb4-12">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(state.batch, <span class="bu" style="color: null;">dict</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'input_ids'</span> <span class="kw" style="color: #003B4F;">in</span> state.batch:</span>
<span id="cb4-13">                logger.log_metrics({</span>
<span id="cb4-14">                    <span class="st" style="color: #20794D;">"dtype/input/input_ids"</span>: <span class="bu" style="color: null;">str</span>(state.batch[<span class="st" style="color: #20794D;">'input_ids'</span>].dtype)</span>
<span id="cb4-15">                })</span>
<span id="cb4-16">            </span>
<span id="cb4-17">            <span class="co" style="color: #5E5E5E;"># Register hooks to capture activation dtypes</span></span>
<span id="cb4-18">            layer <span class="op" style="color: #5E5E5E;">=</span> state.model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn</span>
<span id="cb4-19">            </span>
<span id="cb4-20">            <span class="kw" style="color: #003B4F;">def</span> hook_fn(name):</span>
<span id="cb4-21">                <span class="kw" style="color: #003B4F;">def</span> _hook(module, inputs, outputs):</span>
<span id="cb4-22">                    <span class="co" style="color: #5E5E5E;"># Log input activation dtype</span></span>
<span id="cb4-23">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(inputs, <span class="bu" style="color: null;">tuple</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(inputs) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-24">                        logger.log_metrics({<span class="ss" style="color: #20794D;">f"dtype/activation/</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_input"</span>: <span class="bu" style="color: null;">str</span>(inputs[<span class="dv" style="color: #AD0000;">0</span>].dtype)})</span>
<span id="cb4-25">                    </span>
<span id="cb4-26">                    <span class="co" style="color: #5E5E5E;"># Log output activation dtype</span></span>
<span id="cb4-27">                    <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(outputs, torch.Tensor):</span>
<span id="cb4-28">                        logger.log_metrics({<span class="ss" style="color: #20794D;">f"dtype/activation/</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_output"</span>: <span class="bu" style="color: null;">str</span>(outputs.dtype)})</span>
<span id="cb4-29">                    <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(outputs, <span class="bu" style="color: null;">tuple</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="bu" style="color: null;">len</span>(outputs) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-30">                        logger.log_metrics({<span class="ss" style="color: #20794D;">f"dtype/activation/</span><span class="sc" style="color: #5E5E5E;">{</span>name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_output"</span>: <span class="bu" style="color: null;">str</span>(outputs[<span class="dv" style="color: #AD0000;">0</span>].dtype)})</span>
<span id="cb4-31">                <span class="cf" style="color: #003B4F;">return</span> _hook</span>
<span id="cb4-32">            </span>
<span id="cb4-33">            <span class="co" style="color: #5E5E5E;"># Clear old hooks</span></span>
<span id="cb4-34">            <span class="cf" style="color: #003B4F;">for</span> hook <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.hooks:</span>
<span id="cb4-35">                hook.remove()</span>
<span id="cb4-36">            <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-37">            </span>
<span id="cb4-38">            <span class="co" style="color: #5E5E5E;"># Register new hooks</span></span>
<span id="cb4-39">            <span class="va" style="color: #111111;">self</span>.hooks.append(layer.q_proj.register_forward_hook(hook_fn(<span class="st" style="color: #20794D;">"q_proj"</span>)))</span>
<span id="cb4-40">            <span class="va" style="color: #111111;">self</span>.hooks.append(layer.register_forward_hook(hook_fn(<span class="st" style="color: #20794D;">"self_attn"</span>)))</span>
<span id="cb4-41">    </span>
<span id="cb4-42">    <span class="kw" style="color: #003B4F;">def</span> after_forward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-43">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-44">            <span class="co" style="color: #5E5E5E;"># Log model output dtype</span></span>
<span id="cb4-45">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(state.outputs, torch.Tensor):</span>
<span id="cb4-46">                logger.log_metrics({</span>
<span id="cb4-47">                    <span class="st" style="color: #20794D;">"dtype/computation/output"</span>: <span class="bu" style="color: null;">str</span>(state.outputs.dtype)</span>
<span id="cb4-48">                })</span>
<span id="cb4-49">    </span>
<span id="cb4-50">    <span class="kw" style="color: #003B4F;">def</span> after_loss(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-51">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-52">            <span class="co" style="color: #5E5E5E;"># Log loss dtype</span></span>
<span id="cb4-53">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">isinstance</span>(state.loss, torch.Tensor):</span>
<span id="cb4-54">                logger.log_metrics({</span>
<span id="cb4-55">                    <span class="st" style="color: #20794D;">"dtype/computation/loss"</span>: <span class="bu" style="color: null;">str</span>(state.loss.dtype)</span>
<span id="cb4-56">                })</span>
<span id="cb4-57">            <span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">isinstance</span>(state.loss, <span class="bu" style="color: null;">dict</span>) <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">'total'</span> <span class="kw" style="color: #003B4F;">in</span> state.loss:</span>
<span id="cb4-58">                logger.log_metrics({</span>
<span id="cb4-59">                    <span class="st" style="color: #20794D;">"dtype/computation/loss"</span>: <span class="bu" style="color: null;">str</span>(state.loss[<span class="st" style="color: #20794D;">'total'</span>].dtype)</span>
<span id="cb4-60">                })</span>
<span id="cb4-61">    </span>
<span id="cb4-62">    <span class="kw" style="color: #003B4F;">def</span> after_backward(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-63">        <span class="cf" style="color: #003B4F;">if</span> state.timestamp.batch.value <span class="op" style="color: #5E5E5E;">%</span> <span class="va" style="color: #111111;">self</span>.log_interval <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb4-64">            <span class="va" style="color: #111111;">self</span>._log_weight_dtypes(state, logger, <span class="ss" style="color: #20794D;">f"backward_</span><span class="sc" style="color: #5E5E5E;">{</span>state<span class="sc" style="color: #5E5E5E;">.</span>timestamp<span class="sc" style="color: #5E5E5E;">.</span>batch<span class="sc" style="color: #5E5E5E;">.</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb4-65">            </span>
<span id="cb4-66">            <span class="co" style="color: #5E5E5E;"># Check gradient dtypes</span></span>
<span id="cb4-67">            model <span class="op" style="color: #5E5E5E;">=</span> state.model</span>
<span id="cb4-68">            lora_A <span class="op" style="color: #5E5E5E;">=</span> model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.lora_A.default</span>
<span id="cb4-69">            <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">hasattr</span>(lora_A, <span class="st" style="color: #20794D;">'weight'</span>) <span class="kw" style="color: #003B4F;">and</span> lora_A.weight.grad <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-70">                logger.log_metrics({</span>
<span id="cb4-71">                    <span class="st" style="color: #20794D;">"dtype/gradient/q_proj_lora_A"</span>: <span class="bu" style="color: null;">str</span>(lora_A.weight.grad.dtype)</span>
<span id="cb4-72">                })</span>
<span id="cb4-73">    </span>
<span id="cb4-74">    <span class="kw" style="color: #003B4F;">def</span> epoch_end(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-75">        <span class="va" style="color: #111111;">self</span>._log_weight_dtypes(state, logger, <span class="ss" style="color: #20794D;">f"epoch_</span><span class="sc" style="color: #5E5E5E;">{</span>state<span class="sc" style="color: #5E5E5E;">.</span>timestamp<span class="sc" style="color: #5E5E5E;">.</span>epoch<span class="sc" style="color: #5E5E5E;">.</span>value<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb4-76">        <span class="co" style="color: #5E5E5E;"># Remove any remaining hooks</span></span>
<span id="cb4-77">        <span class="cf" style="color: #003B4F;">for</span> hook <span class="kw" style="color: #003B4F;">in</span> <span class="va" style="color: #111111;">self</span>.hooks:</span>
<span id="cb4-78">            hook.remove()</span>
<span id="cb4-79">        <span class="va" style="color: #111111;">self</span>.hooks <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb4-80">    </span>
<span id="cb4-81">    <span class="kw" style="color: #003B4F;">def</span> _log_weight_dtypes(<span class="va" style="color: #111111;">self</span>, state: State, logger: Logger, prefix: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb4-82">        model <span class="op" style="color: #5E5E5E;">=</span> state.model</span>
<span id="cb4-83">        logger.log_metrics({</span>
<span id="cb4-84">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/lm_head"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.lm_head.weight.dtype),</span>
<span id="cb4-85">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_base"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.base_layer.weight.dtype),</span>
<span id="cb4-86">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_lora_A"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.lora_A.default.weight.dtype),</span>
<span id="cb4-87">            <span class="ss" style="color: #20794D;">f"dtype/</span><span class="sc" style="color: #5E5E5E;">{</span>prefix<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/q_proj_lora_B"</span>: <span class="bu" style="color: null;">str</span>(model.model.base_model.model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.lora_B.default.weight.dtype)</span>
<span id="cb4-88">        })</span></code></pre></div>
<p>Fortunately, I had just recently learned about <code>register_forward_hook</code> and created a short TIL video about it:</p>
<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/Y6qgWxU3oO4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>In short, <code>register_forward_hook</code> exposes the forward pass inputs and outputs. You can manipulate both but you have access to inputs/outputs <em>after</em> the forward pass so you can’t change the inputs before they go into the forward pass. Thankfully that restriction doesn’t matter in my case, as I only want to log data types.</p>
<p>Running the training loop with this callback generated the following logs:</p>
<pre><code> Train dtype/input/input_ids: "torch.int64"
 Train dtype/activation/q_proj_input: "torch.float32"
 Train dtype/activation/q_proj_output: "torch.bfloat16"
 Train dtype/activation/self_attn_output: "torch.bfloat16"
 Train dtype/computation/loss: "torch.float32"
 Train dtype/backward_0/lm_head: "torch.float32"
 Train dtype/backward_0/q_proj_base: "torch.float32"
 Train dtype/backward_0/q_proj_lora_A: "torch.float32"
 Train dtype/backward_0/q_proj_lora_B: "torch.float32"
 Train dtype/gradient/q_proj_lora_A: "torch.float32"</code></pre>
<p>This shed some more light into what’s going on! The inputs to <code>q_proj</code> is float32 but the outputs are bfloat16. The loss and gradients are both in float32.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>This exercise has blown up the possibilities available to me for better understanding what goes on during training! I have only gotten a cursory glimpse at the internal mechanism of mixed precision training, but it’s relatively simple for me take this a step further by analyzing more data types during all training events for all model components. That’ll be a future blog post or video this week.</p>
<p>Thanks for reading! Lots more content on my <a href="https://www.youtube.com/@vishal_learner">YouTube channel</a> that I’m working on growing this year so please subscribe to stay in the loop.</p>


</section>

 ]]></description>
  <category>LLM</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-03-30-Composer-Callback/index.html</guid>
  <pubDate>Sun, 30 Mar 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>RAGatouille/ColBERT Indexing Deep Dive</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-03-12-RAGatouille-ColBERT-Indexing-Deep-Dive/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this blog post I dive deeply into the internals of the RAGatouille and ColBERT libraries to understand the intermediate steps taken when building an index for a collection of documents.</p>
<ul>
<li>RAGatouille
<ul>
<li>ragatouille/RAGPretrainedModel.py
<ul>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/RAGPretrainedModel.py#L129"><code>_process_corpus</code></a></li>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/RAGPretrainedModel.py#L171"><code>index</code></a></li>
</ul></li>
<li>ragatouille/models/colbert.py
<ul>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/colbert.py#L294"><code>index</code></a></li>
</ul></li>
<li>ragatouille/models/index.py
<ul>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L460"><code>ModelIndexFactory.construct</code></a></li>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L132"><code>PLAIDModelIndex.construct</code></a></li>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L156"><code>PLAIDModelIndex.build</code></a></li>
<li><a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L212"><code>indexer.index</code></a></li>
</ul></li>
</ul></li>
<li>ColBERT
<ul>
<li>colbert/indexer.py
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexer.py#L85"><code>Launcher(encode)</code></a></li>
</ul></li>
<li>colbert/indexing/collection_indexer.py
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L31"><code>encode</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L51"><code>Collection.cast</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L61"><code>CollectionIndexer.run</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L80"><code>CollectionIndexer.setup</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L114"><code>CollectionIndexer._sample_pids</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L133"><code>CollectionIndexer._sample_embeddings</code></a>
<ul>
<li>colbert/indexing/collection_encoder.py: <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_encoder.py#L13"><code>CollectionEncoder.encode_passages</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/modeling/checkpoint.py#L122"><code>Checkpoint.docFromText</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/modeling/colbert.py#L95"><code>ColBERT.doc</code></a></li>
</ul></li>
</ul></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L210"><code>CollectionIndexer._save_plan</code></a></li>
</ul></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L226"><code>CollectionIndexer.train</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L500"><code>compute_faiss_kmeans</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L314"><code>CollectionIndexer._compute_avg_residual</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/codecs/residual.py#L204"><code>ResidualCodec.compress_into_codes</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/codecs/residual.py#L222"><code>ResidualCodec.lookup_centroids</code></a></li>
</ul></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/index_saver.py#L17"><code>IndexSaver.save_codec</code></a></li>
</ul></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L346"><code>CollectionIndexer.index</code></a>
<ul>
<li>colbert/indexing/collection_encoder.py: <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_encoder.py#L13"><code>CollectionEncoder.encode_passages</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/index_saver.py#L70"><code>IndexSaver.save_chunk</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/codecs/residual.py#L167"><code>ResidualCodec.compress</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/codecs/residual.py#L186"><code>ResidualCodec.binarize</code></a></li>
</ul></li>
</ul></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L378"><code>CollectionIndexer.finalize</code></a>
<ul>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L438"><code>CollectionIndexer._build_ivf</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/utils.py#L8"><code>optimize_ivf</code></a></li>
<li><a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/collection_indexer.py#L484"><code>CollectionIndexer._update_metadata</code></a></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets ragatouille <span class="op" style="color: #5E5E5E;">-</span>qq</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb2-3"><span class="im" style="color: #00769E;">from</span> fastcore.utils <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> srsly</span>
<span id="cb2-6"><span class="im" style="color: #00769E;">import</span> uuid</span>
<span id="cb2-7"><span class="im" style="color: #00769E;">from</span> ragatouille.data <span class="im" style="color: #00769E;">import</span> CorpusProcessor</span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> llama_index.core.text_splitter <span class="im" style="color: #00769E;">import</span> SentenceSplitter</span>
<span id="cb2-9"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-10"><span class="im" style="color: #00769E;">from</span> ragatouille.models.index <span class="im" style="color: #00769E;">import</span> PLAIDModelIndex</span>
<span id="cb2-11"><span class="im" style="color: #00769E;">from</span> colbert.infra <span class="im" style="color: #00769E;">import</span> ColBERTConfig, RunConfig</span>
<span id="cb2-12"><span class="im" style="color: #00769E;">from</span> colbert.data.collection <span class="im" style="color: #00769E;">import</span> Collection</span>
<span id="cb2-13"><span class="im" style="color: #00769E;">from</span> colbert.modeling.checkpoint <span class="im" style="color: #00769E;">import</span> Checkpoint</span>
<span id="cb2-14"><span class="im" style="color: #00769E;">from</span> colbert.indexing.collection_encoder <span class="im" style="color: #00769E;">import</span> CollectionEncoder</span>
<span id="cb2-15"><span class="im" style="color: #00769E;">from</span> colbert.indexing.collection_indexer <span class="im" style="color: #00769E;">import</span> CollectionIndexer</span>
<span id="cb2-16"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-17"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb2-18"><span class="im" style="color: #00769E;">from</span> colbert.indexing.collection_indexer <span class="im" style="color: #00769E;">import</span> compute_faiss_kmeans</span>
<span id="cb2-19"><span class="im" style="color: #00769E;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;">import</span> PCA</span>
<span id="cb2-20"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb2-21"><span class="im" style="color: #00769E;">from</span> colbert.indexing.codecs.residual <span class="im" style="color: #00769E;">import</span> ResidualCodec</span>
<span id="cb2-22"><span class="im" style="color: #00769E;">from</span> colbert.utils.utils <span class="im" style="color: #00769E;">import</span> flatten</span>
<span id="cb2-23"><span class="im" style="color: #00769E;">import</span> tqdm</span></code></pre></div>
</div>
<div class="cell" data-outputid="48a0a8b7-2a76-40ef-f24a-3d0c8f01860b" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> set_all_seeds(seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;">"""Set seeds for all random number generators"""</span></span>
<span id="cb3-3">    <span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb3-4">    <span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-5">    <span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb3-6">    <span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;"># Python's random module</span></span>
<span id="cb3-9">    random.seed(seed)</span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;"># NumPy</span></span>
<span id="cb3-12">    np.random.seed(seed)</span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;"># PyTorch</span></span>
<span id="cb3-15">    torch.manual_seed(seed)</span>
<span id="cb3-16">    <span class="cf" style="color: #003B4F;">if</span> torch.cuda.is_available():</span>
<span id="cb3-17">        torch.cuda.manual_seed(seed)</span>
<span id="cb3-18">        torch.cuda.manual_seed_all(seed)  <span class="co" style="color: #5E5E5E;"># For multi-GPU</span></span>
<span id="cb3-19"></span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;"># Set PYTHONHASHSEED for reproducibility across runs</span></span>
<span id="cb3-21">    os.environ[<span class="st" style="color: #20794D;">'PYTHONHASHSEED'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">str</span>(seed)</span>
<span id="cb3-22"></span>
<span id="cb3-23">    <span class="co" style="color: #5E5E5E;"># Set deterministic algorithms for PyTorch</span></span>
<span id="cb3-24">    torch.backends.cudnn.deterministic <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb3-25">    torch.backends.cudnn.benchmark <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb3-26"></span>
<span id="cb3-27">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"All seeds set to </span><span class="sc" style="color: #5E5E5E;">{</span>seed<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb3-28"></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;"># Call this at the beginning of your script</span></span>
<span id="cb3-30">set_all_seeds(<span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>All seeds set to 123</code></pre>
</div>
</div>
</section>
<section id="ragatouille-rag.index" class="level2">
<h2 class="anchored" data-anchor-id="ragatouille-rag.index">RAGatouille <code>RAG.index</code></h2>
<p>Everything in this notebook will be compared to what’s generated with <code>RAG.index</code>.</p>
<p>For this exercise, I’ll use 1000 passages from the UKPLab/DAPR ConditionalQA dataset.</p>
<div class="cell" data-outputid="7e33ac84-a51a-4f14-bd44-d14716248acd" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"ConditionalQA-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test[:1000]"</span>)</span>
<span id="cb5-2">passages</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: 
The secret `HF_TOKEN` does not exist in your Colab secrets.
To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.
You will be able to reuse this secret in all of your notebooks.
Please note that authentication is recommended but still optional to access public models or datasets.
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"a0c3f7d9bbee4b7db19b8050f440b0ab","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"c39bb21b350347678bee62cb857f9e99","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"caae6430636d4781a9d42a33bb39b203","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Dataset({
    features: ['_id', 'text', 'title', 'doc_id', 'paragraph_no', 'total_paragraphs', 'is_candidate'],
    num_rows: 1000
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="f796ba22-e08b-459f-a2de-80af227ab588" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">passages[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'text'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'Overview'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">model_nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="3b8db5f6-6d4e-4e74-b628-ab197b09d564" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(model_nm)</span>
<span id="cb11-2">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(index_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"cqa_index"</span>, collection<span class="op" style="color: #5E5E5E;">=</span>passages[<span class="st" style="color: #20794D;">'text'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"84a8a4d001ab4ddc9cc43766750856cb","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"3d8bdabc4fb24e89829a523480a4bff0","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"88424e552e604d548a38219144b45b13","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"e607d9321eb047b5aeac1e38a4da9e35","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fd3556a3f0e942db8ccfb750453de036","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"fb94def1a1c341108f6aad992b5cd66f","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"566b3397334148e5a490173a285cf92d","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"6613c12c3da94caf9a022f77525b9918","version_major":2,"version_minor":0}
</script>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:12: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler()</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>---- WARNING! You are using PLAID with an experimental replacement for FAISS for greater compatibility ----
This is a behaviour change from RAGatouille 0.8.0 onwards.
This works fine for most users and smallish datasets, but can be considerably slower than FAISS and could cause worse results in some situations.
If you're confident with FAISS working on your machine, pass use_faiss=True to revert to the FAISS-using behaviour.
--------------------


[Mar 13, 01:15:09] #&gt; Creating directory .ragatouille/colbert/indexes/cqa_index 


[Mar 13, 01:15:11] [0]       #&gt; Encoding 1000 passages..</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:15: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  return torch.cuda.amp.autocast() if self.activated else NullContextManager()</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:15:14] [0]       avg_doclen_est = 15.197999954223633     len(local_sample) = 1,000
[Mar 13, 01:15:14] [0]       Creating 1,024 partitions.
[Mar 13, 01:15:14] [0]       *Estimated* 15,197 embeddings.
[Mar 13, 01:15:14] [0]       #&gt; Saving the indexing plan to .ragatouille/colbert/indexes/cqa_index/plan.json ..</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/indexing/collection_indexer.py:256: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  sub_sample = torch.load(sub_sample_path)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>used 20 iterations (0.5189s) to cluster 14439 items into 1024 clusters
[Mar 13, 01:15:14] Loading decompress_residuals_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/torch/utils/cpp_extension.py:1964: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:16:51] Loading packbits_cpp extension (set COLBERT_LOAD_TORCH_EXTENSION_VERBOSE=True for more info)...</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/torch/utils/cpp_extension.py:1964: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.015, 0.016, 0.015, 0.015, 0.013, 0.016, 0.015, 0.016, 0.017, 0.014, 0.013, 0.015, 0.017, 0.014, 0.015, 0.017, 0.014, 0.015, 0.015, 0.014, 0.015, 0.016, 0.015, 0.015, 0.014, 0.014, 0.015, 0.015, 0.015, 0.015, 0.014, 0.014, 0.015, 0.014, 0.015, 0.015, 0.014, 0.015, 0.016, 0.015, 0.014, 0.015, 0.015, 0.014, 0.014, 0.017, 0.016, 0.017, 0.014, 0.015, 0.016, 0.015, 0.016, 0.016, 0.012, 0.015, 0.016, 0.015, 0.016, 0.016, 0.015, 0.015, 0.016, 0.014, 0.015, 0.017, 0.016, 0.015, 0.014, 0.015, 0.015, 0.015, 0.014, 0.016, 0.016, 0.016, 0.014, 0.015, 0.015, 0.014, 0.014, 0.014, 0.016, 0.015, 0.016, 0.015, 0.014, 0.014, 0.014, 0.015, 0.016, 0.014, 0.014, 0.016, 0.014, 0.015]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/indexing/codecs/residual.py:141: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  centroids = torch.load(centroids_path, map_location='cpu')
/usr/local/lib/python3.11/dist-packages/colbert/indexing/codecs/residual.py:142: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  avg_residual = torch.load(avgresidual_path, map_location='cpu')
/usr/local/lib/python3.11/dist-packages/colbert/indexing/codecs/residual.py:143: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  bucket_cutoffs, bucket_weights = torch.load(buckets_path, map_location='cpu')
0it [00:00, ?it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:18:16] [0]       #&gt; Encoding 1000 passages..</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:15: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  return torch.cuda.amp.autocast() if self.activated else NullContextManager()
1it [00:00,  1.39it/s]
  0%|          | 0/1 [00:00&lt;?, ?it/s]/usr/local/lib/python3.11/dist-packages/colbert/indexing/codecs/residual_embeddings.py:86: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(codes_path, map_location='cpu')
100%|██████████| 1/1 [00:00&lt;00:00, 787.81it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:18:16] #&gt; Optimizing IVF to store map from centroids to list of pids..
[Mar 13, 01:18:16] #&gt; Building the emb2pid mapping..
[Mar 13, 01:18:16] len(emb2pid) = 15198</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
100%|██████████| 1024/1024 [00:00&lt;00:00, 61154.86it/s]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:18:16] #&gt; Saved optimized IVF to .ragatouille/colbert/indexes/cqa_index/ivf.pid.pt
Done indexing!</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code></code></pre>
</div>
</div>
<div class="cell" data-outputid="43f5fe3b-967d-4ee9-c806-a6cf68612e98" data-execution_count="8">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">index_path <span class="op" style="color: #5E5E5E;">=</span> Path(index_path)</span>
<span id="cb29-2">index_path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Path('.ragatouille/colbert/indexes/cqa_index')</code></pre>
</div>
</div>
<div class="cell" data-outputid="cf51663d-a6b5-46a1-c3e4-64054d65c53a" data-execution_count="9">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> index_path.ls(): <span class="bu" style="color: null;">print</span>(o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>.ragatouille/colbert/indexes/cqa_index/buckets.pt
.ragatouille/colbert/indexes/cqa_index/collection.json
.ragatouille/colbert/indexes/cqa_index/metadata.json
.ragatouille/colbert/indexes/cqa_index/ivf.pid.pt
.ragatouille/colbert/indexes/cqa_index/doclens.0.json
.ragatouille/colbert/indexes/cqa_index/0.residuals.pt
.ragatouille/colbert/indexes/cqa_index/centroids.pt
.ragatouille/colbert/indexes/cqa_index/0.metadata.json
.ragatouille/colbert/indexes/cqa_index/plan.json
.ragatouille/colbert/indexes/cqa_index/0.codes.pt
.ragatouille/colbert/indexes/cqa_index/avg_residual.pt
.ragatouille/colbert/indexes/cqa_index/pid_docid_map.json</code></pre>
</div>
</div>
<p>While it’s a bit tedious to do so (since I’m chomping at the bit to get to the deep dive!) I think it’s worth analyzing the contents of each of these files, as we’ll be recreating them in this notebook.</p>
<section id="buckets.pt" class="level3">
<h3 class="anchored" data-anchor-id="buckets.pt">buckets.pt</h3>
<p>Looking at <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/codecs/residual.py#L160">Line 160</a> of the ColBERT repo’s <code>residual.py</code>, buckets.py stores bucket_cutoffs and bucket_weights. We’ll go into detail into what these exactly are later on.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">_bucket_cutoffs, _bucket_weights <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'buckets.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="21050d94-0825-497b-80a5-cc4123b93ac0" data-execution_count="11">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">_bucket_cutoffs.shape, _bucket_weights.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>(torch.Size([15]), torch.Size([16]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="9bc408df-7960-4f11-a4bf-21989452487c" data-execution_count="12">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">_bucket_cutoffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor([-0.0307, -0.0205, -0.0146, -0.0099, -0.0064, -0.0037, -0.0016,  0.0000,
         0.0017,  0.0038,  0.0066,  0.0102,  0.0150,  0.0211,  0.0313],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="4368b89d-459e-4270-a55e-c200fad278c5" data-execution_count="13">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">_bucket_weights</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([-0.0411, -0.0247, -0.0173, -0.0121, -0.0081, -0.0050, -0.0026, -0.0007,
         0.0007,  0.0027,  0.0052,  0.0083,  0.0124,  0.0178,  0.0253,  0.0421],
       device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
</section>
<section id="residuals.pt" class="level3">
<h3 class="anchored" data-anchor-id="residuals.pt">0.residuals.pt</h3>
<p>IIUC, there are 15198 tokens in our collection, each with a 48-dimension vector representation, and each integer value represents two 4-bit codes that each correspond to a quantized value. So there are actually 96 values in each vector.</p>
<div class="cell" data-outputid="f41f7dd3-b478-4bb8-a3be-9fa16b012687" data-execution_count="14">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">_residuals <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'0.residuals.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb40-2">_residuals</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([[ 30, 225, 225,  ..., 238, 238,  30],
        [230,  22, 158,  ..., 233, 106, 170],
        [238, 238, 238,  ..., 238, 238, 238],
        ...,
        [ 43,  22,  23,  ..., 104,  31, 208],
        [222, 254,  91,  ..., 128,   8, 189],
        [229,  82,  22,  ..., 170,  94, 154]], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="00b115a3-0966-477c-b933-a9ce207a0e22" data-execution_count="15">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">_residuals.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>torch.Size([15198, 48])</code></pre>
</div>
</div>
<div class="cell" data-outputid="bdd729b1-6b9b-48bd-ac9b-753df5045ba7" data-execution_count="16">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="dv" style="color: #AD0000;">48</span><span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>96.0</code></pre>
</div>
</div>
</section>
<section id="ivf.pid.pt" class="level3">
<h3 class="anchored" data-anchor-id="ivf.pid.pt">ivf.pid.pt</h3>
<p>IIRC, <code>ivf</code> contains a flattened sequence of passage IDs corresponding to each centroid. There are 1024 centroids and the first 8 passage IDs in <code>ivf</code> correspond to the 0-th centroid.</p>
<div class="cell" data-outputid="c5627cea-ba7c-411f-9d79-67d80cfa25d8" data-execution_count="17">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">_ivf, _ivf_lengths <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'ivf.pid.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb46-2">_ivf.shape, _ivf_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>(torch.Size([11759]), torch.Size([1024]))</code></pre>
</div>
</div>
<div class="cell" data-outputid="ed2b73e1-c8b7-4f2b-bed0-c2eca6183261" data-execution_count="18">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">_ivf[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>tensor([895, 896, 902, 904, 909], dtype=torch.int32)</code></pre>
</div>
</div>
<div class="cell" data-outputid="792c0d0f-a376-451e-8395-d05a7ecb44e3" data-execution_count="19">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">_ivf_lengths[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>tensor(8)</code></pre>
</div>
</div>
</section>
<section id="metadata.json" class="level3">
<h3 class="anchored" data-anchor-id="metadata.json">0.metadata.json</h3>
<p>There are 1000 passages totaling 15198 tokens.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="kw" style="color: #003B4F;">def</span> load_json(path, filename): <span class="cf" style="color: #003B4F;">return</span> srsly.read_json(<span class="bu" style="color: null;">str</span>(Path(path) <span class="op" style="color: #5E5E5E;">/</span> filename))</span></code></pre></div>
</div>
<div class="cell" data-outputid="5271803e-f8e9-4608-8c89-ffe2bf71f511" data-execution_count="21">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">load_json(index_path, <span class="st" style="color: #20794D;">"0.metadata.json"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'passage_offset': 0,
 'num_passages': 1000,
 'num_embeddings': 15198,
 'embedding_offset': 0}</code></pre>
</div>
</div>
</section>
<section id="collection.json" class="level3">
<h3 class="anchored" data-anchor-id="collection.json">collection.json</h3>
<p>This JSON contains, as a list, the strings of the 1000 passages in our collection.</p>
<div class="cell" data-outputid="f9f4876a-5fc7-446c-8477-c4e6846aeb73" data-execution_count="22">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">_collection <span class="op" style="color: #5E5E5E;">=</span> load_json(index_path, <span class="st" style="color: #20794D;">"collection.json"</span>)</span>
<span id="cb55-2"><span class="bu" style="color: null;">len</span>(_collection), _collection[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>(1000, 'Overview')</code></pre>
</div>
</div>
</section>
<section id="avg_residual.pt" class="level3">
<h3 class="anchored" data-anchor-id="avg_residual.pt">avg_residual.pt</h3>
<p>I believe this is the average residual across the 15198 tokens (i.e.&nbsp;the average distance in vector-space between the tokens and their closest centroids).</p>
<div class="cell" data-outputid="ddcc0531-f023-458e-99cf-e1042dd6cec7" data-execution_count="23">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">_avg_residual <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'avg_residual.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb57-2">_avg_residual</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor(0.0150, device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
</section>
<section id="doclens.0.json" class="level3">
<h3 class="anchored" data-anchor-id="doclens.0.json">doclens.0.json</h3>
<p>This contains a mapping (list) between passages IDs (indices) and the number of tokens in the document (values).</p>
<div class="cell" data-outputid="a9af0411-007e-440f-d78d-16219ef8cdd0" data-execution_count="24">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">_doclens <span class="op" style="color: #5E5E5E;">=</span> load_json(index_path, <span class="st" style="color: #20794D;">"doclens.0.json"</span>)</span>
<span id="cb59-2"><span class="bu" style="color: null;">len</span>(_doclens), _doclens[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>(1000, [4, 20, 18, 23, 8])</code></pre>
</div>
</div>
<div class="cell" data-outputid="64fb7278-8964-4a4a-fa37-d2f490e5f7bf" data-execution_count="142">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="bu" style="color: null;">sum</span>(doclens)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="142">
<pre><code>15198</code></pre>
</div>
</div>
</section>
<section id="metadata.json-1" class="level3">
<h3 class="anchored" data-anchor-id="metadata.json-1">metadata.json</h3>
<p>Lots of information in here, will highlight the number of centroids and the number of token embeddings in the collection:</p>
<pre><code>'num_partitions': 1024,
'num_embeddings': 15198</code></pre>
<div class="cell" data-outputid="05ffedca-2da2-4a9b-f4b1-4e9325ecac06" data-execution_count="25">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">load_json(index_path, <span class="st" style="color: #20794D;">"metadata.json"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>{'config': {'query_token_id': '[unused0]',
  'doc_token_id': '[unused1]',
  'query_token': '[Q]',
  'doc_token': '[D]',
  'ncells': None,
  'centroid_score_threshold': None,
  'ndocs': None,
  'load_index_with_mmap': False,
  'index_path': None,
  'index_bsize': 32,
  'nbits': 4,
  'kmeans_niters': 20,
  'resume': False,
  'pool_factor': 1,
  'clustering_mode': 'hierarchical',
  'protected_tokens': 0,
  'similarity': 'cosine',
  'bsize': 64,
  'accumsteps': 1,
  'lr': 1e-05,
  'maxsteps': 15626,
  'save_every': None,
  'warmup': 781,
  'warmup_bert': None,
  'relu': False,
  'nway': 32,
  'use_ib_negatives': False,
  'reranker': False,
  'distillation_alpha': 1.0,
  'ignore_scores': False,
  'model_name': 'answerdotai/AnswerAI-ColBERTv2.5-small',
  'query_maxlen': 32,
  'attend_to_mask_tokens': False,
  'interaction': 'colbert',
  'dim': 96,
  'doc_maxlen': 256,
  'mask_punctuation': True,
  'checkpoint': 'answerdotai/answerai-colbert-small-v1',
  'triples': '/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl',
  'collection': ['list with 1000 elements starting with...',
   ['Overview',
    'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
    'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.']],
  'queries': '/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv',
  'index_name': 'cqa_index',
  'overwrite': False,
  'root': '.ragatouille/',
  'experiment': 'colbert',
  'index_root': None,
  'name': '2025-03/13/01.14.35',
  'rank': 0,
  'nranks': 1,
  'amp': True,
  'gpus': 1,
  'avoid_fork_if_possible': False},
 'num_chunks': 1,
 'num_partitions': 1024,
 'num_embeddings': 15198,
 'avg_doclen': 15.198,
 'RAGatouille': {'index_config': {'index_type': 'PLAID',
   'index_name': 'cqa_index'}}}</code></pre>
</div>
</div>
</section>
<section id="centroids.pt" class="level3">
<h3 class="anchored" data-anchor-id="centroids.pt">centroids.pt</h3>
<p>There are 1024 96-dimension centroid vectors stored.</p>
<div class="cell" data-outputid="56aaee76-7ad0-4269-f01b-aaeafc824b29" data-execution_count="26">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">_centroids <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'centroids.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb66-2">_centroids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>torch.Size([1024, 96])</code></pre>
</div>
</div>
<p>They store the full uncompressed values for the centroids.</p>
<div class="cell" data-outputid="0ade9405-521f-46f7-c241-fa63dadfb05c" data-execution_count="27">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">_centroids[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>tensor([-0.0649,  0.1193, -0.0551,  0.0561, -0.0826], device='cuda:0',
       dtype=torch.float16)</code></pre>
</div>
</div>
</section>
<section id="codes.pt" class="level3">
<h3 class="anchored" data-anchor-id="codes.pt">0.codes.pt</h3>
<p>I believe this is a mapping (list) between tokens (indices) and centroid IDs (values).</p>
<div class="cell" data-outputid="7128258c-5e5b-4b15-f877-f157d71d2bd4" data-execution_count="28">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">_codes <span class="op" style="color: #5E5E5E;">=</span> torch.load(index_path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'0.codes.pt'</span>, weights_only<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb70-2">_codes.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>torch.Size([15198])</code></pre>
</div>
</div>
<div class="cell" data-outputid="62d80166-6b60-45db-8305-fab765339cbb" data-execution_count="29">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">_codes[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor([138, 843, 273, 138, 561], dtype=torch.int32)</code></pre>
</div>
</div>
</section>
<section id="pid_docid_map.json" class="level3">
<h3 class="anchored" data-anchor-id="pid_docid_map.json">pid_docid_map.json</h3>
<p>A mapping between passage ID (0-999) and document ID (UUID).</p>
<div class="cell" data-outputid="e16d0b3d-96c4-4a25-b2b0-b61aa712aa97" data-execution_count="30">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">_pid_docid_map <span class="op" style="color: #5E5E5E;">=</span> load_json(index_path, <span class="st" style="color: #20794D;">"pid_docid_map.json"</span>)</span>
<span id="cb74-2">_pid_docid_map[<span class="st" style="color: #20794D;">'999'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>'2be086c6-04cc-4d73-b372-08236f76cbe6'</code></pre>
</div>
</div>
</section>
<section id="plan.json" class="level3">
<h3 class="anchored" data-anchor-id="plan.json">plan.json</h3>
<p>This seems to contain the same information as metadata.json.</p>
<div class="cell" data-outputid="4a7d667f-74ca-4a32-8a34-43d295ef9d52" data-execution_count="31">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">_plan <span class="op" style="color: #5E5E5E;">=</span> load_json(index_path, <span class="st" style="color: #20794D;">"plan.json"</span>)</span>
<span id="cb76-2">_plan</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>{'config': {'query_token_id': '[unused0]',
  'doc_token_id': '[unused1]',
  'query_token': '[Q]',
  'doc_token': '[D]',
  'ncells': None,
  'centroid_score_threshold': None,
  'ndocs': None,
  'load_index_with_mmap': False,
  'index_path': None,
  'index_bsize': 32,
  'nbits': 4,
  'kmeans_niters': 20,
  'resume': False,
  'pool_factor': 1,
  'clustering_mode': 'hierarchical',
  'protected_tokens': 0,
  'similarity': 'cosine',
  'bsize': 64,
  'accumsteps': 1,
  'lr': 1e-05,
  'maxsteps': 15626,
  'save_every': None,
  'warmup': 781,
  'warmup_bert': None,
  'relu': False,
  'nway': 32,
  'use_ib_negatives': False,
  'reranker': False,
  'distillation_alpha': 1.0,
  'ignore_scores': False,
  'model_name': 'answerdotai/AnswerAI-ColBERTv2.5-small',
  'query_maxlen': 32,
  'attend_to_mask_tokens': False,
  'interaction': 'colbert',
  'dim': 96,
  'doc_maxlen': 256,
  'mask_punctuation': True,
  'checkpoint': 'answerdotai/answerai-colbert-small-v1',
  'triples': '/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl',
  'collection': ['list with 1000 elements starting with...',
   ['Overview',
    'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
    'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.']],
  'queries': '/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv',
  'index_name': 'cqa_index',
  'overwrite': False,
  'root': '.ragatouille/',
  'experiment': 'colbert',
  'index_root': None,
  'name': '2025-03/13/01.14.35',
  'rank': 0,
  'nranks': 1,
  'amp': True,
  'gpus': 1,
  'avoid_fork_if_possible': False},
 'num_chunks': 1,
 'num_partitions': 1024,
 'num_embeddings_est': 15197.999954223633,
 'avg_doclen_est': 15.197999954223633}</code></pre>
</div>
</div>
<p>In the following sections, I’ll try to recreate each of these <code>index_path</code> elements.</p>
</section>
</section>
<section id="process_corpus" class="level2">
<h2 class="anchored" data-anchor-id="process_corpus">_process_corpus</h2>
<p>Inside <code>RAG.index</code>, <code>_process_corpus</code> is called on the documents and document IDs.</p>
<div class="cell" data-outputid="91ca6abf-bd88-4652-efd4-a4b2b77907c2" data-execution_count="32">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">passage_ids <span class="op" style="color: #5E5E5E;">=</span> [<span class="bu" style="color: null;">str</span>(uuid.uuid4()) <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="bu" style="color: null;">len</span>(passages))]</span>
<span id="cb78-2">passage_ids[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>'d4cdfec5-a949-43e0-94b3-feb24caeac5e'</code></pre>
</div>
</div>
<p>Use the corpus processor to convert the passages into <code>{'document_id': '...', 'content': '...'}</code> dictionaries with 256-token max length.</p>
<div class="cell" data-outputid="40335ff4-def8-4944-8c0b-157d7823934b" data-execution_count="33">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">cp <span class="op" style="color: #5E5E5E;">=</span> CorpusProcessor()</span>
<span id="cb80-2">cp</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>&lt;ragatouille.data.corpus_processor.CorpusProcessor at 0x794fa0323690&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="dd183218-3093-4c9b-e4f5-7f31c5b9517b" data-execution_count="34">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">collection_with_ids <span class="op" style="color: #5E5E5E;">=</span> cp.process_corpus(passages[<span class="st" style="color: #20794D;">'text'</span>], passage_ids, chunk_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb82-2"><span class="bu" style="color: null;">len</span>(collection_with_ids), collection_with_ids[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(1000,
 {'document_id': 'd4cdfec5-a949-43e0-94b3-feb24caeac5e',
  'content': 'Overview'})</code></pre>
</div>
</div>
<p>As a brief aside, I’ll take a look at the maximum token length of the passages.</p>
<div class="cell" data-outputid="8bba83eb-1120-4e91-819c-c2d0e5315a93" data-execution_count="35">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">node_parser <span class="op" style="color: #5E5E5E;">=</span> SentenceSplitter(chunk_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb84-2">node_parser._token_size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>llama_index.core.node_parser.text.sentence.SentenceSplitter._token_size</b><br>def _token_size(text: str) -&gt; int</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.11/dist-packages/llama_index/core/node_parser/text/sentence.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 307);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<div class="cell" data-outputid="e76d0bf8-1cb0-4106-bbfc-a3afaf329571" data-execution_count="36">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">tk_szs <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb85-2"><span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> passages[<span class="st" style="color: #20794D;">'text'</span>]: tk_szs.append(node_parser._token_size(p))</span>
<span id="cb85-3">pd.Series(tk_szs).describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>0</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>1000.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>13.217000</td>
    </tr>
    <tr>
      <th>std</th>
      <td>10.192635</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>5.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>10.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>19.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>65.000000</td>
    </tr>
  </tbody>
</table>
</div><br><label><b>dtype:</b> float64</label>
</div>
</div>
<p>This collection of passages has relatively short passages (a max of 65 tokens).</p>
<p><code>_process_corpus</code> then creates</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">pid_docid_map <span class="op" style="color: #5E5E5E;">=</span> {index: item[<span class="st" style="color: #20794D;">"document_id"</span>] <span class="cf" style="color: #003B4F;">for</span> index, item <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(collection_with_ids)}</span></code></pre></div>
</div>
<div class="cell" data-outputid="d0e99497-9dca-4320-f03f-32432c30bd0a" data-execution_count="38">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">pid_docid_map[<span class="dv" style="color: #AD0000;">999</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>'096e054e-3041-4881-ac48-b20f1804f650'</code></pre>
</div>
</div>
<p>This matches the content of <code>pid_docid_map.json</code>.</p>
<p><code>_process_corpus</code> also defines a list of strings, <code>collection</code>:</p>
<div class="cell" data-outputid="a8fec22c-5857-42c9-a9fd-a1d68382bff2" data-execution_count="39">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">collection <span class="op" style="color: #5E5E5E;">=</span> [x[<span class="st" style="color: #20794D;">"content"</span>] <span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> collection_with_ids]</span>
<span id="cb89-2">collection[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>'Overview'</code></pre>
</div>
</div>
<p><code>_process_corpus</code> also calls <code>_process_metadata</code> which defines <code>docid_metadata_map</code> as <code>None</code> when <code>document_metadatas</code> is <code>None</code> (which it is in our case).</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">docid_metadata_map <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span></code></pre></div>
</div>
</section>
<section id="rag.index-internals" class="level2">
<h2 class="anchored" data-anchor-id="rag.index-internals"><code>RAG.index</code> Internals</h2>
<p>After calling <code>_process_corpus</code>, <code>RAG.index</code> calls <code>model.index</code>, where <code>model</code> is:</p>
<div class="sourceCode" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">instance.model <span class="op" style="color: #5E5E5E;">=</span> ColBERT(</span>
<span id="cb92-2">            pretrained_model_name_or_path, n_gpu, index_root<span class="op" style="color: #5E5E5E;">=</span>index_root, verbose<span class="op" style="color: #5E5E5E;">=</span>verbose</span>
<span id="cb92-3">        )</span></code></pre></div>
<p><code>ColBERT.index</code> in turn calls:</p>
<div class="sourceCode" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">ModelIndexFactory.construct</span></code></pre></div>
<p>By default the type of index is PLAID, so the following is called:</p>
<div class="sourceCode" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">PLAIDModelIndex(config).build(</span>
<span id="cb94-2">            checkpoint, collection, index_name, overwrite, verbose, <span class="op" style="color: #5E5E5E;">**</span>kwargs</span>
<span id="cb94-3">        )</span></code></pre></div>
<section id="plaidmodelindex.build" class="level3">
<h3 class="anchored" data-anchor-id="plaidmodelindex.build">PLAIDModelIndex.build</h3>
<p>A couple of key configuration values are set in this method, starting with the bsize (which I think is batch size?) defaulting to 32.</p>
<div class="cell" data-outputid="713f95b3-a2dd-4045-8a63-2831279ab052" data-execution_count="41">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">PLAIDModelIndex._DEFAULT_INDEX_BSIZE</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>32</code></pre>
</div>
</div>
<div class="cell" data-outputid="509c34cf-aaab-43ae-98e3-1236b1783297" data-execution_count="42">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1">bsize <span class="op" style="color: #5E5E5E;">=</span> PLAIDModelIndex._DEFAULT_INDEX_BSIZE</span>
<span id="cb97-2">bsize</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>32</code></pre>
</div>
</div>
<p>The size of compressed residual embedding values is determined based on the size of the collection.</p>
<div class="cell" data-outputid="fcd4d4e2-a40c-4bb1-e23c-38198b4d9f3b" data-execution_count="43">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb99-1"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(collection) <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10000</span>: nbits <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb99-2">nbits</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>4</code></pre>
</div>
</div>
<p>It then defines a <code>ColBERTConfig</code> object, which I believe is instantiated as follows when the <code>ColBERT</code> checkpoint is instantiated:</p>
<div class="cell" data-outputid="45f559af-99fc-449e-a652-ac3a4b9e433a" data-execution_count="44">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb101-1">ckpt_config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig.load_from_checkpoint(<span class="bu" style="color: null;">str</span>(model_nm))</span>
<span id="cb101-2">ckpt_config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=None, centroid_score_threshold=None, ndocs=None, load_index_with_mmap=False, index_path=None, index_bsize=64, nbits=1, kmeans_niters=4, resume=False, pool_factor=1, clustering_mode='hierarchical', protected_tokens=0, similarity='cosine', bsize=32, accumsteps=1, lr=1e-05, maxsteps=15626, save_every=None, warmup=781, warmup_bert=None, relu=False, nway=32, use_ib_negatives=False, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name='answerdotai/AnswerAI-ColBERTv2.5-small', query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=96, doc_maxlen=300, mask_punctuation=True, checkpoint='/root/.cache/huggingface/hub/models--answerdotai--answerai-colbert-small-v1/snapshots/be1703c55532145a844da800eea4c9a692d7e267/', triples='/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl', collection='/home/bclavie/colbertv2.5_en/data/msmarco/collection.tsv', queries='/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv', index_name=None, overwrite=False, root='/home/bclavie/colbertv2.5_en/experiments', experiment='minicolbertv2.5', index_root=None, name='2024-08/07/08.16.20', rank=0, nranks=4, amp=True, gpus=4, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<div class="cell" data-outputid="6030245b-21ac-43ab-bc51-a9702c22a661" data-execution_count="45">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig.from_existing(ckpt_config)</span>
<span id="cb103-2">config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>ColBERTConfig(query_token_id='[unused0]', doc_token_id='[unused1]', query_token='[Q]', doc_token='[D]', ncells=None, centroid_score_threshold=None, ndocs=None, load_index_with_mmap=False, index_path=None, index_bsize=64, nbits=1, kmeans_niters=4, resume=False, pool_factor=1, clustering_mode='hierarchical', protected_tokens=0, similarity='cosine', bsize=32, accumsteps=1, lr=1e-05, maxsteps=15626, save_every=None, warmup=781, warmup_bert=None, relu=False, nway=32, use_ib_negatives=False, reranker=False, distillation_alpha=1.0, ignore_scores=False, model_name='answerdotai/AnswerAI-ColBERTv2.5-small', query_maxlen=32, attend_to_mask_tokens=False, interaction='colbert', dim=96, doc_maxlen=300, mask_punctuation=True, checkpoint='/root/.cache/huggingface/hub/models--answerdotai--answerai-colbert-small-v1/snapshots/be1703c55532145a844da800eea4c9a692d7e267/', triples='/home/bclavie/colbertv2.5_en/data/msmarco/triplets.jsonl', collection='/home/bclavie/colbertv2.5_en/data/msmarco/collection.tsv', queries='/home/bclavie/colbertv2.5_en/data/msmarco/queries.tsv', index_name=None, overwrite=False, root='/home/bclavie/colbertv2.5_en/experiments', experiment='minicolbertv2.5', index_root=None, name='2024-08/07/08.16.20', rank=0, nranks=4, amp=True, gpus=4, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<p>We also need to create a <code>RunConfig</code> object:</p>
<div class="cell" data-outputid="36d6fd1b-c4b7-4f84-a1a9-ceb78c9accb1" data-execution_count="46">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1">run_config <span class="op" style="color: #5E5E5E;">=</span> RunConfig(nranks<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, experiment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"colbert"</span>, root<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">".ragatouille/"</span>)</span>
<span id="cb105-2">run_config</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>RunConfig(overwrite=False, root='.ragatouille/', experiment='colbert', index_root=None, name='2025-03/13/01.14.35', rank=0, nranks=-1, amp=True, gpus=1, avoid_fork_if_possible=False)</code></pre>
</div>
</div>
<p>A couple more config values are set:</p>
<div class="cell" data-outputid="d74d250c-86e3-43d0-ed8b-2420290082d6" data-execution_count="47">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1">config.avoid_fork_if_possible <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb107-2"></span>
<span id="cb107-3"><span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(collection) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100000</span>:</span>
<span id="cb107-4">    config.kmeans_niters <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb107-5"><span class="cf" style="color: #003B4F;">elif</span> <span class="bu" style="color: null;">len</span>(collection) <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50000</span>:</span>
<span id="cb107-6">    config.kmeans_niters <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb107-7"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb107-8">    config.kmeans_niters <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb107-9">config.avoid_fork_if_possible, config.kmeans_niters</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>(True, 20)</code></pre>
</div>
</div>
<p>After determining whether the PyTorch or FAISS k-means implementation will be used, <code>Indexer.index</code> is called.</p>
</section>
</section>
<section id="indexer.index" class="level2">
<h2 class="anchored" data-anchor-id="indexer.index">Indexer.index</h2>
<p>The <code>Indexer</code> comes from the ColBERT repo, so this is essentially the connection point between the RAGatouille and ColBERT libraries.</p>
<section id="launcher" class="level3">
<h3 class="anchored" data-anchor-id="launcher">Launcher</h3>
<p>Inside <code>Indexer.index</code>, <code>__launch</code> is called, from within which a <code>Launcher</code> instance is created with the <code>encode</code> function.</p>
<p>I’m a bit fuzzy on the next part but I’ll give it a shot:</p>
<p>when <code>Launcher.launch</code> is called, the following two lines are called (where <code>callee</code> is the <code>encode</code> function):</p>
<div class="sourceCode" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">args_ <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.callee, port, return_value_queue, new_config, <span class="op" style="color: #5E5E5E;">*</span>args)</span>
<span id="cb109-2">all_procs.append(mp.Process(target<span class="op" style="color: #5E5E5E;">=</span>setup_new_process, args<span class="op" style="color: #5E5E5E;">=</span>args_))</span></code></pre></div>
<p><code>setup_new_process</code> contains the following lines:</p>
<div class="sourceCode" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="cf" style="color: #003B4F;">with</span> Run().context(config, inherit_config<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>):</span>
<span id="cb110-2">    return_val <span class="op" style="color: #5E5E5E;">=</span> callee(config, <span class="op" style="color: #5E5E5E;">*</span>args)</span></code></pre></div>
<p>With <code>callee</code> being called, let’s look at the function that <code>callee</code> is : <code>encode</code>, which is part of the collection_indexer.py file.</p>
</section>
</section>
<section id="encode" class="level2">
<h2 class="anchored" data-anchor-id="encode">encode</h2>
<div class="sourceCode" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="kw" style="color: #003B4F;">def</span> encode(config, collection, shared_lists, shared_queues, verbose: <span class="bu" style="color: null;">int</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span>):</span>
<span id="cb111-2">    encoder <span class="op" style="color: #5E5E5E;">=</span> CollectionIndexer(config<span class="op" style="color: #5E5E5E;">=</span>config, collection<span class="op" style="color: #5E5E5E;">=</span>collection, verbose<span class="op" style="color: #5E5E5E;">=</span>verbose)</span>
<span id="cb111-3">    encoder.run(shared_lists)</span></code></pre></div>
<p>This leads us to <code>encoder.run</code> which is <code>CollectionIndexer.run</code>. But before that, we need to look at how the collection is transformed when <code>CollectionIndexer</code> is instantiated.</p>
</section>
<section id="collectionindexer.__init__" class="level2">
<h2 class="anchored" data-anchor-id="collectionindexer.__init__">CollectionIndexer.__init__</h2>
<p>There are two important objects created when the <code>CollectionIndexer</code> is instantiated. First is the <code>Collection</code> object, which turns our list <code>collection</code>:</p>
<div class="cell" data-outputid="7e5b183f-41a1-4a6b-d0a0-526ed5504b0e" data-execution_count="48">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="bu" style="color: null;">type</span>(collection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>list</code></pre>
</div>
</div>
<p>into a <code>Collection</code> object:</p>
<div class="cell" data-outputid="4542f1a3-6850-4403-ec5d-229a6867ac95" data-execution_count="49">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1">collection <span class="op" style="color: #5E5E5E;">=</span> Collection.cast(collection)</span>
<span id="cb114-2">collection</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>&lt;colbert.data.collection.Collection at 0x794fa037e410&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="1b3747d7-93d9-4b39-c5bb-d9a6cd236a16" data-execution_count="50">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="bu" style="color: null;">type</span>(collection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>colbert.data.collection.Collection</b><br>def __init__(path=None, data=None)</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.11/dist-packages/colbert/data/collection.py&lt;no docstring&gt;</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 14);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<p>Next, it creates a <code>CollectionEncoder</code> object:</p>
<div class="cell" data-outputid="287c057a-b53b-4e29-b8e2-3fa7945b558c" data-execution_count="51">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1">checkpoint <span class="op" style="color: #5E5E5E;">=</span> Checkpoint(config.checkpoint, colbert_config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb117-2">encoder <span class="op" style="color: #5E5E5E;">=</span> CollectionEncoder(config, checkpoint)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:12: FutureWarning: `torch.cuda.amp.GradScaler(args...)` is deprecated. Please use `torch.amp.GradScaler('cuda', args...)` instead.
  self.scaler = torch.cuda.amp.GradScaler()</code></pre>
</div>
</div>
<p><code>checkpoint</code> is our model:</p>
<div class="cell" data-outputid="d4e3ee56-c931-4512-c4e5-4e3b94ffeaa4" data-execution_count="52">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1">checkpoint</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>Checkpoint(
  (model): HF_ColBERT(
    (linear): Linear(in_features=384, out_features=96, bias=False)
    (bert): BertModel(
      (embeddings): BertEmbeddings(
        (word_embeddings): Embedding(30522, 384, padding_idx=0)
        (position_embeddings): Embedding(512, 384)
        (token_type_embeddings): Embedding(2, 384)
        (LayerNorm): LayerNorm((384,), eps=1e-12, elementwise_affine=True)
        (dropout): Dropout(p=0.1, inplace=False)
      )
      (encoder): BertEncoder(
        (layer): ModuleList(
          (0-11): 12 x BertLayer(
            (attention): BertAttention(
              (self): BertSdpaSelfAttention(
                (query): Linear(in_features=384, out_features=384, bias=True)
                (key): Linear(in_features=384, out_features=384, bias=True)
                (value): Linear(in_features=384, out_features=384, bias=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
              (output): BertSelfOutput(
                (dense): Linear(in_features=384, out_features=384, bias=True)
                (LayerNorm): LayerNorm((384,), eps=1e-12, elementwise_affine=True)
                (dropout): Dropout(p=0.1, inplace=False)
              )
            )
            (intermediate): BertIntermediate(
              (dense): Linear(in_features=384, out_features=1536, bias=True)
              (intermediate_act_fn): GELUActivation()
            )
            (output): BertOutput(
              (dense): Linear(in_features=1536, out_features=384, bias=True)
              (LayerNorm): LayerNorm((384,), eps=1e-12, elementwise_affine=True)
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
        )
      )
      (pooler): BertPooler(
        (dense): Linear(in_features=384, out_features=384, bias=True)
        (activation): Tanh()
      )
    )
  )
)</code></pre>
</div>
</div>
<p>The <code>CollectionEncoder</code> will be used later on to encode the passages.</p>
<div class="cell" data-outputid="4a91eac1-1fcd-4304-9aa7-c9116e131bc4" data-execution_count="53">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">encoder</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>&lt;colbert.indexing.collection_encoder.CollectionEncoder at 0x794fa0683dd0&gt;</code></pre>
</div>
</div>
<p>Next we’ll dive into <code>CollectionIndexer.run</code> within which all of the indexing operations that I’m most interested in take place, starting with <code>setup</code>.</p>
</section>
<section id="collectionindexer.run" class="level2">
<h2 class="anchored" data-anchor-id="collectionindexer.run">CollectionIndexer.run</h2>
<section id="collectionindexer.setup" class="level3">
<h3 class="anchored" data-anchor-id="collectionindexer.setup">CollectionIndexer.setup</h3>
<pre><code>'''
Calculates and saves plan.json for the whole collection.

plan.json { config, num_chunks, num_partitions, num_embeddings_est, avg_doclen_est}
num_partitions is the number of centroids to be generated.
'''</code></pre>
<p>We’ll see where <code>num_chunks</code> is used, but for now I’ll just define it:</p>
<div class="cell" data-outputid="4608be3d-b02a-4824-9af6-5179e47e4662" data-execution_count="54">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1">num_chunks <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(np.ceil(<span class="bu" style="color: null;">len</span>(collection) <span class="op" style="color: #5E5E5E;">/</span> collection.get_chunksize()))</span>
<span id="cb124-2"><span class="bu" style="color: null;">len</span>(collection), collection.get_chunksize(), num_chunks</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>(1000, 1001, 1)</code></pre>
</div>
</div>
<p>Next we look at <code>_sample_pids</code> and <code>_sample_embeddings</code> which are later clustered to get our centroids.</p>
<section id="sample_pids" class="level4">
<h4 class="anchored" data-anchor-id="sample_pids">_sample_pids</h4>
<div class="cell" data-outputid="bf8f7646-fe8c-48d8-a32a-bb2183c3d9aa" data-execution_count="55">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1">num_passages <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(collection)</span>
<span id="cb126-2">num_passages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>1000</code></pre>
</div>
</div>
<p>It’s awesome to see one of the heuristics mentioned in the <a href="https://arxiv.org/abs/2112.01488">ColBERTv2 paper</a>:</p>
<blockquote class="blockquote">
<p>To reduce memory consumption, we apply k-means clustering to the embeddings produced by invoking our BERT encoder over only a sample of all passages, proportional to the square root of the collection size, an approach we found to perform well in practice.</p>
</blockquote>
<div class="cell" data-outputid="3dc9f49f-7fe1-42c1-a2b3-8e7780d9d1ee" data-execution_count="56">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1">typical_doclen <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">120</span></span>
<span id="cb128-2">sampled_pids <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">16</span> <span class="op" style="color: #5E5E5E;">*</span> np.sqrt(typical_doclen <span class="op" style="color: #5E5E5E;">*</span> num_passages)</span>
<span id="cb128-3">sampled_pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>5542.562584220407</code></pre>
</div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">sampled_pids <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">min</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> <span class="bu" style="color: null;">int</span>(sampled_pids), num_passages)</span></code></pre></div>
</div>
<p>In this case because my toy collection is so small (1000 passages) we will use all of them for centroid clustering.</p>
<div class="cell" data-outputid="d9d310be-a543-4cac-aadd-94fe8439164f" data-execution_count="58">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">sampled_pids <span class="op" style="color: #5E5E5E;">=</span> random.sample(<span class="bu" style="color: null;">range</span>(num_passages), sampled_pids)</span>
<span id="cb131-2">sampled_pids <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(sampled_pids)</span>
<span id="cb131-3"><span class="bu" style="color: null;">len</span>(sampled_pids), <span class="bu" style="color: null;">min</span>(sampled_pids), <span class="bu" style="color: null;">max</span>(sampled_pids)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>(1000, 0, 999)</code></pre>
</div>
</div>
</section>
<section id="sample_embeddings" class="level4">
<h4 class="anchored" data-anchor-id="sample_embeddings">_sample_embeddings</h4>
<div class="cell" data-outputid="695c7b09-bd48-4085-ddcb-78113cbe4cbf" data-execution_count="59">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">local_pids <span class="op" style="color: #5E5E5E;">=</span> collection.<span class="bu" style="color: null;">enumerate</span>(rank<span class="op" style="color: #5E5E5E;">=</span>config.rank)</span>
<span id="cb133-2">local_pids</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>&lt;generator object Collection.enumerate at 0x794fa067dc40&gt;</code></pre>
</div>
</div>
<p><code>sampled_pids</code> contains all of our passages</p>
<div class="cell" data-outputid="131ba5cd-16c8-42ae-c811-fe0eaecfb591" data-execution_count="60">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">local_sample <span class="op" style="color: #5E5E5E;">=</span> [passage <span class="cf" style="color: #003B4F;">for</span> pid, passage <span class="kw" style="color: #003B4F;">in</span> local_pids <span class="cf" style="color: #003B4F;">if</span> pid <span class="kw" style="color: #003B4F;">in</span> sampled_pids]</span>
<span id="cb135-2"><span class="bu" style="color: null;">len</span>(local_sample)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>1000</code></pre>
</div>
</div>
<p>Next come another critical process—encoding our passages!</p>
</section>
<section id="collectionencoder.encode_passages" class="level4">
<h4 class="anchored" data-anchor-id="collectionencoder.encode_passages">CollectionEncoder.encode_passages</h4>
<p>Inside <code>encode_passages</code> we call <code>checkpoint.docFromText</code>.</p>
</section>
<section id="checkpoint.docfromtext" class="level4">
<h4 class="anchored" data-anchor-id="checkpoint.docfromtext">checkpoint.docFromText</h4>
<p>And inside <code>checkpoint.docFromText</code> we call <code>checkpoint.doc</code></p>
</section>
<section id="checkpoint.doc" class="level4">
<h4 class="anchored" data-anchor-id="checkpoint.doc">checkpoint.doc</h4>
<p>Inside <code>ColBERT.doc</code> we finally call the lowest-level method in this chain:</p>
<div class="sourceCode" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">D <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.bert(input_ids, attention_mask<span class="op" style="color: #5E5E5E;">=</span>attention_mask)[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<p>One key point to visualize is that the BERT output is normalized:</p>
<div class="sourceCode" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1"> D <span class="op" style="color: #5E5E5E;">=</span> torch.nn.functional.normalize(D, p<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<p>I’ll zoom out again and call <code>encode_passages</code>.</p>
<div class="cell" data-outputid="baf86309-4cd0-415d-d2c2-239648f21835" data-execution_count="61">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">local_sample_embs, doclens <span class="op" style="color: #5E5E5E;">=</span> encoder.encode_passages(local_sample)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:18:18] [0]       #&gt; Encoding 1000 passages..</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:15: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  return torch.cuda.amp.autocast() if self.activated else NullContextManager()</code></pre>
</div>
</div>
<div class="cell" data-outputid="5368e56a-dc60-4b05-e281-6bc83260149d" data-execution_count="62">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">local_sample_embs.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>torch.Size([15198, 96])</code></pre>
</div>
</div>
<p>Note that the token embeddings are a unit vector:</p>
<div class="cell" data-outputid="7535c91f-acbc-4310-fe2c-eceaa0aac05e" data-execution_count="63">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">local_sample_embs[<span class="dv" style="color: #AD0000;">0</span>].norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>tensor(1., dtype=torch.float16)</code></pre>
</div>
</div>
<div class="cell" data-outputid="51a948d6-7cc9-424f-f0fd-aec96603de60" data-execution_count="64">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1"><span class="bu" style="color: null;">len</span>(doclens), doclens[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>(1000, [4, 20, 18, 23, 8])</code></pre>
</div>
</div>
<p>We have 15198 token embeddings (embedded into answerai-colbert-small-v1’s 96-dimension space) and a mapping (list) of passage ID (indices) to number of tokens (values).</p>
<div class="cell" data-outputid="58d443ae-bb70-432c-fa22-e4d6508ee855" data-execution_count="65">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1">avg_doclen_est <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(doclens) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(doclens) <span class="cf" style="color: #003B4F;">if</span> doclens <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb148-2">avg_doclen_est</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>15.198</code></pre>
</div>
</div>
<p>On average, each passage (document) is 15 tokens long.</p>
<p>Zooming back out to CollectionIndexer.setup we have a few more steps before our planning is complete:</p>
<div class="cell" data-outputid="204bfd18-33ef-4bdb-c0f9-08f6fb4a4261" data-execution_count="66">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">num_passages <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(collection)</span>
<span id="cb150-2">num_embeddings_est <span class="op" style="color: #5E5E5E;">=</span> num_passages <span class="op" style="color: #5E5E5E;">*</span> avg_doclen_est</span>
<span id="cb150-3">num_partitions <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(<span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">**</span> np.floor(np.log2(<span class="dv" style="color: #AD0000;">16</span> <span class="op" style="color: #5E5E5E;">*</span> np.sqrt(num_embeddings_est))))</span>
<span id="cb150-4">num_passages, num_embeddings_est, num_partitions</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>(1000, 15198.0, 1024)</code></pre>
</div>
</div>
<p><code>num_partitions</code> is the number of clusters we will cluster our 15198 token embeddings into.</p>
<p>This is the information that was in plan.json in <code>index_path</code> (in addition to the other ColBERTConfig information).</p>
</section>
</section>
</section>
<section id="collectionindexer.train" class="level2">
<h2 class="anchored" data-anchor-id="collectionindexer.train">CollectionIndexer.train</h2>
<p>After <code>setup</code> is complete, the next method called in <code>run</code> is <code>train</code>.</p>
<p>The first step in <code>train</code> is to split our <code>local_sample_embs</code> into <code>sample</code> and <code>sample_heldout</code>.</p>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">local_sample_embs <span class="op" style="color: #5E5E5E;">=</span> local_sample_embs[torch.randperm(local_sample_embs.size(<span class="dv" style="color: #AD0000;">0</span>))]</span></code></pre></div>
</div>
<div class="cell" data-outputid="ec7757d2-ca75-477d-84f3-f81c3517883a" data-execution_count="68">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1">heldout_fraction <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb153-2">heldout_size <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(<span class="bu" style="color: null;">min</span>(heldout_fraction <span class="op" style="color: #5E5E5E;">*</span> local_sample_embs.size(<span class="dv" style="color: #AD0000;">0</span>), <span class="dv" style="color: #AD0000;">50_000</span>))</span>
<span id="cb153-3">heldout_size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>759</code></pre>
</div>
</div>
<div class="cell" data-outputid="6f55866f-73fe-4764-8f4b-75357ff74422" data-execution_count="69">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">sample, sample_heldout <span class="op" style="color: #5E5E5E;">=</span> local_sample_embs.split([local_sample_embs.size(<span class="dv" style="color: #AD0000;">0</span>) <span class="op" style="color: #5E5E5E;">-</span> heldout_size, heldout_size], dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb155-2">sample.shape, sample_heldout.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>(torch.Size([14439, 96]), torch.Size([759, 96]))</code></pre>
</div>
</div>
<section id="compute_faiss_kmeans" class="level3">
<h3 class="anchored" data-anchor-id="compute_faiss_kmeans">compute_faiss_kmeans</h3>
<p>Next we get the centroids using <code>compute_faiss_kmeans</code></p>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">args_ <span class="op" style="color: #5E5E5E;">=</span> [config.dim, num_partitions, config.kmeans_niters, [[sample]]]</span></code></pre></div>
</div>
<div class="cell" data-outputid="054f14d5-c959-471a-8b5e-ed27aa85b2a3" data-execution_count="71">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">centroids <span class="op" style="color: #5E5E5E;">=</span> compute_faiss_kmeans(<span class="op" style="color: #5E5E5E;">*</span>args_)</span>
<span id="cb158-2">centroids.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>torch.Size([1024, 96])</code></pre>
</div>
</div>
<p>We then normalize the centroids</p>
<div class="cell" data-outputid="cf1bbf89-4877-4093-fe5c-81dc240a6794" data-execution_count="72">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1">centroids <span class="op" style="color: #5E5E5E;">=</span> torch.nn.functional.normalize(centroids, dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb160-2">centroids.shape, centroids[<span class="dv" style="color: #AD0000;">0</span>].norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>(torch.Size([1024, 96]), tensor(1.))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb162-1">centroids <span class="op" style="color: #5E5E5E;">=</span> centroids.half()</span></code></pre></div>
</div>
<p>I was hoping to get the same values as <code>RAG.index</code> centroids by setting seeds at the start of this notebook, but I am not getting the same result.</p>
<div class="cell" data-outputid="9f560916-f170-474e-f865-9a7313707a5c" data-execution_count="74">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">_centroids[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>tensor([-0.0649,  0.1193, -0.0551,  0.0561, -0.0826], device='cuda:0',
       dtype=torch.float16)</code></pre>
</div>
</div>
<div class="cell" data-outputid="d9d7ff01-dce7-403d-fa02-f04cb7ac8318" data-execution_count="75">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">centroids[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>tensor([-0.0587,  0.0379, -0.0847, -0.0224, -0.0636], dtype=torch.float16)</code></pre>
</div>
</div>
<p>I’ll use PCA to compare the two sets of centroids:</p>
<div class="cell" data-outputid="364dc72a-4316-4c4b-c262-4ce9c136f239" data-execution_count="76">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1"><span class="co" style="color: #5E5E5E;"># Project to 2D</span></span>
<span id="cb167-2">pca <span class="op" style="color: #5E5E5E;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb167-3">prev_2d <span class="op" style="color: #5E5E5E;">=</span> pca.fit_transform(_centroids.cpu().numpy())</span>
<span id="cb167-4">new_2d <span class="op" style="color: #5E5E5E;">=</span> pca.transform(centroids.cpu().numpy())</span>
<span id="cb167-5"></span>
<span id="cb167-6"><span class="co" style="color: #5E5E5E;"># Plot</span></span>
<span id="cb167-7">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb167-8">plt.scatter(prev_2d[:, <span class="dv" style="color: #AD0000;">0</span>], prev_2d[:, <span class="dv" style="color: #AD0000;">1</span>], alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Previous'</span>)</span>
<span id="cb167-9">plt.scatter(new_2d[:, <span class="dv" style="color: #AD0000;">0</span>], new_2d[:, <span class="dv" style="color: #AD0000;">1</span>], alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'New'</span>)</span>
<span id="cb167-10">plt.legend()</span>
<span id="cb167-11">plt.title(<span class="st" style="color: #20794D;">'PCA projection of centroids'</span>)</span>
<span id="cb167-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-78-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-03-12-RAGatouille-ColBERT-Indexing-Deep-Dive/index_files/figure-html/cell-78-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>I’m not super familiar with interpreting PCA plots, so I asked Claude what it thought about this result:</p>
<blockquote class="blockquote">
<p>I would describe this as showing “good structural similarity but with expected local variations.” The centroids aren’t identical (which would show perfect overlap), but they capture similar patterns in the embedding space. This suggests that while individual centroid positions differ, the overall index structure should perform similarly for retrieval tasks.</p>
</blockquote>
<p>For now, I’ll consider this part of indexing completing, as we have generated similar contents to what’s in centroids.pt.</p>
</section>
<section id="compute_avg_residual" class="level3">
<h3 class="anchored" data-anchor-id="compute_avg_residual">_compute_avg_residual</h3>
<p>This next section was quite eye opening for me, as it was the first time I understood how quantization is implemented.</p>
<p>The <code>ResidualCodec</code> does all of the compression/binarization/decompress of residuals.</p>
<div class="cell" data-outputid="63e544fc-d70a-4ec4-c20d-f662dcd573dd" data-execution_count="77">
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb168-1">compressor <span class="op" style="color: #5E5E5E;">=</span> ResidualCodec(config<span class="op" style="color: #5E5E5E;">=</span>config, centroids<span class="op" style="color: #5E5E5E;">=</span>centroids, avg_residual<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)</span>
<span id="cb168-2">compressor</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>&lt;colbert.indexing.codecs.residual.ResidualCodec at 0x794f9aacfdd0&gt;</code></pre>
</div>
</div>
<div class="cell" data-outputid="91dd3f8e-f5d4-4011-b8b6-8f07d856f678" data-execution_count="78">
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb170-1">heldout_reconstruct <span class="op" style="color: #5E5E5E;">=</span> compressor.compress_into_codes(sample_heldout, out_device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda'</span> )</span>
<span id="cb170-2">heldout_reconstruct.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<pre><code>torch.Size([759])</code></pre>
</div>
</div>
<p><code>compress_into_codes</code> finds the nearest centroid IDs to the token embeddings. It does so using cosine similarity:</p>
<div class="sourceCode" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">indices <span class="op" style="color: #5E5E5E;">=</span> (<span class="va" style="color: #111111;">self</span>.centroids <span class="op" style="color: #5E5E5E;">@</span> batch.T.cuda().half()).<span class="bu" style="color: null;">max</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).indices.to(device<span class="op" style="color: #5E5E5E;">=</span>out_device)</span></code></pre></div>
<div class="cell" data-outputid="7d386c67-5697-4b06-bc60-3016a5268171" data-execution_count="79">
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb173-1">heldout_reconstruct[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>tensor([633, 667, 738, 641, 443], device='cuda:0')</code></pre>
</div>
</div>
<p><code>lookup_centroids</code> gets the full vectors related to the centroid IDs in <code>heldout_reconstruct</code></p>
<div class="cell" data-outputid="1828d155-c7d2-49d6-ee0b-bf28088fed2f" data-execution_count="80">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb175-1">heldout_reconstruct <span class="op" style="color: #5E5E5E;">=</span> compressor.lookup_centroids(heldout_reconstruct, out_device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda'</span>)</span>
<span id="cb175-2">heldout_reconstruct.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>torch.Size([759, 96])</code></pre>
</div>
</div>
<p>The residual between the heldout token embeddings and the closest centroids is then calculated:</p>
<div class="cell" data-outputid="fa4c97ef-1b38-47cb-e495-71769187250b" data-execution_count="81">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">heldout_avg_residual <span class="op" style="color: #5E5E5E;">=</span> sample_heldout.cuda() <span class="op" style="color: #5E5E5E;">-</span> heldout_reconstruct</span>
<span id="cb177-2">heldout_avg_residual.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>torch.Size([759, 96])</code></pre>
</div>
</div>
<p>We then calculate the average residual vector (96 dimensions):</p>
<div class="cell" data-outputid="1abb38ee-908f-4466-ee55-18874f0cf623" data-execution_count="82">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">avg_residual <span class="op" style="color: #5E5E5E;">=</span> torch.<span class="bu" style="color: null;">abs</span>(heldout_avg_residual).mean(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).cpu()</span>
<span id="cb179-2">avg_residual.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>torch.Size([96])</code></pre>
</div>
</div>
<p>The average residual is somewhat similar to the stored value in avg_residual.pt.</p>
<div class="cell" data-outputid="9851ccd2-9b46-4391-ca49-60e73eb9143b" data-execution_count="83">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">_avg_residual, avg_residual.mean()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="83">
<pre><code>(tensor(0.0150, device='cuda:0', dtype=torch.float16),
 tensor(0.0158, dtype=torch.float16))</code></pre>
</div>
</div>
<p>To match the <code>RAG.index</code> defaults, I’m going to set <code>nbits</code> to 4.</p>
<div class="cell" data-outputid="d40f05df-3a4a-49ea-d2d3-c95a13fe8f05" data-execution_count="84">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb183-1">config.nbits</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>1</code></pre>
</div>
</div>
<div class="cell" data-outputid="b221b665-e69d-4f60-d7bf-e103bc4f07ea" data-execution_count="85">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb185-1">config.nbits <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb185-2">config.nbits</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>4</code></pre>
</div>
</div>
<div class="cell" data-outputid="caa9c096-c212-4d1d-c2fc-5dc98b08f134" data-execution_count="86">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb187-1">num_options <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">**</span> config.nbits</span>
<span id="cb187-2">config.nbits, num_options</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>(4, 16)</code></pre>
</div>
</div>
<p>A 4-bit value has four 0 or 1 values and there are 16 possible combinations:</p>
<table class="table">
<thead>
<tr class="header">
<th>Binary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0000</td>
</tr>
<tr class="even">
<td>0001</td>
</tr>
<tr class="odd">
<td>0010</td>
</tr>
<tr class="even">
<td>0011</td>
</tr>
<tr class="odd">
<td>0100</td>
</tr>
<tr class="even">
<td>0101</td>
</tr>
<tr class="odd">
<td>0110</td>
</tr>
<tr class="even">
<td>0111</td>
</tr>
<tr class="odd">
<td>1000</td>
</tr>
<tr class="even">
<td>1001</td>
</tr>
<tr class="odd">
<td>1010</td>
</tr>
<tr class="even">
<td>1011</td>
</tr>
<tr class="odd">
<td>1100</td>
</tr>
<tr class="even">
<td>1101</td>
</tr>
<tr class="odd">
<td>1110</td>
</tr>
<tr class="even">
<td>1111</td>
</tr>
</tbody>
</table>
<p>We split 0-to-1 into 16 equal parts:</p>
<div class="cell" data-outputid="d7e5088e-a9a2-4bf2-ef43-6cd89420cbbb" data-execution_count="87">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1">quantiles <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="dv" style="color: #AD0000;">0</span>, num_options, device<span class="op" style="color: #5E5E5E;">=</span>heldout_avg_residual.device) <span class="op" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> num_options)</span>
<span id="cb189-2">quantiles.shape, quantiles</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="87">
<pre><code>(torch.Size([16]),
 tensor([0.0000, 0.0625, 0.1250, 0.1875, 0.2500, 0.3125, 0.3750, 0.4375, 0.5000,
         0.5625, 0.6250, 0.6875, 0.7500, 0.8125, 0.8750, 0.9375],
        device='cuda:0'))</code></pre>
</div>
</div>
<div class="cell" data-outputid="aad0ff4d-d8f5-490c-8ab5-ea569284ecb7" data-execution_count="88">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">bucket_cutoffs_quantiles, bucket_weights_quantiles <span class="op" style="color: #5E5E5E;">=</span> quantiles[<span class="dv" style="color: #AD0000;">1</span>:], quantiles <span class="op" style="color: #5E5E5E;">+</span> (<span class="fl" style="color: #AD0000;">0.5</span> <span class="op" style="color: #5E5E5E;">/</span> num_options)</span>
<span id="cb191-2">bucket_cutoffs_quantiles, bucket_weights_quantiles</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>(tensor([0.0625, 0.1250, 0.1875, 0.2500, 0.3125, 0.3750, 0.4375, 0.5000, 0.5625,
         0.6250, 0.6875, 0.7500, 0.8125, 0.8750, 0.9375], device='cuda:0'),
 tensor([0.0312, 0.0938, 0.1562, 0.2188, 0.2812, 0.3438, 0.4062, 0.4688, 0.5312,
         0.5938, 0.6562, 0.7188, 0.7812, 0.8438, 0.9062, 0.9688],
        device='cuda:0'))</code></pre>
</div>
</div>
<p>IIUC, the weights’ quantiles are the midpoints between adjacent cutoffs’ quantiles.</p>
<div class="cell" data-outputid="91a23e13-086b-4777-aa6f-a9f5b246825f" data-execution_count="89">
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb193-1">(bucket_cutoffs_quantiles[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs_quantiles[<span class="dv" style="color: #AD0000;">2</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="89">
<pre><code>tensor(0.1562, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="e84a2eef-9e00-4ba8-c455-645783076de1" data-execution_count="90">
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb195-1">(bucket_cutoffs_quantiles[<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs_quantiles[<span class="dv" style="color: #AD0000;">4</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="90">
<pre><code>tensor(0.2812, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="770906cf-1692-4c8a-c273-26905182aeac" data-execution_count="91">
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb197-1">(bucket_cutoffs_quantiles[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs_quantiles[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="91">
<pre><code>tensor(0.9062, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="92">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb199-1">bucket_cutoffs <span class="op" style="color: #5E5E5E;">=</span> heldout_avg_residual.<span class="bu" style="color: null;">float</span>().quantile(bucket_cutoffs_quantiles)</span>
<span id="cb199-2">bucket_weights <span class="op" style="color: #5E5E5E;">=</span> heldout_avg_residual.<span class="bu" style="color: null;">float</span>().quantile(bucket_weights_quantiles)</span></code></pre></div>
</div>
<p>IIUC, <code>bucket_cutoffs</code> are the values with which we can group our (flattened) <code>heldout_avg_residual</code>s into 16 equal groups. Visualized here by setting the bins to <code>bucket_cutoffs</code>.</p>
<div class="cell" data-outputid="a25d3724-e9fe-4ba8-f0e4-07621a74e7c3" data-execution_count="93">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb200-1">pd.Series(heldout_avg_residual.flatten().cpu()).hist(bins<span class="op" style="color: #5E5E5E;">=</span>bucket_cutoffs.cpu())</span>
<span id="cb200-2">plt.xlim([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.035</span>, <span class="fl" style="color: #AD0000;">0.035</span>])</span>
<span id="cb200-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/cell-95-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2025-03-12-RAGatouille-ColBERT-Indexing-Deep-Dive/index_files/figure-html/cell-95-output-1.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
</div>
</div>
<p>Perhaps due to randomness during the sample split, my manually calculated cutoffs are not quite the same as the <code>RAG.index</code> values.</p>
<div class="cell" data-outputid="51ca7346-ac8f-43dd-aad1-4cd0e1d4885e" data-execution_count="94">
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb201-1">bucket_cutoffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">
<pre><code>tensor([-0.0322, -0.0219, -0.0156, -0.0108, -0.0070, -0.0040, -0.0017,  0.0000,
         0.0019,  0.0042,  0.0071,  0.0108,  0.0155,  0.0220,  0.0327],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="ff1b5563-7c6b-48d7-8d25-c2742fca0614" data-execution_count="95">
<div class="sourceCode cell-code" id="cb203" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb203-1">_bucket_cutoffs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>tensor([-0.0307, -0.0205, -0.0146, -0.0099, -0.0064, -0.0037, -0.0016,  0.0000,
         0.0017,  0.0038,  0.0066,  0.0102,  0.0150,  0.0211,  0.0313],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="0bbd9adb-7d24-49d1-ae17-80ea28e16e61" data-execution_count="96">
<div class="sourceCode cell-code" id="cb205" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb205-1">bucket_weights</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>tensor([-0.0434, -0.0261, -0.0185, -0.0131, -0.0088, -0.0054, -0.0028, -0.0009,
         0.0009,  0.0029,  0.0055,  0.0088,  0.0130,  0.0184,  0.0262,  0.0441],
       device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="8eed6fed-a09a-4a78-d340-2deaeb08189b" data-execution_count="97">
<div class="sourceCode cell-code" id="cb207" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb207-1">_bucket_weights</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="97">
<pre><code>tensor([-0.0411, -0.0247, -0.0173, -0.0121, -0.0081, -0.0050, -0.0026, -0.0007,
         0.0007,  0.0027,  0.0052,  0.0083,  0.0124,  0.0178,  0.0253,  0.0421],
       device='cuda:0', dtype=torch.float16)</code></pre>
</div>
</div>
<p>There seems to be some rounding differences (or perhaps it depends on the distribution?) but the weights again seem to be the midpoints-ish between the cutoffs.</p>
<div class="cell" data-outputid="fae360c9-59e9-4c91-84b1-5282a62c4dd8" data-execution_count="98">
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb209-1">(bucket_cutoffs[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs[<span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>tensor(-0.0270, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="0ce69033-621e-4ed5-ebee-c03c57bf4ee1" data-execution_count="99">
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb211-1">(bucket_cutoffs[<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs[<span class="dv" style="color: #AD0000;">4</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>tensor(-0.0089, device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="228f1503-ef60-4224-fb95-34e25c4540f0" data-execution_count="100">
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb213-1">(bucket_cutoffs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">+</span> bucket_cutoffs[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>tensor(0.0273, device='cuda:0')</code></pre>
</div>
</div>
</section>
</section>
<section id="collectionindexer.index" class="level2">
<h2 class="anchored" data-anchor-id="collectionindexer.index">CollectionIndexer.index</h2>
<p>Thus far we have found centroids from a sample of our token embeddings (5%, or 759) and calculated bucket cutoffs and bucket weights for quantization. We also know what the average residual mean value is.</p>
<p>Now we find the closest centroids and residuals for all passages’ token embeddings, starting first by encoding all 15198 tokens with our model:</p>
<div class="cell" data-outputid="dbfd1e50-465c-4ec6-85f8-d9e4cc6050c9" data-execution_count="101">
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb215-1">embs, doclens <span class="op" style="color: #5E5E5E;">=</span> encoder.encode_passages(collection)</span>
<span id="cb215-2">embs.shape, <span class="bu" style="color: null;">len</span>(doclens), doclens[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[Mar 13, 01:18:21] [0]       #&gt; Encoding 1000 passages..</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/usr/local/lib/python3.11/dist-packages/colbert/utils/amp.py:15: FutureWarning: `torch.cuda.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cuda', args...)` instead.
  return torch.cuda.amp.autocast() if self.activated else NullContextManager()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>(torch.Size([15198, 96]), 1000, [4, 20, 18, 23, 8])</code></pre>
</div>
</div>
<p>Then we call <code>save_chunk</code> which is inside the <a href="https://github.com/stanford-futuredata/ColBERT/blob/7067ef598b5011edaa1f4a731a2c269dbac864e4/colbert/indexing/index_saver.py#L70"><code>IndexSaver</code></a> within which some interesting things take place:</p>
<div class="sourceCode" id="cb219" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb219-1"><span class="kw" style="color: #003B4F;">def</span> save_chunk(<span class="va" style="color: #111111;">self</span>, chunk_idx, offset, embs, doclens):</span>
<span id="cb219-2">        compressed_embs <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.codec.compress(embs)</span></code></pre></div>
<p>Looking into <code>ResidualCodec.compress</code>:</p>
<div class="sourceCode" id="cb220" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb220-1"><span class="kw" style="color: #003B4F;">def</span> compress(<span class="va" style="color: #111111;">self</span>, embs):</span>
<span id="cb220-2">        codes, residuals <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb220-3"></span>
<span id="cb220-4">        <span class="cf" style="color: #003B4F;">for</span> batch <span class="kw" style="color: #003B4F;">in</span> embs.split(<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;">18</span>):</span>
<span id="cb220-5">            <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.use_gpu:</span>
<span id="cb220-6">                batch <span class="op" style="color: #5E5E5E;">=</span> batch.cuda().half()</span>
<span id="cb220-7">            codes_ <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.compress_into_codes(batch, out_device<span class="op" style="color: #5E5E5E;">=</span>batch.device)</span>
<span id="cb220-8">            centroids_ <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.lookup_centroids(codes_, out_device<span class="op" style="color: #5E5E5E;">=</span>batch.device)</span>
<span id="cb220-9"></span>
<span id="cb220-10">            residuals_ <span class="op" style="color: #5E5E5E;">=</span> (batch <span class="op" style="color: #5E5E5E;">-</span> centroids_)</span>
<span id="cb220-11"></span>
<span id="cb220-12">            codes.append(codes_.cpu())</span>
<span id="cb220-13">            residuals.append(<span class="va" style="color: #111111;">self</span>.binarize(residuals_).cpu())</span>
<span id="cb220-14"></span>
<span id="cb220-15">        codes <span class="op" style="color: #5E5E5E;">=</span> torch.cat(codes)</span>
<span id="cb220-16">        residuals <span class="op" style="color: #5E5E5E;">=</span> torch.cat(residuals)</span>
<span id="cb220-17"></span>
<span id="cb220-18">        <span class="cf" style="color: #003B4F;">return</span> ResidualCodec.Embeddings(codes, residuals)</span></code></pre></div>
<p>We’ve seen <code>compress_into_codes</code> and <code>lookup_centroids</code> before:</p>
<div class="cell" data-outputid="82757a39-cced-4d5c-c8c3-f758c840585d" data-execution_count="102">
<div class="sourceCode cell-code" id="cb221" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb221-1">codes_ <span class="op" style="color: #5E5E5E;">=</span> compressor.compress_into_codes(embs, out_device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda'</span>)</span>
<span id="cb221-2">codes_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>torch.Size([15198])</code></pre>
</div>
</div>
<p>These codes are the centroids ID closest to each token embeddings.</p>
<div class="cell" data-outputid="63da570e-358e-43bd-88c2-f0b1a74b801c" data-execution_count="103">
<div class="sourceCode cell-code" id="cb223" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb223-1">codes_[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="103">
<pre><code>tensor([654, 843, 401, 654, 926], device='cuda:0')</code></pre>
</div>
</div>
<p>We then get those 15198 centroid vectors:</p>
<div class="cell" data-outputid="fda18ac7-ee33-4d4f-ec04-9528e2453ce3" data-execution_count="104">
<div class="sourceCode cell-code" id="cb225" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb225-1">centroids_ <span class="op" style="color: #5E5E5E;">=</span> compressor.lookup_centroids(codes_, out_device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda'</span>)</span>
<span id="cb225-2">centroids_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>torch.Size([15198, 96])</code></pre>
</div>
</div>
<p>A reminder that our centroids and our token embeddings are unit vectors:</p>
<div class="cell" data-outputid="b1543905-9715-4783-b3be-e13eb3094026" data-execution_count="105">
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb227-1">centroids_[<span class="dv" style="color: #AD0000;">0</span>].norm(), embs[<span class="dv" style="color: #AD0000;">0</span>].norm()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>(tensor(1., device='cuda:0', dtype=torch.float16),
 tensor(1., dtype=torch.float16))</code></pre>
</div>
</div>
<p>We then find the residuals between token embeddings and centroids:</p>
<div class="cell" data-outputid="a5dda6a8-5743-4fd3-9b0d-36917f21a02e" data-execution_count="106">
<div class="sourceCode cell-code" id="cb229" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb229-1">residuals_ <span class="op" style="color: #5E5E5E;">=</span> (embs.cpu() <span class="op" style="color: #5E5E5E;">-</span> centroids_.cpu())</span>
<span id="cb229-2">residuals_.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>torch.Size([15198, 96])</code></pre>
</div>
</div>
<p>The next piece is <em>super cool</em>. We <code>binarize</code> the residuals, starting by using <code>bucketize</code>:</p>
<div class="cell" data-outputid="e860a0ef-35b7-4d10-8336-2a3ea3e6bd72" data-execution_count="107">
<div class="sourceCode cell-code" id="cb231" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb231-1">residuals <span class="op" style="color: #5E5E5E;">=</span> torch.bucketize(residuals_.<span class="bu" style="color: null;">float</span>().cpu(), bucket_cutoffs.cpu()).to(dtype<span class="op" style="color: #5E5E5E;">=</span>torch.uint8)</span>
<span id="cb231-2">residuals.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="107">
<pre><code>torch.Size([15198, 96])</code></pre>
</div>
</div>
<div class="cell" data-outputid="e7f706cd-4b35-4663-9d89-d7de3d093130" data-execution_count="108">
<div class="sourceCode cell-code" id="cb233" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb233-1">residuals[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="108">
<pre><code>tensor([8, 7, 7, 8, 7], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="dd9263e6-caaf-48ac-a88f-19c118c8e13b" data-execution_count="109">
<div class="sourceCode cell-code" id="cb235" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb235-1">residuals_[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">
<pre><code>tensor([6.1035e-05, 0.0000e+00, 0.0000e+00, 1.9073e-06, 0.0000e+00],
       dtype=torch.float16)</code></pre>
</div>
</div>
<div class="cell" data-outputid="a952ad43-2fc7-4847-c66d-998ff667af2e" data-execution_count="144">
<div class="sourceCode cell-code" id="cb237" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb237-1">residuals_[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">10</span>:<span class="dv" style="color: #AD0000;">20</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="144">
<pre><code>tensor([ 0.0234, -0.0100,  0.0046, -0.0078, -0.0111,  0.0249, -0.0081, -0.0048,
         0.0270,  0.0037], dtype=torch.float16)</code></pre>
</div>
</div>
<div class="cell" data-outputid="5bbaf19f-fb73-4ba3-98a8-2f0869a7cad8" data-execution_count="110">
<div class="sourceCode cell-code" id="cb239" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb239-1">bucket_cutoffs[<span class="dv" style="color: #AD0000;">6</span>:<span class="dv" style="color: #AD0000;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="110">
<pre><code>tensor([-0.0017,  0.0000,  0.0019,  0.0042], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="6e97f8aa-771d-4d69-df7a-50648e37149f" data-execution_count="111">
<div class="sourceCode cell-code" id="cb241" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb241-1">residuals.<span class="bu" style="color: null;">min</span>(), residuals.<span class="bu" style="color: null;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>(tensor(0, dtype=torch.uint8), tensor(15, dtype=torch.uint8))</code></pre>
</div>
</div>
<p>The values of <code>residuals</code> are now the ID (indices) of the buckets that the residual values fall into!</p>
<div class="cell" data-outputid="f379c67e-3051-4a0e-9d35-33c033a39828" data-execution_count="112">
<div class="sourceCode cell-code" id="cb243" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb243-1">residuals <span class="op" style="color: #5E5E5E;">=</span> residuals.unsqueeze(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>).expand(<span class="op" style="color: #5E5E5E;">*</span>residuals.size(), config.nbits)</span>
<span id="cb243-2">residuals.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="112">
<pre><code>torch.Size([15198, 96, 4])</code></pre>
</div>
</div>
<p>We add a space for 4-bits per residual.</p>
<div class="cell" data-outputid="ebcfa0f0-782f-46d9-b050-0215c1833fb6" data-execution_count="113">
<div class="sourceCode cell-code" id="cb245" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb245-1">arange_bits <span class="op" style="color: #5E5E5E;">=</span> torch.arange(<span class="dv" style="color: #AD0000;">0</span>, config.nbits, device<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'cuda'</span>, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.uint8)</span>
<span id="cb245-2">arange_bits</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>tensor([0, 1, 2, 3], device='cuda:0', dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="a9d88007-2fc8-4d6f-847a-0b6635666954" data-execution_count="114">
<div class="sourceCode cell-code" id="cb247" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb247-1">residuals <span class="op" style="color: #5E5E5E;">=</span> residuals.cpu() <span class="op" style="color: #5E5E5E;">&gt;&gt;</span> arange_bits.cpu()</span>
<span id="cb247-2">residuals.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="114">
<pre><code>torch.Size([15198, 96, 4])</code></pre>
</div>
</div>
<div class="cell" data-outputid="ef3c7ef7-9a30-462a-90ae-a617cf11e584" data-execution_count="115">
<div class="sourceCode cell-code" id="cb249" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb249-1">residuals[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="115">
<pre><code>tensor([[8, 4, 2, 1],
        [7, 3, 1, 0],
        [7, 3, 1, 0],
        [8, 4, 2, 1],
        [7, 3, 1, 0]], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb251" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb251-1">residuals <span class="op" style="color: #5E5E5E;">=</span> residuals <span class="op" style="color: #5E5E5E;">&amp;</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="49ffdff1-767f-4e6d-e76c-7d224a302255" data-execution_count="117">
<div class="sourceCode cell-code" id="cb252" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb252-1">residuals[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="117">
<pre><code>tensor([[0, 0, 0, 1],
        [1, 1, 1, 0],
        [1, 1, 1, 0],
        [0, 0, 0, 1],
        [1, 1, 1, 0]], dtype=torch.uint8)</code></pre>
</div>
</div>
<p>We have now converted the bucket ID into the actual 4-bit binary value it represents.</p>
<div class="cell" data-outputid="3570c048-cb9b-4262-87e9-07ee6275be44" data-execution_count="118">
<div class="sourceCode cell-code" id="cb254" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb254-1">residuals_packed <span class="op" style="color: #5E5E5E;">=</span> np.packbits(np.asarray(residuals.contiguous().flatten()))</span>
<span id="cb254-2">residuals_packed <span class="op" style="color: #5E5E5E;">=</span> torch.as_tensor(residuals_packed, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.uint8)</span>
<span id="cb254-3">residuals_packed <span class="op" style="color: #5E5E5E;">=</span> residuals_packed.reshape(residuals.size(<span class="dv" style="color: #AD0000;">0</span>), config.dim <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">8</span> <span class="op" style="color: #5E5E5E;">*</span> config.nbits)</span>
<span id="cb254-4">residuals_packed.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="118">
<pre><code>torch.Size([15198, 48])</code></pre>
</div>
</div>
<div class="cell" data-outputid="a627b3f7-5234-458e-cef0-c483e854316a" data-execution_count="119">
<div class="sourceCode cell-code" id="cb256" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb256-1">residuals_packed[<span class="dv" style="color: #AD0000;">0</span>][:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="119">
<pre><code>tensor([ 30, 225, 225, 238, 238], dtype=torch.uint8)</code></pre>
</div>
</div>
<div class="cell" data-outputid="68dcabcf-bddb-4463-b81e-8168b29a1fba" data-execution_count="120">
<div class="sourceCode cell-code" id="cb258" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb258-1"><span class="ss" style="color: #20794D;">f"30 in binary: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">bin</span>(<span class="dv" style="color: #AD0000;">30</span>)[<span class="dv" style="color: #AD0000;">2</span>:]<span class="sc" style="color: #5E5E5E;">.</span>zfill(<span class="dv" style="color: #AD0000;">8</span>)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="120">
<pre><code>'30 in binary: 00011110'</code></pre>
</div>
</div>
<p>For each residual vector with 96 values, each value is represented with 4-bits (e.g.&nbsp;0, 0, 0, 1). Every 8 bits are stored into an integer (e.g.&nbsp;0001 and 1110 concatenate to become the integer 30) so we have cut the number of values in half (from 96 to 48).</p>
<p>These residuals would be stored in 0.residuals.pt.</p>
<section id="build_ivf" class="level3">
<h3 class="anchored" data-anchor-id="build_ivf">_build_ivf</h3>
<p>This is a critical piece—the mapping between passages and centroids!</p>
<div class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb260" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb260-1">codes <span class="op" style="color: #5E5E5E;">=</span> codes_.sort()</span>
<span id="cb260-2">ivf, values <span class="op" style="color: #5E5E5E;">=</span> codes.indices, codes.values</span></code></pre></div>
</div>
<p>Token embeddings IDs:</p>
<div class="cell" data-outputid="0a8941c2-e96a-453a-ad35-687d6b05d7fa" data-execution_count="122">
<div class="sourceCode cell-code" id="cb261" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb261-1">ivf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="122">
<pre><code>tensor([  936,  1171,  2363,  ..., 12051, 12147, 12161], device='cuda:0')</code></pre>
</div>
</div>
<p>Centroid IDs:</p>
<div class="cell" data-outputid="9c575499-74e7-437c-a7ec-3f6224bdace3" data-execution_count="123">
<div class="sourceCode cell-code" id="cb263" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb263-1">values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="123">
<pre><code>tensor([   0,    0,    0,  ..., 1023, 1023, 1023], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="2625c9fd-341c-43fa-cc67-8cd42aab05b0" data-execution_count="124">
<div class="sourceCode cell-code" id="cb265" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb265-1">ivf.shape, values.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="124">
<pre><code>(torch.Size([15198]), torch.Size([15198]))</code></pre>
</div>
</div>
<p><code>ivf</code> contains the token embedding ID (the indices of <code>codes_</code>) and <code>values</code> contains the centroid ID (the values of <code>codes_</code>).</p>
<p>We then get the number of tokens per centroid ID:</p>
<div class="cell" data-outputid="c9f64c61-1c04-4218-fbe1-7ee963268021" data-execution_count="125">
<div class="sourceCode cell-code" id="cb267" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb267-1">ivf_lengths <span class="op" style="color: #5E5E5E;">=</span> torch.bincount(values, minlength<span class="op" style="color: #5E5E5E;">=</span>num_partitions)</span>
<span id="cb267-2">ivf_lengths</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="125">
<pre><code>tensor([10, 11, 17,  ..., 17,  9, 29], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="cb4967d4-6fa5-46dc-9a60-1e2fce30a0a5" data-execution_count="126">
<div class="sourceCode cell-code" id="cb269" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb269-1">ivf_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="126">
<pre><code>torch.Size([1024])</code></pre>
</div>
</div>
<div class="cell" data-outputid="ab06f90b-3457-4c00-97f5-e332b495a3a7" data-execution_count="127">
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb271-1">ivf_lengths.<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="127">
<pre><code>tensor(15198, device='cuda:0')</code></pre>
</div>
</div>
</section>
<section id="colbertindexingutils.py-optimize_ivf" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingutils.py-optimize_ivf">colbert/indexing/utils.py: optimize_ivf</h3>
<p>We have 1000 documents containing a total of 15198 tokens.</p>
<div class="cell" data-outputid="36918e33-d687-4eb3-f114-0b0dfbc6ca7e" data-execution_count="128">
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb273-1">total_num_embeddings <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(doclens)</span>
<span id="cb273-2"><span class="bu" style="color: null;">len</span>(doclens), total_num_embeddings</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="128">
<pre><code>(1000, 15198)</code></pre>
</div>
</div>
<p>Instantiating an empty mapping between token embeddings IDs and passage IDs</p>
<div class="cell" data-outputid="349ec960-7935-41db-ead6-9b1e4d4f4175" data-execution_count="129">
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb275-1">emb2pid <span class="op" style="color: #5E5E5E;">=</span> torch.zeros(total_num_embeddings, dtype<span class="op" style="color: #5E5E5E;">=</span>torch.<span class="bu" style="color: null;">int</span>)</span>
<span id="cb275-2">emb2pid.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="129">
<pre><code>torch.Size([15198])</code></pre>
</div>
</div>
<p>The indices of <code>doclens</code> are passage IDs <code>pid</code>. The values are the number of tokens in the document <code>dlength</code>.</p>
<div class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb277-1">offset_doclens <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb277-2"><span class="cf" style="color: #003B4F;">for</span> pid, dlength <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(doclens):</span>
<span id="cb277-3">    emb2pid[offset_doclens: offset_doclens <span class="op" style="color: #5E5E5E;">+</span> dlength] <span class="op" style="color: #5E5E5E;">=</span> pid</span>
<span id="cb277-4">    offset_doclens <span class="op" style="color: #5E5E5E;">+=</span> dlength</span></code></pre></div>
</div>
<div class="cell" data-outputid="abd41ab8-b033-4cab-f477-0020bca35b9b" data-execution_count="131">
<div class="sourceCode cell-code" id="cb278" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb278-1">emb2pid.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>torch.Size([15198])</code></pre>
</div>
</div>
<p>The first 4 token embeddings correspond to the first passage, the next 20 token embeddings to the second passage, and so on.</p>
<div class="cell" data-outputid="185d9dde-73dd-4676-972d-110d141244dd" data-execution_count="132">
<div class="sourceCode cell-code" id="cb280" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb280-1">emb2pid[:<span class="dv" style="color: #AD0000;">50</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="132">
<pre><code>tensor([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3,
        3, 3], dtype=torch.int32)</code></pre>
</div>
</div>
<p>Recall that <code>ivf</code> contained as values the token embeddings IDs which are the indices of <code>emb2pid</code>. The values of <code>emb2pid</code> are passage IDs. Indexing into <code>emb2pid</code> with <code>ivf</code> pulls out the passage IDs corresponding to tokens. Note that <code>ivf</code> is sorted by centroid ID.</p>
<div class="cell" data-outputid="9a5ff539-5781-4b8a-909d-d71e67b45e4f" data-execution_count="133">
<div class="sourceCode cell-code" id="cb282" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb282-1">ivf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="133">
<pre><code>tensor([  936,  1171,  2363,  ..., 12051, 12147, 12161], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="2d3478d4-a6db-435d-84c3-26586af708e8" data-execution_count="134">
<div class="sourceCode cell-code" id="cb284" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb284-1">values</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="134">
<pre><code>tensor([   0,    0,    0,  ..., 1023, 1023, 1023], device='cuda:0')</code></pre>
</div>
</div>
<div class="cell" data-outputid="c8de26e5-55cc-47fa-9211-ec2d3137c285" data-execution_count="135">
<div class="sourceCode cell-code" id="cb286" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb286-1">new_ivf <span class="op" style="color: #5E5E5E;">=</span> emb2pid[ivf.cpu()]</span>
<span id="cb286-2">new_ivf.shape, new_ivf[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="135">
<pre><code>(torch.Size([15198]), tensor([ 55,  69, 143, 416, 471], dtype=torch.int32))</code></pre>
</div>
</div>
<div class="cell" data-outputid="8b3ce2a7-0e4c-4f41-fc9f-c2c0a711cf76" data-execution_count="136">
<div class="sourceCode cell-code" id="cb288" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb288-1">new_ivf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="136">
<pre><code>tensor([ 55,  69, 143,  ..., 795, 800, 800], dtype=torch.int32)</code></pre>
</div>
</div>
<p>The first token embedding corresponding to centroid ID of 0 corresponds to passage ID 55.</p>
<div class="cell" data-outputid="3422eb75-44e7-4bf3-e2c9-393a22fbb47f" data-execution_count="137">
<div class="sourceCode cell-code" id="cb290" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb290-1">emb2pid[<span class="dv" style="color: #AD0000;">936</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="137">
<pre><code>tensor(55, dtype=torch.int32)</code></pre>
</div>
</div>
<p><code>new_ivf</code> is a mapping from its indices (token embeddings) to values (passage IDs) which is now aligned to the <code>ivf_lengths</code> tensor which contains number of tokens per centroid ID (which came from <code>values</code>).</p>
<p>Next, we iterate through <code>ivf_lengths</code>, which contains the number of tokens per centroid ID. For each <code>length</code> we get the unique passages IDs from <code>new_ivf</code>, and append that to <code>unique_pids_per_centroid</code>. The number of unique pids for that centroid is added to <code>new_ivf_lengths</code>.</p>
<div class="cell" data-outputid="e0a2e628-3973-4569-d3fe-0fd919828152" data-execution_count="138">
<div class="sourceCode cell-code" id="cb292" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb292-1">unique_pids_per_centroid <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb292-2">new_ivf_lengths <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb292-3"></span>
<span id="cb292-4">offset <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb292-5"><span class="cf" style="color: #003B4F;">for</span> length <span class="kw" style="color: #003B4F;">in</span> tqdm.tqdm(ivf_lengths.tolist()):</span>
<span id="cb292-6">    pids <span class="op" style="color: #5E5E5E;">=</span> torch.unique(new_ivf[offset:offset<span class="op" style="color: #5E5E5E;">+</span>length])</span>
<span id="cb292-7">    unique_pids_per_centroid.append(pids)</span>
<span id="cb292-8">    new_ivf_lengths.append(pids.shape[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb292-9">    offset <span class="op" style="color: #5E5E5E;">+=</span> length</span>
<span id="cb292-10">ivf <span class="op" style="color: #5E5E5E;">=</span> torch.cat(unique_pids_per_centroid)</span>
<span id="cb292-11">new_ivf_lengths <span class="op" style="color: #5E5E5E;">=</span> torch.tensor(new_ivf_lengths)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 1024/1024 [00:00&lt;00:00, 35975.77it/s]
&lt;ipython-input-138-6c68981e98f9&gt;:11: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  new_ivf_lengths = torch.tensor(ivf_lengths)</code></pre>
</div>
</div>
<div class="cell" data-outputid="037fa496-6036-491b-ee1b-8ccbd2686e75" data-execution_count="139">
<div class="sourceCode cell-code" id="cb294" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb294-1">ivf.shape, new_ivf_lengths.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>(torch.Size([11593]), torch.Size([1024]))</code></pre>
</div>
</div>
<p>Note that there are now fewer values in <code>ivf</code> than 15198 since we are only capturing the unique pids per centroid.</p>
<div class="cell" data-outputid="c0dd2e47-ad6c-4298-e895-dcfd39ff4898" data-execution_count="140">
<div class="sourceCode cell-code" id="cb296" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb296-1">ivf[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="140">
<pre><code>tensor([ 55,  69, 143, 416, 471], dtype=torch.int32)</code></pre>
</div>
</div>
<div class="cell" data-outputid="1b6b71a0-fe95-40a4-ad3e-8dd8c089d87d" data-execution_count="141">
<div class="sourceCode cell-code" id="cb298" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb298-1">new_ivf_lengths[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="141">
<pre><code>tensor([10, 11, 17,  1, 34], device='cuda:0')</code></pre>
</div>
</div>
<p><code>new_ivf_lengths</code> is the count of unique passage IDs per centroid. So, for example the first 10 pids correspond to centroid ID <code>0</code>.</p>
<p><code>ivf</code> and <code>new_ivf_lengths</code> would be stored in ivf.pid.pt.</p>
<p>After updating metadata, this completes the indexing process in RAGatouille and ColBERT!</p>
</section>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>There were of course many details that I didn’t fully explain in this walkthrough, and since I wasn’t able to exactly replicate some of the indexing artifacts there may be some errors in my code, but I think I both covered and understood the main components to creating an index. Getting to this stage involved a <em>lot</em> of discussion with Claude. I used AnswerAI’s toolslm to create context from the RAGatouille and ColBERT repos to provide as Claude project knowledge. I also pored through the codebase for hours, making sure to trace my steps from method-to-method. While I could do more deep dives into the individual components of indexing, I feel satisfied with this walk through for now. I hope you enjoyed this blog post!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>machine learning</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-03-12-RAGatouille-ColBERT-Indexing-Deep-Dive/index.html</guid>
  <pubDate>Wed, 12 Mar 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: PeftModel Base Model Behavior</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-03-10-TIL-PeftModel-Behavior/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>In this TIL blog post I share some unexpected behavior when using <code>PeftModel</code>. In short, when merging LoRA adapter weights with the base model, the base model gets overwritten. While unexpected, in hindsight this makes sense if you want to minimize memory usage.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> transformers <span class="im" style="color: #00769E;">import</span> AutoModelForCausalLM</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> peft <span class="im" style="color: #00769E;">import</span> PeftModel</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> psutil</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> copy</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> gc</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> google.colab <span class="im" style="color: #00769E;">import</span> userdata</span>
<span id="cb2-2"></span>
<span id="cb2-3">os.environ[<span class="st" style="color: #20794D;">'HUGGING_FACE_HUB_TOKEN'</span>] <span class="op" style="color: #5E5E5E;">=</span> userdata.get(<span class="st" style="color: #20794D;">'HUGGING_FACE_HUB_TOKEN'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> _mem(): <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"RAM Usage: </span><span class="sc" style="color: #5E5E5E;">{</span>psutil<span class="sc" style="color: #5E5E5E;">.</span>virtual_memory()<span class="sc" style="color: #5E5E5E;">.</span>percent<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">% (Used: </span><span class="sc" style="color: #5E5E5E;">{</span>psutil<span class="sc" style="color: #5E5E5E;">.</span>virtual_memory()<span class="sc" style="color: #5E5E5E;">.</span>used <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">3</span>)<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;"> GB / Total: </span><span class="sc" style="color: #5E5E5E;">{</span>psutil<span class="sc" style="color: #5E5E5E;">.</span>virtual_memory()<span class="sc" style="color: #5E5E5E;">.</span>total <span class="op" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">3</span>)<span class="sc" style="color: #5E5E5E;">:.2f}</span><span class="ss" style="color: #20794D;"> GB)"</span>)</span></code></pre></div>
</div>
</section>
<section id="merging-lora-adapter-weights" class="level2">
<h2 class="anchored" data-anchor-id="merging-lora-adapter-weights">Merging LoRA Adapter Weights</h2>
<p>Before loading any model, here is the memory usage. I’m using an A100 GPU with Colab Pro.</p>
<div class="cell" data-outputid="b461255e-c263-4bba-c06b-4148a74092f9" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 3.5% (Used: 2.10 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">base_model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;">"meta-llama/Llama-2-7b-hf"</span>).to(<span class="st" style="color: #20794D;">"cpu"</span>)</span></code></pre></div>
</div>
<p>After loading the base model (Llama2-7B) the memory usage increases to 27GB.</p>
<div class="cell" data-outputid="8bf9d682-b07b-4bc0-c632-3081f1f8dce6" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 33.8% (Used: 27.35 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<p>Loading the LoRA adapter weights increases the memory usage to 28 GB.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model_to_merge <span class="op" style="color: #5E5E5E;">=</span> PeftModel.from_pretrained(</span>
<span id="cb9-2">    model<span class="op" style="color: #5E5E5E;">=</span>base_model,</span>
<span id="cb9-3">    model_id<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"LoRA-TMLR-2024/magicoder-lora-rank-64-alpha-128"</span></span>
<span id="cb9-4">).to(<span class="st" style="color: #20794D;">"cpu"</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="c5110313-9aa0-4808-dd9f-36ab1d38cb0b" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 34.8% (Used: 28.22 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">merged_model <span class="op" style="color: #5E5E5E;">=</span> model_to_merge.merge_and_unload()</span></code></pre></div>
</div>
<p>Merging the model essentially keeps the memory usage constant at 28GB.</p>
<div class="cell" data-outputid="53481002-dcec-4742-84c1-ed3e7770493f" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 34.9% (Used: 28.28 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
</section>
<section id="comparing-base_model-and-merged_model-weights" class="level2">
<h2 class="anchored" data-anchor-id="comparing-base_model-and-merged_model-weights">Comparing <code>base_model</code> and <code>merged_model</code> Weights</h2>
<p>However, saving memory comes at a cost! You no longer have access to the base model. I’ll first do a visual inspection of one of the weight matrices.</p>
<div class="cell" data-outputid="71d52a31-eed0-4dec-f48c-bf132f221ed5" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">base_model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.weight</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>Parameter containing:
tensor([[-0.0020, -0.0156,  0.0023,  ...,  0.0098, -0.0017, -0.0031],
        [ 0.0283, -0.0176,  0.0062,  ..., -0.0076,  0.0004,  0.0087],
        [-0.0230,  0.0225,  0.0001,  ...,  0.0028,  0.0190, -0.0063],
        ...,
        [ 0.0003,  0.0016, -0.0013,  ...,  0.0081, -0.0308,  0.0110],
        [ 0.0259,  0.0203,  0.0045,  ..., -0.0310, -0.0147, -0.0111],
        [-0.0077, -0.0174,  0.0012,  ...,  0.0182,  0.0181, -0.0070]])</code></pre>
</div>
</div>
<div class="cell" data-outputid="9b2f1df8-7c78-4f23-ef3b-77c2b981ff99" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">merged_model.model.layers[<span class="dv" style="color: #AD0000;">0</span>].self_attn.q_proj.weight</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Parameter containing:
tensor([[-0.0020, -0.0156,  0.0023,  ...,  0.0098, -0.0017, -0.0031],
        [ 0.0283, -0.0176,  0.0062,  ..., -0.0076,  0.0004,  0.0087],
        [-0.0230,  0.0225,  0.0001,  ...,  0.0028,  0.0190, -0.0063],
        ...,
        [ 0.0003,  0.0016, -0.0013,  ...,  0.0081, -0.0308,  0.0110],
        [ 0.0259,  0.0203,  0.0045,  ..., -0.0310, -0.0147, -0.0111],
        [-0.0077, -0.0174,  0.0012,  ...,  0.0182,  0.0181, -0.0070]])</code></pre>
</div>
</div>
<p>Both matrices are equal. Analyzing weight matrix differences more systematically:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;">def</span> _diffs(model1, model2):</span>
<span id="cb19-2">    n_diff <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-3">    <span class="cf" style="color: #003B4F;">for</span> layer_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">32</span>):</span>
<span id="cb19-4">        <span class="cf" style="color: #003B4F;">for</span> component <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"q_proj"</span>, <span class="st" style="color: #20794D;">"k_proj"</span>, <span class="st" style="color: #20794D;">"o_proj"</span>, <span class="st" style="color: #20794D;">"v_proj"</span>]:</span>
<span id="cb19-5">            W1 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(model1.model.layers[layer_idx].self_attn, component).weight</span>
<span id="cb19-6">            W2<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(model2.model.layers[layer_idx].self_attn, component).weight</span>
<span id="cb19-7">            <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> torch.allclose(W1, W2, rtol<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-5</span>, atol<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-8</span>): n_diff <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-8">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Different Self-Attention Matrices: </span><span class="sc" style="color: #5E5E5E;">{</span>n_diff<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb19-9">    n_diff <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb19-10">    <span class="cf" style="color: #003B4F;">for</span> layer_idx <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">32</span>):</span>
<span id="cb19-11">        <span class="cf" style="color: #003B4F;">for</span> component <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">"up_proj"</span>, <span class="st" style="color: #20794D;">"down_proj"</span>, <span class="st" style="color: #20794D;">"gate_proj"</span>]:</span>
<span id="cb19-12">            W1 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(model1.model.layers[layer_idx].mlp, component).weight</span>
<span id="cb19-13">            W2 <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">getattr</span>(model2.model.layers[layer_idx].mlp, component).weight</span>
<span id="cb19-14">            <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> torch.allclose(W1, W2, rtol<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-5</span>, atol<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1e-8</span>): n_diff <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb19-15">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Different MLP Weight Matrices: </span><span class="sc" style="color: #5E5E5E;">{</span>n_diff<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
</div>
<div class="cell" data-outputid="3725270e-f6e2-494a-ea46-28c2fa835116" data-execution_count="21">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">_diffs(base_model, merged_model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Different Self-Attention Matrices: 0
Different MLP Weight Matrices: 0</code></pre>
</div>
</div>
<p>For both self-attention and MLP modules, all weight matrices between the <code>base_model</code> and the <code>merged_model</code> are the same. Using the <code>is</code> operator we can see that they reference the same object in memory (which is where the memory savings come from):</p>
<div class="cell" data-outputid="f6d7747c-a8d9-4c32-8172-0b6ba59831ed" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">base_model <span class="kw" style="color: #003B4F;">is</span> merged_model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="copying-the-base-model-for-comparison" class="level2">
<h2 class="anchored" data-anchor-id="copying-the-base-model-for-comparison">Copying the Base Model for Comparison</h2>
<p>I’ll now load the base model again to compare with the merged model weights.</p>
<div class="cell" data-outputid="7cefff4e-025f-4b4c-bff5-09676d8af019" data-execution_count="24">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 35.4% (Used: 28.68 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;">del</span> base_model</span></code></pre></div>
</div>
<div class="cell" data-outputid="213ac2ca-846f-4460-cce6-4b4bed5ad05f" data-execution_count="27">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">gc.collect()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>483</code></pre>
</div>
</div>
<div class="cell" data-outputid="8a10f443-157a-456a-cb0a-34e11771d03b" data-execution_count="54">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 35.5% (Used: 28.78 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<p>Note that deleting the base model did not change the memory usage.</p>
<div class="cell" data-outputid="74341ad5-ee28-474b-d505-0a5f04e140e5" data-execution_count="55">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">base_model <span class="op" style="color: #5E5E5E;">=</span> AutoModelForCausalLM.from_pretrained(<span class="st" style="color: #20794D;">"meta-llama/Llama-2-7b-hf"</span>).to(<span class="st" style="color: #20794D;">"cpu"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"ee5aafe00d32446f95ab002be2ec8fcc","version_major":2,"version_minor":0}
</script>
</div>
</div>
<div class="cell" data-outputid="faa5c925-2fdc-45b9-b943-07f8baf2e19c" data-execution_count="56">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">_mem()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>RAM Usage: 65.7% (Used: 53.94 GB / Total: 83.48 GB)</code></pre>
</div>
</div>
<p>With a new base model loaded, the memory usage jumps up to 54 GB.</p>
<div class="cell" data-outputid="83d16db7-457a-4ca2-c6a9-f24e099d27c6" data-execution_count="57">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">_diffs(base_model, merged_model)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Different Self-Attention Matrices: 128
Different MLP Weight Matrices: 96</code></pre>
</div>
</div>
<p>There are 32 layers in this Llama model, and each model’s self-attention module has 4 weight matrices we are comparing, resulting in 128 matrices in total. The MLP module has 3 weight matrices we are comparing, resulting in 96 total across the model. The base model and merged model are fully different models (in terms of weight matrix values).</p>
</section>
<section id="using-.get_base_model" class="level2">
<h2 class="anchored" data-anchor-id="using-.get_base_model">Using <code>.get_base_model</code></h2>
<p>Looking at the <code>PeftModel</code> documentation, I noted the method <code>get_base_model</code> which seems relevant to this exercise. However, using that method results in the same weights as the merged model:</p>
<div class="cell" data-outputid="6ba3da16-ba96-4c24-9b8b-d0abcff91230" data-execution_count="59">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">model_to_merge.get_base_model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<div style="max-width:800px; border: 1px solid var(--colab-border-color);"><style>
      pre.function-repr-contents {
        overflow-x: auto;
        padding: 8px 12px;
        max-height: 500px;
      }

      pre.function-repr-contents.function-repr-contents-collapsed {
        cursor: pointer;
        max-height: 100px;
      }
    </style>
    <pre style="white-space: initial; background:
         var(--colab-secondary-surface-color); padding: 8px 12px;
         border-bottom: 1px solid var(--colab-border-color);"><b>peft.peft_model.PeftModel.get_base_model</b><br>def get_base_model() -&gt; torch.nn.Module</pre><pre class="function-repr-contents function-repr-contents-collapsed" style="">/usr/local/lib/python3.11/dist-packages/peft/peft_model.pyReturns the base model.</pre>
      <script>
      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {
        for (const element of document.querySelectorAll('.filepath')) {
          element.style.display = 'block'
          element.onclick = (event) => {
            event.preventDefault();
            event.stopPropagation();
            google.colab.files.view(element.textContent, 912);
          };
        }
      }
      for (const element of document.querySelectorAll('.function-repr-contents')) {
        element.onclick = (event) => {
          event.preventDefault();
          event.stopPropagation();
          element.classList.toggle('function-repr-contents-collapsed');
        };
      }
      </script>
      </div>
</div>
</div>
<div class="cell" data-outputid="28cc252a-570d-41b6-cecd-2a7dbbab953d" data-execution_count="60">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">_diffs(merged_model, model_to_merge.get_base_model())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Different Self-Attention Matrices: 0
Different MLP Weight Matrices: 0</code></pre>
</div>
</div>
<hr>
<p>I am planning to do more of these short TIL blog posts this year! It helps me solidify concepts as I come across them. I hope you enjoyed this blog post!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>deep learning</category>
  <category>machine learning</category>
  <category>LLM</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-03-10-TIL-PeftModel-Behavior/index.html</guid>
  <pubDate>Mon, 10 Mar 2025 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Memory Profiling raw ColBERT and RAGatouille</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>A disclaimer: this is the first time I’ve done memory profiling, and while I’ve probably spent 8-10 hours <a href="https://vishalbakshi.github.io/blog/posts/2024-12-24-PLAID-ColBERTv2-scoring-pipeline/">poring through the RAGatouille and ColBERT codebases</a> I still consider myself a beginner, and don’t have a solid mental model of how indexing (and search) work.</p>
<p>With that out of the way, let’s dig in!</p>
<p><a href="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/">In a previous blog post</a> I used <code>psutil.Process().memory_info().rss</code> in a separate thread to monitor memory usage while indexing 100k, 250k, 500k, 1M and 2M documents from the Genomics datasets (via UKPLab/DAPR) with RAGatouille. I have also run this for raw ColBERT. Here’s an example comparison (for 250k docs on an RTX6000Ada instance) with RAGatouille on the left and raw ColBERT on the right:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="CPU memory usage while indexing 250k documents" data-gallery="quarto-lightbox-gallery-1"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">CPU memory usage while indexing 250k documents</figcaption><p></p>
</figure>
</div>
<p>While the peak memory increased with number of documents, they all follow the same trend. ColBERT always has a significantly lower peak memory. The ColBERT runs in total took about an hour and the RAGatouille runs took about 1.5 hours. Comparison of all collection sizes can be seen in <a href="https://github.com/vishalbakshi/RAGatouille/tree/profiling/profiling_results/memory_time_plots">this folder</a>.</p>
<p>In this blog post I go deeper and use the <code>memory_profiler</code> package to understand how much memory is being consumed by different functions down the chain of calls when you index 100k, 250k, 500k, 1M and 2M documents using raw ColBERT and RAGatouille. For all of these runs I use a RTX6000Ada instance on Jarvis Labs. When using RAGatouille, I execute all runs with <code>use_faiss=False</code> (since that’s the default value in RAGatouille) and runs of 100k, 250k and 500k with <code>use_faiss=True</code>.</p>
</section>
<section id="repo-setup-and-installation" class="level2">
<h2 class="anchored" data-anchor-id="repo-setup-and-installation">Repo Setup and Installation</h2>
<p>Since I needed to add the <code>@profile</code> decorator above each function I wanted to profile, I created my own forks of the raw ColBERT and RAGatouille repos and created a <code>profiling</code> branch. Since RAGatouille is built on top of ColBERT, I switched the <code>colbert-ai</code> dependency in my RAGatouille fork from <code>"colbert-ai&gt;=0.2.19"</code> to:</p>
<pre><code>"colbert-ai @ git+https://github.com/vishalbakshi/ColBERT.git@profiling"</code></pre>
<p>I also added <code>memory-profiler</code> as a dependency for both ColBERT and RAGatouille.</p>
<p>I used the terminal for all experiments. Here are the commands to install RAGatouille:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;">python</span> <span class="at" style="color: #657422;">-m</span> venv ragatouille-env</span>
<span id="cb2-2"><span class="bu" style="color: null;">source</span> ragatouille-env/bin/activate</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">git</span> clone <span class="at" style="color: #657422;">-b</span> profiling https://github.com/vishalbakshi/RAGatouille.git</span>
<span id="cb2-4"><span class="bu" style="color: null;">cd</span> RAGatouille</span>
<span id="cb2-5"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-e</span> .</span>
<span id="cb2-6"><span class="ex" style="color: null;">pip</span> install datasets</span>
<span id="cb2-7"><span class="ex" style="color: null;">pip</span> uninstall <span class="at" style="color: #657422;">--y</span> faiss-cpu</span>
<span id="cb2-8"><span class="ex" style="color: null;">pip</span> install faiss-gpu-cu12</span></code></pre></div>
<p>Note that I uninstalled <code>faiss-cpu</code> and installed <code>faiss-gpu-cu12</code>.</p>
<p>Here are the commands to install ColBERT (which took considerably more effort, and assistance from Claude, to figure out):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="fu" style="color: #4758AB;">git</span> clone <span class="at" style="color: #657422;">-b</span> profiling https://github.com/vishalbakshi/ColBERT.git</span>
<span id="cb3-2"><span class="bu" style="color: null;">cd</span> ColBERT</span>
<span id="cb3-3"><span class="ex" style="color: null;">conda</span> env create <span class="at" style="color: #657422;">-f</span> conda_env.yml</span>
<span id="cb3-4"><span class="ex" style="color: null;">conda</span> init</span>
<span id="cb3-5"><span class="bu" style="color: null;">source</span> ~/.bashrc</span>
<span id="cb3-6"><span class="ex" style="color: null;">conda</span> activate colbert</span>
<span id="cb3-7"><span class="ex" style="color: null;">pip</span> install <span class="at" style="color: #657422;">-e</span> .</span>
<span id="cb3-8"><span class="ex" style="color: null;">conda</span> remove <span class="at" style="color: #657422;">-y</span> <span class="at" style="color: #657422;">--force</span> pytorch torchvision torchaudio cudatoolkit</span>
<span id="cb3-9"><span class="ex" style="color: null;">pip3</span> install torch torchvision torchaudio <span class="at" style="color: #657422;">--index-url</span> https://download.pytorch.org/whl/cu118</span>
<span id="cb3-10"><span class="ex" style="color: null;">apt-get</span> update</span>
<span id="cb3-11"><span class="ex" style="color: null;">apt-get</span> install <span class="at" style="color: #657422;">-y</span> gcc-11 g++-11</span>
<span id="cb3-12"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CC</span><span class="op" style="color: #5E5E5E;">=</span>gcc-11</span>
<span id="cb3-13"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CXX</span><span class="op" style="color: #5E5E5E;">=</span>g++-11</span></code></pre></div>
<p>I had to uninstall pytorch, torchvision, torchaudio, cudatoolkit and reinstall them to resolve the following error:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"/home/ColBERT/colbert/utils/utils.py"</span>, line 3, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-2">    <span class="ex" style="color: null;">import</span> torch</span>
<span id="cb4-3">  <span class="ex" style="color: null;">File</span> <span class="st" style="color: #20794D;">"/root/miniconda3/envs/colbert/lib/python3.8/site-packages/torch/__init__.py"</span>, line 218, in <span class="op" style="color: #5E5E5E;">&lt;</span>module<span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb4-4">    <span class="ex" style="color: null;">from</span> torch._C import <span class="pp" style="color: #AD0000;">*</span>  <span class="co" style="color: #5E5E5E;"># noqa: F403</span></span>
<span id="cb4-5"><span class="ex" style="color: null;">ImportError:</span> /root/miniconda3/envs/colbert/lib/python3.8/site-packages/torch/lib/libtorch_cpu.so: undefined symbol: iJIT_NotifyEvent</span></code></pre></div>
<p>The last four commands I ran:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">apt-get</span> update</span>
<span id="cb5-2"><span class="ex" style="color: null;">apt-get</span> install <span class="at" style="color: #657422;">-y</span> gcc-11 g++-11</span>
<span id="cb5-3"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CC</span><span class="op" style="color: #5E5E5E;">=</span>gcc-11</span>
<span id="cb5-4"><span class="bu" style="color: null;">export</span> <span class="va" style="color: #111111;">CXX</span><span class="op" style="color: #5E5E5E;">=</span>g++-11</span></code></pre></div>
<p>Resolved <code>fatal error: crypt.h: No such file or directory</code>/<code>ninja: build stopped: subcommand failed</code> as is detailed in ColBERT issue <a href="https://github.com/stanford-futuredata/ColBERT/issues/371">#371</a>.</p>
</section>
<section id="functions-selected-for-profiling" class="level2">
<h2 class="anchored" data-anchor-id="functions-selected-for-profiling">Functions Selected for Profiling</h2>
<p>I determined which functions to profile by trial and error, adding/removing the <code>@profile</code> decorator to see which function was being called. Again, lots of Claude assistance was needed. Here are the filenames and method names that I chose to profile:</p>
<section id="colbert" class="level3">
<h3 class="anchored" data-anchor-id="colbert">ColBERT</h3>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Filename</th>
<th style="text-align: center;">Method</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">indexer.py</td>
<td style="text-align: center;"><code>index</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexer.py</td>
<td style="text-align: center;"><code>__launch</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>encode</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>run</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>setup</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>__sample_pids</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>__sample_embeddings</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">indexing/collection_indexer.py</td>
<td style="text-align: center;"><code>encoder.encode_passages</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>launch</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>launch_without_fork</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>run_process_without_mp</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">infra/launcher.py</td>
<td style="text-align: center;"><code>callee</code></td>
</tr>
</tbody>
</table>
</section>
<section id="ragatouille" class="level3">
<h3 class="anchored" data-anchor-id="ragatouille">RAGatouille</h3>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">Filename</th>
<th style="text-align: center;">Method</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RAGPretrainedModel.py</td>
<td style="text-align: center;"><code>_process_corpus</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGPretrainedModel.py</td>
<td style="text-align: center;"><code>model.index</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/colbert.py</td>
<td style="text-align: center;"><code>ModelIndexFactory.construct</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.__init__</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.construct</code></td>
</tr>
<tr class="even">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.build</code></td>
</tr>
<tr class="odd">
<td style="text-align: center;">models/index.py</td>
<td style="text-align: center;"><code>PLAIDModelIndex.indexer.index</code></td>
</tr>
</tbody>
</table>
<p>Note that in RAGatouille, <code>PLAIDModelIndex.indexer</code> is of class <code>Indexer</code> which is imported from ColBERT, so I understood this to be the “bridge” between the RAGatouille and ColBERT repos during profiling.</p>
</section>
</section>
<section id="scripts" class="level2">
<h2 class="anchored" data-anchor-id="scripts">Scripts</h2>
<p>Here’s the script for indexing using ColBERT:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;">import</span> colbert</span>
<span id="cb6-2"><span class="im" style="color: #00769E;">from</span> colbert <span class="im" style="color: #00769E;">import</span> Indexer, Searcher</span>
<span id="cb6-3"><span class="im" style="color: #00769E;">from</span> colbert.infra <span class="im" style="color: #00769E;">import</span> Run, RunConfig, ColBERTConfig</span>
<span id="cb6-4"><span class="im" style="color: #00769E;">from</span> colbert.data <span class="im" style="color: #00769E;">import</span> Queries, Collection</span>
<span id="cb6-5"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb6-6"><span class="im" style="color: #00769E;">from</span> memory_profiler <span class="im" style="color: #00769E;">import</span> profile</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="at" style="color: #657422;">@profile</span></span>
<span id="cb6-9"><span class="kw" style="color: #003B4F;">def</span> _index(indexer, name, collection):</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;">return</span> indexer.index(name<span class="op" style="color: #5E5E5E;">=</span>name, collection<span class="op" style="color: #5E5E5E;">=</span>collection, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="kw" style="color: #003B4F;">def</span> main():</span>
<span id="cb6-13">    nbits <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2</span>  </span>
<span id="cb6-14">    ndocs <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">100_000</span></span>
<span id="cb6-15">    dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Genomics"</span></span>
<span id="cb6-16">    index_name <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.</span><span class="sc" style="color: #5E5E5E;">{</span>nbits<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">bits'</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">    passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb6-19">    checkpoint <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'answerdotai/answerai-colbert-small-v1'</span></span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;">with</span> Run().context(RunConfig(nranks<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, experiment<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'notebook'</span>)):</span>
<span id="cb6-22">        config <span class="op" style="color: #5E5E5E;">=</span> ColBERTConfig(doc_maxlen<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, nbits<span class="op" style="color: #5E5E5E;">=</span>nbits, kmeans_niters<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, avoid_fork_if_possible<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-23">        indexer <span class="op" style="color: #5E5E5E;">=</span> Indexer(checkpoint<span class="op" style="color: #5E5E5E;">=</span>checkpoint, config<span class="op" style="color: #5E5E5E;">=</span>config)</span>
<span id="cb6-24">        _index(indexer, index_name, passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>])</span>
<span id="cb6-25"></span>
<span id="cb6-26"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'__main__'</span>:</span>
<span id="cb6-27">    main()</span></code></pre></div>
<p>and the script for RAGatouille:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> memory_profiler <span class="im" style="color: #00769E;">import</span> profile</span>
<span id="cb7-2"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb7-3"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb7-4"></span>
<span id="cb7-5">dataset_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Genomics"</span></span>
<span id="cb7-6">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb7-7">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb7-8">ndocs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">250_000</span></span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="at" style="color: #657422;">@profile</span></span>
<span id="cb7-11"><span class="kw" style="color: #003B4F;">def</span> _index():</span>
<span id="cb7-12">    <span class="cf" style="color: #003B4F;">return</span> RAG.index(</span>
<span id="cb7-13">        index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb7-14">        collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb7-15">        document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>],</span>
<span id="cb7-16">        use_faiss<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span> <span class="co" style="color: #5E5E5E;"># or False</span></span>
<span id="cb7-17">    )</span>
<span id="cb7-18"></span>
<span id="cb7-19">_index()</span></code></pre></div>
<p>Finally, here’s the terminal command to run the scripts and profile them:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;">python</span> <span class="at" style="color: #657422;">-m</span> memory_profiler ../colbert_index_2M.py <span class="op" style="color: #5E5E5E;">&gt;</span> ../colbert_2M_RTX6000Ada.txt</span></code></pre></div>
</section>
<section id="profiling-results" class="level2">
<h2 class="anchored" data-anchor-id="profiling-results">Profiling Results</h2>
<p>The profile logs were 400+ lines each (you can see the full files <a href="https://github.com/vishalbakshi/RAGatouille/tree/profiling/profiling_results">here</a>) so I have only included some of the lines with non-zero memory changes. I have showed the starting memory, memory increment and final memory.</p>
<p>Here’s how I’m interpreting the profiler logs–given this log:</p>
<pre><code>Filename: /home/RAGatouille/ragatouille/models/index.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   198   3406.4 MiB   3406.4 MiB           1           @profile
   199                                                 def _index_with_profiling(indexer, name, collection, overwrite):
   200   4872.2 MiB   1465.8 MiB           1               return indexer.index(name=name, collection=collection, overwrite=overwrite)</code></pre>
<p>I would interpret that to mean that before <code>indexer.index</code> was called, 3406.4 MB memory was used, and the <code>indexer.index</code> call increased it by 1465.8 MB to 4872.2 MB.</p>
<section id="colbertindexer.pyindexer.index" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexer.pyindexer.index">colbert/indexer.py/<code>indexer.index</code></h3>
<p>For RAGatouille, this call takes place in <a href="https://github.com/AnswerDotAI/RAGatouille/blob/2bd4d2ed01c847854be78704a012f9ab35d679b2/ragatouille/models/index.py#L243">ragatouille/models/index.py</a>.</p>
<p>It’s interesting to note that even before <code>indexer.index</code> is called, the starting memory varies between raw ColBERT and RAGatouille. Most notably, for 2M documents, ColBERT starts at ~<mark>4GB</mark> while RAGatouille starts at ~<mark>8 GB</mark>.</p>
<p>Even more interesting, the memory increments for ColBERT are <mark>2x to 35x</mark> smaller than RAGatouille for each collection size.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Starting Memory</th>
<th style="text-align: center;">Memory Increment</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1596.9 MB</td>
<td style="text-align: center;">36.7 MB</td>
<td style="text-align: center;">1633.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1754.0 MB</td>
<td style="text-align: center;">92.8 MB</td>
<td style="text-align: center;">1846.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2072.1 MB</td>
<td style="text-align: center;">199.1 MB</td>
<td style="text-align: center;">2271.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2707.3 MB</td>
<td style="text-align: center;">421.9 MB</td>
<td style="text-align: center;">3129.2 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">4000.6 MB</td>
<td style="text-align: center;">876.4 MB</td>
<td style="text-align: center;">4877.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2114.2 MB</td>
<td style="text-align: center;">1320.1 MB</td>
<td style="text-align: center;">3434.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2592.5 MB</td>
<td style="text-align: center;">1175.0 MB</td>
<td style="text-align: center;">3767.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.0 MB</td>
<td style="text-align: center;">1430.0 MB</td>
<td style="text-align: center;">4835.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1750.9 MB</td>
<td style="text-align: center;">1203.9 MB</td>
<td style="text-align: center;">2954.8 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.4 MB</td>
<td style="text-align: center;">1341.4 MB</td>
<td style="text-align: center;">3938.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">1465.8 MB</td>
<td style="text-align: center;">4872.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.1 MB</td>
<td style="text-align: center;">1593.3 MB</td>
<td style="text-align: center;">6633.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8354.7 MB</td>
<td style="text-align: center;">1882.0 MB</td>
<td style="text-align: center;">10236.8 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyencoder.encode_passages" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyencoder.encode_passages">colbert/indexing/collection_indexer.py/<code>encoder.encode_passages</code></h3>
<p><code>encoder.encode_passages</code> involves the following code:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;">def</span> encode_passages(<span class="va" style="color: #111111;">self</span>, passages):</span>
<span id="cb10-3">        Run().<span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"#&gt; Encoding </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(passages)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> passages.."</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5">        <span class="cf" style="color: #003B4F;">if</span> <span class="bu" style="color: null;">len</span>(passages) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb10-6">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span>, <span class="va" style="color: #111111;">None</span></span>
<span id="cb10-7"></span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;">with</span> torch.inference_mode():</span>
<span id="cb10-9">            embs, doclens <span class="op" style="color: #5E5E5E;">=</span> [], []</span>
<span id="cb10-10"></span>
<span id="cb10-11">            <span class="cf" style="color: #003B4F;">for</span> passages_batch <span class="kw" style="color: #003B4F;">in</span> batch(passages, <span class="va" style="color: #111111;">self</span>.config.index_bsize <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">50</span>):</span>
<span id="cb10-12">                embs_, doclens_ <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.checkpoint.docFromText(</span>
<span id="cb10-13">                    passages_batch,</span>
<span id="cb10-14">                    bsize<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.index_bsize,</span>
<span id="cb10-15">                    keep_dims<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flatten"</span>,</span>
<span id="cb10-16">                    showprogress<span class="op" style="color: #5E5E5E;">=</span>(<span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">self</span>.use_gpu),</span>
<span id="cb10-17">                    pool_factor<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.pool_factor,</span>
<span id="cb10-18">                    clustering_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.clustering_mode,</span>
<span id="cb10-19">                    protected_tokens<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">self</span>.config.protected_tokens,</span>
<span id="cb10-20">                )</span>
<span id="cb10-21">                embs.append(embs_)</span>
<span id="cb10-22">                doclens.extend(doclens_)</span>
<span id="cb10-23"></span>
<span id="cb10-24">            embs <span class="op" style="color: #5E5E5E;">=</span> torch.cat(embs)</span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="cf" style="color: #003B4F;">return</span> embs, doclens</span></code></pre></div>
<p>IIUC, this is calling <code>docFromText</code> on the ColBERT model (<code>answerai-colbert-small-v1</code> in our case). I would expect raw ColBERT and RAGatouille to experience equal memory change during this method call but RAGatouille uses <mark>10-15%</mark> more memory for each dataset size.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">732.9 MB</td>
<td style="text-align: center;">1502.4 MB</td>
<td style="text-align: center;">2235.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">829.7 MB</td>
<td style="text-align: center;">1991.1 MB</td>
<td style="text-align: center;">2820.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1000.2 MB</td>
<td style="text-align: center;">2549.8 MB</td>
<td style="text-align: center;">3550.0 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1351.6 MB</td>
<td style="text-align: center;">3462.0 MB</td>
<td style="text-align: center;">4813.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1997.3 MB</td>
<td style="text-align: center;">4692.3 MB</td>
<td style="text-align: center;">6689.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2115.0 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2593.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.1 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1751.0 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.9 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.7 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8355.1 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.py_sample_embeddings" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.py_sample_embeddings">colbert/indexing/collection_indexer.py/<code>_sample_embeddings</code></h3>
<p><code>encode_passages</code> is called from inside <code>_sample_embeddings</code>. For ColBERT, <code>_sample_embeddings</code> has different starting/final memory values than <code>_encode_passages</code> while for RAGatouille they are the same.</p>
<p>For example, for 100k documents using raw ColBERT, <code>_sample_embeddings</code> increases memory by 797 MB while for <code>encoder.encode_passages</code> the memory increases by 1488.8MB.</p>
<p>For 100k using RAGatouille, both memory increases the same (1677.3 MB for <code>use_faiss=True</code> and 1685.6 MB for <code>use_faiss=False</code>). I’m not sure what this means so I asked Claude and got the response:</p>
<blockquote class="blockquote">
<p>This discrepancy reveals memory reuse patterns between function calls. In ColBERT, the 1488.8 MB used by <code>encode_passages</code> is partially freed before returning to <code>_sample_embeddings</code>, resulting in a net increase of 797 MB. In RAGatouille, the memory appears to be retained between calls, showing the same 1677.3 MB increase at both levels.</p>
</blockquote>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">732.9 MB</td>
<td style="text-align: center;">813.8 MB</td>
<td style="text-align: center;">1546.7 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">829.7 MB</td>
<td style="text-align: center;">809.0 MB</td>
<td style="text-align: center;">1638.7 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1000.2 MB</td>
<td style="text-align: center;">770.1 MB</td>
<td style="text-align: center;">1770.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1351.6 MB</td>
<td style="text-align: center;">813.3 MB</td>
<td style="text-align: center;">2164.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1997.3 MB</td>
<td style="text-align: center;">782.4 MB</td>
<td style="text-align: center;">2779.7 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2115.0 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2593.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3405.1 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1751.0 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2597.9 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">3406.4 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">5040.7 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8355.1 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pysetup" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pysetup">colbert/indexing/collection_indexer.py/<code>setup</code></h3>
<p>A similar pattern for <code>setup</code>, within which <code>_sample_embeddings</code> is called. Raw ColBERT seems more efficient in releasing memory while RAGatouille retains it.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">727.9 MB</td>
<td style="text-align: center;">817.5 MB</td>
<td style="text-align: center;">1545.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">815.7 MB</td>
<td style="text-align: center;">816.4 MB</td>
<td style="text-align: center;">1632.1 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">978.2 MB</td>
<td style="text-align: center;">787.9 MB</td>
<td style="text-align: center;">1766.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">1305.6 MB</td>
<td style="text-align: center;">840.2 MB</td>
<td style="text-align: center;">2145.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">1966.3 MB</td>
<td style="text-align: center;">822.2 MB</td>
<td style="text-align: center;">2788.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3434.3 MB</td>
<td style="text-align: center;">1677.3 MB</td>
<td style="text-align: center;">3792.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3767.5 MB</td>
<td style="text-align: center;">2279.7 MB</td>
<td style="text-align: center;">4873.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4835.0 MB</td>
<td style="text-align: center;">3004.6 MB</td>
<td style="text-align: center;">6409.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2954.8 MB</td>
<td style="text-align: center;">1685.6 MB</td>
<td style="text-align: center;">3436.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3938.8 MB</td>
<td style="text-align: center;">2270.4 MB</td>
<td style="text-align: center;">4868.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4872.2 MB</td>
<td style="text-align: center;">3003.8 MB</td>
<td style="text-align: center;">6410.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">6633.3 MB</td>
<td style="text-align: center;">3915.3 MB</td>
<td style="text-align: center;">8956.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">10236.8 MB</td>
<td style="text-align: center;">5349.5 MB</td>
<td style="text-align: center;">13704.6 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pytrain" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pytrain">colbert/indexing/collection_indexer.py/<code>train</code></h3>
<p>IIUC, this function call finds centroids based on a sample of document token embeddings. Interesting to note that the memory change for raw ColBERT is smallest for 1M documents (87.2 MB) and for RAGatouille, 2M docs is the smallest (23.4 MB). For most collection sizes, RAGatouille uses <mark>40-50%</mark> more memory for this operation.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1545.5 MB</td>
<td style="text-align: center;">115.8 MB</td>
<td style="text-align: center;">1661.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1632.1 MB</td>
<td style="text-align: center;">128.8 MB</td>
<td style="text-align: center;">1760.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1766.1 MB</td>
<td style="text-align: center;">124.3 MB</td>
<td style="text-align: center;">1890.4 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2145.8 MB</td>
<td style="text-align: center;">87.2 MB</td>
<td style="text-align: center;">2233.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">2788.5 MB</td>
<td style="text-align: center;">133.5 MB</td>
<td style="text-align: center;">2921.9 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3792.3 MB</td>
<td style="text-align: center;">179.6 MB</td>
<td style="text-align: center;">3971.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">4873.2 MB</td>
<td style="text-align: center;">182.7 MB</td>
<td style="text-align: center;">5055.9 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6409.6 MB</td>
<td style="text-align: center;">174.1 MB</td>
<td style="text-align: center;">6583.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3436.6 MB</td>
<td style="text-align: center;">175.9 MB</td>
<td style="text-align: center;">3612.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">4868.3 MB</td>
<td style="text-align: center;">181.5 MB</td>
<td style="text-align: center;">5049.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6410.2 MB</td>
<td style="text-align: center;">179.2 MB</td>
<td style="text-align: center;">6589.4 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">8956.0 MB</td>
<td style="text-align: center;">191.5 MB</td>
<td style="text-align: center;">9147.5 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">13704.6 MB</td>
<td style="text-align: center;">23.4 MB</td>
<td style="text-align: center;">13728.1 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyindex" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyindex">colbert/indexing/collection_indexer.py/<code>index</code></h3>
<p>This is one of the more interesting results—raw ColBERT has a positive memory change during this operation (which IIUC is the indexing of all document token embeddings) while <em>all</em> RAGatouille <code>index()</code> operations actually <em>reduce the memory usage</em>. Not sure what that means. The final memory for raw ColBERT is less than RAGatouille.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1661.3 MB</td>
<td style="text-align: center;">287.0 MB</td>
<td style="text-align: center;">1948.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1760.9 MB</td>
<td style="text-align: center;">263.5 MB</td>
<td style="text-align: center;">2024.4 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">1890.4 MB</td>
<td style="text-align: center;">371.9 MB</td>
<td style="text-align: center;">2262.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2233.0 MB</td>
<td style="text-align: center;">599.9 MB</td>
<td style="text-align: center;">2832.9 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">2921.9 MB</td>
<td style="text-align: center;">958.0 MB</td>
<td style="text-align: center;">3880.0 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3971.9 MB</td>
<td style="text-align: center;">-536.3 MB</td>
<td style="text-align: center;">3435.6 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">5055.9 MB</td>
<td style="text-align: center;">-1375.8 MB</td>
<td style="text-align: center;">3680.1 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6583.8 MB</td>
<td style="text-align: center;">-1936.3 MB</td>
<td style="text-align: center;">4647.5 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3612.6 MB</td>
<td style="text-align: center;">-652.4 MB</td>
<td style="text-align: center;">2960.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">5049.8 MB</td>
<td style="text-align: center;">-1112.5 MB</td>
<td style="text-align: center;">3937.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">6589.4 MB</td>
<td style="text-align: center;">-1906.8 MB</td>
<td style="text-align: center;">4682.6 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">9147.5 MB</td>
<td style="text-align: center;">-2917.3 MB</td>
<td style="text-align: center;">6230.1 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">13728.1 MB</td>
<td style="text-align: center;">-4910.2 MB</td>
<td style="text-align: center;">8817.9 MB</td>
</tr>
</tbody>
</table>
</section>
<section id="colbertindexingcollection_indexer.pyfinalize" class="level3">
<h3 class="anchored" data-anchor-id="colbertindexingcollection_indexer.pyfinalize">colbert/indexing/collection_indexer.py/<code>finalize</code></h3>
<p>This function maps passage IDs to centroid IDs—one of the efficiencies of the PLAID indexing approach. Within each approach (raw ColBERT and RAGatouille) the memory change varies drastically between less than 0 and up to ~500MB.</p>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 20%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Indexing Method</th>
<th style="text-align: center;">Document Size</th>
<th style="text-align: center;">Initial Memory</th>
<th style="text-align: center;">Memory Change</th>
<th style="text-align: center;">Final Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">1948.3 MB</td>
<td style="text-align: center;">35.1 MB</td>
<td style="text-align: center;">1983.3 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">2024.4 MB</td>
<td style="text-align: center;">-0.4 MB</td>
<td style="text-align: center;">2024.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2262.2 MB</td>
<td style="text-align: center;">59.2 MB</td>
<td style="text-align: center;">2321.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">2832.9 MB</td>
<td style="text-align: center;">201.5 MB</td>
<td style="text-align: center;">3034.4 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ColBERT</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">3880.0 MB</td>
<td style="text-align: center;">490.2 MB</td>
<td style="text-align: center;">4370.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>use_faiss=True</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">3435.6 MB</td>
<td style="text-align: center;">-1.3 MB</td>
<td style="text-align: center;">3434.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3680.1 MB</td>
<td style="text-align: center;">87.4 MB</td>
<td style="text-align: center;">3767.5 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>True</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4647.5 MB</td>
<td style="text-align: center;">187.5 MB</td>
<td style="text-align: center;">4835.0 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>use_faiss=False</code>)</td>
<td style="text-align: center;">100k</td>
<td style="text-align: center;">2960.2 MB</td>
<td style="text-align: center;">-5.3 MB</td>
<td style="text-align: center;">2954.8 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">250k</td>
<td style="text-align: center;">3937.3 MB</td>
<td style="text-align: center;">1.5 MB</td>
<td style="text-align: center;">3938.8 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">500k</td>
<td style="text-align: center;">4682.6 MB</td>
<td style="text-align: center;">189.6 MB</td>
<td style="text-align: center;">4872.2 MB</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">1M</td>
<td style="text-align: center;">6230.1 MB</td>
<td style="text-align: center;">403.2 MB</td>
<td style="text-align: center;">6633.3 MB</td>
</tr>
<tr class="odd">
<td style="text-align: center;">RAGatouille (<code>False</code>)</td>
<td style="text-align: center;">2M</td>
<td style="text-align: center;">8817.9 MB</td>
<td style="text-align: center;">1418.9 MB</td>
<td style="text-align: center;">10236.8 MB</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="indexing-time" class="level2">
<h2 class="anchored" data-anchor-id="indexing-time">Indexing Time</h2>
<p>I didn’t measure runtime for each run, but some observations:</p>
<ul>
<li>During passage encoding (25k passages per iteration) ColBERT took about <mark>20 seconds/it</mark> and RAGatouille took about <mark>110 seconds/it</mark>. Note that without profiling ColBERT took about 9/seconds/it and RAGatouille 12 seconds/it.</li>
<li>ColBERT encoding lasted 4, 10, 20, 40 and 80 iterations for 100k, 250k, 500k, 1M and 2M docs. RAGatouille always overshot it (e.g.&nbsp;14 iters for 250k docs or 22 iters for 500k docs).</li>
<li>Overall ColBERT profiling took ~2 hours while RAGatouille took ~16 hours.</li>
<li>It took a lot of time before the final encoding takes place, I think that’s because of the initial “planning” step that ColBERT and RAGatouille both do.</li>
</ul>
</section>
<section id="indexing-10k-documents-pytorch-vs-faiss-k-means-clustering" class="level2">
<h2 class="anchored" data-anchor-id="indexing-10k-documents-pytorch-vs-faiss-k-means-clustering">Indexing 10k Documents (PyTorch vs FAISS K-means Clustering)</h2>
<p>While I was experimenting indexing scripts with 10k documents I noticed curious behavior. For 10k documents, with <code>use_faiss=False</code>, RAGatouille attempts to use PyTorch for K-means clustering. The memory usage for <code>encoder.encode_passages</code> during this attempt:</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   1849.2 MiB   1849.2 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   2675.7 MiB    826.5 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
<p>It then runs into an OOM error:</p>
<pre><code>PyTorch-based indexing did not succeed with error: CUDA out of memory. Tried to allocate 27.55 GiB. GPU 0 has a total capacity of 47.51 GiB of which 4.88 GiB is free.</code></pre>
<p>And switches to FAISS K-means. The memory usage for <code>encoder.encode_passages</code> changes (note the drop from an increase of 826.5 MB to an increase of 373 MB, but an increase in initial memory usage from 1849.2 MB to 2652.6MB):</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   2652.6 MiB   2652.6 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   3025.6 MiB    373.0 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
<p>When I run the script with <code>use_faiss=True</code>, the <code>encoder.encode_passages</code> memory usage reflects the PyTorch attempt, whereas I would expect the memory increase to be 373 MB:</p>
<pre><code>Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   146   1853.4 MiB   1853.4 MiB           1           @profile
   147                                                 def _encode_passages_profiled(*args, **kwargs):
   148   2678.8 MiB    825.4 MiB           1               return self.encoder.encode_passages(*args, **kwargs)</code></pre>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>This exercise has left me with more questions than answers that I need to explore:</p>
<ul>
<li>Is this the best way to go about profiling memory?</li>
<li>Am I interpreting the memory profiling results correctly?</li>
<li>Why does RAGatouille have a higher initial memory before indexing starts?</li>
<li>Why does RAGatouille retain more memory after indexing than ColBERT?</li>
<li>Why does RAGatouille memory usage drastically <em>decrease</em> during <code>index()</code>?</li>
<li>Why does RAGatouille max out CUDA memory for 10k documents? Related to <a href="https://github.com/AnswerDotAI/RAGatouille/issues/247">Issue #247</a>.</li>
<li>Why does RAGatouille’s memory usage when <code>use_faiss=True</code> match PyTorch K-means’ memory usage and not the FAISS K-means’ memory usage after PyTorch’s attempt fails with OOM?</li>
</ul>
<p>Additionally, and probably relatedly, I still haven’t figured out what is causing the large memory spike in the diagram below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="1.png" class="lightbox" title="CPU memory usage while indexing 250k documents" data-gallery="quarto-lightbox-gallery-2"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">CPU memory usage while indexing 250k documents</figcaption><p></p>
</figure>
</div>
<p>The largest memory value profiled while indexing 250k docs using RAGatouille was 5 GB but the chart shows a spike up to ~8GB. Where’s the ghost 3GB?</p>
<p>TBD.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/index.html</guid>
  <pubDate>Mon, 17 Feb 2025 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-02-14-RAGatouille-ColBERT-Memory-Profiling/1.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Estimating Storage and CPU RAM Requirements for Indexing 12.6M Documents</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/index.html</link>
  <description><![CDATA[ 



<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>After a few days of flailing about trying to index the 12.6M document <em>Genomics</em> dataset (from <a href="https://huggingface.co/datasets/UKPLab/dapr">UKPLab/DAPR</a>) in Google Colab Pro using RAGatouille, I decided to plan the attempt in a more organized way. In this blog post I’ll share my findings and next actions.</p>
<p>Here’s an example text from the corpus:</p>
<pre><code>The 33D1 rat MoAb92  identifies a low-density Ag on mouse (marginal zone) spleen DC. The antibody does not stain DC in cryostat sections and does not react with LC. No biochemical data on the Ag are available. Nonetheless, this antibody has proved extremely useful for C lysis of mouse spleen DC.\r\n</code></pre>
<p>The average length of text in this corpus is ~540 characters.</p>
</section>
<section id="rag.index" class="level2">
<h2 class="anchored" data-anchor-id="rag.index"><code>RAG.index</code></h2>
<p>The main function of interest if <code>RAG.index</code> which takes a list of documents and indexes them in preparation for retrieval.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb2-2">            index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb2-3">            collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb2-4">            document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>]</span>
<span id="cb2-5">        )</span></code></pre></div>
<p>I used the following code to log the RAM memory usage, with <code>ndocs</code> being defined globally:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> memory_monitor(stop_event, readings):</span>
<span id="cb3-2">    <span class="cf" style="color: #003B4F;">while</span> <span class="kw" style="color: #003B4F;">not</span> stop_event.is_set():</span>
<span id="cb3-3">        mem <span class="op" style="color: #5E5E5E;">=</span> psutil.Process().memory_info().rss <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span> <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1024</span></span>
<span id="cb3-4">        readings.append((datetime.now(), mem))</span>
<span id="cb3-5">        time.sleep(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">def</span> log_memory_during_index():</span>
<span id="cb3-8">    stop_event <span class="op" style="color: #5E5E5E;">=</span> threading.Event()</span>
<span id="cb3-9">    readings <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-10">    monitor_thread <span class="op" style="color: #5E5E5E;">=</span> threading.Thread(target<span class="op" style="color: #5E5E5E;">=</span>memory_monitor, args<span class="op" style="color: #5E5E5E;">=</span>(stop_event, readings))</span>
<span id="cb3-11">    monitor_thread.start()</span>
<span id="cb3-12">    </span>
<span id="cb3-13">    <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb3-14">        index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb3-15">            index_name<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">_index"</span>,</span>
<span id="cb3-16">            collection<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"text"</span>],</span>
<span id="cb3-17">            document_ids<span class="op" style="color: #5E5E5E;">=</span>passages[:ndocs][<span class="st" style="color: #20794D;">"_id"</span>]</span>
<span id="cb3-18">        )</span>
<span id="cb3-19">    <span class="cf" style="color: #003B4F;">finally</span>:</span>
<span id="cb3-20">        stop_event.<span class="bu" style="color: null;">set</span>()</span>
<span id="cb3-21">        monitor_thread.join()</span>
<span id="cb3-22">    </span>
<span id="cb3-23">    <span class="cf" style="color: #003B4F;">return</span> index_path, readings</span>
<span id="cb3-24"></span>
<span id="cb3-25">index_path, memory_readings <span class="op" style="color: #5E5E5E;">=</span> log_memory_during_index()</span></code></pre></div>
</section>
<section id="memory-logging-results" class="level2">
<h2 class="anchored" data-anchor-id="memory-logging-results">Memory Logging Results</h2>
<p>I used two machines for these experiments:</p>
<ul>
<li>T4 GPU (16 GB vRAM, 51GB RAM) using Google Colab Pro.</li>
<li>RTX6000Ada (48GB vRAM, 128GB RAM) using Jarvis Labs.</li>
</ul>
<p>I chose the following number of documents to index: - 100k - 250k - 500k - 1M - 2M</p>
<p>Here are the results:</p>
<p><em>RTX6000Ada (48GB vRAM, 128GB RAM)</em></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"># Docs</th>
<th style="text-align: center;">index_path Size</th>
<th style="text-align: center;">Max RAM</th>
<th style="text-align: center;">Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">100k</td>
<td style="text-align: center;">0.41 GB</td>
<td style="text-align: center;">6.96 GB</td>
<td style="text-align: center;">4 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1.1 GB</td>
<td style="text-align: center;">8.4 GB</td>
<td style="text-align: center;">6.4 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2.2 GB</td>
<td style="text-align: center;">11.4 GB</td>
<td style="text-align: center;">12 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">4.5 GB</td>
<td style="text-align: center;">16.3 GB</td>
<td style="text-align: center;">24 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2M</td>
<td style="text-align: center;">9.1 GB</td>
<td style="text-align: center;">24 GB</td>
<td style="text-align: center;">47 min</td>
</tr>
</tbody>
</table>
<p><em>T4 w/High-RAM (16GB vRAM, 51GB RAM)</em></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"># Docs</th>
<th style="text-align: center;">index_path Size</th>
<th style="text-align: center;">Max RAM</th>
<th style="text-align: center;">Time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">100k</td>
<td style="text-align: center;">0.41 GB</td>
<td style="text-align: center;">6.5 GB</td>
<td style="text-align: center;">8 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">250k</td>
<td style="text-align: center;">1.1 GB</td>
<td style="text-align: center;">8.8 GB</td>
<td style="text-align: center;">20 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">500k</td>
<td style="text-align: center;">2.2 GB</td>
<td style="text-align: center;">11.8 GB</td>
<td style="text-align: center;">36 min</td>
</tr>
<tr class="even">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">4.5 GB</td>
<td style="text-align: center;">18.8 GB</td>
<td style="text-align: center;">78 min</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2M</td>
<td style="text-align: center;">9.1 GB</td>
<td style="text-align: center;">28.6 GB</td>
<td style="text-align: center;">145 min</td>
</tr>
</tbody>
</table>
<p>I also used the A100 instance on Google Colab Pro for some initial experiments. It’s interesting to note the difference in speed of encoding 25k passages:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;">GPU</th>
<th style="text-align: center;">seconds/25k</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RTX6000Ada</td>
<td style="text-align: center;">12</td>
</tr>
<tr class="even">
<td style="text-align: center;">A100</td>
<td style="text-align: center;">22</td>
</tr>
<tr class="odd">
<td style="text-align: center;">T4</td>
<td style="text-align: center;">44</td>
</tr>
</tbody>
</table>
</section>
<section id="extrapolating-to-12.6m-documents" class="level2">
<h2 class="anchored" data-anchor-id="extrapolating-to-12.6m-documents">Extrapolating to 12.6M Documents</h2>
<p>I’ll start with the easier one: the size of the directory created by <code>RAG.index</code>. Doubling the number of documents doubles its size (approximately) so if 1M documents takes up 4.5GB of space I expect 12.6M documents to take up ~54GB of space. I’ll set my storage size to 100GB just in case.</p>
<p>The maximum RAM used (by the CPU, not the GPU vRAM) for 12.6M documents is a bit more involved. I’m planning to use the RTX6000Ada machine so I’ll use its numbers.</p>
<p><em>RTX6000Ada (48GB vRAM, 128GB RAM)</em></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"># Docs</th>
<th style="text-align: center;">Max RAM</th>
<th style="text-align: center;">Increase</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">100k</td>
<td style="text-align: center;">6.96 GB</td>
<td style="text-align: center;">–</td>
</tr>
<tr class="even">
<td style="text-align: center;">250k</td>
<td style="text-align: center;">8.4 GB</td>
<td style="text-align: center;">20%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">500k</td>
<td style="text-align: center;">11.4 GB</td>
<td style="text-align: center;">36%</td>
</tr>
<tr class="even">
<td style="text-align: center;">1M</td>
<td style="text-align: center;">16.3 GB</td>
<td style="text-align: center;">43%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2M</td>
<td style="text-align: center;">24 GB</td>
<td style="text-align: center;">47%</td>
</tr>
</tbody>
</table>
<p>The percent increase amount is slowing down. Let’s say it plateaus at a 50% increase going from 2M to 4M documents (doubling). 2M to 12.6M is ~2.66 doublings (is that a word?). 24 GB x 1.5^2.66 = 70GB. If I was using Colab numbers: 28.6 x 1.5^2.66 = 84 GB. When I tried to index 12.6M documents with an A100 High-RAM (83.5 GB CPU) instance on Google Colab Pro, the runtime crashed as it ran out of System RAM so this checks out.</p>
<p>Finally, let’s say the time it takes to index documents doubles when the number of documents doubles from 2M onwards. 47 min x 2^2.66 = 300 minutes or 5 hours. At about $1/hr, this would take $5 on an RTX6000Ada.</p>
<p>I should note that in all my experiments, the GPU vRAM usage didn’t go past 3-4 GB.</p>
<p>While the peak CPU RAM usage varied, in all instances the plots looked like the following (2M documents on RTX6000Ada):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="RTX6000/2M.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="System RAM Usage over Indexing Time"><img src="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/RTX6000/2M.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">System RAM Usage over Indexing Time</figcaption><p></p>
</figure>
</div>
<p>I couldn’t figure out from my profiler the exact function call during that largest spike. Also note the spike near the end before indexing is finished.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>Time will tell if these calculations are worth anything, but it seems like my best option is to use Jarvis Labs’ RTX6000Ada machine with 128GB CPU RAM. Once I successfully index the 12.6M-document <em>Genomics</em> dataset, I’ll have a better estimate for how much it will cost to index the largest dataset in the DAPR collection: MIRACL (32.9M documents). Stay tuned!</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/index.html</guid>
  <pubDate>Wed, 12 Feb 2025 08:00:00 GMT</pubDate>
  <media:content url="https://vishalbakshi.github.io/blog/posts/2025-02-12-indexing-memory/RTX6000/2M.png" medium="image" type="image/png" height="114" width="144"/>
</item>
<item>
  <title>Evaluating the DAPR ConditionalQA Dataset with RAGatouille</title>
  <dc:creator>Vishal Bakshi</dc:creator>
  <link>https://vishalbakshi.github.io/blog/posts/2025-02-08-ConditionalQA-RAGatouille/index.html</link>
  <description><![CDATA[ 



<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;">!</span>pip install datasets ragatouille pytrec_eval ranx</span></code></pre></div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> datasets <span class="im" style="color: #00769E;">import</span> load_dataset</span>
<span id="cb2-2"><span class="im" style="color: #00769E;">from</span> ragatouille <span class="im" style="color: #00769E;">import</span> RAGPretrainedModel</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;">import</span> pytrec_eval</span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> evaluate</span>
<span id="cb2-9"><span class="im" style="color: #00769E;">from</span> ranx <span class="im" style="color: #00769E;">import</span> Qrels, Run</span></code></pre></div>
</div>
</section>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>I wanted to get familiar with classic information retrieval datasets, especially those with explicit documents. I searched with Perplexity and ChatGPT and came across <a href="https://huggingface.co/datasets/UKPLab/dapr">DAPR: Document-Aware Passage Retrieval</a> which sounded perfect for my use case.</p>
<p>In this blog post I’ll work through evaluating the test split of the <em>ConditionalQA</em> dataset in DAPR using RAGatouille and the <code>answerai-colbert-small-v1</code> model for retrieval and the pytrec and ranx libraries for evaluation. I’ll use the simple Recall@10 metric as it’s the easiest to manually check.</p>
</section>
<section id="load-and-view-data" class="level2">
<h2 class="anchored" data-anchor-id="load-and-view-data">Load and View Data</h2>
<p>Here are the three datasets we are going to use for this evaluation:</p>
<ul>
<li><code>ConditionalQA-corpus</code>, our <em>passages</em></li>
<li><code>ConditionalQA_queries</code>, our <em>queries</em></li>
<li>and <code>ConditionalQA_qrels</code>, the mapping between queries and passages.</li>
</ul>
<div class="cell" data-outputid="ceab6651-e1f3-4b5a-8373-82e45f396356" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">passages <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-corpus"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb3-2">passages</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Dataset({
    features: ['_id', 'text', 'title', 'doc_id', 'paragraph_no', 'total_paragraphs', 'is_candidate'],
    num_rows: 69199
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="e8490f49-f5ff-4825-d72d-1f7ea5e95830" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">passages[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'_id': '0-0',
 'text': 'Overview',
 'title': 'Child Tax Credit',
 'doc_id': '0',
 'paragraph_no': 0,
 'total_paragraphs': 77,
 'is_candidate': True}</code></pre>
</div>
</div>
<div class="cell" data-outputid="b8182782-913d-452c-9309-cf3619b76b74" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">queries <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-queries"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb7-2">queries</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Dataset({
    features: ['_id', 'text'],
    num_rows: 271
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="d6c6b29f-4247-4d08-a3c2-0127dfbd2976" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">queries[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'_id': 'dev-0',
 'text': 'My brother and his wife are in prison for carrying out a large fraud scheme. Their 7 and 8 year old children have been living with me for the last 4 years. I want to become their Special Guardian to look after them permanently How long will it be before I hear back from the court?'}</code></pre>
</div>
</div>
<div class="cell" data-outputid="3143c688-ff8e-4d82-c86f-45cc6a5740c6" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">qrels_rows <span class="op" style="color: #5E5E5E;">=</span> load_dataset(<span class="st" style="color: #20794D;">"UKPLab/dapr"</span>, <span class="st" style="color: #20794D;">"ConditionalQA-qrels"</span>, split<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"test"</span>)</span>
<span id="cb11-2">qrels_rows</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Dataset({
    features: ['query_id', 'corpus_id', 'score'],
    num_rows: 1165
})</code></pre>
</div>
</div>
<div class="cell" data-outputid="4f02605d-6926-402d-a9fa-d64c632e8d45" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">qrels_rows[<span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>{'query_id': 'dev-0', 'corpus_id': '86-41', 'score': 1}</code></pre>
</div>
</div>
<p>Load <code>answerai-colbert-small-v1</code>:</p>
<div class="cell" data-outputid="26b62465-2651-46fc-dd7c-b2d4f18cbf11" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">RAG <span class="op" style="color: #5E5E5E;">=</span> RAGPretrainedModel.from_pretrained(<span class="st" style="color: #20794D;">"answerdotai/answerai-colbert-small-v1"</span>)</span>
<span id="cb15-2">RAG</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>&lt;ragatouille.RAGPretrainedModel.RAGPretrainedModel at 0x7e5328fdced0&gt;</code></pre>
</div>
</div>
<p>Structure the passages for indexing:</p>
<div class="cell" data-outputid="0a932d5e-c59b-4730-c312-b1fdbecf20c7" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">passages[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>{'_id': ['0-0', '0-1', '0-2', '0-3', '0-4'],
 'text': ['Overview',
  'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
  'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.',
  'You might be able to apply for Pension Credit if you and your partner are State Pension age or over.',
  'What you’ll get'],
 'title': ['Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit',
  'Child Tax Credit'],
 'doc_id': ['0', '0', '0', '0', '0'],
 'paragraph_no': [0, 1, 2, 3, 4],
 'total_paragraphs': [77, 77, 77, 77, 77],
 'is_candidate': [True, True, True, True, True]}</code></pre>
</div>
</div>
<div class="cell" data-outputid="06d8e8e2-5646-4526-a747-90b40a622637" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">passage_texts <span class="op" style="color: #5E5E5E;">=</span> [p[<span class="st" style="color: #20794D;">'text'</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> passages]</span>
<span id="cb19-2">passage_texts[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>['Overview',
 'You can only make a claim for Child Tax Credit if you already get Working Tax Credit.',
 'If you cannot apply for Child Tax Credit, you can apply for Universal Credit instead.',
 'You might be able to apply for Pension Credit if you and your partner are State Pension age or over.',
 'What you’ll get']</code></pre>
</div>
</div>
<div class="cell" data-outputid="5b1b49c9-3b17-460c-a60d-4219b7ab425e" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">passage_ids <span class="op" style="color: #5E5E5E;">=</span> [p[<span class="st" style="color: #20794D;">'_id'</span>] <span class="cf" style="color: #003B4F;">for</span> p <span class="kw" style="color: #003B4F;">in</span> passages]</span>
<span id="cb21-2">passage_ids[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>['0-0', '0-1', '0-2', '0-3', '0-4']</code></pre>
</div>
</div>
</section>
<section id="build-the-index-and-run-search" class="level2">
<h2 class="anchored" data-anchor-id="build-the-index-and-run-search">Build the index and run search</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">index_path <span class="op" style="color: #5E5E5E;">=</span> RAG.index(</span>
<span id="cb23-2">    index_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"conditionalqa_index"</span>,</span>
<span id="cb23-3">    collection<span class="op" style="color: #5E5E5E;">=</span>passage_texts,</span>
<span id="cb23-4">    document_ids<span class="op" style="color: #5E5E5E;">=</span>passage_ids</span>
<span id="cb23-5">)</span></code></pre></div>
</div>
<p>Taking a look at the results for a single query. Each result has a <code>content</code>, <code>score</code>, <code>rank</code>, <code>document_id</code>, and <code>passage_id</code>. Note a bit of confusing terminology: <code>document_id</code> is actually the id of the item in the <code>passages</code> dataset and <code>passage_id</code> is an identifier created by RAGatouille, unrelated to the datasets.</p>
<div class="cell" data-outputid="4e79a9a3-9bc4-4613-d584-aedc0e59c16c" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(queries[<span class="dv" style="color: #AD0000;">0</span>][<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb24-2">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>[{'content': 'You must advertise your claim within 14 days from the day you get a date for the first court hearing. The advert must appear in a print or online newspaper that covers the missing person’s last known usual address.',
  'score': 70.0,
  'rank': 1,
  'document_id': '107-103',
  'passage_id': 10480},
 {'content': 'The guardianship order will make you a guardian for a maximum of 4 years.',
  'score': 70.0,
  'rank': 2,
  'document_id': '107-242',
  'passage_id': 10619},
 {'content': 'You can claim joint Housing Benefit for up to 13 weeks if one of you has gone to prison and is likely to return home in 13 weeks or less - including any time on remand.',
  'score': 69.9375,
  'rank': 3,
  'document_id': '8-67',
  'passage_id': 911},
 {'content': 'The date will be either 14 or 28 days after your court hearing. If you’re in an exceptionally difficult situation, you may be able to convince the judge to delay this for up to 6 weeks.',
  'score': 69.9375,
  'rank': 4,
  'document_id': '496-116',
  'passage_id': 47939},
 {'content': 'You can claim or continue to claim joint Council Tax Reduction if your partner’s expected to be in prison for 13 weeks or less – including any time on remand.',
  'score': 69.875,
  'rank': 5,
  'document_id': '8-80',
  'passage_id': 924},
 {'content': 'Sometimes you’ll be given a 2 to 4 week period that you’ll need to keep free - this is known as a ‘warned period’ or ‘floating trial’. If this happens, you’ll be given 1 working day’s notice before you are due to go to court.',
  'score': 69.875,
  'rank': 6,
  'document_id': '254-4',
  'passage_id': 23999},
 {'content': 'Your Child Benefit payments will stop after 8 weeks if your child goes to prison or is on remand. You’ll get arrears if they’re cleared of the offence.',
  'score': 69.8125,
  'rank': 7,
  'document_id': '8-116',
  'passage_id': 960},
 {'content': 'You may be able to make a claim if you’re the dependant of someone who suffered from a dust-related disease but who has died. A dependant claim must be made within 12 months of the death of the sufferer.',
  'score': 69.8125,
  'rank': 8,
  'document_id': '45-133',
  'passage_id': 4921},
 {'content': 'You’ll be responsible for looking after the child until they’re 18 (unless the court takes your responsibility away earlier).',
  'score': 69.8125,
  'rank': 9,
  'document_id': '86-2',
  'passage_id': 8150},
 {'content': 'If it’s less than 90 days since the person went missing, explain you need the guardianship order urgently, for example, because the person is going to lose their house.',
  'score': 69.8125,
  'rank': 10,
  'document_id': '107-43',
  'passage_id': 10420}]</code></pre>
</div>
</div>
</section>
<section id="evaluation" class="level2">
<h2 class="anchored" data-anchor-id="evaluation">Evaluation</h2>
<p>I’ll prepare <code>qrels</code> for the pytrec evaluator as is done in the DAPR dataset card example on HF:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">qrels <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb26-2"><span class="cf" style="color: #003B4F;">for</span> qrel_row <span class="kw" style="color: #003B4F;">in</span> qrels_rows:</span>
<span id="cb26-3">    qid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"query_id"</span>]</span>
<span id="cb26-4">    pid <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"corpus_id"</span>]</span>
<span id="cb26-5">    rel <span class="op" style="color: #5E5E5E;">=</span> qrel_row[<span class="st" style="color: #20794D;">"score"</span>]</span>
<span id="cb26-6">    qrels.setdefault(qid, {})</span>
<span id="cb26-7">    qrels[qid][pid] <span class="op" style="color: #5E5E5E;">=</span> rel</span></code></pre></div>
</div>
<p><code>dev-5</code> is a query ID with multiple passages so I’ve chosen it as the test example:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">qid <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dev-5'</span></span></code></pre></div>
</div>
<div class="cell" data-outputid="0cab7461-acd2-49c9-f942-456f2daae9a3" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">qrels[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>{'61-1': 1, '61-4': 1, '61-5': 1, '61-17': 1, '61-37': 1, '61-39': 1}</code></pre>
</div>
</div>
<div class="cell" data-outputid="fcb898ec-c639-4b1a-bb0c-69cf15d6fcfe" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pytrec_results <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb30-2">pytrec_results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>{}</code></pre>
</div>
</div>
<p>Next we’ll run retrieval and structure results for the pytrec evaluator, again copying the DAPR example which structures the retrieval results as:</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">retrieval_scores[query_id][passage_id] <span class="op" style="color: #5E5E5E;">=</span> score</span></code></pre></div>
<p>Note again that <code>document_id</code> means passage_id.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="cf" style="color: #003B4F;">for</span> q <span class="kw" style="color: #003B4F;">in</span> queries:</span>
<span id="cb33-2">    results <span class="op" style="color: #5E5E5E;">=</span> RAG.search(q[<span class="st" style="color: #20794D;">'text'</span>], k<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb33-3">    pytrec_results[q[<span class="st" style="color: #20794D;">'_id'</span>]] <span class="op" style="color: #5E5E5E;">=</span> {result[<span class="st" style="color: #20794D;">'document_id'</span>]: <span class="bu" style="color: null;">float</span>(result[<span class="st" style="color: #20794D;">'score'</span>]) <span class="cf" style="color: #003B4F;">for</span> result <span class="kw" style="color: #003B4F;">in</span> results}</span></code></pre></div>
</div>
<p>We can see the 10 passages and each one has a corresponding score.</p>
<div class="cell" data-outputid="3d972b82-3755-4937-9ac6-ad20f8c672fc" data-execution_count="36">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">pytrec_results[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>{'61-1': 71.125,
 '423-16': 70.5625,
 '61-27': 70.4375,
 '61-109': 70.375,
 '61-110': 70.25,
 '61-113': 70.25,
 '61-114': 70.25,
 '426-22': 70.1875,
 '420-42': 70.1875,
 '423-7': 70.125}</code></pre>
</div>
</div>
<p>Calculate Recall for all queries and viewing a single query’s Recall:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">evaluator <span class="op" style="color: #5E5E5E;">=</span> pytrec_eval.RelevanceEvaluator(qrels, {<span class="st" style="color: #20794D;">'recall.10'</span>})</span></code></pre></div>
</div>
<p>There are 271 queries and 271 metrics (one per query):</p>
<div class="cell" data-outputid="571e47c0-b984-4d5c-dba4-7b501c02f139" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">metrics <span class="op" style="color: #5E5E5E;">=</span> evaluator.evaluate(pytrec_results)</span>
<span id="cb37-2"><span class="bu" style="color: null;">len</span>(metrics)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>271</code></pre>
</div>
</div>
<p>For our <code>dev-5</code> query the Recall@10 is 0.167 or 1/6.</p>
<div class="cell" data-outputid="07661f1e-4732-4c1f-ca8b-896b1afff7e0" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">metrics[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>{'recall_10': 0.16666666666666666}</code></pre>
</div>
</div>
<p>Here are the 6 passages that we needed to retrieve to fully answer this question:</p>
<div class="cell" data-outputid="2d1792f4-7e92-4f3e-bab5-a8d0ff79fbdf" data-execution_count="27">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">qrels[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>{'61-1': 1, '61-4': 1, '61-5': 1, '61-17': 1, '61-37': 1, '61-39': 1}</code></pre>
</div>
</div>
<p>And here are the results again—only 1 relevant passage, <code>61-1</code>, was retrieved.</p>
<div class="cell" data-outputid="b638ed99-ba08-486a-ee92-bba78540238a" data-execution_count="28">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">pytrec_results[qid]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>{'61-1': 71.125,
 '423-16': 70.5625,
 '61-27': 70.4375,
 '61-109': 70.375,
 '61-110': 70.25,
 '61-113': 70.25,
 '61-114': 70.25,
 '426-22': 70.1875,
 '420-42': 70.1875,
 '423-7': 70.125}</code></pre>
</div>
</div>
<p>Calculating mean Recall across all queries to get our mean Recall@10 for the entire collection of queries:</p>
<div class="cell" data-outputid="ab74903a-5984-4afb-90df-d77c18d0cc50" data-execution_count="29">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">mean_recall <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">sum</span>(metrics[qid][<span class="st" style="color: #20794D;">'recall_10'</span>] <span class="cf" style="color: #003B4F;">for</span> qid <span class="kw" style="color: #003B4F;">in</span> metrics.keys()) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(metrics)</span>
<span id="cb45-2">mean_recall</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.28046940381859803</code></pre>
</div>
</div>
<p>So, about 28% of all queries’ relevant passages were present in the top-10 passages retrieved.</p>
<p>I wanted to confirm my calculation so I’ll also calculate Recall@10 using the ranx library.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">qrels_ranx <span class="op" style="color: #5E5E5E;">=</span> Qrels(qrels)</span>
<span id="cb47-2">ranx_results <span class="op" style="color: #5E5E5E;">=</span> Run(pytrec_results)</span></code></pre></div>
</div>
<div class="cell" data-outputid="8924772d-4e13-4e1e-c1d6-1edbeba5faff" data-execution_count="35">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">evaluate(qrels_ranx, ranx_results, <span class="st" style="color: #20794D;">"recall@10"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>0.2804694038185978</code></pre>
</div>
</div>
<p>And we get the same results. Great!</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>In a future blog post I’ll calculate Recall@10 (and other metrics) on all of the datasets included in DAPR:</p>
<ul>
<li>ConditionalQA</li>
<li>MS MARCO</li>
<li>Genomics</li>
<li>MIRACL</li>
<li>Natural Questions</li>
</ul>
<p>Once that’s done, I’ll pick a few different retrieval models and compare their results across these datasets.</p>
<p>I think by the end of these experiments I’ll have a better grasp on how to work with classic IR datasets and metrics.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>information retrieval</category>
  <category>deep learning</category>
  <guid>https://vishalbakshi.github.io/blog/posts/2025-02-08-ConditionalQA-RAGatouille/index.html</guid>
  <pubDate>Sat, 08 Feb 2025 08:00:00 GMT</pubDate>
</item>
</channel>
</rss>
